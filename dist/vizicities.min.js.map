{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","vizicities.min.js","webpack:/webpack/bootstrap 5fc75d7dff44ed97a876","webpack:///src/vizicities.js","webpack:///src/World.js","webpack:///~/eventemitter3/index.js","webpack:///src/Engine/Engine.js","webpack:///~/three/three.js","webpack:///src/Engine/Scene.js","webpack:///src/Engine/Renderer.js","webpack:///src/Engine/Camera.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_World","_World2","VIZI","version","World","_classCallCheck","instance","Constructor","TypeError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","getter","get","parent","getPrototypeOf","_eventemitter3","_eventemitter32","_EngineEngine","_EngineEngine2","_EventEmitter","domId","_initContainer","_initEngine","_update","_container","document","getElementById","_engine","delta","clock","getDelta","window","requestAnimationFrame","bind","emit","layer","EE","fn","context","once","EventEmitter","prefix","_events","listeners","event","exists","evt","available","l","ee","Array","a1","a2","a3","a4","a5","args","len","arguments","removeListener","apply","j","on","listener","push","events","removeAllListeners","off","addListener","setMaxListeners","prefixed","_three","_three2","_Scene","_Scene2","_Renderer","_Renderer2","_Camera","_Camera2","Engine","container","console","log","scene","renderer","camera","Clock","render","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","self","THREE","REVISION","cancelAnimationFrame","lastTime","vendors","x","setTimeout","callback","currTime","Date","now","timeToCall","Math","max","clearTimeout","performance","start","Number","EPSILON","pow","sign","name","toString","match","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","LoopOnce","LoopRepeat","LoopPingPong","Projector","error","projectVector","vector","warn","project","unprojectVector","unproject","pickingRay","CanvasRenderer","domElement","createElement","clear","setClearColor","setSize","Color","color","fromArray","set","r","g","b","copy","setHex","setStyle","hex","floor","setRGB","setHSL","hue2rgb","q","t","h","s","euclideanModulo","clamp","style","handleAlpha","string","parseFloat","exec","components","min","parseInt","size","charAt","ColorKeywords","clone","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","sqrt","getHex","getHexString","slice","getHSL","optionalTarget","hue","saturation","hsl","lightness","getStyle","offsetHSL","add","addColors","color1","color2","addScalar","multiply","multiplyScalar","lerp","alpha","equals","array","offset","toArray","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","y","z","w","_y","_z","_w","onChangeCallback","quaternion","setFromEuler","euler","update","Euler","Error","c1","cos","c2","c3","s1","sin","s2","s3","order","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","v1","EPS","vFrom","vTo","Vector3","dot","abs","crossVectors","normalize","inverse","conjugate","v","lengthSq","multiplyQuaternions","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","multiplyVector3","applyQuaternion","slerp","qb","cosHalfTheta","halfTheta","acos","sinHalfTheta","ratioA","ratioB","onChange","qa","qm","Vector2","width","height","setX","setY","setComponent","index","getComponent","addVectors","addScaledVector","sub","subVectors","subScalar","scalar","isFinite","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","ceil","round","roundToZero","negate","lengthManhattan","distanceTo","distanceToSquared","dx","dy","setLength","lerpVectors","v2","fromAttribute","attribute","itemSize","rotateAround","center","setZ","multiplyVectors","applyEuler","applyAxisAngle","applyMatrix3","e","applyMatrix4","applyProjection","d","qx","qy","qz","qw","ix","iy","iz","iw","matrix","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","angleTo","theta","dz","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","setFromMatrixPosition","getScaleFromMatrix","setFromMatrixScale","getColumnFromMatrix","setFromMatrixColumn","sx","sy","sz","me","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","PI","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","asin","atan2","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","end","line","result","distanceSq","distance","at","closestPointToPointParameter","startP","startEnd","point","clampToLine","startEnd2","startEnd_startP","closestPointToPoint","Box2","Infinity","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","halfSize","box","empty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","isIntersectionBox","clampPoint","distanceToPoint","clampedPoint","intersect","union","translate","Box3","setFromObject","scope","updateMatrixWorld","traverse","node","geometry","Geometry","vertices","BufferGeometry","attributes","positions","getBoundingSphere","Sphere","radius","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","multiplyVector3Array","applyToVector3Array","applyToBuffer","buffer","getX","getY","getZ","setXYZ","determinant","f","throwOnInvertible","det","msg","transpose","tmp","flattenToArrayOffset","getNormalMatrix","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","extractPosition","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","setRotationFromQuaternion","x2","y2","z2","wx","wy","wz","lookAt","eye","up","n","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","multiplyVector4","rotateAxis","crossVector","getPosition","setPosition","rotateX","rotateY","rotateZ","rotateByAxis","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","position","decompose","invSX","invSY","invSZ","makeFrustum","left","right","bottom","top","near","far","makePerspective","fov","aspect","ymax","degToRad","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","diff","v0","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","isIntersectionSphere","sphere","intersectSphere","tca","d2","radius2","thc","t0","t1","isIntersectionPlane","plane","distToPoint","denominator","distanceToPlane","constant","intersectPlane","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","matrix4","optionalCenter","maxRadiusSq","intersectsSphere","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","negRadius","intersectsBox","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","isIntersectionLine","startSign","endSign","intersectLine","coplanarPoint","m1","optionalNormalMatrix","normalMatrix","newNormal","newCoplanarPoint","generateUUID","chars","split","uuid","rnd","random","join","mapLinear","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degreeToRadiansFactor","degrees","radToDeg","radianToDegreesFactor","radians","isPowerOfTwo","nearestPowerOfTwo","LN2","nextPowerOfTwo","Spline","interpolate","t2","t3","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","Channels","mask","channel","enable","toggle","disable","autoStart","startTime","oldTime","elapsedTime","running","stop","getElapsedTime","newTime","EventDispatcher","addEventListener","hasEventListener","removeEventListener","dispatchEvent","type","_listeners","indexOf","listenerArray","splice","descSort","intersectObject","raycaster","intersects","recursive","visible","raycast","children","Raycaster","params","Mesh","Line","LOD","Points","threshold","Sprite","PointCloud","linePrecision","setFromCamera","PerspectiveCamera","OrthographicCamera","sort","intersectObjects","objects","isArray","Object3D","onRotationChange","rotation","onQuaternionChange","Object3DIdCount","channels","DefaultUp","modelViewMatrix","rotationAutoUpdate","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","userData","eulerOrder","useQuaternion","renderDepth","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","rotateOnAxis","q1","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getChildByName","getObjectByName","getObjectById","getObjectByProperty","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","toJSON","meta","extractFromCache","cache","values","data","metadata","isRootObject","output","geometries","materials","textures","images","generator","JSON","stringify","material","source","parse","Face3","materialIndex","vertexNormals","vertexColors","Face4","BufferAttribute","dynamic","updateRange","count","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","stride","InstancedInterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","GeometryIdCount","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","vertex","face","jl","computeBoundingBox","fromBufferGeometry","addFace","normals","tempNormals","uvs","tempUVs","uvs2","tempUVs2","uv","uv2","groups","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precisionPoints","precision","faceIndicesToRemove","dupIndex","idx","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","enabled","getNormalIndex","hash","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","parameters","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","kl","dispose","DirectGeometry","computeGroups","fromGeometry","hasFaceVertexUv2","morphTargetsLength","morphTargetsPosition","morphNormalsLength","morphTargetsNormal","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","morphAttributes","drawRange","addIndex","setIndex","getIndex","addAttribute","getAttribute","removeAttribute","drawcalls","offsets","addDrawCall","indexOffset","addGroup","clearDrawCalls","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","TypeArray","bb","isNaN","pA","pB","pC","normalizeNormals","computeOffsets","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","AnimationAction","clip","timeScale","loop","localRoot","loopCount","actionTime","clipTime","propertyBindings","setLocalRoot","updateTime","clipDeltaTime","previousClipTime","previousLoopCount","duration","mixer","action","newClipTime","loopDelta","syncWith","warpToDuration","init","time","clipResults","getAt","getTimeScaleAt","getWeightAt","AnimationClip","tracks","track","keys","trim","optimize","results","CreateFromMorphTargetSequence","morphTargetSequence","fps","numMorphTargets","KeyframeTrack","keyComparer","NumberKeyframeTrack","findByName","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","json","parseAnimation","animation","bones","nodeName","convertTrack","trackName","animationKeys","propertyName","trackType","animationKeyToValueFunc","animationKey","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","boneName","positionTrack","VectorKeyframeTrack","pos","quaternionTrack","QuaternionKeyframeTrack","rot","scaleTrack","scl","AnimationMixer","actions","propertyBindingMap","addAction","propertyBindingKey","propertyBinding","PropertyBinding","referenceCount","removeAllActions","properyBindingKey","unbind","removeAction","findActionByName","play","optionalFadeInDuration","fadeOut","fadeIn","warp","startTimeScale","endTimeScale","crossFade","fadeOutAction","fadeInAction","startEndRatio","endStartRatio","deltaTime","mixerDeltaTime","actionTimeScale","actionDeltaTime","actionResults","accumulate","AnimationUtils","getEqualsFunc","exemplarValue","typeName","interTrack","lerpFunc","getLerpFunc","lerp_object","slerp_object","lerp_number","lerp_boolean","lerp_boolean_immediate","lerp_string","lerp_string_immediate","lastIndex","validate","setResult","prevKey","constantToNext","currentKey","lerpValues","shift","timeOffset","endTime","firstKeysToRemove","lastKeysToRemove","currKey","newKeys","nextKey","compareValues","key0","key1","GetTrackTypeForTypeName","toLowerCase","BooleanKeyframeTrack","StringKeyframeTrack","rootNode","originalValue","parseResults","parseTrackName","directoryName","objectName","objectIndex","propertyIndex","findNode","cumulativeValue","cumulativeWeight","reset","isBound","lerpAlpha","lerpValue","setValue","getValue","equalsValue","triggerDirty","targetObject","skeleton","nodeProperty","remainingWeight","valueChanged","re","matches","searchSkeleton","bone","searchNodeSubtree","childNode","subTreeNode","value0","value1","clonedKeys","elementCount","valueType","jsonKey","quat","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLRenderTargetCube","format","magFilter","minFilter","updateCubeMap","generateMipmaps","texture","activeCubeFace","setRenderTarget","zoom","updateProjectionMatrix","cx","cy","setLens","focalLength","frameHeight","atan","setViewOffset","fullWidth","fullHeight","Light","onlyShadow","shadowCameraFov","shadow","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowBias","bias","shadowDarkness","darkness","shadowMapWidth","mapSize","shadowMapHeight","groundColor","intensity","decay","exponent","LightShadow","map","AmbientLight","DirectionalLight","HemisphereLight","skyColor","PointLight","SpotLight","Cache","files","file","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","url","pop","initMaterials","texturePath","createMaterial","textureLoader","materialLoader","loadTexture","path","repeat","wrap","anisotropy","fullPath","loader","Handlers","load","setCrossOrigin","wrapS","wrapT","TextureLoader","MaterialLoader","blending","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","side","opacity","transparent","setTextures","handlers","regex","test","XHRLoader","manager","DefaultLoadingManager","onLoad","onProgress","onError","cached","request","XMLHttpRequest","open","response","itemEnd","itemError","responseType","withCredentials","send","itemStart","setResponseType","setWithCredentials","ImageLoader","image","src","JSONLoader","statusDomElement","_statusDomElement","text","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","animations","concat","morphAnimationClips","LoadingManager","isLoading","itemsLoaded","itemsTotal","onStart","BufferGeometryLoader","typedArray","getTexture","uniforms","vertexShader","fragmentShader","shading","alphaTest","depthTest","depthWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","substring","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","BoxGeometry","depth","depthSegments","CircleBufferGeometry","segments","thetaStart","thetaLength","CircleGeometry","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","SphereGeometry","phiStart","phiLength","SphereBufferGeometry","DodecahedronGeometry","detail","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","heightScale","loadImage","parseConstant","Texture","mapping","getGeometry","getMaterial","Scene","mode","Group","levels","level","addLevel","CubeTextureLoader","urls","CubeTexture","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","CompressedTexture","texDatas","isCubemap","Material","MaterialIdCount","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","overdraw","_needsUpdate","setValues","newValue","currentValue","wrapAround","boolean","wrapRGB","LineBasicMaterial","linewidth","linecap","linejoin","fog","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshLambertMaterial","MeshPhongMaterial","metal","emissiveMap","MeshDepthMaterial","MeshNormalMaterial","MultiMaterial","MeshFaceMaterial","PointsMaterial","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","ShaderMaterial","defines","lights","derivatives","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","flipY","unpackAlignment","onUpdate","getDataURL","canvas","toDataURL","getContext","drawImage","transformUv","CanvasTexture","VideoTexture","video","readyState","HAVE_ENOUGH_DATA","inverseMatrix","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","ParticleSystem","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","step","distSq","faceIndex","nbVertices","LineStrip","LinePieces","updateMorphTargets","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","tempA","tempB","tempC","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","offsetMatrix","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","gbone","rotq","normalizeSkinWeights","sw","getObjectForDistance","matrixPosition","guessSizeSq","Particle","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","overrideMaterial","autoUpdate","Fog","FogExp2","density","ShaderChunk","merged","uniforms_src","uniforms_dst","parameter_src","UniformsLib","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLightDirection","directionalLightColor","hemisphereLightDirection","hemisphereLightSkyColor","hemisphereLightGroundColor","pointLightColor","pointLightPosition","pointLightDistance","pointLightDecay","spotLightColor","spotLightPosition","spotLightDirection","spotLightDistance","spotLightAngleCos","spotLightExponent","spotLightDecay","psColor","shadowmap","shadowMap","shadowMapSize","shadowMatrix","ShaderLib","basic","lambert","phong","dashed","totalSize","mNear","mFar","cube","tCube","tFlip","equirect","tEquirect","depthRGBA","distanceRGBA","lightPos","WebGLRenderer","glClearColor","_premultipliedAlpha","_gl","clearColor","setDefaultGLState","state","viewport","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_clearColor","_clearAlpha","resetGLState","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","_lightsNeedUpdate","onContextLost","preventDefault","properties","onTextureDispose","deallocateTexture","_infoMemory","onRenderTargetDispose","deallocateRenderTarget","onMaterialDispose","deallocateMaterial","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","deleteRenderbuffer","__webglRenderbuffer","releaseMaterialProgramReference","programInfo","program","programCache","releaseProgram","setupVertexAttributes","startIndex","extension","extensions","initAttributes","geometryAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","getAttributeBuffer","enableAttributeAndDivisor","enableAttribute","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","numericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","_vector3","projectObject","sprites","ImmediateRenderObject","_this","sortObjects","_projScreenMatrix","_frustum","groupMaterial","renderObjects","renderList","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","initMaterial","materialProperties","getParameters","code","getProgramCode","programChange","shaderID","shader","__webglShader","acquireProgram","numSupportedMorphTargets","maxMorphTargets","numSupportedMorphNormals","maxMorphNormals","uniformsList","uniformLocations","getUniforms","location","setMaterialFaces","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","CULL_FACE","setFlipSided","_usedTextureUnits","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","uniformMatrix4fv","capabilities","logarithmicDepthBuffer","uniform1f","logDepthBufFC","cameraPosition","uniform3f","viewMatrix","floatVertexTextures","textureUnit","getTextureUnit","uniform1i","setTexture","boneGlobalMatrices","refreshUniformsFog","setupLights","refreshUniformsLights","_lights","markUniformsLightsNeedsUpdate","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsParticle","refreshUniformsPhong","_shadowPass","refreshUniformsShadow","loadUniformsGeneric","loadUniformsMatrices","modelMatrix","uvScaleMap","WebGLRenderTarget","_canvas","ambient","directional","distances","decays","spot","directions","anglesCos","exponents","hemi","skyColors","groundColors","light","uniformMatrix3fv","maxTextures","uniform","uniform2f","uniform4f","uniform1iv","uniform3iv","uniform1fv","uniform2fv","uniform3fv","uniform4fv","_array","i3","i4","setCubeTexture","setCubeTextureDynamic","setColorLinear","ll","zlights","dirColors","dirPositions","pointColors","pointPositions","pointDistances","pointDecays","spotColors","spotPositions","spotDistances","spotDirections","spotAnglesCos","spotExponents","spotDecays","hemiSkyColors","hemiGroundColors","hemiPositions","dirLength","pointLength","spotLength","hemiLength","dirCount","pointCount","spotCount","hemiCount","dirOffset","pointOffset","spotOffset","hemiOffset","_direction","setTextureParameters","textureType","isImagePowerOfTwo","texParameteri","TEXTURE_WRAP_S","paramThreeToGL","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","uploadTexture","slot","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","clampToMaxSize","maxTextureSize","textureNeedsPowerOfTwo","makePowerOfTwo","glFormat","glType","mipmap","texImage2D","getCompressedTextureFormats","compressedTexImage2D","generateMipmap","__version","maxSize","HTMLImageElement","HTMLCanvasElement","TEXTURE_CUBE_MAP","isCompressed","isDataTexture","cubeImage","autoScaleCubemaps","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","setupFrameBuffer","framebuffer","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","setupRenderBuffer","renderbuffer","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","updateRenderTargetMipmap","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","MIN_EXT","MAX_EXT","_context","_width","_height","pixelRatio","_alpha","_depth","_stencil","stencil","_antialias","antialias","premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","autoClear","autoClearColor","autoClearDepth","autoClearStencil","gammaInput","gammaOutput","_currentFramebuffer","_currentWidth","_currentHeight","_infoRender","calls","info","memory","programs","WebGLExtensions","WebGLCapabilities","WebGLState","WebGLProperties","WebGLObjects","WebGLPrograms","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","WebGLShadowMap","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getPrecision","getPixelRatio","setPixelRatio","getSize","updateStyle","setViewport","getViewport","dimensions","setScissor","scissor","enableScissorTest","setScissorTest","getClearColor","getClearAlpha","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","buffers","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bufferData","positionArray","DYNAMIC_DRAW","normalArray","nx","ny","nz","uvArray","colorArray","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","ELEMENT_ARRAY_BUFFER","dataStart","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","renderInstances","lineWidth","LINE_STRIP","POINTS","forceClear","isTargetPowerOfTwo","setFaceCulling","cullFace","frontFaceDirection","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","complete","isCube","createFramebuffer","createRenderbuffer","shareDepthFrom","vx","vy","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsVertexTextures","vertexTextures","supportsInstancedArrays","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapEnabled","shadowMapType","shadowMapCullFace","shadowMapDebug","debug","options","drawArraysInstancedANGLE","drawElements","drawElementsInstancedANGLE","gl","getExtension","getMaxPrecision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","_bufferGeometry","deleteAttributes","deleteAttribute","__webglBuffer","deleteBuffer","removeAttributeBuffer","updateAttribute","bufferType","attributeProperties","updateBuffer","usage","STATIC_DRAW","bufferSubData","subarray","edges","checkEdge","list","WebGLProgram","generateDefines","fetchUniformLocations","identifiers","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","suffixPos","substr","fetchAttributeLocations","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","filterEmptyLine","programIdCount","shadowMapTypeDefine","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customDefines","createProgram","maxDirLights","maxPointLights","maxSpotLights","maxHemiLights","maxShadows","maxBones","flatShading","doubleSided","flipSided","pointLightShadows","filter","useFog","fogExp","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","deleteShader","cachedUniforms","cachedAttributes","destroy","deleteProgram","usedTimes","allocateBones","nVertexUniforms","nVertexMatrices","allocateLights","dirLights","pointLights","spotLights","hemiLights","allocateShadows","shaderIDs","parameterNames","maxLightCount","allocatedShadows","envMapMode","parameterName","pl","addLineNumbers","lines","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","_renderer","_objects","getDepthMaterial","isPointLight","lightPositionWorld","newMaterial","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","_renderList","_state","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","_vector4","depthShader","depthUniforms","distanceShader","distanceUniforms","depthMaterial","distanceMaterial","faceCount","BLEND","shadowCamera","vpWidth","vpHeight","shadowFilter","pars","vpDimensions","clearAlpha","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentDepthFunc","currentDepthWrite","currentColorWrite","currentFlipSided","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentTextureSlot","currentBoundTextures","DEPTH_TEST","LEQUAL","blendFunc","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","NEVER","ALWAYS","LESS","EQUAL","GEQUAL","GREATER","NOTEQUAL","depthMask","colorMask","factor","units","POLYGON_OFFSET_FILL","scissorTest","SCISSOR_TEST","webglSlot","webglType","webglTexture","boundTexture","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","hasVertexTexture","renderType","occlusionMap","screenPosition","viewportWidth","viewportHeight","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","TEXTURE1","copyTexImage2D","sprite","uvOffset","uvScale","fogType","fillStyle","fillRect","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","GeometryUtils","geometry1","geometry2","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","contour","triangulate","snip","verts","px","py","aX","aY","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","holes","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Audio","createBufferSource","onended","onEnded","gain","createGain","connect","destination","panner","createPanner","autoplay","playbackRate","isPlaying","onload","decodeAudioData","pause","currentTime","disconnect","setFilter","getFilter","setPlaybackRate","getPlaybackRate","setLoop","getLoop","setRefDistance","refDistance","getRefDistance","setRolloffFactor","rolloffFactor","getRolloffFactor","setVolume","getVolume","AudioListener","AudioContext","webkitAudioContext","orientation","setOrientation","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","vec","getTangentAt","Utils","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","lens","cacheLengths","sums","createPointsGeometry","createGeometry","createSpacedPointsGeometry","Path","fromPoints","moveTo","lineTo","lastargs","x0","y0","quadraticCurveTo","aCPx","aCPy","QuadraticBezierCurve","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","SplineCurve","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","EllipseCurve","lastPoint","closedPath","cpx2","cpy2","cpx1","cpy1","cpx0","cpy0","laste","item","spts","spline","deltaAngle","tdivisions","toShapes","isCCW","noHoles","extractSubpaths","inActions","subPaths","lastPath","toShapesNoHoles","inSubpaths","shapes","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","tangent","point0","point1","point2","point3","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","pz","x1","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","ClosedSplineCurve3","buildPlane","udir","vdir","gridX","gridY","width_half","height_half","gridX1","gridY1","segment_width","segment_height","uva","uvb","uvc","uvd","depth_half","CubeGeometry","ii","segment","heightHalf","verticesRow","uvsRow","na","nb","tanTheta","v4","n1","n2","n3","n4","uv4","EdgesGeometry","thresholdAngle","sortFunction","thresholdDot","edge","vert1","vert2","face1","face2","addShapeList","addShape","scalePt2","pt","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","bevelEnabled","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","binormal","position2","amount","bevelThickness","bevelSize","curveSegments","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapePoints","reverse","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","indexA","indexB","indexC","indexD","LatheGeometry","inversePointLength","inverseSegments","phi","np","base","u0","u1","PlaneGeometry","PlaneBufferGeometry","offset2","o","radiusStep","thetaSegment","thetaEnd","vertexCount","getPos","in_q","in_p","cu","su","quOverP","cs","tz","grid","tang","bitan","ip","jp","closed","taper","NoTaper","numpoints","pos2","tangents","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","mat","PolyhedronGeometry","prepare","that","azimuth","inclination","make","centroid","azi","correctUV","subdivide","cols","aj","bj","rows","ParametricGeometry","func","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","drawcall","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","dir","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","colorCenterLine","colorGrid","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","frameTime","keyframe","mix","appendChild","updateSize","clientWidth","clientHeight"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,SAAAA,OAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,KAAAD,IAEAD,EAAA,KAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,EAAAA,EAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GAM/B,QAASS,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAAWF,GAJzFG,OAAOC,eAAepB,EAAS,cAC7BqB,OAAO,GAKT,IAAIC,GAAShB,EE9DI,GFgEbiB,EAAUR,EAAuBO,GE9DhCE,GACJC,QAAS,MAGTC,MAAKH,EAAA,WFmENvB,GAAQ,WEhEMwB,EFiEdvB,EAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GAU/B,QAASS,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAAWF,GAEzF,QAASW,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIH,WAAU,iEAAoEG,GAAeD,GAASE,UAAYf,OAAOgB,OAAOF,GAAcA,EAAWC,WAAaE,aAAef,MAAOW,EAAUK,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeN,IAAYd,OAAOqB,eAAiBrB,OAAOqB,eAAeR,EAAUC,GAAcD,EAASS,UAAYR,GAZjed,OAAOC,eAAepB,EAAS,cAC7BqB,OAAO,GAGT,IAAIqB,GAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWX,WAAaW,EAAWX,aAAc,EAAOW,EAAWT,cAAe,EAAU,SAAWS,KAAYA,EAAWV,UAAW,GAAMnB,OAAOC,eAAewB,EAAQI,EAAWC,IAAKD,IAAiB,MAAO,UAAUnB,EAAaqB,EAAYC,GAAiJ,MAA9HD,IAAYP,EAAiBd,EAAYK,UAAWgB,GAAiBC,GAAaR,EAAiBd,EAAasB,GAAqBtB,MAE7hBuB,EAAO,SAAaC,EAAIC,EAAKC,GAAqC,IAA9B,GAAIC,IAAS,EAAwBA,GAAQ,CAAE,GAAIC,GAASJ,EAAIK,EAAWJ,EAAKK,EAAWJ,CAAKC,IAAS,EAAsB,OAAXC,IAAiBA,EAASG,SAAS1B,UAAW,IAAI2B,GAAO1C,OAAO2C,yBAAyBL,EAAQC,EAAW,IAAaK,SAATF,EAAJ,CAA4O,GAAI,SAAWA,GAAQ,MAAOA,GAAKxC,KAAgB,IAAI2C,GAASH,EAAKI,GAAK,IAAeF,SAAXC,EAAwB,MAAoB,OAAOA,GAAOrD,KAAKgD,GAA/V,GAAIO,GAAS/C,OAAOgD,eAAeV,EAAS,IAAe,OAAXS,EAAmB,MAA2Bb,GAAKa,EAAQZ,EAAMI,EAAUH,EAAMI,EAAUH,GAAS,EAAMK,EAAOK,EAASH,SAQxcK,EAAiB9D,EG9FG,GHgGpB+D,EAAkBtD,EAAuBqD,GAEzCE,EAAgBhE,EGjGF,GHmGdiE,EAAiBxD,EAAuBuD,GG9FvC5C,EAAK,SAAA8C,GACE,QADP9C,GACQ+C,GHsGT9C,EAAgBvB,KGvGfsB,GAEF0B,EAAAjC,OAAAgD,eAFEzC,EAAKQ,WAAA,cAAA9B,MAAAO,KAAAP,MAIPA,KAAKsE,eAAeD,GACpBrE,KAAKuE,cAGLvE,KAAKwE,UHgJN,MApDA7C,GGpGGL,EAAK8C,GHoHR9B,EGpHGhB,IHqHDuB,IAAK,iBACL5B,MG3GW,SAACoD,GACbrE,KAAKyE,WAAaC,SAASC,eAAeN,MH8GzCxB,IAAK,cACL5B,MG5GQ,WACTjB,KAAK4E,SAAU,EAAAT,EAAA,YAAOnE,KAAKyE,eHqH1B5B,IAAK,UACL5B,MG7GI,WACL,GAAI4D,GAAQ7E,KAAK4E,QAAQE,MAAMC,UAG/BC,QAAOC,sBAAsBjF,KAAKwE,QAAQU,KAAKlF,OAE/CA,KAAKmF,KAAK,aACVnF,KAAK4E,QAAQJ,QAAQK,GACrB7E,KAAKmF,KAAK,iBHgHTtC,IAAK,WACL5B,MG9GK,SAACmE,OHgHNvC,IAAK,cACL5B,MGhHQ,SAACmE,QArCR9D,GHyJF2C,EAAgB,WAEnBrE,GAAQ,WGlHM,SAASyE,GACtB,MAAO,IAAI/C,GAAM+C,IHsHlBxE,EAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GI1KhC,YAoBA,SAAAmF,GAAAC,EAAAC,EAAAC,GACAxF,KAAAsF,GAAAA,EACAtF,KAAAuF,QAAAA,EACAvF,KAAAwF,KAAAA,IAAA,EAUA,QAAAC,MAvBA,GAAAC,GAAA,kBAAA3E,QAAAgB,OAAA,KAAA,CA+BA0D,GAAA3D,UAAA6D,QAAAhC,OAUA8B,EAAA3D,UAAA8D,UAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAL,EAAAA,EAAAG,EAAAA,EACAG,EAAAhG,KAAA2F,SAAA3F,KAAA2F,QAAAI,EAEA,IAAAD,EAAA,QAAAE,CACA,KAAAA,EAAA,QACA,IAAAA,EAAAV,GAAA,OAAAU,EAAAV,GAEA,KAAA,GAAA5C,GAAA,EAAAuD,EAAAD,EAAArD,OAAAuD,EAAA,GAAAC,OAAAF,GAA0DA,EAAAvD,EAAOA,IACjEwD,EAAAxD,GAAAsD,EAAAtD,GAAA4C,EAGA,OAAAY,IAUAT,EAAA3D,UAAAqD,KAAA,SAAAU,EAAAO,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAT,GAAAL,EAAAA,EAAAG,EAAAA,CAEA,KAAA7F,KAAA2F,UAAA3F,KAAA2F,QAAAI,GAAA,OAAA,CAEA,IAEAU,GACA/D,EAHAkD,EAAA5F,KAAA2F,QAAAI,GACAW,EAAAC,UAAAhE,MAIA,IAAA,kBAAAiD,GAAAN,GAAA,CAGA,OAFAM,EAAAJ,MAAAxF,KAAA4G,eAAAf,EAAAD,EAAAN,GAAA3B,QAAA,GAEA+C,GACA,IAAA,GAAA,MAAAd,GAAAN,GAAA/E,KAAAqF,EAAAL,UAAA,CACA,KAAA,GAAA,MAAAK,GAAAN,GAAA/E,KAAAqF,EAAAL,QAAAa,IAAA,CACA,KAAA,GAAA,MAAAR,GAAAN,GAAA/E,KAAAqF,EAAAL,QAAAa,EAAAC,IAAA,CACA,KAAA,GAAA,MAAAT,GAAAN,GAAA/E,KAAAqF,EAAAL,QAAAa,EAAAC,EAAAC,IAAA,CACA,KAAA,GAAA,MAAAV,GAAAN,GAAA/E,KAAAqF,EAAAL,QAAAa,EAAAC,EAAAC,EAAAC,IAAA,CACA,KAAA,GAAA,MAAAX,GAAAN,GAAA/E,KAAAqF,EAAAL,QAAAa,EAAAC,EAAAC,EAAAC,EAAAC,IAAA,EAGA,IAAA9D,EAAA,EAAA+D,EAAA,GAAAN,OAAAO,EAAA,GAAyCA,EAAAhE,EAASA,IAClD+D,EAAA/D,EAAA,GAAAiE,UAAAjE,EAGAkD,GAAAN,GAAAuB,MAAAjB,EAAAL,QAAAkB,OACG,CACH,GACAK,GADAnE,EAAAiD,EAAAjD,MAGA,KAAAD,EAAA,EAAeC,EAAAD,EAAYA,IAG3B,OAFAkD,EAAAlD,GAAA8C,MAAAxF,KAAA4G,eAAAf,EAAAD,EAAAlD,GAAA4C,GAAA3B,QAAA,GAEA+C,GACA,IAAA,GAAAd,EAAAlD,GAAA4C,GAAA/E,KAAAqF,EAAAlD,GAAA6C,QAA2D,MAC3D,KAAA,GAAAK,EAAAlD,GAAA4C,GAAA/E,KAAAqF,EAAAlD,GAAA6C,QAAAa,EAA+D,MAC/D,KAAA,GAAAR,EAAAlD,GAAA4C,GAAA/E,KAAAqF,EAAAlD,GAAA6C,QAAAa,EAAAC,EAAmE,MACnE,SACA,IAAAI,EAAA,IAAAK,EAAA,EAAAL,EAAA,GAAAN,OAAAO,EAAA,GAA0DA,EAAAI,EAASA,IACnEL,EAAAK,EAAA,GAAAH,UAAAG,EAGAlB,GAAAlD,GAAA4C,GAAAuB,MAAAjB,EAAAlD,GAAA6C,QAAAkB,IAKA,OAAA,GAWAhB,EAAA3D,UAAAiF,GAAA,SAAAlB,EAAAP,EAAAC,GACA,GAAAyB,GAAA,GAAA3B,GAAAC,EAAAC,GAAAvF,MACA+F,EAAAL,EAAAA,EAAAG,EAAAA,CAWA,OATA7F,MAAA2F,UAAA3F,KAAA2F,QAAAD,KAA+C3E,OAAAgB,OAAA,OAC/C/B,KAAA2F,QAAAI,GAEA/F,KAAA2F,QAAAI,GAAAT,GACAtF,KAAA2F,QAAAI,IACA/F,KAAA2F,QAAAI,GAAAiB,GAFAhH,KAAA2F,QAAAI,GAAAkB,KAAAD,GAFAhH,KAAA2F,QAAAI,GAAAiB,EAQAhH,MAWAyF,EAAA3D,UAAA0D,KAAA,SAAAK,EAAAP,EAAAC,GACA,GAAAyB,GAAA,GAAA3B,GAAAC,EAAAC,GAAAvF,MAAA,GACA+F,EAAAL,EAAAA,EAAAG,EAAAA,CAWA,OATA7F,MAAA2F,UAAA3F,KAAA2F,QAAAD,KAA+C3E,OAAAgB,OAAA,OAC/C/B,KAAA2F,QAAAI,GAEA/F,KAAA2F,QAAAI,GAAAT,GACAtF,KAAA2F,QAAAI,IACA/F,KAAA2F,QAAAI,GAAAiB,GAFAhH,KAAA2F,QAAAI,GAAAkB,KAAAD,GAFAhH,KAAA2F,QAAAI,GAAAiB,EAQAhH,MAYAyF,EAAA3D,UAAA8E,eAAA,SAAAf,EAAAP,EAAAC,EAAAC,GACA,GAAAO,GAAAL,EAAAA,EAAAG,EAAAA,CAEA,KAAA7F,KAAA2F,UAAA3F,KAAA2F,QAAAI,GAAA,MAAA/F,KAEA,IAAA4F,GAAA5F,KAAA2F,QAAAI,GACAmB,IAEA,IAAA5B,EACA,GAAAM,EAAAN,IAEAM,EAAAN,KAAAA,GACAE,IAAAI,EAAAJ,MACAD,GAAAK,EAAAL,UAAAA,IAEA2B,EAAAD,KAAArB,OAGA,KAAA,GAAAlD,GAAA,EAAAC,EAAAiD,EAAAjD,OAAgDA,EAAAD,EAAYA,KAE5DkD,EAAAlD,GAAA4C,KAAAA,GACAE,IAAAI,EAAAlD,GAAA8C,MACAD,GAAAK,EAAAlD,GAAA6C,UAAAA,IAEA2B,EAAAD,KAAArB,EAAAlD,GAeA,OANAwE,GAAAvE,OACA3C,KAAA2F,QAAAI,GAAA,IAAAmB,EAAAvE,OAAAuE,EAAA,GAAAA,QAEAlH,MAAA2F,QAAAI,GAGA/F,MASAyF,EAAA3D,UAAAqF,mBAAA,SAAAtB,GACA,MAAA7F,MAAA2F,SAEAE,QAAA7F,MAAA2F,QAAAD,EAAAA,EAAAG,EAAAA,GACA7F,KAAA2F,QAAAD,KAAiC3E,OAAAgB,OAAA,MAEjC/B,MALAA,MAWAyF,EAAA3D,UAAAsF,IAAA3B,EAAA3D,UAAA8E,eACAnB,EAAA3D,UAAAuF,YAAA5B,EAAA3D,UAAAiF,GAKAtB,EAAA3D,UAAAwF,gBAAA,WACA,MAAAtH,OAMAyF,EAAA8B,SAAA7B,EAMA7F,EAAAD,QAAA6F,GJkLM,SAAS5F,EAAQD,EAASM,GAU/B,QAASS,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAAWF,GAEzF,QAASW,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIH,WAAU,iEAAoEG,GAAeD,GAASE,UAAYf,OAAOgB,OAAOF,GAAcA,EAAWC,WAAaE,aAAef,MAAOW,EAAUK,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeN,IAAYd,OAAOqB,eAAiBrB,OAAOqB,eAAeR,EAAUC,GAAcD,EAASS,UAAYR,GAZjed,OAAOC,eAAepB,EAAS,cAC7BqB,OAAO,GAGT,IAAIqB,GAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWX,WAAaW,EAAWX,aAAc,EAAOW,EAAWT,cAAe,EAAU,SAAWS,KAAYA,EAAWV,UAAW,GAAMnB,OAAOC,eAAewB,EAAQI,EAAWC,IAAKD,IAAiB,MAAO,UAAUnB,EAAaqB,EAAYC,GAAiJ,MAA9HD,IAAYP,EAAiBd,EAAYK,UAAWgB,GAAiBC,GAAaR,EAAiBd,EAAasB,GAAqBtB,MAE7hBuB,EAAO,SAAaC,EAAIC,EAAKC,GAAqC,IAA9B,GAAIC,IAAS,EAAwBA,GAAQ,CAAE,GAAIC,GAASJ,EAAIK,EAAWJ,EAAKK,EAAWJ,CAAKC,IAAS,EAAsB,OAAXC,IAAiBA,EAASG,SAAS1B,UAAW,IAAI2B,GAAO1C,OAAO2C,yBAAyBL,EAAQC,EAAW,IAAaK,SAATF,EAAJ,CAA4O,GAAI,SAAWA,GAAQ,MAAOA,GAAKxC,KAAgB,IAAI2C,GAASH,EAAKI,GAAK,IAAeF,SAAXC,EAAwB,MAAoB,OAAOA,GAAOrD,KAAKgD,GAA/V,GAAIO,GAAS/C,OAAOgD,eAAeV,EAAS,IAAe,OAAXS,EAAmB,MAA2Bb,GAAKa,EAAQZ,EAAMI,EAAUH,EAAMI,EAAUH,GAAS,EAAMK,EAAOK,EAASH,SAQxcK,EAAiB9D,EKtcG,GLwcpB+D,EAAkBtD,EAAuBqD,GAEzCwD,EAAStH,EKzcI,GL2cbuH,EAAU9G,EAAuB6G,GAEjCE,EAASxH,EK5cI,GL8cbyH,EAAUhH,EAAuB+G,GAEjCE,EAAY1H,EK/cI,GLidhB2H,EAAalH,EAAuBiH,GAEpCE,EAAU5H,EKldI,GLodd6H,EAAWpH,EAAuBmH,GKldjCE,EAAM,SAAA5D,GACC,QADP4D,GACQC,GLudT1G,EAAgBvB,KKxdfgI,GAEFE,QAAQC,IAAI,eAEZnF,EAAAjC,OAAAgD,eAJEiE,EAAMlG,WAAA,cAAA9B,MAAAO,KAAAP,MAMRA,KAAKoI,MAAKT,EAAA,WACV3H,KAAKqI,UAAW,EAAAR,EAAA,YAASI,GACzBjI,KAAKsI,QAAS,EAAAP,EAAA,YAAOE,GACrBjI,KAAK8E,MAAQ,GAAI2C,GAAA,WAAMc,MLsexB,MA1BA5G,GKrdGqG,EAAM5D,GLseT9B,EKteG0F,ILueDnF,IAAK,UACL5B,MK5dI,SAAC4D,GACN7E,KAAKmF,KAAK,aACVnF,KAAKqI,SAASG,OAAOxI,KAAKoI,MAAOpI,KAAKsI,QACtCtI,KAAKmF,KAAK,kBAfR6C,GLgfF/D,EAAgB,WAEnBrE,GAAQ,WK9dM,SAASqI,GACtB,MAAO,IAAID,GAAOC,ILkenBpI,EAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,EAASM,GMjgBhC,GAAAuI,GAAAC,EAAAC,EAAAA,MAMAC,GAAaC,SAAA,KAMbJ,GAAA,EAAAC,EAAA,kBAAAD,GAAAA,EAAAlI,KAAAX,EAAAM,EAAAN,EAAAC,GAAA4I,IAAA9E,SAAA+E,IAAA7I,EAAAD,QAAA8I,KAWA/E,SAAAgF,EAAA1D,uBAAAtB,SAAAgF,EAAAG,wBAIA,WAKA,IAAA,GAHAC,GAAA,EACAC,GAAA,KAAA,MAAA,SAAA,KAEAC,EAAA,EAAkBA,EAAAD,EAAArG,SAAAgG,EAAA1D,wBAAoDgE,EAEtEN,EAAA1D,sBAAA0D,EAAAK,EAAAC,GAAA,yBACAN,EAAAG,qBAAAH,EAAAK,EAAAC,GAAA,yBAAAN,EAAAK,EAAAC,GAAA,8BAIAtF,UAAAgF,EAAA1D,uBAAAtB,SAAAgF,EAAAO,aAEAP,EAAA1D,sBAAA,SAAAkE,GAEA,GAAAC,GAAAC,KAAAC,MAAAC,EAAAC,KAAAC,IAAA,EAAA,IAAAL,EAAAL,IACA1I,EAAAsI,EAAAO,WAAA,WAEAC,EAAAC,EAAAG,IAEKA,EAEL,OADAR,GAAAK,EAAAG,EACAlJ,IAMAsD,SAAAgF,EAAAG,sBAAAnF,SAAAgF,EAAAe,eAEAf,EAAAG,qBAAA,SAAAzI,GAEAsI,EAAAe,aAAArJ,QAYAsD,SAAAgF,EAAAgB,cAEAhB,EAAAgB,gBAIAhG,SAAAgF,EAAAgB,YAAAL,MAEA,WAEA,GAAAM,GAAAP,KAAAC,KAEAX,GAAAgB,YAAAL,IAAA,WAEA,MAAAD,MAAAC,MAAAM,MAUAjG,SAAAkG,OAAAC,UAEAD,OAAAC,QAAAN,KAAAO,IAAA,EAAA,MAMApG,SAAA6F,KAAAQ,OAIAR,KAAAQ,KAAA,SAAAf,GAEA,MAAA,GAAAA,EAAA,GAAAA,EAAA,EAAA,GAAAA,IAMAtF,SAAAH,SAAA1B,UAAAmI,MAAAtG,SAAA5C,OAAAC,gBAKAD,OAAAC,eAAAwC,SAAA1B,UAAA,QAEA+B,IAAA,WAEA,MAAA7D,MAAAkK,WAAAC,MAAA,6BAAA,MAUAvB,EAAAwB,OAAeC,KAAA,EAAAC,OAAA,EAAAC,MAAA,GAIf3B,EAAA4B,aAAA,EACA5B,EAAA6B,aAAA,EACA7B,EAAA8B,cAAA,EACA9B,EAAA+B,kBAAA,EAEA/B,EAAAgC,qBAAA,EACAhC,EAAAiC,sBAAA,EAIAjC,EAAAkC,eAAA,EACAlC,EAAAmC,aAAA,EACAnC,EAAAoC,iBAAA,EAMApC,EAAAqC,UAAA,EACArC,EAAAsC,SAAA,EACAtC,EAAAuC,WAAA,EAIAvC,EAAAwC,YAAA,EACAxC,EAAAyC,cAAA,EAIAzC,EAAA0C,SAAA,EACA1C,EAAA2C,WAAA,EACA3C,EAAA4C,aAAA,EAIA5C,EAAA6C,WAAA,EACA7C,EAAA8C,eAAA,EACA9C,EAAA+C,iBAAA,EACA/C,EAAAgD,oBAAA,EACAhD,EAAAiD,iBAAA,EACAjD,EAAAkD,eAAA,EAMAlD,EAAAmD,YAAA,IACAnD,EAAAoD,iBAAA,IACApD,EAAAqD,wBAAA,IACArD,EAAAsD,YAAA,IACAtD,EAAAuD,YAAA,IAIAvD,EAAAwD,WAAA,IACAxD,EAAAyD,UAAA,IACAzD,EAAA0D,eAAA,IACA1D,EAAA2D,uBAAA,IACA3D,EAAA4D,eAAA,IACA5D,EAAA6D,uBAAA,IACA7D,EAAA8D,eAAA,IACA9D,EAAA+D,uBAAA,IAUA/D,EAAAgE,eAAA,IACAhE,EAAAiE,uBAAA,IACAjE,EAAAkE,uBAAA,IAIAlE,EAAAmE,WAAA,EACAnE,EAAAoE,YAAA,EACApE,EAAAqE,UAAA,EACArE,EAAAsE,eAAA,EACAtE,EAAAuE,WAAA,EACAvE,EAAAwE,kBAAA,EACAxE,EAAAyE,aAAA,EACAzE,EAAA0E,cAAA,EAKA1E,EAAA2E,kBAAA,EACA3E,EAAA4E,aAAA,EACA5E,EAAA6E,aAAA,EAIA7E,EAAA8E,UAAA,IAEA9E,EAAA+E,sBAAA,IACA/E,EAAAgF,sBAAA,IAEAhF,EAAAiF,iCAAA,IACAjF,EAAAkF,iCAAA,IAEAlF,EAAAmF,2BAAA,IAIAnF,EAAAoF,eAAA,IACApF,EAAAqF,oBAAA,KACArF,EAAAsF,uBAAA,KAIAtF,EAAAuF,cAAA,KACAvF,EAAAwF,2BAAA,KACAxF,EAAAyF,0BAAA,KACAzF,EAAA0F,aAAA,KACA1F,EAAA2F,0BAAA,KACA3F,EAAA4F,yBAAA,KAIA5F,EAAA6F,iBAAA,KACA7F,EAAA8F,SAAA,KACA9F,EAAA+F,UAAA,KACA/F,EAAAgG,kBAAA,KACAhG,EAAAiG,QAAA,KACAjG,EAAAkG,gBAAA,KACAlG,EAAAmG,UAAA,KACAnG,EAAAoG,cAAA,KAKApG,EAAAqG,sBAAA,KACArG,EAAAsG,sBAAA,KACAtG,EAAAuG,qBAAA,KAIAvG,EAAAwG,YAAA,KACAxG,EAAAyG,UAAA,KACAzG,EAAA0G,WAAA,KACA1G,EAAA2G,gBAAA,KACA3G,EAAA4G,qBAAA,KAEA5G,EAAA6G,WAAA7G,EAAA0G,WAIA1G,EAAA8G,qBAAA,KACA9G,EAAA+G,sBAAA,KACA/G,EAAAgH,sBAAA,KACAhH,EAAAiH,sBAAA,KAKAjH,EAAAkH,wBAAA,KACAlH,EAAAmH,wBAAA,KACAnH,EAAAoH,yBAAA,KACApH,EAAAqH,yBAAA,KAIArH,EAAAsH,SAAA,KACAtH,EAAAuH,WAAA,KACAvH,EAAAwH,aAAA,KAIAxH,EAAAyH,UAAA,WAEAnI,QAAAoI,MAAA,0EAEAtQ,KAAAuQ,cAAA,SAAAC,EAAAlI,GAEAJ,QAAAuI,KAAA,8DACAD,EAAAE,QAAApI,IAIAtI,KAAA2Q,gBAAA,SAAAH,EAAAlI,GAEAJ,QAAAuI,KAAA,kEACAD,EAAAI,UAAAtI,IAIAtI,KAAA6Q,WAAA,SAAAL,EAAAlI,GAEAJ,QAAAoI,MAAA,sEAMA1H,EAAAkI,eAAA,WAEA5I,QAAAoI,MAAA,mFAEAtQ,KAAA+Q,WAAArM,SAAAsM,cAAA,UACAhR,KAAAiR,MAAA,aACAjR,KAAAwI,OAAA,aACAxI,KAAAkR,cAAA,aACAlR,KAAAmR,QAAA,cAUAvI,EAAAwI,MAAA,SAAAC,GAEA,MAAA,KAAA1K,UAAAhE,OAEA3C,KAAAsR,UAAA3K,WAIA3G,KAAAuR,IAAAF,IAIAzI,EAAAwI,MAAAtP,WAEAE,YAAA4G,EAAAwI,MAEAI,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAEAH,IAAA,SAAAtQ,GAgBA,MAdAA,aAAA2H,GAAAwI,MAEApR,KAAA2R,KAAA1Q,GAEG,gBAAAA,GAEHjB,KAAA4R,OAAA3Q,GAEG,gBAAAA,IAEHjB,KAAA6R,SAAA5Q,GAIAjB,MAIA4R,OAAA,SAAAE,GAQA,MANAA,GAAAtI,KAAAuI,MAAAD,GAEA9R,KAAAwR,GAAAM,GAAA,GAAA,KAAA,IACA9R,KAAAyR,GAAAK,GAAA,EAAA,KAAA,IACA9R,KAAA0R,GAAA,IAAAI,GAAA,IAEA9R,MAIAgS,OAAA,SAAAR,EAAAC,EAAAC,GAMA,MAJA1R,MAAAwR,EAAAA,EACAxR,KAAAyR,EAAAA,EACAzR,KAAA0R,EAAAA,EAEA1R,MAIAiS,OAAA,WAEA,QAAAC,GAAAxR,EAAAyR,EAAAC,GAIA,MAFA,GAAAA,IAAAA,GAAA,GACAA,EAAA,IAAAA,GAAA,GACA,EAAA,EAAAA,EAAA1R,EAAA,GAAAyR,EAAAzR,GAAA0R,EACA,GAAAA,EAAAD,EACA,EAAA,EAAAC,EAAA1R,EAAA,GAAAyR,EAAAzR,IAAA,EAAA,EAAA0R,GACA1R,EAIA,MAAA,UAAA2R,EAAAC,EAAArM,GAOA,GAJAoM,EAAAzJ,EAAAY,KAAA+I,gBAAAF,EAAA,GACAC,EAAA1J,EAAAY,KAAAgJ,MAAAF,EAAA,EAAA,GACArM,EAAA2C,EAAAY,KAAAgJ,MAAAvM,EAAA,EAAA,GAEA,IAAAqM,EAEAtS,KAAAwR,EAAAxR,KAAAyR,EAAAzR,KAAA0R,EAAAzL,MAEI,CAEJ,GAAAvF,GAAA,IAAAuF,EAAAA,GAAA,EAAAqM,GAAArM,EAAAqM,EAAArM,EAAAqM,EACAH,EAAA,EAAAlM,EAAAvF,CAEAV,MAAAwR,EAAAU,EAAAC,EAAAzR,EAAA2R,EAAA,EAAA,GACArS,KAAAyR,EAAAS,EAAAC,EAAAzR,EAAA2R,GACArS,KAAA0R,EAAAQ,EAAAC,EAAAzR,EAAA2R,EAAA,EAAA,GAIA,MAAArS,UAMA6R,SAAA,SAAAY,GAEA,QAAAC,GAAAC,GAEAhP,SAAAgP,GAEAC,WAAAD,GAAA,GAEAzK,QAAAuI,KAAA,mCAAAgC,EAAA,qBAOA,GAAAjS,EAEA,IAAAA,EAAA,kCAAAqS,KAAAJ,GAAA,CAIA,GAAApB,GACApH,EAAAzJ,EAAA,GACAsS,EAAAtS,EAAA,EAEA,QAAAyJ,GAEA,IAAA,MACA,IAAA,OAEA,GAAAoH,EAAA,gEAAAwB,KAAAC,GASA,MANA9S,MAAAwR,EAAAhI,KAAAuJ,IAAA,IAAAC,SAAA3B,EAAA,GAAA,KAAA,IACArR,KAAAyR,EAAAjI,KAAAuJ,IAAA,IAAAC,SAAA3B,EAAA,GAAA,KAAA,IACArR,KAAA0R,EAAAlI,KAAAuJ,IAAA,IAAAC,SAAA3B,EAAA,GAAA,KAAA,IAEAqB,EAAArB,EAAA,IAEArR,IAIA,IAAAqR,EAAA,sEAAAwB,KAAAC,GASA,MANA9S,MAAAwR,EAAAhI,KAAAuJ,IAAA,IAAAC,SAAA3B,EAAA,GAAA,KAAA,IACArR,KAAAyR,EAAAjI,KAAAuJ,IAAA,IAAAC,SAAA3B,EAAA,GAAA,KAAA,IACArR,KAAA0R,EAAAlI,KAAAuJ,IAAA,IAAAC,SAAA3B,EAAA,GAAA,KAAA,IAEAqB,EAAArB,EAAA,IAEArR,IAIA,MAEA,KAAA,MACA,IAAA,OAEA,GAAAqR,EAAA,gFAAAwB,KAAAC,GAAA,CAGA,GAAAT,GAAAO,WAAAvB,EAAA,IAAA,IACAiB,EAAAU,SAAA3B,EAAA,GAAA,IAAA,IACApL,EAAA+M,SAAA3B,EAAA,GAAA,IAAA,GAIA,OAFAqB,GAAArB,EAAA,IAEArR,KAAAiS,OAAAI,EAAAC,EAAArM,SAQG,IAAAzF,EAAA,qBAAAqS,KAAAJ,GAAA,CAIH,GAAAX,GAAAtR,EAAA,GACAyS,EAAAnB,EAAAnP,MAEA,IAAA,IAAAsQ,EAOA,MAJAjT,MAAAwR,EAAAwB,SAAAlB,EAAAoB,OAAA,GAAApB,EAAAoB,OAAA,GAAA,IAAA,IACAlT,KAAAyR,EAAAuB,SAAAlB,EAAAoB,OAAA,GAAApB,EAAAoB,OAAA,GAAA,IAAA,IACAlT,KAAA0R,EAAAsB,SAAAlB,EAAAoB,OAAA,GAAApB,EAAAoB,OAAA,GAAA,IAAA,IAEAlT,IAEI,IAAA,IAAAiT,EAOJ,MAJAjT,MAAAwR,EAAAwB,SAAAlB,EAAAoB,OAAA,GAAApB,EAAAoB,OAAA,GAAA,IAAA,IACAlT,KAAAyR,EAAAuB,SAAAlB,EAAAoB,OAAA,GAAApB,EAAAoB,OAAA,GAAA,IAAA,IACAlT,KAAA0R,EAAAsB,SAAAlB,EAAAoB,OAAA,GAAApB,EAAAoB,OAAA,GAAA,IAAA,IAEAlT,KAMA,GAAAyS,GAAAA,EAAA9P,OAAA,EAAA,CAGA,GAAAmP,GAAAlJ,EAAAuK,cAAAV,EAEA9O,UAAAmO,EAGA9R,KAAA4R,OAAAE,GAKA5J,QAAAuI,KAAA,8BAAAgC,GAMA,MAAAzS,OAIAoT,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAwR,EAAAxR,KAAAyR,EAAAzR,KAAA0R,IAIAC,KAAA,SAAAN,GAMA,MAJArR,MAAAwR,EAAAH,EAAAG,EACAxR,KAAAyR,EAAAJ,EAAAI,EACAzR,KAAA0R,EAAAL,EAAAK,EAEA1R,MAIAqT,kBAAA,SAAAhC,EAAAiC,GAQA,MANA3P,UAAA2P,IAAAA,EAAA,GAEAtT,KAAAwR,EAAAhI,KAAAO,IAAAsH,EAAAG,EAAA8B,GACAtT,KAAAyR,EAAAjI,KAAAO,IAAAsH,EAAAI,EAAA6B,GACAtT,KAAA0R,EAAAlI,KAAAO,IAAAsH,EAAAK,EAAA4B,GAEAtT,MAIAuT,kBAAA,SAAAlC,EAAAiC,GAEA3P,SAAA2P,IAAAA,EAAA,EAEA,IAAAE,GAAAF,EAAA,EAAA,EAAAA,EAAA,CAMA,OAJAtT,MAAAwR,EAAAhI,KAAAO,IAAAsH,EAAAG,EAAAgC,GACAxT,KAAAyR,EAAAjI,KAAAO,IAAAsH,EAAAI,EAAA+B,GACAxT,KAAA0R,EAAAlI,KAAAO,IAAAsH,EAAAK,EAAA8B,GAEAxT,MAIAyT,qBAAA,WAEA,GAAAjC,GAAAxR,KAAAwR,EAAAC,EAAAzR,KAAAyR,EAAAC,EAAA1R,KAAA0R,CAMA,OAJA1R,MAAAwR,EAAAA,EAAAA,EACAxR,KAAAyR,EAAAA,EAAAA,EACAzR,KAAA0R,EAAAA,EAAAA,EAEA1R,MAIA0T,qBAAA,WAMA,MAJA1T,MAAAwR,EAAAhI,KAAAmK,KAAA3T,KAAAwR,GACAxR,KAAAyR,EAAAjI,KAAAmK,KAAA3T,KAAAyR,GACAzR,KAAA0R,EAAAlI,KAAAmK,KAAA3T,KAAA0R,GAEA1R,MAIA4T,OAAA,WAEA,MAAA,KAAA5T,KAAAwR,GAAA,GAAA,IAAAxR,KAAAyR,GAAA,EAAA,IAAAzR,KAAA0R,GAAA,GAIAmC,aAAA,WAEA,OAAA,SAAA7T,KAAA4T,SAAA1J,SAAA,KAAA4J,MAAA,KAIAC,OAAA,SAAAC,GAIA,GAOAC,GAAAC,EAPAC,EAAAH,IAA+B3B,EAAA,EAAAC,EAAA,EAAArM,EAAA,GAE/BuL,EAAAxR,KAAAwR,EAAAC,EAAAzR,KAAAyR,EAAAC,EAAA1R,KAAA0R,EAEAjI,EAAAD,KAAAC,IAAA+H,EAAAC,EAAAC,GACAqB,EAAAvJ,KAAAuJ,IAAAvB,EAAAC,EAAAC,GAGA0C,GAAArB,EAAAtJ,GAAA,CAEA,IAAAsJ,IAAAtJ,EAEAwK,EAAA,EACAC,EAAA,MAEG,CAEH,GAAArP,GAAA4E,EAAAsJ,CAIA,QAFAmB,EAAA,IAAAE,EAAAvP,GAAA4E,EAAAsJ,GAAAlO,GAAA,EAAA4E,EAAAsJ,GAEAtJ,GAEA,IAAA+H,GAAAyC,GAAAxC,EAAAC,GAAA7M,GAAA6M,EAAAD,EAAA,EAAA,EAAwD,MACxD,KAAAA,GAAAwC,GAAAvC,EAAAF,GAAA3M,EAAA,CAAwC,MACxC,KAAA6M,GAAAuC,GAAAzC,EAAAC,GAAA5M,EAAA,EAIAoP,GAAA,EAQA,MAJAE,GAAA9B,EAAA4B,EACAE,EAAA7B,EAAA4B,EACAC,EAAAlO,EAAAmO,EAEAD,GAIAE,SAAA,WAEA,MAAA,QAAA,IAAArU,KAAAwR,EAAA,GAAA,KAAA,IAAAxR,KAAAyR,EAAA,GAAA,KAAA,IAAAzR,KAAA0R,EAAA,GAAA,KAIA4C,UAAA,SAAAjC,EAAAC,EAAArM,GAEA,GAAAkO,GAAAnU,KAAA+T,QAMA,OAJAI,GAAA9B,GAAAA,EAAa8B,EAAA7B,GAAAA,EAAY6B,EAAAlO,GAAAA,EAEzBjG,KAAAiS,OAAAkC,EAAA9B,EAAA8B,EAAA7B,EAAA6B,EAAAlO,GAEAjG,MAIAuU,IAAA,SAAAlD,GAMA,MAJArR,MAAAwR,GAAAH,EAAAG,EACAxR,KAAAyR,GAAAJ,EAAAI,EACAzR,KAAA0R,GAAAL,EAAAK,EAEA1R,MAIAwU,UAAA,SAAAC,EAAAC,GAMA,MAJA1U,MAAAwR,EAAAiD,EAAAjD,EAAAkD,EAAAlD,EACAxR,KAAAyR,EAAAgD,EAAAhD,EAAAiD,EAAAjD,EACAzR,KAAA0R,EAAA+C,EAAA/C,EAAAgD,EAAAhD,EAEA1R,MAIA2U,UAAA,SAAArC,GAMA,MAJAtS,MAAAwR,GAAAc,EACAtS,KAAAyR,GAAAa,EACAtS,KAAA0R,GAAAY,EAEAtS,MAIA4U,SAAA,SAAAvD,GAMA,MAJArR,MAAAwR,GAAAH,EAAAG,EACAxR,KAAAyR,GAAAJ,EAAAI,EACAzR,KAAA0R,GAAAL,EAAAK,EAEA1R,MAIA6U,eAAA,SAAAvC,GAMA,MAJAtS,MAAAwR,GAAAc,EACAtS,KAAAyR,GAAAa,EACAtS,KAAA0R,GAAAY,EAEAtS,MAIA8U,KAAA,SAAAzD,EAAA0D,GAMA,MAJA/U,MAAAwR,IAAAH,EAAAG,EAAAxR,KAAAwR,GAAAuD,EACA/U,KAAAyR,IAAAJ,EAAAI,EAAAzR,KAAAyR,GAAAsD,EACA/U,KAAA0R,IAAAL,EAAAK,EAAA1R,KAAA0R,GAAAqD,EAEA/U,MAIAgV,OAAA,SAAAvU,GAEA,MAAAA,GAAA+Q,IAAAxR,KAAAwR,GAAA/Q,EAAAgR,IAAAzR,KAAAyR,GAAAhR,EAAAiR,IAAA1R,KAAA0R,GAIAJ,UAAA,SAAA2D,EAAAC,GAQA,MANAvR,UAAAuR,IAAAA,EAAA,GAEAlV,KAAAwR,EAAAyD,EAAAC,GACAlV,KAAAyR,EAAAwD,EAAAC,EAAA,GACAlV,KAAA0R,EAAAuD,EAAAC,EAAA,GAEAlV,MAIAmV,QAAA,SAAAF,EAAAC,GASA,MAPAvR,UAAAsR,IAAAA,MACAtR,SAAAuR,IAAAA,EAAA,GAEAD,EAAAC,GAAAlV,KAAAwR,EACAyD,EAAAC,EAAA,GAAAlV,KAAAyR,EACAwD,EAAAC,EAAA,GAAAlV,KAAA0R,EAEAuD,IAMArM,EAAAuK,eAAuBiC,UAAA,SAAAC,aAAA,SAAAC,KAAA,MAAAC,WAAA,QAAAC,MAAA,SACvBC,MAAA,SAAAC,OAAA,SAAAC,MAAA,EAAAC,eAAA,SAAAC,KAAA,IAAAC,WAAA,QACAC,MAAA,SAAAC,UAAA,SAAAC,UAAA,QAAAC,WAAA,QAAAC,UAAA,SAAAC,MAAA,SACAC,eAAA,QAAAC,SAAA,SAAAC,QAAA,SAAAC,KAAA,MAAAC,SAAA,IAAAC,SAAA,MACAC,cAAA,SAAAC,SAAA,SAAAC,UAAA,MAAAC,SAAA,SAAAC,UAAA,SAAAC,YAAA,QACAC,eAAA,QAAAC,WAAA,SAAAC,WAAA,SAAAC,QAAA,QAAAC,WAAA,SAAAC,aAAA,QACAC,cAAA,QAAAC,cAAA,QAAAC,cAAA,QAAAC,cAAA,MAAAC,WAAA,QACAC,SAAA,SAAAC,YAAA,MAAAC,QAAA,QAAAC,QAAA,QAAAC,WAAA,QAAAC,UAAA,SACAC,YAAA,SAAAC,YAAA,QAAAC,QAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,KAAA,SACAC,UAAA,SAAAC,KAAA,QAAAC,MAAA,MAAAC,YAAA,SAAAC,KAAA,QAAAC,SAAA,SAAAC,QAAA,SACAC,UAAA,SAAAC,OAAA,QAAAC,MAAA,SAAAC,MAAA,SAAAC,SAAA,SAAAC,cAAA,SAAAC,UAAA,QACAC,aAAA,SAAAC,UAAA,SAAAC,WAAA,SAAAC,UAAA,SAAAC,qBAAA,SAAAC,UAAA,SACAC,WAAA,QAAAC,UAAA,SAAAC,UAAA,SAAAC,YAAA,SAAAC,cAAA,QAAAC,aAAA,QACAC,eAAA,QAAAC,eAAA,QAAAC,eAAA,SAAAC,YAAA,SAAAC,KAAA,MAAAC,UAAA,QACAC,MAAA,SAAAC,QAAA,SAAAC,OAAA,QAAAC,iBAAA,QAAAC,WAAA,IAAAC,aAAA,SACAC,aAAA,QAAAC,eAAA,QAAAC,gBAAA,QAAAC,kBAAA,MAAAC,gBAAA,QACAC,gBAAA,SAAAC,aAAA,QAAAC,UAAA,SAAAC,UAAA,SAAAC,SAAA,SAAAC,YAAA,SACAC,KAAA,IAAAC,QAAA,SAAAC,MAAA,QAAAC,UAAA,QAAAC,OAAA,SAAAC,UAAA,SAAAC,OAAA,SACAC,cAAA,SAAAC,UAAA,SAAAC,cAAA,SAAAC,cAAA,SAAAC,WAAA,SAAAC,UAAA,SACAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,WAAA,SAAAC,OAAA,QAAAC,IAAA,SAAAC,UAAA,SACAC,UAAA,QAAAC,YAAA,QAAAC,OAAA,SAAAC,WAAA,SAAAC,SAAA,QAAAC,SAAA,SACAC,OAAA,SAAAC,OAAA,SAAAC,QAAA,QAAAC,UAAA,QAAAC,UAAA,QAAAC,UAAA,QAAAC,KAAA,SACAC,YAAA,MAAAC,UAAA,QAAAC,IAAA,SAAAC,KAAA,MAAAC,QAAA,SAAAC,OAAA,SAAAC,UAAA,QACAC,OAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,WAAA,SAAAC,OAAA,SAAAC,YAAA,UAWA1V,EAAA2V,WAAA,SAAAtV,EAAAuV,EAAAC,EAAAC,GAEA1e,KAAAiD,GAAAgG,GAAA,EACAjJ,KAAA2e,GAAAH,GAAA,EACAxe,KAAA4e,GAAAH,GAAA,EACAze,KAAA6e,GAAAlb,SAAA+a,EAAAA,EAAA,GAIA9V,EAAA2V,WAAAzc,WAEAE,YAAA4G,EAAA2V,WAEAtV,GAAAA,KAEA,MAAAjJ,MAAAiD,IAIAgG,GAAAA,GAAAhI,GAEAjB,KAAAiD,GAAAhC,EACAjB,KAAA8e,oBAIAN,GAAAA,KAEA,MAAAxe,MAAA2e,IAIAH,GAAAA,GAAAvd,GAEAjB,KAAA2e,GAAA1d,EACAjB,KAAA8e,oBAIAL,GAAAA,KAEA,MAAAze,MAAA4e,IAIAH,GAAAA,GAAAxd,GAEAjB,KAAA4e,GAAA3d,EACAjB,KAAA8e,oBAIAJ,GAAAA,KAEA,MAAA1e,MAAA6e,IAIAH,GAAAA,GAAAzd,GAEAjB,KAAA6e,GAAA5d,EACAjB,KAAA8e,oBAIAvN,IAAA,SAAAtI,EAAAuV,EAAAC,EAAAC,GASA,MAPA1e,MAAAiD,GAAAgG,EACAjJ,KAAA2e,GAAAH,EACAxe,KAAA4e,GAAAH,EACAze,KAAA6e,GAAAH,EAEA1e,KAAA8e,mBAEA9e,MAIAoT,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAiD,GAAAjD,KAAA2e,GAAA3e,KAAA4e,GAAA5e,KAAA6e,KAIAlN,KAAA,SAAAoN,GASA,MAPA/e,MAAAiD,GAAA8b,EAAA9V,EACAjJ,KAAA2e,GAAAI,EAAAP,EACAxe,KAAA4e,GAAAG,EAAAN,EACAze,KAAA6e,GAAAE,EAAAL,EAEA1e,KAAA8e,mBAEA9e,MAIAgf,aAAA,SAAAC,EAAAC,GAEA,GAAAD,YAAArW,GAAAuW,QAAA,EAEA,KAAA,IAAAC,OAAA,kGAQA,IAAAC,GAAA7V,KAAA8V,IAAAL,EAAAhc,GAAA,GACAsc,EAAA/V,KAAA8V,IAAAL,EAAAN,GAAA,GACAa,EAAAhW,KAAA8V,IAAAL,EAAAL,GAAA,GACAa,EAAAjW,KAAAkW,IAAAT,EAAAhc,GAAA,GACA0c,EAAAnW,KAAAkW,IAAAT,EAAAN,GAAA,GACAiB,EAAApW,KAAAkW,IAAAT,EAAAL,GAAA,GAEAiB,EAAAZ,EAAAY,KAgDA,OA9CA,QAAAA,GAEA7f,KAAAiD,GAAAwc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA5f,KAAA2e,GAAAU,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA5f,KAAA4e,GAAAS,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACAxf,KAAA6e,GAAAQ,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GAEG,QAAAC,GAEH7f,KAAAiD,GAAAwc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA5f,KAAA2e,GAAAU,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA5f,KAAA4e,GAAAS,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACAxf,KAAA6e,GAAAQ,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GAEG,QAAAC,GAEH7f,KAAAiD,GAAAwc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA5f,KAAA2e,GAAAU,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA5f,KAAA4e,GAAAS,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACAxf,KAAA6e,GAAAQ,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GAEG,QAAAC,GAEH7f,KAAAiD,GAAAwc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA5f,KAAA2e,GAAAU,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA5f,KAAA4e,GAAAS,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACAxf,KAAA6e,GAAAQ,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GAEG,QAAAC,GAEH7f,KAAAiD,GAAAwc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA5f,KAAA2e,GAAAU,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA5f,KAAA4e,GAAAS,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACAxf,KAAA6e,GAAAQ,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GAEG,QAAAC,IAEH7f,KAAAiD,GAAAwc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA5f,KAAA2e,GAAAU,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA5f,KAAA4e,GAAAS,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACAxf,KAAA6e,GAAAQ,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GAIAV,KAAA,GAAAlf,KAAA8e,mBAEA9e,MAIA8f,iBAAA,SAAAC,EAAAC,GAMA,GAAAC,GAAAD,EAAA,EAAA1N,EAAA9I,KAAAkW,IAAAO,EASA,OAPAjgB,MAAAiD,GAAA8c,EAAA9W,EAAAqJ,EACAtS,KAAA2e,GAAAoB,EAAAvB,EAAAlM,EACAtS,KAAA4e,GAAAmB,EAAAtB,EAAAnM,EACAtS,KAAA6e,GAAArV,KAAA8V,IAAAW,GAEAjgB,KAAA8e,mBAEA9e,MAIAkgB,sBAAA,SAAA1f,GAMA,GAOA8R,GAPA6N,EAAA3f,EAAA4f,SAEAC,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,IAEAW,EAAAT,EAAAI,EAAAI,CA2CA,OAxCAC,GAAA,GAEAxO,EAAA,GAAA9I,KAAAmK,KAAAmN,EAAA,GAEA9gB,KAAA6e,GAAA,IAAAvM,EACAtS,KAAAiD,IAAA2d,EAAAF,GAAApO,EACAtS,KAAA2e,IAAA4B,EAAAI,GAAArO,EACAtS,KAAA4e,IAAA4B,EAAAF,GAAAhO,GAEG+N,EAAAI,GAAAJ,EAAAQ,GAEHvO,EAAA,EAAA9I,KAAAmK,KAAA,EAAA0M,EAAAI,EAAAI,GAEA7gB,KAAA6e,IAAA+B,EAAAF,GAAApO,EACAtS,KAAAiD,GAAA,IAAAqP,EACAtS,KAAA2e,IAAA2B,EAAAE,GAAAlO,EACAtS,KAAA4e,IAAA2B,EAAAI,GAAArO,GAEGmO,EAAAI,GAEHvO,EAAA,EAAA9I,KAAAmK,KAAA,EAAA8M,EAAAJ,EAAAQ,GAEA7gB,KAAA6e,IAAA0B,EAAAI,GAAArO,EACAtS,KAAAiD,IAAAqd,EAAAE,GAAAlO,EACAtS,KAAA2e,GAAA,IAAArM,EACAtS,KAAA4e,IAAA8B,EAAAE,GAAAtO,IAIAA,EAAA,EAAA9I,KAAAmK,KAAA,EAAAkN,EAAAR,EAAAI,GAEAzgB,KAAA6e,IAAA2B,EAAAF,GAAAhO,EACAtS,KAAAiD,IAAAsd,EAAAI,GAAArO,EACAtS,KAAA2e,IAAA+B,EAAAE,GAAAtO,EACAtS,KAAA4e,GAAA,IAAAtM,GAIAtS,KAAA8e,mBAEA9e,MAIA+gB,mBAAA,WAMA,GAAAC,GAAAxP,EAEAyP,EAAA,IAEA,OAAA,UAAAC,EAAAC,GAiCA,MA/BAxd,UAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,SAEA5P,EAAA0P,EAAAG,IAAAF,GAAA,EAEAF,EAAAzP,GAEAA,EAAA,EAEAhI,KAAA8X,IAAAJ,EAAAjY,GAAAO,KAAA8X,IAAAJ,EAAAzC,GAEAuC,EAAAzP,KAAA2P,EAAA1C,EAAA0C,EAAAjY,EAAA,GAIA+X,EAAAzP,IAAA,GAAA2P,EAAAzC,EAAAyC,EAAA1C,IAMAwC,EAAAO,aAAAL,EAAAC,GAIAnhB,KAAAiD,GAAA+d,EAAA/X,EACAjJ,KAAA2e,GAAAqC,EAAAxC,EACAxe,KAAA4e,GAAAoC,EAAAvC,EACAze,KAAA6e,GAAArN,EAEAxR,KAAAwhB,YAEAxhB,SAMAyhB,QAAA,WAIA,MAFAzhB,MAAA0hB,YAAAF,YAEAxhB,MAIA0hB,UAAA,WAQA,MANA1hB,MAAAiD,IAAA,GACAjD,KAAA2e,IAAA,GACA3e,KAAA4e,IAAA,GAEA5e,KAAA8e,mBAEA9e,MAIAqhB,IAAA,SAAAM,GAEA,MAAA3hB,MAAAiD,GAAA0e,EAAA1e,GAAAjD,KAAA2e,GAAAgD,EAAAhD,GAAA3e,KAAA4e,GAAA+C,EAAA/C,GAAA5e,KAAA6e,GAAA8C,EAAA9C,IAIA+C,SAAA,WAEA,MAAA5hB,MAAAiD,GAAAjD,KAAAiD,GAAAjD,KAAA2e,GAAA3e,KAAA2e,GAAA3e,KAAA4e,GAAA5e,KAAA4e,GAAA5e,KAAA6e,GAAA7e,KAAA6e,IAIAlc,OAAA,WAEA,MAAA6G,MAAAmK,KAAA3T,KAAAiD,GAAAjD,KAAAiD,GAAAjD,KAAA2e,GAAA3e,KAAA2e,GAAA3e,KAAA4e,GAAA5e,KAAA4e,GAAA5e,KAAA6e,GAAA7e,KAAA6e,KAIA2C,UAAA,WAEA,GAAAvb,GAAAjG,KAAA2C,QAsBA,OApBA,KAAAsD,GAEAjG,KAAAiD,GAAA,EACAjD,KAAA2e,GAAA,EACA3e,KAAA4e,GAAA,EACA5e,KAAA6e,GAAA,IAIA5Y,EAAA,EAAAA,EAEAjG,KAAAiD,GAAAjD,KAAAiD,GAAAgD,EACAjG,KAAA2e,GAAA3e,KAAA2e,GAAA1Y,EACAjG,KAAA4e,GAAA5e,KAAA4e,GAAA3Y,EACAjG,KAAA6e,GAAA7e,KAAA6e,GAAA5Y,GAIAjG,KAAA8e,mBAEA9e,MAIA4U,SAAA,SAAAzC,EAAAzR,GAEA,MAAAiD,UAAAjD,GAEAwH,QAAAuI,KAAA,0GACAzQ,KAAA6hB,oBAAA1P,EAAAzR,IAIAV,KAAA6hB,oBAAA7hB,KAAAmS,IAIA0P,oBAAA,SAAAC,EAAApQ,GAIA,GAAAqQ,GAAAD,EAAA7e,GAAA+e,EAAAF,EAAAnD,GAAAsD,EAAAH,EAAAlD,GAAAsD,EAAAJ,EAAAjD,GACAsD,EAAAzQ,EAAAzO,GAAAmf,EAAA1Q,EAAAiN,GAAA0D,EAAA3Q,EAAAkN,GAAA0D,EAAA5Q,EAAAmN,EASA,OAPA7e,MAAAiD,GAAA8e,EAAAO,EAAAJ,EAAAC,EAAAH,EAAAK,EAAAJ,EAAAG,EACApiB,KAAA2e,GAAAqD,EAAAM,EAAAJ,EAAAE,EAAAH,EAAAE,EAAAJ,EAAAM,EACAriB,KAAA4e,GAAAqD,EAAAK,EAAAJ,EAAAG,EAAAN,EAAAK,EAAAJ,EAAAG,EACAniB,KAAA6e,GAAAqD,EAAAI,EAAAP,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAEAriB,KAAA8e,mBAEA9e,MAIAuiB,gBAAA,SAAA/R,GAGA,MADAtI,SAAAuI,KAAA,mHACAD,EAAAgS,gBAAAxiB,OAIAyiB,MAAA,SAAAC,EAAAtQ,GAEA,GAAA,IAAAA,EAAA,MAAApS,KACA,IAAA,IAAAoS,EAAA,MAAApS,MAAA2R,KAAA+Q,EAEA,IAAAzZ,GAAAjJ,KAAAiD,GAAAub,EAAAxe,KAAA2e,GAAAF,EAAAze,KAAA4e,GAAAF,EAAA1e,KAAA6e,GAIA8D,EAAAjE,EAAAgE,EAAA7D,GAAA5V,EAAAyZ,EAAAzf,GAAAub,EAAAkE,EAAA/D,GAAAF,EAAAiE,EAAA9D,EAiBA,IAfA,EAAA+D,GAEA3iB,KAAA6e,IAAA6D,EAAA7D,GACA7e,KAAAiD,IAAAyf,EAAAzf,GACAjD,KAAA2e,IAAA+D,EAAA/D,GACA3e,KAAA4e,IAAA8D,EAAA9D,GAEA+D,GAAAA,GAIA3iB,KAAA2R,KAAA+Q,GAIAC,GAAA,EAOA,MALA3iB,MAAA6e,GAAAH,EACA1e,KAAAiD,GAAAgG,EACAjJ,KAAA2e,GAAAH,EACAxe,KAAA4e,GAAAH,EAEAze,IAIA,IAAA4iB,GAAApZ,KAAAqZ,KAAAF,GACAG,EAAAtZ,KAAAmK,KAAA,EAAAgP,EAAAA,EAEA,IAAAnZ,KAAA8X,IAAAwB,GAAA,KAOA,MALA9iB,MAAA6e,GAAA,IAAAH,EAAA1e,KAAA6e,IACA7e,KAAAiD,GAAA,IAAAgG,EAAAjJ,KAAAiD,IACAjD,KAAA2e,GAAA,IAAAH,EAAAxe,KAAA2e,IACA3e,KAAA4e,GAAA,IAAAH,EAAAze,KAAA4e,IAEA5e,IAIA,IAAA+iB,GAAAvZ,KAAAkW,KAAA,EAAAtN,GAAAwQ,GAAAE,EACAE,EAAAxZ,KAAAkW,IAAAtN,EAAAwQ,GAAAE,CASA,OAPA9iB,MAAA6e,GAAAH,EAAAqE,EAAA/iB,KAAA6e,GAAAmE,EACAhjB,KAAAiD,GAAAgG,EAAA8Z,EAAA/iB,KAAAiD,GAAA+f,EACAhjB,KAAA2e,GAAAH,EAAAuE,EAAA/iB,KAAA2e,GAAAqE,EACAhjB,KAAA4e,GAAAH,EAAAsE,EAAA/iB,KAAA4e,GAAAoE,EAEAhjB,KAAA8e,mBAEA9e,MAIAgV,OAAA,SAAA+J,GAEA,MAAAA,GAAA9b,KAAAjD,KAAAiD,IAAA8b,EAAAJ,KAAA3e,KAAA2e,IAAAI,EAAAH,KAAA5e,KAAA4e,IAAAG,EAAAF,KAAA7e,KAAA6e,IAIAvN,UAAA,SAAA2D,EAAAC,GAWA,MATAvR,UAAAuR,IAAAA,EAAA,GAEAlV,KAAAiD,GAAAgS,EAAAC,GACAlV,KAAA2e,GAAA1J,EAAAC,EAAA,GACAlV,KAAA4e,GAAA3J,EAAAC,EAAA,GACAlV,KAAA6e,GAAA5J,EAAAC,EAAA,GAEAlV,KAAA8e,mBAEA9e,MAIAmV,QAAA,SAAAF,EAAAC,GAUA,MARAvR,UAAAsR,IAAAA,MACAtR,SAAAuR,IAAAA,EAAA,GAEAD,EAAAC,GAAAlV,KAAAiD,GACAgS,EAAAC,EAAA,GAAAlV,KAAA2e,GACA1J,EAAAC,EAAA,GAAAlV,KAAA4e,GACA3J,EAAAC,EAAA,GAAAlV,KAAA6e,GAEA5J,GAIAgO,SAAA,SAAA9Z,GAIA,MAFAnJ,MAAA8e,iBAAA3V,EAEAnJ,MAIA8e,iBAAA,cAIAlW,EAAA2V,WAAAkE,MAAA,SAAAS,EAAAR,EAAAS,EAAA/Q,GAEA,MAAA+Q,GAAAxR,KAAAuR,GAAAT,MAAAC,EAAAtQ,IAaAxJ,EAAAwa,QAAA,SAAAna,EAAAuV,GAEAxe,KAAAiJ,EAAAA,GAAA,EACAjJ,KAAAwe,EAAAA,GAAA,GAIA5V,EAAAwa,QAAAthB,WAEAE,YAAA4G,EAAAwa,QAEAC,GAAAA,SAAc,MAAArjB,MAAAiJ,GACdoa,GAAAA,OAAApiB,GAAqBjB,KAAAiJ,EAAAhI,GAErBqiB,GAAAA,UAAe,MAAAtjB,MAAAwe,GACf8E,GAAAA,QAAAriB,GAAsBjB,KAAAwe,EAAAvd,GAItBsQ,IAAA,SAAAtI,EAAAuV,GAKA,MAHAxe,MAAAiJ,EAAAA,EACAjJ,KAAAwe,EAAAA,EAEAxe,MAIAujB,KAAA,SAAAta,GAIA,MAFAjJ,MAAAiJ,EAAAA,EAEAjJ,MAIAwjB,KAAA,SAAAhF,GAIA,MAFAxe,MAAAwe,EAAAA,EAEAxe,MAIAyjB,aAAA,SAAAC,EAAAziB,GAEA,OAAAyiB,GAEA,IAAA,GAAA1jB,KAAAiJ,EAAAhI,CAA0B,MAC1B,KAAA,GAAAjB,KAAAwe,EAAAvd,CAA0B,MAC1B,SAAA,KAAA,IAAAme,OAAA,0BAAAsE,KAMAC,aAAA,SAAAD,GAEA,OAAAA,GAEA,IAAA,GAAA,MAAA1jB,MAAAiJ,CACA,KAAA,GAAA,MAAAjJ,MAAAwe,CACA,SAAA,KAAA,IAAAY,OAAA,0BAAAsE,KAMAtQ,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAiJ,EAAAjJ,KAAAwe,IAIA7M,KAAA,SAAAgQ,GAKA,MAHA3hB,MAAAiJ,EAAA0Y,EAAA1Y,EACAjJ,KAAAwe,EAAAmD,EAAAnD,EAEAxe,MAIAuU,IAAA,SAAAoN,EAAAjD,GAEA,MAAA/a,UAAA+a,GAEAxW,QAAAuI,KAAA,yFACAzQ,KAAA4jB,WAAAjC,EAAAjD,KAIA1e,KAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EAEAxe,OAIA2U,UAAA,SAAArC,GAKA,MAHAtS,MAAAiJ,GAAAqJ,EACAtS,KAAAwe,GAAAlM,EAEAtS,MAIA4jB,WAAA,SAAA9B,EAAApQ,GAKA,MAHA1R,MAAAiJ,EAAA6Y,EAAA7Y,EAAAyI,EAAAzI,EACAjJ,KAAAwe,EAAAsD,EAAAtD,EAAA9M,EAAA8M,EAEAxe,MAIA6jB,gBAAA,SAAAlC,EAAArP,GAKA,MAHAtS,MAAAiJ,GAAA0Y,EAAA1Y,EAAAqJ,EACAtS,KAAAwe,GAAAmD,EAAAnD,EAAAlM,EAEAtS,MAIA8jB,IAAA,SAAAnC,EAAAjD,GAEA,MAAA/a,UAAA+a,GAEAxW,QAAAuI,KAAA,yFACAzQ,KAAA+jB,WAAApC,EAAAjD,KAIA1e,KAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EAEAxe,OAIAgkB,UAAA,SAAA1R,GAKA,MAHAtS,MAAAiJ,GAAAqJ,EACAtS,KAAAwe,GAAAlM,EAEAtS,MAIA+jB,WAAA,SAAAjC,EAAApQ,GAKA,MAHA1R,MAAAiJ,EAAA6Y,EAAA7Y,EAAAyI,EAAAzI,EACAjJ,KAAAwe,EAAAsD,EAAAtD,EAAA9M,EAAA8M,EAEAxe,MAIA4U,SAAA,SAAA+M,GAKA,MAHA3hB,MAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EAEAxe,MAIA6U,eAAA,SAAAoP,GAUA,MARAC,UAAAD,IACAjkB,KAAAiJ,GAAAgb,EACAjkB,KAAAwe,GAAAyF,IAEAjkB,KAAAiJ,EAAA,EACAjJ,KAAAwe,EAAA,GAGAxe,MAIAmkB,OAAA,SAAAxC,GAKA,MAHA3hB,MAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EAEAxe,MAIAokB,aAAA,SAAAH,GAEA,MAAAjkB,MAAA6U,eAAA,EAAAoP,IAIAlR,IAAA,SAAA4O,GAKA,MAHA3hB,MAAAiJ,EAAAO,KAAAuJ,IAAA/S,KAAAiJ,EAAA0Y,EAAA1Y,GACAjJ,KAAAwe,EAAAhV,KAAAuJ,IAAA/S,KAAAwe,EAAAmD,EAAAnD,GAEAxe,MAIAyJ,IAAA,SAAAkY,GAKA,MAHA3hB,MAAAiJ,EAAAO,KAAAC,IAAAzJ,KAAAiJ,EAAA0Y,EAAA1Y,GACAjJ,KAAAwe,EAAAhV,KAAAC,IAAAzJ,KAAAwe,EAAAmD,EAAAnD,GAEAxe,MAIAwS,MAAA,SAAAO,EAAAtJ,GAOA,MAHAzJ,MAAAiJ,EAAAO,KAAAC,IAAAsJ,EAAA9J,EAAAO,KAAAuJ,IAAAtJ,EAAAR,EAAAjJ,KAAAiJ,IACAjJ,KAAAwe,EAAAhV,KAAAC,IAAAsJ,EAAAyL,EAAAhV,KAAAuJ,IAAAtJ,EAAA+U,EAAAxe,KAAAwe,IAEAxe,MAIAqkB,YAAA,WAEA,GAAAtR,GAAAtJ,CAEA,OAAA,UAAA6a,EAAAC,GAYA,MAVA5gB,UAAAoP,IAEAA,EAAA,GAAAnK,GAAAwa,QACA3Z,EAAA,GAAAb,GAAAwa,SAIArQ,EAAAxB,IAAA+S,EAAAA,GACA7a,EAAA8H,IAAAgT,EAAAA,GAEAvkB,KAAAwS,MAAAO,EAAAtJ,OAMA+a,YAAA,SAAAzR,EAAAtJ,GAEA,GAAA9G,GAAA3C,KAAA2C,QAIA,OAFA3C,MAAA6U,eAAArL,KAAAC,IAAAsJ,EAAAvJ,KAAAuJ,IAAAtJ,EAAA9G,IAAAA,GAEA3C,MAIA+R,MAAA,WAKA,MAHA/R,MAAAiJ,EAAAO,KAAAuI,MAAA/R,KAAAiJ,GACAjJ,KAAAwe,EAAAhV,KAAAuI,MAAA/R,KAAAwe,GAEAxe,MAIAykB,KAAA,WAKA,MAHAzkB,MAAAiJ,EAAAO,KAAAib,KAAAzkB,KAAAiJ,GACAjJ,KAAAwe,EAAAhV,KAAAib,KAAAzkB,KAAAwe,GAEAxe,MAIA0kB,MAAA,WAKA,MAHA1kB,MAAAiJ,EAAAO,KAAAkb,MAAA1kB,KAAAiJ,GACAjJ,KAAAwe,EAAAhV,KAAAkb,MAAA1kB,KAAAwe,GAEAxe,MAIA2kB,YAAA,WAKA,MAHA3kB,MAAAiJ,EAAAjJ,KAAAiJ,EAAA,EAAAO,KAAAib,KAAAzkB,KAAAiJ,GAAAO,KAAAuI,MAAA/R,KAAAiJ,GACAjJ,KAAAwe,EAAAxe,KAAAwe,EAAA,EAAAhV,KAAAib,KAAAzkB,KAAAwe,GAAAhV,KAAAuI,MAAA/R,KAAAwe,GAEAxe,MAIA4kB,OAAA,WAKA,MAHA5kB,MAAAiJ,GAAAjJ,KAAAiJ,EACAjJ,KAAAwe,GAAAxe,KAAAwe,EAEAxe,MAIAqhB,IAAA,SAAAM,GAEA,MAAA3hB,MAAAiJ,EAAA0Y,EAAA1Y,EAAAjJ,KAAAwe,EAAAmD,EAAAnD,GAIAoD,SAAA,WAEA,MAAA5hB,MAAAiJ,EAAAjJ,KAAAiJ,EAAAjJ,KAAAwe,EAAAxe,KAAAwe,GAIA7b,OAAA,WAEA,MAAA6G,MAAAmK,KAAA3T,KAAAiJ,EAAAjJ,KAAAiJ,EAAAjJ,KAAAwe,EAAAxe,KAAAwe,IAIAqG,gBAAA,WAEA,MAAArb,MAAA8X,IAAAthB,KAAAiJ,GAAAO,KAAA8X,IAAAthB,KAAAwe,IAIAgD,UAAA,WAEA,MAAAxhB,MAAAokB,aAAApkB,KAAA2C,WAIAmiB,WAAA,SAAAnD,GAEA,MAAAnY,MAAAmK,KAAA3T,KAAA+kB,kBAAApD,KAIAoD,kBAAA,SAAApD,GAEA,GAAAqD,GAAAhlB,KAAAiJ,EAAA0Y,EAAA1Y,EAAAgc,EAAAjlB,KAAAwe,EAAAmD,EAAAnD,CACA,OAAAwG,GAAAA,EAAAC,EAAAA,GAIAC,UAAA,SAAAviB,GAEA,MAAA3C,MAAA6U,eAAAlS,EAAA3C,KAAA2C,WAIAmS,KAAA,SAAA6M,EAAA5M,GAKA,MAHA/U,MAAAiJ,IAAA0Y,EAAA1Y,EAAAjJ,KAAAiJ,GAAA8L,EACA/U,KAAAwe,IAAAmD,EAAAnD,EAAAxe,KAAAwe,GAAAzJ,EAEA/U,MAIAmlB,YAAA,SAAAnE,EAAAoE,EAAArQ,GAIA,MAFA/U,MAAA+jB,WAAAqB,EAAApE,GAAAnM,eAAAE,GAAAR,IAAAyM,GAEAhhB,MAIAgV,OAAA,SAAA2M,GAEA,MAAAA,GAAA1Y,IAAAjJ,KAAAiJ,GAAA0Y,EAAAnD,IAAAxe,KAAAwe,GAIAlN,UAAA,SAAA2D,EAAAC,GAOA,MALAvR,UAAAuR,IAAAA,EAAA,GAEAlV,KAAAiJ,EAAAgM,EAAAC,GACAlV,KAAAwe,EAAAvJ,EAAAC,EAAA,GAEAlV,MAIAmV,QAAA,SAAAF,EAAAC,GAQA,MANAvR,UAAAsR,IAAAA,MACAtR,SAAAuR,IAAAA,EAAA,GAEAD,EAAAC,GAAAlV,KAAAiJ,EACAgM,EAAAC,EAAA,GAAAlV,KAAAwe,EAEAvJ,GAIAoQ,cAAA,SAAAC,EAAA5B,EAAAxO,GASA,MAPAvR,UAAAuR,IAAAA,EAAA,GAEAwO,EAAAA,EAAA4B,EAAAC,SAAArQ,EAEAlV,KAAAiJ,EAAAqc,EAAArQ,MAAAyO,GACA1jB,KAAAwe,EAAA8G,EAAArQ,MAAAyO,EAAA,GAEA1jB,MAIAwlB,aAAA,SAAAC,EAAAzF,GAEA,GAAAvf,GAAA+I,KAAA8V,IAAAU,GAAA1N,EAAA9I,KAAAkW,IAAAM,GAEA/W,EAAAjJ,KAAAiJ,EAAAwc,EAAAxc,EACAuV,EAAAxe,KAAAwe,EAAAiH,EAAAjH,CAKA,OAHAxe,MAAAiJ,EAAAA,EAAAxI,EAAA+d,EAAAlM,EAAAmT,EAAAxc,EACAjJ,KAAAwe,EAAAvV,EAAAqJ,EAAAkM,EAAA/d,EAAAglB,EAAAjH,EAEAxe,OAiBA4I,EAAAwY,QAAA,SAAAnY,EAAAuV,EAAAC,GAEAze,KAAAiJ,EAAAA,GAAA,EACAjJ,KAAAwe,EAAAA,GAAA,EACAxe,KAAAye,EAAAA,GAAA,GAIA7V,EAAAwY,QAAAtf,WAEAE,YAAA4G,EAAAwY,QAEA7P,IAAA,SAAAtI,EAAAuV,EAAAC,GAMA,MAJAze,MAAAiJ,EAAAA,EACAjJ,KAAAwe,EAAAA,EACAxe,KAAAye,EAAAA,EAEAze,MAIAujB,KAAA,SAAAta,GAIA,MAFAjJ,MAAAiJ,EAAAA,EAEAjJ,MAIAwjB,KAAA,SAAAhF,GAIA,MAFAxe,MAAAwe,EAAAA,EAEAxe,MAIA0lB,KAAA,SAAAjH,GAIA,MAFAze,MAAAye,EAAAA,EAEAze,MAIAyjB,aAAA,SAAAC,EAAAziB,GAEA,OAAAyiB,GAEA,IAAA,GAAA1jB,KAAAiJ,EAAAhI,CAA0B,MAC1B,KAAA,GAAAjB,KAAAwe,EAAAvd,CAA0B,MAC1B,KAAA,GAAAjB,KAAAye,EAAAxd,CAA0B,MAC1B,SAAA,KAAA,IAAAme,OAAA,0BAAAsE,KAMAC,aAAA,SAAAD,GAEA,OAAAA,GAEA,IAAA,GAAA,MAAA1jB,MAAAiJ,CACA,KAAA,GAAA,MAAAjJ,MAAAwe,CACA,KAAA,GAAA,MAAAxe,MAAAye,CACA,SAAA,KAAA,IAAAW,OAAA,0BAAAsE,KAMAtQ,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAiJ,EAAAjJ,KAAAwe,EAAAxe,KAAAye,IAIA9M,KAAA,SAAAgQ,GAMA,MAJA3hB,MAAAiJ,EAAA0Y,EAAA1Y,EACAjJ,KAAAwe,EAAAmD,EAAAnD,EACAxe,KAAAye,EAAAkD,EAAAlD,EAEAze,MAIAuU,IAAA,SAAAoN,EAAAjD,GAEA,MAAA/a,UAAA+a,GAEAxW,QAAAuI,KAAA,yFACAzQ,KAAA4jB,WAAAjC,EAAAjD,KAIA1e,KAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EACAxe,KAAAye,GAAAkD,EAAAlD,EAEAze,OAIA2U,UAAA,SAAArC,GAMA,MAJAtS,MAAAiJ,GAAAqJ,EACAtS,KAAAwe,GAAAlM,EACAtS,KAAAye,GAAAnM,EAEAtS,MAIA4jB,WAAA,SAAA9B,EAAApQ,GAMA,MAJA1R,MAAAiJ,EAAA6Y,EAAA7Y,EAAAyI,EAAAzI,EACAjJ,KAAAwe,EAAAsD,EAAAtD,EAAA9M,EAAA8M,EACAxe,KAAAye,EAAAqD,EAAArD,EAAA/M,EAAA+M,EAEAze,MAIA6jB,gBAAA,SAAAlC,EAAArP,GAMA,MAJAtS,MAAAiJ,GAAA0Y,EAAA1Y,EAAAqJ,EACAtS,KAAAwe,GAAAmD,EAAAnD,EAAAlM,EACAtS,KAAAye,GAAAkD,EAAAlD,EAAAnM,EAEAtS,MAIA8jB,IAAA,SAAAnC,EAAAjD,GAEA,MAAA/a,UAAA+a,GAEAxW,QAAAuI,KAAA,yFACAzQ,KAAA+jB,WAAApC,EAAAjD,KAIA1e,KAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EACAxe,KAAAye,GAAAkD,EAAAlD,EAEAze,OAIAgkB,UAAA,SAAA1R,GAMA,MAJAtS,MAAAiJ,GAAAqJ,EACAtS,KAAAwe,GAAAlM,EACAtS,KAAAye,GAAAnM,EAEAtS,MAIA+jB,WAAA,SAAAjC,EAAApQ,GAMA,MAJA1R,MAAAiJ,EAAA6Y,EAAA7Y,EAAAyI,EAAAzI,EACAjJ,KAAAwe,EAAAsD,EAAAtD,EAAA9M,EAAA8M,EACAxe,KAAAye,EAAAqD,EAAArD,EAAA/M,EAAA+M,EAEAze,MAIA4U,SAAA,SAAA+M,EAAAjD,GAEA,MAAA/a,UAAA+a,GAEAxW,QAAAuI,KAAA,mGACAzQ,KAAA2lB,gBAAAhE,EAAAjD,KAIA1e,KAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EACAxe,KAAAye,GAAAkD,EAAAlD,EAEAze,OAIA6U,eAAA,SAAAoP,GAYA,MAVAC,UAAAD,IACAjkB,KAAAiJ,GAAAgb,EACAjkB,KAAAwe,GAAAyF,EACAjkB,KAAAye,GAAAwF,IAEAjkB,KAAAiJ,EAAA,EACAjJ,KAAAwe,EAAA,EACAxe,KAAAye,EAAA,GAGAze,MAIA2lB,gBAAA,SAAA7D,EAAApQ,GAMA,MAJA1R,MAAAiJ,EAAA6Y,EAAA7Y,EAAAyI,EAAAzI,EACAjJ,KAAAwe,EAAAsD,EAAAtD,EAAA9M,EAAA8M,EACAxe,KAAAye,EAAAqD,EAAArD,EAAA/M,EAAA+M,EAEAze,MAIA4lB,WAAA,WAEA,GAAA7G,EAEA,OAAA,UAAAE,GAYA,MAVAA,aAAArW,GAAAuW,QAAA,GAEAjX,QAAAoI,MAAA,8FAIA3M,SAAAob,IAAAA,EAAA,GAAAnW,GAAA2V,YAEAve,KAAAwiB,gBAAAzD,EAAAC,aAAAC,IAEAjf,SAMA6lB,eAAA,WAEA,GAAA9G,EAEA,OAAA,UAAAgB,EAAAC,GAMA,MAJArc,UAAAob,IAAAA,EAAA,GAAAnW,GAAA2V,YAEAve,KAAAwiB,gBAAAzD,EAAAe,iBAAAC,EAAAC,IAEAhgB,SAMA8lB,aAAA,SAAAtlB,GAEA,GAAAyI,GAAAjJ,KAAAiJ,EACAuV,EAAAxe,KAAAwe,EACAC,EAAAze,KAAAye,EAEAsH,EAAAvlB,EAAA4f,QAMA,OAJApgB,MAAAiJ,EAAA8c,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EACAze,KAAAwe,EAAAuH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EACAze,KAAAye,EAAAsH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EAEAze,MAIAgmB,aAAA,SAAAxlB,GAIA,GAAAyI,GAAAjJ,KAAAiJ,EAAAuV,EAAAxe,KAAAwe,EAAAC,EAAAze,KAAAye,EAEAsH,EAAAvlB,EAAA4f,QAMA,OAJApgB,MAAAiJ,EAAA8c,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EAAAsH,EAAA,IACA/lB,KAAAwe,EAAAuH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EAAAsH,EAAA,IACA/lB,KAAAye,EAAAsH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,IAAAtH,EAAAsH,EAAA,IAEA/lB,MAIAimB,gBAAA,SAAAzlB,GAIA,GAAAyI,GAAAjJ,KAAAiJ,EAAAuV,EAAAxe,KAAAwe,EAAAC,EAAAze,KAAAye,EAEAsH,EAAAvlB,EAAA4f,SACA8F,EAAA,GAAAH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,IAAAtH,EAAAsH,EAAA,IAMA,OAJA/lB,MAAAiJ,GAAA8c,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EAAAsH,EAAA,KAAAG,EACAlmB,KAAAwe,GAAAuH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EAAAsH,EAAA,KAAAG,EACAlmB,KAAAye,GAAAsH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,IAAAtH,EAAAsH,EAAA,KAAAG,EAEAlmB,MAIAwiB,gBAAA,SAAArQ,GAEA,GAAAlJ,GAAAjJ,KAAAiJ,EACAuV,EAAAxe,KAAAwe,EACAC,EAAAze,KAAAye,EAEA0H,EAAAhU,EAAAlJ,EACAmd,EAAAjU,EAAAqM,EACA6H,EAAAlU,EAAAsM,EACA6H,EAAAnU,EAAAuM,EAIA6H,EAAAD,EAAArd,EAAAmd,EAAA3H,EAAA4H,EAAA7H,EACAgI,EAAAF,EAAA9H,EAAA6H,EAAApd,EAAAkd,EAAA1H,EACAgI,EAAAH,EAAA7H,EAAA0H,EAAA3H,EAAA4H,EAAAnd,EACAyd,GAAAP,EAAAld,EAAAmd,EAAA5H,EAAA6H,EAAA5H,CAQA,OAJAze,MAAAiJ,EAAAsd,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACApmB,KAAAwe,EAAAgI,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACArmB,KAAAye,EAAAgI,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EAEAnmB,MAIA0Q,QAAA,WAEA,GAAAiW,EAEA,OAAA,UAAAre,GAKA,MAHA3E,UAAAgjB,IAAAA,EAAA,GAAA/d,GAAAge,SAEAD,EAAAE,iBAAAve,EAAAwe,iBAAAH,EAAAI,WAAAze,EAAA0e,cACAhnB,KAAAimB,gBAAAU,OAMA/V,UAAA,WAEA,GAAA+V,EAEA,OAAA,UAAAre,GAKA,MAHA3E,UAAAgjB,IAAAA,EAAA,GAAA/d,GAAAge,SAEAD,EAAAE,iBAAAve,EAAA0e,YAAAL,EAAAI,WAAAze,EAAAwe,mBACA9mB,KAAAimB,gBAAAU,OAMAM,mBAAA,SAAAzmB,GAKA,GAAAyI,GAAAjJ,KAAAiJ,EAAAuV,EAAAxe,KAAAwe,EAAAC,EAAAze,KAAAye,EAEAsH,EAAAvlB,EAAA4f,QAQA,OANApgB,MAAAiJ,EAAA8c,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EACAze,KAAAwe,EAAAuH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EACAze,KAAAye,EAAAsH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,IAAAtH,EAEAze,KAAAwhB,YAEAxhB,MAIAmkB,OAAA,SAAAxC,GAMA,MAJA3hB,MAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EACAxe,KAAAye,GAAAkD,EAAAlD,EAEAze,MAIAokB,aAAA,SAAAH,GAEA,MAAAjkB,MAAA6U,eAAA,EAAAoP,IAIAlR,IAAA,SAAA4O,GAMA,MAJA3hB,MAAAiJ,EAAAO,KAAAuJ,IAAA/S,KAAAiJ,EAAA0Y,EAAA1Y,GACAjJ,KAAAwe,EAAAhV,KAAAuJ,IAAA/S,KAAAwe,EAAAmD,EAAAnD,GACAxe,KAAAye,EAAAjV,KAAAuJ,IAAA/S,KAAAye,EAAAkD,EAAAlD,GAEAze,MAIAyJ,IAAA,SAAAkY,GAMA,MAJA3hB,MAAAiJ,EAAAO,KAAAC,IAAAzJ,KAAAiJ,EAAA0Y,EAAA1Y,GACAjJ,KAAAwe,EAAAhV,KAAAC,IAAAzJ,KAAAwe,EAAAmD,EAAAnD,GACAxe,KAAAye,EAAAjV,KAAAC,IAAAzJ,KAAAye,EAAAkD,EAAAlD,GAEAze,MAIAwS,MAAA,SAAAO,EAAAtJ,GAQA,MAJAzJ,MAAAiJ,EAAAO,KAAAC,IAAAsJ,EAAA9J,EAAAO,KAAAuJ,IAAAtJ,EAAAR,EAAAjJ,KAAAiJ,IACAjJ,KAAAwe,EAAAhV,KAAAC,IAAAsJ,EAAAyL,EAAAhV,KAAAuJ,IAAAtJ,EAAA+U,EAAAxe,KAAAwe,IACAxe,KAAAye,EAAAjV,KAAAC,IAAAsJ,EAAA0L,EAAAjV,KAAAuJ,IAAAtJ,EAAAgV,EAAAze,KAAAye,IAEAze,MAIAqkB,YAAA,WAEA,GAAAtR,GAAAtJ,CAEA,OAAA,UAAA6a,EAAAC,GAYA,MAVA5gB,UAAAoP,IAEAA,EAAA,GAAAnK,GAAAwY,QACA3X,EAAA,GAAAb,GAAAwY,SAIArO,EAAAxB,IAAA+S,EAAAA,EAAAA,GACA7a,EAAA8H,IAAAgT,EAAAA,EAAAA,GAEAvkB,KAAAwS,MAAAO,EAAAtJ,OAMA+a,YAAA,SAAAzR,EAAAtJ,GAEA,GAAA9G,GAAA3C,KAAA2C,QAIA,OAFA3C,MAAA6U,eAAArL,KAAAC,IAAAsJ,EAAAvJ,KAAAuJ,IAAAtJ,EAAA9G,IAAAA,GAEA3C,MAIA+R,MAAA,WAMA,MAJA/R,MAAAiJ,EAAAO,KAAAuI,MAAA/R,KAAAiJ,GACAjJ,KAAAwe,EAAAhV,KAAAuI,MAAA/R,KAAAwe,GACAxe,KAAAye,EAAAjV,KAAAuI,MAAA/R,KAAAye,GAEAze,MAIAykB,KAAA,WAMA,MAJAzkB,MAAAiJ,EAAAO,KAAAib,KAAAzkB,KAAAiJ,GACAjJ,KAAAwe,EAAAhV,KAAAib,KAAAzkB,KAAAwe,GACAxe,KAAAye,EAAAjV,KAAAib,KAAAzkB,KAAAye,GAEAze,MAIA0kB,MAAA,WAMA,MAJA1kB,MAAAiJ,EAAAO,KAAAkb,MAAA1kB,KAAAiJ,GACAjJ,KAAAwe,EAAAhV,KAAAkb,MAAA1kB,KAAAwe,GACAxe,KAAAye,EAAAjV,KAAAkb,MAAA1kB,KAAAye,GAEAze,MAIA2kB,YAAA,WAMA,MAJA3kB,MAAAiJ,EAAAjJ,KAAAiJ,EAAA,EAAAO,KAAAib,KAAAzkB,KAAAiJ,GAAAO,KAAAuI,MAAA/R,KAAAiJ,GACAjJ,KAAAwe,EAAAxe,KAAAwe,EAAA,EAAAhV,KAAAib,KAAAzkB,KAAAwe,GAAAhV,KAAAuI,MAAA/R,KAAAwe,GACAxe,KAAAye,EAAAze,KAAAye,EAAA,EAAAjV,KAAAib,KAAAzkB,KAAAye,GAAAjV,KAAAuI,MAAA/R,KAAAye,GAEAze,MAIA4kB,OAAA,WAMA,MAJA5kB,MAAAiJ,GAAAjJ,KAAAiJ,EACAjJ,KAAAwe,GAAAxe,KAAAwe,EACAxe,KAAAye,GAAAze,KAAAye,EAEAze,MAIAqhB,IAAA,SAAAM,GAEA,MAAA3hB,MAAAiJ,EAAA0Y,EAAA1Y,EAAAjJ,KAAAwe,EAAAmD,EAAAnD,EAAAxe,KAAAye,EAAAkD,EAAAlD,GAIAmD,SAAA,WAEA,MAAA5hB,MAAAiJ,EAAAjJ,KAAAiJ,EAAAjJ,KAAAwe,EAAAxe,KAAAwe,EAAAxe,KAAAye,EAAAze,KAAAye,GAIA9b,OAAA,WAEA,MAAA6G,MAAAmK,KAAA3T,KAAAiJ,EAAAjJ,KAAAiJ,EAAAjJ,KAAAwe,EAAAxe,KAAAwe,EAAAxe,KAAAye,EAAAze,KAAAye,IAIAoG,gBAAA,WAEA,MAAArb,MAAA8X,IAAAthB,KAAAiJ,GAAAO,KAAA8X,IAAAthB,KAAAwe,GAAAhV,KAAA8X,IAAAthB,KAAAye,IAIA+C,UAAA,WAEA,MAAAxhB,MAAAokB,aAAApkB,KAAA2C,WAIAuiB,UAAA,SAAAviB,GAEA,MAAA3C,MAAA6U,eAAAlS,EAAA3C,KAAA2C,WAIAmS,KAAA,SAAA6M,EAAA5M,GAMA,MAJA/U,MAAAiJ,IAAA0Y,EAAA1Y,EAAAjJ,KAAAiJ,GAAA8L,EACA/U,KAAAwe,IAAAmD,EAAAnD,EAAAxe,KAAAwe,GAAAzJ,EACA/U,KAAAye,IAAAkD,EAAAlD,EAAAze,KAAAye,GAAA1J,EAEA/U,MAIAmlB,YAAA,SAAAnE,EAAAoE,EAAArQ,GAIA,MAFA/U,MAAA+jB,WAAAqB,EAAApE,GAAAnM,eAAAE,GAAAR,IAAAyM;AAEAhhB,MAIAknB,MAAA,SAAAvF,EAAAjD,GAEA,GAAA/a,SAAA+a,EAGA,MADAxW,SAAAuI,KAAA,6FACAzQ,KAAAuhB,aAAAI,EAAAjD,EAIA,IAAAzV,GAAAjJ,KAAAiJ,EAAAuV,EAAAxe,KAAAwe,EAAAC,EAAAze,KAAAye,CAMA,OAJAze,MAAAiJ,EAAAuV,EAAAmD,EAAAlD,EAAAA,EAAAkD,EAAAnD,EACAxe,KAAAwe,EAAAC,EAAAkD,EAAA1Y,EAAAA,EAAA0Y,EAAAlD,EACAze,KAAAye,EAAAxV,EAAA0Y,EAAAnD,EAAAA,EAAAmD,EAAA1Y,EAEAjJ,MAIAuhB,aAAA,SAAAO,EAAApQ,GAEA,GAAAyV,GAAArF,EAAA7Y,EAAAme,EAAAtF,EAAAtD,EAAA6I,EAAAvF,EAAArD,EACA6I,EAAA5V,EAAAzI,EAAAse,EAAA7V,EAAA8M,EAAAgJ,EAAA9V,EAAA+M,CAMA,OAJAze,MAAAiJ,EAAAme,EAAAI,EAAAH,EAAAE,EACAvnB,KAAAwe,EAAA6I,EAAAC,EAAAH,EAAAK,EACAxnB,KAAAye,EAAA0I,EAAAI,EAAAH,EAAAE,EAEAtnB,MAIAynB,gBAAA,WAEA,GAAAzG,GAAAK,CAEA,OAAA,UAAA7Q,GAQA,MANA7M,UAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,SAEAJ,EAAArP,KAAAnB,GAAAgR,YAEAH,EAAArhB,KAAAqhB,IAAAL,GAEAhhB,KAAA2R,KAAAqP,GAAAnM,eAAAwM,OAMAqG,eAAA,WAEA,GAAA1G,EAEA,OAAA,UAAA2G,GAMA,MAJAhkB,UAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,SAEAJ,EAAArP,KAAA3R,MAAAynB,gBAAAE,GAEA3nB,KAAA8jB,IAAA9C,OAMA4G,QAAA,WAKA,GAAA5G,EAEA,OAAA,UAAA6G,GAIA,MAFAlkB,UAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,SAEAphB,KAAA8jB,IAAA9C,EAAArP,KAAAkW,GAAAhT,eAAA,EAAA7U,KAAAqhB,IAAAwG,SAMAC,QAAA,SAAAnG,GAEA,GAAAoG,GAAA/nB,KAAAqhB,IAAAM,IAAA3hB,KAAA2C,SAAAgf,EAAAhf,SAIA,OAAA6G,MAAAqZ,KAAAja,EAAAY,KAAAgJ,MAAAuV,EAAA,GAAA,KAIAjD,WAAA,SAAAnD,GAEA,MAAAnY,MAAAmK,KAAA3T,KAAA+kB,kBAAApD,KAIAoD,kBAAA,SAAApD,GAEA,GAAAqD,GAAAhlB,KAAAiJ,EAAA0Y,EAAA1Y,EACAgc,EAAAjlB,KAAAwe,EAAAmD,EAAAnD,EACAwJ,EAAAhoB,KAAAye,EAAAkD,EAAAlD,CAEA,OAAAuG,GAAAA,EAAAC,EAAAA,EAAA+C,EAAAA,GAIAC,2BAAA,SAAAznB,EAAAqf,GAEA3X,QAAAoI,MAAA,8GAIA4X,uBAAA,SAAA/V,EAAA0N,GAEA3X,QAAAoI,MAAA,sGAIA6X,sBAAA,SAAA3nB,GAIA,MAFA0H,SAAAuI,KAAA,yFAEAzQ,KAAAooB,sBAAA5nB,IAIA6nB,mBAAA,SAAA7nB,GAIA,MAFA0H,SAAAuI,KAAA,mFAEAzQ,KAAAsoB,mBAAA9nB,IAIA+nB,oBAAA,SAAA7E,EAAAiD,GAIA,MAFAze,SAAAuI,KAAA,qFAEAzQ,KAAAwoB,oBAAA9E,EAAAiD,IAIAyB,sBAAA,SAAA5nB,GAMA,MAJAR,MAAAiJ,EAAAzI,EAAA4f,SAAA,IACApgB,KAAAwe,EAAAhe,EAAA4f,SAAA,IACApgB,KAAAye,EAAAje,EAAA4f,SAAA,IAEApgB,MAIAsoB,mBAAA,SAAA9nB,GAEA,GAAAioB,GAAAzoB,KAAAuR,IAAA/Q,EAAA4f,SAAA,GAAA5f,EAAA4f,SAAA,GAAA5f,EAAA4f,SAAA,IAAAzd,SACA+lB,EAAA1oB,KAAAuR,IAAA/Q,EAAA4f,SAAA,GAAA5f,EAAA4f,SAAA,GAAA5f,EAAA4f,SAAA,IAAAzd,SACAgmB,EAAA3oB,KAAAuR,IAAA/Q,EAAA4f,SAAA,GAAA5f,EAAA4f,SAAA,GAAA5f,EAAA4f,SAAA,KAAAzd,QAMA,OAJA3C,MAAAiJ,EAAAwf,EACAzoB,KAAAwe,EAAAkK,EACA1oB,KAAAye,EAAAkK,EAEA3oB,MAIAwoB,oBAAA,SAAA9E,EAAAiD,GAEA,GAAAzR,GAAA,EAAAwO,EAEAkF,EAAAjC,EAAAvG,QAMA,OAJApgB,MAAAiJ,EAAA2f,EAAA1T,GACAlV,KAAAwe,EAAAoK,EAAA1T,EAAA,GACAlV,KAAAye,EAAAmK,EAAA1T,EAAA,GAEAlV,MAIAgV,OAAA,SAAA2M,GAEA,MAAAA,GAAA1Y,IAAAjJ,KAAAiJ,GAAA0Y,EAAAnD,IAAAxe,KAAAwe,GAAAmD,EAAAlD,IAAAze,KAAAye,GAIAnN,UAAA,SAAA2D,EAAAC,GAQA,MANAvR,UAAAuR,IAAAA,EAAA,GAEAlV,KAAAiJ,EAAAgM,EAAAC,GACAlV,KAAAwe,EAAAvJ,EAAAC,EAAA,GACAlV,KAAAye,EAAAxJ,EAAAC,EAAA,GAEAlV,MAIAmV,QAAA,SAAAF,EAAAC,GASA,MAPAvR,UAAAsR,IAAAA,MACAtR,SAAAuR,IAAAA,EAAA,GAEAD,EAAAC,GAAAlV,KAAAiJ,EACAgM,EAAAC,EAAA,GAAAlV,KAAAwe,EACAvJ,EAAAC,EAAA,GAAAlV,KAAAye,EAEAxJ,GAIAoQ,cAAA,SAAAC,EAAA5B,EAAAxO,GAUA,MARAvR,UAAAuR,IAAAA,EAAA,GAEAwO,EAAAA,EAAA4B,EAAAC,SAAArQ,EAEAlV,KAAAiJ,EAAAqc,EAAArQ,MAAAyO,GACA1jB,KAAAwe,EAAA8G,EAAArQ,MAAAyO,EAAA,GACA1jB,KAAAye,EAAA6G,EAAArQ,MAAAyO,EAAA,GAEA1jB,OAgBA4I,EAAAigB,QAAA,SAAA5f,EAAAuV,EAAAC,EAAAC,GAEA1e,KAAAiJ,EAAAA,GAAA,EACAjJ,KAAAwe,EAAAA,GAAA,EACAxe,KAAAye,EAAAA,GAAA,EACAze,KAAA0e,EAAA/a,SAAA+a,EAAAA,EAAA,GAIA9V,EAAAigB,QAAA/mB,WAEAE,YAAA4G,EAAAigB,QAEAtX,IAAA,SAAAtI,EAAAuV,EAAAC,EAAAC,GAOA,MALA1e,MAAAiJ,EAAAA,EACAjJ,KAAAwe,EAAAA,EACAxe,KAAAye,EAAAA,EACAze,KAAA0e,EAAAA,EAEA1e,MAIAujB,KAAA,SAAAta,GAIA,MAFAjJ,MAAAiJ,EAAAA,EAEAjJ,MAIAwjB,KAAA,SAAAhF,GAIA,MAFAxe,MAAAwe,EAAAA,EAEAxe,MAIA0lB,KAAA,SAAAjH,GAIA,MAFAze,MAAAye,EAAAA,EAEAze,MAIA8oB,KAAA,SAAApK,GAIA,MAFA1e,MAAA0e,EAAAA,EAEA1e,MAIAyjB,aAAA,SAAAC,EAAAziB,GAEA,OAAAyiB,GAEA,IAAA,GAAA1jB,KAAAiJ,EAAAhI,CAA0B,MAC1B,KAAA,GAAAjB,KAAAwe,EAAAvd,CAA0B,MAC1B,KAAA,GAAAjB,KAAAye,EAAAxd,CAA0B,MAC1B,KAAA,GAAAjB,KAAA0e,EAAAzd,CAA0B,MAC1B,SAAA,KAAA,IAAAme,OAAA,0BAAAsE,KAMAC,aAAA,SAAAD,GAEA,OAAAA,GAEA,IAAA,GAAA,MAAA1jB,MAAAiJ,CACA,KAAA,GAAA,MAAAjJ,MAAAwe,CACA,KAAA,GAAA,MAAAxe,MAAAye,CACA,KAAA,GAAA,MAAAze,MAAA0e,CACA,SAAA,KAAA,IAAAU,OAAA,0BAAAsE,KAMAtQ,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAiJ,EAAAjJ,KAAAwe,EAAAxe,KAAAye,EAAAze,KAAA0e,IAIA/M,KAAA,SAAAgQ,GAOA,MALA3hB,MAAAiJ,EAAA0Y,EAAA1Y,EACAjJ,KAAAwe,EAAAmD,EAAAnD,EACAxe,KAAAye,EAAAkD,EAAAlD,EACAze,KAAA0e,EAAA/a,SAAAge,EAAAjD,EAAAiD,EAAAjD,EAAA,EAEA1e,MAIAuU,IAAA,SAAAoN,EAAAjD,GAEA,MAAA/a,UAAA+a,GAEAxW,QAAAuI,KAAA,yFACAzQ,KAAA4jB,WAAAjC,EAAAjD,KAIA1e,KAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EACAxe,KAAAye,GAAAkD,EAAAlD,EACAze,KAAA0e,GAAAiD,EAAAjD,EAEA1e,OAIA2U,UAAA,SAAArC,GAOA,MALAtS,MAAAiJ,GAAAqJ,EACAtS,KAAAwe,GAAAlM,EACAtS,KAAAye,GAAAnM,EACAtS,KAAA0e,GAAApM,EAEAtS,MAIA4jB,WAAA,SAAA9B,EAAApQ,GAOA,MALA1R,MAAAiJ,EAAA6Y,EAAA7Y,EAAAyI,EAAAzI,EACAjJ,KAAAwe,EAAAsD,EAAAtD,EAAA9M,EAAA8M,EACAxe,KAAAye,EAAAqD,EAAArD,EAAA/M,EAAA+M,EACAze,KAAA0e,EAAAoD,EAAApD,EAAAhN,EAAAgN,EAEA1e,MAIA6jB,gBAAA,SAAAlC,EAAArP,GAOA,MALAtS,MAAAiJ,GAAA0Y,EAAA1Y,EAAAqJ,EACAtS,KAAAwe,GAAAmD,EAAAnD,EAAAlM,EACAtS,KAAAye,GAAAkD,EAAAlD,EAAAnM,EACAtS,KAAA0e,GAAAiD,EAAAjD,EAAApM,EAEAtS,MAIA8jB,IAAA,SAAAnC,EAAAjD,GAEA,MAAA/a,UAAA+a,GAEAxW,QAAAuI,KAAA,yFACAzQ,KAAA+jB,WAAApC,EAAAjD,KAIA1e,KAAAiJ,GAAA0Y,EAAA1Y,EACAjJ,KAAAwe,GAAAmD,EAAAnD,EACAxe,KAAAye,GAAAkD,EAAAlD,EACAze,KAAA0e,GAAAiD,EAAAjD,EAEA1e,OAIAgkB,UAAA,SAAA1R,GAOA,MALAtS,MAAAiJ,GAAAqJ,EACAtS,KAAAwe,GAAAlM,EACAtS,KAAAye,GAAAnM,EACAtS,KAAA0e,GAAApM,EAEAtS,MAIA+jB,WAAA,SAAAjC,EAAApQ,GAOA,MALA1R,MAAAiJ,EAAA6Y,EAAA7Y,EAAAyI,EAAAzI,EACAjJ,KAAAwe,EAAAsD,EAAAtD,EAAA9M,EAAA8M,EACAxe,KAAAye,EAAAqD,EAAArD,EAAA/M,EAAA+M,EACAze,KAAA0e,EAAAoD,EAAApD,EAAAhN,EAAAgN,EAEA1e,MAIA6U,eAAA,SAAAoP,GAcA,MAZAC,UAAAD,IACAjkB,KAAAiJ,GAAAgb,EACAjkB,KAAAwe,GAAAyF,EACAjkB,KAAAye,GAAAwF,EACAjkB,KAAA0e,GAAAuF,IAEAjkB,KAAAiJ,EAAA,EACAjJ,KAAAwe,EAAA,EACAxe,KAAAye,EAAA,EACAze,KAAA0e,EAAA,GAGA1e,MAIAgmB,aAAA,SAAAxlB,GAEA,GAAAyI,GAAAjJ,KAAAiJ,EACAuV,EAAAxe,KAAAwe,EACAC,EAAAze,KAAAye,EACAC,EAAA1e,KAAA0e,EAEAqH,EAAAvlB,EAAA4f,QAOA,OALApgB,MAAAiJ,EAAA8c,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EAAAsH,EAAA,IAAArH,EACA1e,KAAAwe,EAAAuH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,GAAAtH,EAAAsH,EAAA,IAAArH,EACA1e,KAAAye,EAAAsH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,IAAAtH,EAAAsH,EAAA,IAAArH,EACA1e,KAAA0e,EAAAqH,EAAA,GAAA9c,EAAA8c,EAAA,GAAAvH,EAAAuH,EAAA,IAAAtH,EAAAsH,EAAA,IAAArH,EAEA1e,MAIAokB,aAAA,SAAAH,GAEA,MAAAjkB,MAAA6U,eAAA,EAAAoP,IAIA8E,2BAAA,SAAA5W,GAMAnS,KAAA0e,EAAA,EAAAlV,KAAAqZ,KAAA1Q,EAAAuM,EAEA,IAAApM,GAAA9I,KAAAmK,KAAA,EAAAxB,EAAAuM,EAAAvM,EAAAuM,EAgBA,OAdA,MAAApM,GAEAtS,KAAAiJ,EAAA,EACAjJ,KAAAwe,EAAA,EACAxe,KAAAye,EAAA,IAIAze,KAAAiJ,EAAAkJ,EAAAlJ,EAAAqJ,EACAtS,KAAAwe,EAAArM,EAAAqM,EAAAlM,EACAtS,KAAAye,EAAAtM,EAAAsM,EAAAnM,GAIAtS,MAIAgpB,+BAAA,SAAAxoB,GAMA,GAAAwf,GAAA/W,EAAAuV,EAAAC,EACAwK,EAAA,IACAC,EAAA,GAEA/I,EAAA3f,EAAA4f,SAEAC,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,GAEA,IAAA3W,KAAA8X,IAAAhB,EAAAE,GAAAyI,GACAzf,KAAA8X,IAAAf,EAAAI,GAAAsI,GACAzf,KAAA8X,IAAAZ,EAAAE,GAAAqI,EAAA,CAMA,GAAAzf,KAAA8X,IAAAhB,EAAAE,GAAA0I,GACA1f,KAAA8X,IAAAf,EAAAI,GAAAuI,GACA1f,KAAA8X,IAAAZ,EAAAE,GAAAsI,GACA1f,KAAA8X,IAAAjB,EAAAI,EAAAI,EAAA,GAAAqI,EAMA,MAFAlpB,MAAAuR,IAAA,EAAA,EAAA,EAAA,GAEAvR,IAMAggB,GAAAxW,KAAA2f,EAEA,IAAAC,IAAA/I,EAAA,GAAA,EACAgJ,GAAA5I,EAAA,GAAA,EACA6I,GAAAzI,EAAA,GAAA,EACA0I,GAAAjJ,EAAAE,GAAA,EACAgJ,GAAAjJ,EAAAI,GAAA,EACA8I,GAAA/I,EAAAE,GAAA,CA4DA,OA1DAwI,GAAAC,GAAAD,EAAAE,EAIAL,EAAAG,GAEAngB,EAAA,EACAuV,EAAA,WACAC,EAAA,aAIAxV,EAAAO,KAAAmK,KAAAyV,GACA5K,EAAA+K,EAAAtgB,EACAwV,EAAA+K,EAAAvgB,GAIIogB,EAAAC,EAIJL,EAAAI,GAEApgB,EAAA,WACAuV,EAAA,EACAC,EAAA,aAIAD,EAAAhV,KAAAmK,KAAA0V,GACApgB,EAAAsgB,EAAA/K,EACAC,EAAAgL,EAAAjL,GAQAyK,EAAAK,GAEArgB,EAAA,WACAuV,EAAA,WACAC,EAAA,IAIAA,EAAAjV,KAAAmK,KAAA2V,GACArgB,EAAAugB,EAAA/K,EACAD,EAAAiL,EAAAhL,GAMAze,KAAAuR,IAAAtI,EAAAuV,EAAAC,EAAAuB,GAEAhgB,KAMA,GAAAsS,GAAA9I,KAAAmK,MAAAiN,EAAAF,IAAAE,EAAAF,IACAH,EAAAI,IAAAJ,EAAAI,IACAH,EAAAF,IAAAE,EAAAF,GAYA,OAVA9W,MAAA8X,IAAAhP,GAAA,OAAAA,EAAA,GAKAtS,KAAAiJ,GAAA2X,EAAAF,GAAApO,EACAtS,KAAAwe,GAAA+B,EAAAI,GAAArO,EACAtS,KAAAye,GAAA+B,EAAAF,GAAAhO,EACAtS,KAAA0e,EAAAlV,KAAAqZ,MAAAxC,EAAAI,EAAAI,EAAA,GAAA,GAEA7gB,MAIA+S,IAAA,SAAA4O,GAOA,MALA3hB,MAAAiJ,EAAAO,KAAAuJ,IAAA/S,KAAAiJ,EAAA0Y,EAAA1Y,GACAjJ,KAAAwe,EAAAhV,KAAAuJ,IAAA/S,KAAAwe,EAAAmD,EAAAnD,GACAxe,KAAAye,EAAAjV,KAAAuJ,IAAA/S,KAAAye,EAAAkD,EAAAlD,GACAze,KAAA0e,EAAAlV,KAAAuJ,IAAA/S,KAAA0e,EAAAiD,EAAAjD,GAEA1e,MAIAyJ,IAAA,SAAAkY,GAOA,MALA3hB,MAAAiJ,EAAAO,KAAAC,IAAAzJ,KAAAiJ,EAAA0Y,EAAA1Y,GACAjJ,KAAAwe,EAAAhV,KAAAC,IAAAzJ,KAAAwe,EAAAmD,EAAAnD,GACAxe,KAAAye,EAAAjV,KAAAC,IAAAzJ,KAAAye,EAAAkD,EAAAlD,GACAze,KAAA0e,EAAAlV,KAAAC,IAAAzJ,KAAA0e,EAAAiD,EAAAjD,GAEA1e,MAIAwS,MAAA,SAAAO,EAAAtJ,GASA,MALAzJ,MAAAiJ,EAAAO,KAAAC,IAAAsJ,EAAA9J,EAAAO,KAAAuJ,IAAAtJ,EAAAR,EAAAjJ,KAAAiJ,IACAjJ,KAAAwe,EAAAhV,KAAAC,IAAAsJ,EAAAyL,EAAAhV,KAAAuJ,IAAAtJ,EAAA+U,EAAAxe,KAAAwe,IACAxe,KAAAye,EAAAjV,KAAAC,IAAAsJ,EAAA0L,EAAAjV,KAAAuJ,IAAAtJ,EAAAgV,EAAAze,KAAAye,IACAze,KAAA0e,EAAAlV,KAAAC,IAAAsJ,EAAA2L,EAAAlV,KAAAuJ,IAAAtJ,EAAAiV,EAAA1e,KAAA0e,IAEA1e,MAIAqkB,YAAA,WAEA,GAAAtR,GAAAtJ,CAEA,OAAA,UAAA6a,EAAAC,GAYA,MAVA5gB,UAAAoP,IAEAA,EAAA,GAAAnK,GAAAigB,QACApf,EAAA,GAAAb,GAAAigB,SAIA9V,EAAAxB,IAAA+S,EAAAA,EAAAA,EAAAA,GACA7a,EAAA8H,IAAAgT,EAAAA,EAAAA,EAAAA,GAEAvkB,KAAAwS,MAAAO,EAAAtJ,OAMAsI,MAAA,WAOA,MALA/R,MAAAiJ,EAAAO,KAAAuI,MAAA/R,KAAAiJ,GACAjJ,KAAAwe,EAAAhV,KAAAuI,MAAA/R,KAAAwe,GACAxe,KAAAye,EAAAjV,KAAAuI,MAAA/R,KAAAye,GACAze,KAAA0e,EAAAlV,KAAAuI,MAAA/R,KAAA0e,GAEA1e,MAIAykB,KAAA,WAOA,MALAzkB,MAAAiJ,EAAAO,KAAAib,KAAAzkB,KAAAiJ,GACAjJ,KAAAwe,EAAAhV,KAAAib,KAAAzkB,KAAAwe,GACAxe,KAAAye,EAAAjV,KAAAib,KAAAzkB,KAAAye,GACAze,KAAA0e,EAAAlV,KAAAib,KAAAzkB,KAAA0e,GAEA1e,MAIA0kB,MAAA,WAOA,MALA1kB,MAAAiJ,EAAAO,KAAAkb,MAAA1kB,KAAAiJ,GACAjJ,KAAAwe,EAAAhV,KAAAkb,MAAA1kB,KAAAwe,GACAxe,KAAAye,EAAAjV,KAAAkb,MAAA1kB,KAAAye,GACAze,KAAA0e,EAAAlV,KAAAkb,MAAA1kB,KAAA0e,GAEA1e,MAIA2kB,YAAA,WAOA,MALA3kB,MAAAiJ,EAAAjJ,KAAAiJ,EAAA,EAAAO,KAAAib,KAAAzkB,KAAAiJ,GAAAO,KAAAuI,MAAA/R,KAAAiJ,GACAjJ,KAAAwe,EAAAxe,KAAAwe,EAAA,EAAAhV,KAAAib,KAAAzkB,KAAAwe,GAAAhV,KAAAuI,MAAA/R,KAAAwe,GACAxe,KAAAye,EAAAze,KAAAye,EAAA,EAAAjV,KAAAib,KAAAzkB,KAAAye,GAAAjV,KAAAuI,MAAA/R,KAAAye,GACAze,KAAA0e,EAAA1e,KAAA0e,EAAA,EAAAlV,KAAAib,KAAAzkB,KAAA0e,GAAAlV,KAAAuI,MAAA/R,KAAA0e,GAEA1e,MAIA4kB,OAAA,WAOA,MALA5kB,MAAAiJ,GAAAjJ,KAAAiJ,EACAjJ,KAAAwe,GAAAxe,KAAAwe,EACAxe,KAAAye,GAAAze,KAAAye,EACAze,KAAA0e,GAAA1e,KAAA0e,EAEA1e,MAIAqhB,IAAA,SAAAM,GAEA,MAAA3hB,MAAAiJ,EAAA0Y,EAAA1Y,EAAAjJ,KAAAwe,EAAAmD,EAAAnD,EAAAxe,KAAAye,EAAAkD,EAAAlD,EAAAze,KAAA0e,EAAAiD,EAAAjD,GAIAkD,SAAA,WAEA,MAAA5hB,MAAAiJ,EAAAjJ,KAAAiJ,EAAAjJ,KAAAwe,EAAAxe,KAAAwe,EAAAxe,KAAAye,EAAAze,KAAAye,EAAAze,KAAA0e,EAAA1e,KAAA0e,GAIA/b,OAAA,WAEA,MAAA6G,MAAAmK,KAAA3T,KAAAiJ,EAAAjJ,KAAAiJ,EAAAjJ,KAAAwe,EAAAxe,KAAAwe,EAAAxe,KAAAye,EAAAze,KAAAye,EAAAze,KAAA0e,EAAA1e,KAAA0e,IAIAmG,gBAAA,WAEA,MAAArb,MAAA8X,IAAAthB,KAAAiJ,GAAAO,KAAA8X,IAAAthB,KAAAwe,GAAAhV,KAAA8X,IAAAthB,KAAAye,GAAAjV,KAAA8X,IAAAthB,KAAA0e,IAIA8C,UAAA,WAEA,MAAAxhB,MAAAokB,aAAApkB,KAAA2C,WAIAuiB,UAAA,SAAAviB,GAEA,MAAA3C,MAAA6U,eAAAlS,EAAA3C,KAAA2C,WAIAmS,KAAA,SAAA6M,EAAA5M,GAOA,MALA/U,MAAAiJ,IAAA0Y,EAAA1Y,EAAAjJ,KAAAiJ,GAAA8L,EACA/U,KAAAwe,IAAAmD,EAAAnD,EAAAxe,KAAAwe,GAAAzJ,EACA/U,KAAAye,IAAAkD,EAAAlD,EAAAze,KAAAye,GAAA1J,EACA/U,KAAA0e,IAAAiD,EAAAjD,EAAA1e,KAAA0e,GAAA3J,EAEA/U,MAIAmlB,YAAA,SAAAnE,EAAAoE,EAAArQ,GAIA,MAFA/U,MAAA+jB,WAAAqB,EAAApE,GAAAnM,eAAAE,GAAAR,IAAAyM,GAEAhhB,MAIAgV,OAAA,SAAA2M,GAEA,MAAAA,GAAA1Y,IAAAjJ,KAAAiJ,GAAA0Y,EAAAnD,IAAAxe,KAAAwe,GAAAmD,EAAAlD,IAAAze,KAAAye,GAAAkD,EAAAjD,IAAA1e,KAAA0e,GAIApN,UAAA,SAAA2D,EAAAC,GASA,MAPAvR,UAAAuR,IAAAA,EAAA,GAEAlV,KAAAiJ,EAAAgM,EAAAC,GACAlV,KAAAwe,EAAAvJ,EAAAC,EAAA,GACAlV,KAAAye,EAAAxJ,EAAAC,EAAA,GACAlV,KAAA0e,EAAAzJ,EAAAC,EAAA,GAEAlV,MAIAmV,QAAA,SAAAF,EAAAC,GAUA,MARAvR,UAAAsR,IAAAA,MACAtR,SAAAuR,IAAAA,EAAA,GAEAD,EAAAC,GAAAlV,KAAAiJ,EACAgM,EAAAC,EAAA,GAAAlV,KAAAwe,EACAvJ,EAAAC,EAAA,GAAAlV,KAAAye,EACAxJ,EAAAC,EAAA,GAAAlV,KAAA0e,EAEAzJ,GAIAoQ,cAAA,SAAAC,EAAA5B,EAAAxO,GAWA,MATAvR,UAAAuR,IAAAA,EAAA,GAEAwO,EAAAA,EAAA4B,EAAAC,SAAArQ,EAEAlV,KAAAiJ,EAAAqc,EAAArQ,MAAAyO,GACA1jB,KAAAwe,EAAA8G,EAAArQ,MAAAyO,EAAA,GACA1jB,KAAAye,EAAA6G,EAAArQ,MAAAyO,EAAA,GACA1jB,KAAA0e,EAAA4G,EAAArQ,MAAAyO,EAAA,GAEA1jB,OAcA4I,EAAAuW,MAAA,SAAAlW,EAAAuV,EAAAC,EAAAoB,GAEA7f,KAAAiD,GAAAgG,GAAA,EACAjJ,KAAA2e,GAAAH,GAAA,EACAxe,KAAA4e,GAAAH,GAAA,EACAze,KAAA0pB,OAAA7J,GAAAjX,EAAAuW,MAAAwK,cAIA/gB,EAAAuW,MAAAyK,gBAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OAEAhhB,EAAAuW,MAAAwK,aAAA,MAEA/gB,EAAAuW,MAAArd,WAEAE,YAAA4G,EAAAuW,MAEAlW,GAAAA,KAEA,MAAAjJ,MAAAiD,IAIAgG,GAAAA,GAAAhI,GAEAjB,KAAAiD,GAAAhC,EACAjB,KAAA8e,oBAIAN,GAAAA,KAEA,MAAAxe,MAAA2e,IAIAH,GAAAA,GAAAvd,GAEAjB,KAAA2e,GAAA1d,EACAjB,KAAA8e,oBAIAL,GAAAA,KAEA,MAAAze,MAAA4e,IAIAH,GAAAA,GAAAxd,GAEAjB,KAAA4e,GAAA3d,EACAjB,KAAA8e,oBAIAe,GAAAA,SAEA,MAAA7f,MAAA0pB,QAIA7J,GAAAA,OAAA5e,GAEAjB,KAAA0pB,OAAAzoB,EACAjB,KAAA8e,oBAIAvN,IAAA,SAAAtI,EAAAuV,EAAAC,EAAAoB,GASA,MAPA7f,MAAAiD,GAAAgG,EACAjJ,KAAA2e,GAAAH,EACAxe,KAAA4e,GAAAH,EACAze,KAAA0pB,OAAA7J,GAAA7f,KAAA0pB,OAEA1pB,KAAA8e,mBAEA9e,MAIAoT,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAiD,GAAAjD,KAAA2e,GAAA3e,KAAA4e,GAAA5e,KAAA0pB,SAIA/X,KAAA,SAAAsN,GASA,MAPAjf,MAAAiD,GAAAgc,EAAAhc,GACAjD,KAAA2e,GAAAM,EAAAN,GACA3e,KAAA4e,GAAAK,EAAAL,GACA5e,KAAA0pB,OAAAzK,EAAAyK,OAEA1pB,KAAA8e,mBAEA9e,MAIAkgB,sBAAA,SAAA1f,EAAAqf,EAAAX,GAEA,GAAA1M,GAAA5J,EAAAY,KAAAgJ,MAIA2N,EAAA3f,EAAA4f,SACAC,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,GA8GA,OA5GAN,GAAAA,GAAA7f,KAAA0pB,OAEA,QAAA7J,GAEA7f,KAAA2e,GAAAnV,KAAAqgB,KAAArX,EAAA+N,EAAA,GAAA,IAEA/W,KAAA8X,IAAAf,GAAA,QAEAvgB,KAAAiD,GAAAuG,KAAAsgB,OAAApJ,EAAAG,GACA7gB,KAAA4e,GAAApV,KAAAsgB,OAAAxJ,EAAAD,KAIArgB,KAAAiD,GAAAuG,KAAAsgB,MAAAlJ,EAAAH,GACAzgB,KAAA4e,GAAA,IAIG,QAAAiB,GAEH7f,KAAAiD,GAAAuG,KAAAqgB,MAAArX,EAAAkO,EAAA,GAAA,IAEAlX,KAAA8X,IAAAZ,GAAA,QAEA1gB,KAAA2e,GAAAnV,KAAAsgB,MAAAvJ,EAAAM,GACA7gB,KAAA4e,GAAApV,KAAAsgB,MAAAtJ,EAAAC,KAIAzgB,KAAA2e,GAAAnV,KAAAsgB,OAAAnJ,EAAAN,GACArgB,KAAA4e,GAAA,IAIG,QAAAiB,GAEH7f,KAAAiD,GAAAuG,KAAAqgB,KAAArX,EAAAoO,EAAA,GAAA,IAEApX,KAAA8X,IAAAV,GAAA,QAEA5gB,KAAA2e,GAAAnV,KAAAsgB,OAAAnJ,EAAAE,GACA7gB,KAAA4e,GAAApV,KAAAsgB,OAAAxJ,EAAAG,KAIAzgB,KAAA2e,GAAA,EACA3e,KAAA4e,GAAApV,KAAAsgB,MAAAtJ,EAAAH,KAIG,QAAAR,GAEH7f,KAAA2e,GAAAnV,KAAAqgB,MAAArX,EAAAmO,EAAA,GAAA,IAEAnX,KAAA8X,IAAAX,GAAA,QAEA3gB,KAAAiD,GAAAuG,KAAAsgB,MAAAlJ,EAAAC,GACA7gB,KAAA4e,GAAApV,KAAAsgB,MAAAtJ,EAAAH,KAIArgB,KAAAiD,GAAA,EACAjD,KAAA4e,GAAApV,KAAAsgB,OAAAxJ,EAAAG,KAIG,QAAAZ,GAEH7f,KAAA4e,GAAApV,KAAAqgB,KAAArX,EAAAgO,EAAA,GAAA,IAEAhX,KAAA8X,IAAAd,GAAA,QAEAxgB,KAAAiD,GAAAuG,KAAAsgB,OAAApJ,EAAAD,GACAzgB,KAAA2e,GAAAnV,KAAAsgB,OAAAnJ,EAAAN,KAIArgB,KAAAiD,GAAA,EACAjD,KAAA2e,GAAAnV,KAAAsgB,MAAAvJ,EAAAM,KAIG,QAAAhB,GAEH7f,KAAA4e,GAAApV,KAAAqgB,MAAArX,EAAA8N,EAAA,GAAA,IAEA9W,KAAA8X,IAAAhB,GAAA,QAEAtgB,KAAAiD,GAAAuG,KAAAsgB,MAAAlJ,EAAAH,GACAzgB,KAAA2e,GAAAnV,KAAAsgB,MAAAvJ,EAAAF,KAIArgB,KAAAiD,GAAAuG,KAAAsgB,OAAApJ,EAAAG,GACA7gB,KAAA2e,GAAA,IAMAzW,QAAAuI,KAAA,kEAAAoP,GAIA7f,KAAA0pB,OAAA7J,EAEAX,KAAA,GAAAlf,KAAA8e,mBAEA9e,MAIA+pB,kBAAA,WAEA,GAAApD,EAEA,OAAA,UAAAxU,EAAA0N,EAAAX,GAMA,MAJAvb,UAAAgjB,IAAAA,EAAA,GAAA/d,GAAAge,SACAD,EAAAqD,2BAAA7X,GACAnS,KAAAkgB,sBAAAyG,EAAA9G,EAAAX,GAEAlf,SAMAiqB,eAAA,SAAAtI,EAAA9B,GAEA,MAAA7f,MAAAuR,IAAAoQ,EAAA1Y,EAAA0Y,EAAAnD,EAAAmD,EAAAlD,EAAAoB,GAAA7f,KAAA0pB,SAIAQ,QAAA,WAIA,GAAA/X,GAAA,GAAAvJ,GAAA2V,UAEA,OAAA,UAAA4L,GAEAhY,EAAA6M,aAAAhf,MACAA,KAAA+pB,kBAAA5X,EAAAgY,OAMAnV,OAAA,SAAAiK,GAEA,MAAAA,GAAAhc,KAAAjD,KAAAiD,IAAAgc,EAAAN,KAAA3e,KAAA2e,IAAAM,EAAAL,KAAA5e,KAAA4e,IAAAK,EAAAyK,SAAA1pB,KAAA0pB,QAIApY,UAAA,SAAA2D,GASA,MAPAjV,MAAAiD,GAAAgS,EAAA,GACAjV,KAAA2e,GAAA1J,EAAA,GACAjV,KAAA4e,GAAA3J,EAAA,GACAtR,SAAAsR,EAAA,KAAAjV,KAAA0pB,OAAAzU,EAAA,IAEAjV,KAAA8e,mBAEA9e,MAIAmV,QAAA,SAAAF,EAAAC,GAUA,MARAvR,UAAAsR,IAAAA,MACAtR,SAAAuR,IAAAA,EAAA,GAEAD,EAAAC,GAAAlV,KAAAiD,GACAgS,EAAAC,EAAA,GAAAlV,KAAA2e,GACA1J,EAAAC,EAAA,GAAAlV,KAAA4e,GACA3J,EAAAC,EAAA,GAAAlV,KAAA0pB,OAEAzU,GAIAmV,UAAA,SAAAC,GAEA,MAAAA,GAEAA,EAAA9Y,IAAAvR,KAAAiD,GAAAjD,KAAA2e,GAAA3e,KAAA4e,IAIA,GAAAhW,GAAAwY,QAAAphB,KAAAiD,GAAAjD,KAAA2e,GAAA3e,KAAA4e,KAMAqE,SAAA,SAAA9Z,GAIA,MAFAnJ,MAAA8e,iBAAA3V,EAEAnJ,MAIA8e,iBAAA,cAUAlW,EAAA0hB,MAAA,SAAA1gB,EAAA2gB,GAEAvqB,KAAA4J,MAAAjG,SAAAiG,EAAAA,EAAA,GAAAhB,GAAAwY,QACAphB,KAAAuqB,IAAA5mB,SAAA4mB,EAAAA,EAAA,GAAA3hB,GAAAwY,SAIAxY,EAAA0hB,MAAAxoB,WAEAE,YAAA4G,EAAA0hB,MAEA/Y,IAAA,SAAA3H,EAAA2gB,GAKA,MAHAvqB,MAAA4J,MAAA+H,KAAA/H,GACA5J,KAAAuqB,IAAA5Y,KAAA4Y,GAEAvqB,MAIAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAA6Y,GAKA,MAHAxqB,MAAA4J,MAAA+H,KAAA6Y,EAAA5gB,OACA5J,KAAAuqB,IAAA5Y,KAAA6Y,EAAAD,KAEAvqB,MAIAylB,OAAA,SAAAzR,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OACA,OAAAqJ,GAAA7G,WAAA5jB,KAAA4J,MAAA5J,KAAAuqB,KAAA1V,eAAA,KAIAhQ,MAAA,SAAAmP,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OACA,OAAAqJ,GAAA1G,WAAA/jB,KAAAuqB,IAAAvqB,KAAA4J,QAIA8gB,WAAA,WAEA,MAAA1qB,MAAA4J,MAAAmb,kBAAA/kB,KAAAuqB,MAIAI,SAAA,WAEA,MAAA3qB,MAAA4J,MAAAkb,WAAA9kB,KAAAuqB,MAIAK,GAAA,SAAAxY,EAAA4B,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OAEA,OAAAphB,MAAA6E,MAAA4lB,GAAA5V,eAAAzC,GAAAmC,IAAAvU,KAAA4J,QAIAihB,6BAAA,WAEA,GAAAC,GAAA,GAAAliB,GAAAwY,QACA2J,EAAA,GAAAniB,GAAAwY,OAEA,OAAA,UAAA4J,EAAAC,GAEAH,EAAA/G,WAAAiH,EAAAhrB,KAAA4J,OACAmhB,EAAAhH,WAAA/jB,KAAAuqB,IAAAvqB,KAAA4J,MAEA,IAAAshB,GAAAH,EAAA1J,IAAA0J,GACAI,EAAAJ,EAAA1J,IAAAyJ,GAEA1Y,EAAA+Y,EAAAD,CAQA,OANAD,KAEA7Y,EAAAxJ,EAAAY,KAAAgJ,MAAAJ,EAAA,EAAA,IAIAA,MAMAgZ,oBAAA,SAAAJ,EAAAC,EAAAjX,GAEA,GAAA5B,GAAApS,KAAA6qB,6BAAAG,EAAAC,GAEAR,EAAAzW,GAAA,GAAApL,GAAAwY,OAEA,OAAAphB,MAAA6E,MAAA4lB,GAAA5V,eAAAzC,GAAAmC,IAAAvU,KAAA4J,QAIAoc,aAAA,SAAAW,GAKA,MAHA3mB,MAAA4J,MAAAoc,aAAAW,GACA3mB,KAAAuqB,IAAAvE,aAAAW,GAEA3mB,MAIAgV,OAAA,SAAAwV,GAEA,MAAAA,GAAA5gB,MAAAoL,OAAAhV,KAAA4J,QAAA4gB,EAAAD,IAAAvV,OAAAhV,KAAAuqB,OAYA3hB,EAAAyiB,KAAA,SAAAtY,EAAAtJ,GAEAzJ,KAAA+S,IAAApP,SAAAoP,EAAAA,EAAA,GAAAnK,GAAAwa,QAAAkI,EAAAA,EAAAA,EAAAA,GACAtrB,KAAAyJ,IAAA9F,SAAA8F,EAAAA,EAAA,GAAAb,GAAAwa,UAAAkI,EAAAA,KAAAA,EAAAA,KAIA1iB,EAAAyiB,KAAAvpB,WAEAE,YAAA4G,EAAAyiB,KAEA9Z,IAAA,SAAAwB,EAAAtJ,GAKA,MAHAzJ,MAAA+S,IAAApB,KAAAoB,GACA/S,KAAAyJ,IAAAkI,KAAAlI,GAEAzJ,MAIAurB,cAAA,SAAAC,GAEAxrB,KAAAyrB,WAEA,KAAA,GAAA/oB,GAAA,EAAAgpB,EAAAF,EAAA7oB,OAAsC+oB,EAAAhpB,EAAQA,IAE9C1C,KAAA2rB,cAAAH,EAAA9oB,GAIA,OAAA1C,OAIA4rB,qBAAA,WAEA,GAAA5K,GAAA,GAAApY,GAAAwa,OAEA,OAAA,UAAAqC,EAAAxS,GAEA,GAAA4Y,GAAA7K,EAAArP,KAAAsB,GAAA4B,eAAA,GAIA,OAHA7U,MAAA+S,IAAApB,KAAA8T,GAAA3B,IAAA+H,GACA7rB,KAAAyJ,IAAAkI,KAAA8T,GAAAlR,IAAAsX,GAEA7rB,SAMAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAma,GAKA,MAHA9rB,MAAA+S,IAAApB,KAAAma,EAAA/Y,KACA/S,KAAAyJ,IAAAkI,KAAAma,EAAAriB,KAEAzJ,MAIAyrB,UAAA,WAKA,MAHAzrB,MAAA+S,IAAA9J,EAAAjJ,KAAA+S,IAAAyL,EAAA8M,EAAAA,EACAtrB,KAAAyJ,IAAAR,EAAAjJ,KAAAyJ,IAAA+U,IAAA8M,EAAAA,GAEAtrB,MAIA+rB,MAAA,WAIA,MAAA/rB,MAAAyJ,IAAAR,EAAAjJ,KAAA+S,IAAA9J,GAAAjJ,KAAAyJ,IAAA+U,EAAAxe,KAAA+S,IAAAyL,GAIAiH,OAAA,SAAAzR,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwa,OACA,OAAAqH,GAAA7G,WAAA5jB,KAAA+S,IAAA/S,KAAAyJ,KAAAoL,eAAA,KAIA5B,KAAA,SAAAe,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwa,OACA,OAAAqH,GAAA1G,WAAA/jB,KAAAyJ,IAAAzJ,KAAA+S,MAIA4Y,cAAA,SAAAX,GAKA,MAHAhrB,MAAA+S,IAAAA,IAAAiY,GACAhrB,KAAAyJ,IAAAA,IAAAuhB,GAEAhrB,MAIAgsB,eAAA,SAAAxb,GAKA,MAHAxQ,MAAA+S,IAAA+Q,IAAAtT,GACAxQ,KAAAyJ,IAAA8K,IAAA/D,GAEAxQ,MAIAisB,eAAA,SAAAhI,GAKA,MAHAjkB,MAAA+S,IAAA4B,WAAAsP,GACAjkB,KAAAyJ,IAAAkL,UAAAsP,GAEAjkB,MAIAksB,cAAA,SAAAlB,GAEA,MAAAA,GAAA/hB,EAAAjJ,KAAA+S,IAAA9J,GAAA+hB,EAAA/hB,EAAAjJ,KAAAyJ,IAAAR,GACA+hB,EAAAxM,EAAAxe,KAAA+S,IAAAyL,GAAAwM,EAAAxM,EAAAxe,KAAAyJ,IAAA+U,GAEA,GAIA,GAIA2N,YAAA,SAAAL,GAEA,MAAA9rB,MAAA+S,IAAA9J,GAAA6iB,EAAA/Y,IAAA9J,GAAA6iB,EAAAriB,IAAAR,GAAAjJ,KAAAyJ,IAAAR,GACAjJ,KAAA+S,IAAAyL,GAAAsN,EAAA/Y,IAAAyL,GAAAsN,EAAAriB,IAAA+U,GAAAxe,KAAAyJ,IAAA+U,GAEA,GAIA,GAIA4N,aAAA,SAAApB,EAAAhX,GAKA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwa,OAEA,OAAAqH,GAAAlZ,KACAyZ,EAAA/hB,EAAAjJ,KAAA+S,IAAA9J,IAAAjJ,KAAAyJ,IAAAR,EAAAjJ,KAAA+S,IAAA9J,IACA+hB,EAAAxM,EAAAxe,KAAA+S,IAAAyL,IAAAxe,KAAAyJ,IAAA+U,EAAAxe,KAAA+S,IAAAyL,KAKA6N,kBAAA,SAAAP,GAIA,MAAAA,GAAAriB,IAAAR,EAAAjJ,KAAA+S,IAAA9J,GAAA6iB,EAAA/Y,IAAA9J,EAAAjJ,KAAAyJ,IAAAR,GACA6iB,EAAAriB,IAAA+U,EAAAxe,KAAA+S,IAAAyL,GAAAsN,EAAA/Y,IAAAyL,EAAAxe,KAAAyJ,IAAA+U,GAEA,GAIA,GAIA8N,WAAA,SAAAtB,EAAAhX,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwa,OACA,OAAAqH,GAAA9Y,KAAAqZ,GAAAxY,MAAAxS,KAAA+S,IAAA/S,KAAAyJ,MAIA8iB,gBAAA,WAEA,GAAAvL,GAAA,GAAApY,GAAAwa,OAEA,OAAA,UAAA4H,GAEA,GAAAwB,GAAAxL,EAAArP,KAAAqZ,GAAAxY,MAAAxS,KAAA+S,IAAA/S,KAAAyJ,IACA,OAAA+iB,GAAA1I,IAAAkH,GAAAroB,aAMA8pB,UAAA,SAAAX,GAKA,MAHA9rB,MAAA+S,IAAAtJ,IAAAqiB,EAAA/Y,KACA/S,KAAAyJ,IAAAsJ,IAAA+Y,EAAAriB,KAEAzJ,MAIA0sB,MAAA,SAAAZ,GAKA,MAHA9rB,MAAA+S,IAAAA,IAAA+Y,EAAA/Y,KACA/S,KAAAyJ,IAAAA,IAAAqiB,EAAAriB,KAEAzJ,MAIA2sB,UAAA,SAAAzX,GAKA,MAHAlV,MAAA+S,IAAAwB,IAAAW,GACAlV,KAAAyJ,IAAA8K,IAAAW,GAEAlV,MAIAgV,OAAA,SAAA8W,GAEA,MAAAA,GAAA/Y,IAAAiC,OAAAhV,KAAA+S,MAAA+Y,EAAAriB,IAAAuL,OAAAhV,KAAAyJ,OAaAb,EAAAgkB,KAAA,SAAA7Z,EAAAtJ,GAEAzJ,KAAA+S,IAAApP,SAAAoP,EAAAA,EAAA,GAAAnK,GAAAwY,QAAAkK,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAtrB,KAAAyJ,IAAA9F,SAAA8F,EAAAA,EAAA,GAAAb,GAAAwY,UAAAkK,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,KAIA1iB,EAAAgkB,KAAA9qB,WAEAE,YAAA4G,EAAAgkB,KAEArb,IAAA,SAAAwB,EAAAtJ,GAKA,MAHAzJ,MAAA+S,IAAApB,KAAAoB,GACA/S,KAAAyJ,IAAAkI,KAAAlI,GAEAzJ,MAIAurB,cAAA,SAAAC,GAEAxrB,KAAAyrB,WAEA,KAAA,GAAA/oB,GAAA,EAAAgpB,EAAAF,EAAA7oB,OAAsC+oB,EAAAhpB,EAAQA,IAE9C1C,KAAA2rB,cAAAH,EAAA9oB,GAIA,OAAA1C,OAIA4rB,qBAAA,WAEA,GAAA5K,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAAqE,EAAAxS,GAEA,GAAA4Y,GAAA7K,EAAArP,KAAAsB,GAAA4B,eAAA,GAKA,OAHA7U,MAAA+S,IAAApB,KAAA8T,GAAA3B,IAAA+H,GACA7rB,KAAAyJ,IAAAkI,KAAA8T,GAAAlR,IAAAsX,GAEA7rB,SAMA6sB,cAAA,WAKA,GAAA7L,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAA/d,GAEA,GAAAypB,GAAA9sB,IA8CA,OA5CAqD,GAAA0pB,mBAAA,GAEA/sB,KAAAyrB,YAEApoB,EAAA2pB,SAAA,SAAAC,GAEA,GAAAC,GAAAD,EAAAC,QAEA,IAAAvpB,SAAAupB,EAEA,GAAAA,YAAAtkB,GAAAukB,SAIA,IAAA,GAFAC,GAAAF,EAAAE,SAEA1qB,EAAA,EAAAgpB,EAAA0B,EAAAzqB,OAA4C+oB,EAAAhpB,EAAQA,IAEpDse,EAAArP,KAAAyb,EAAA1qB,IAEAse,EAAAgF,aAAAiH,EAAAjG,aAEA8F,EAAAnB,cAAA3K,OAIM,IAAAkM,YAAAtkB,GAAAykB,gBAAA1pB,SAAAupB,EAAAI,WAAA,SAIN,IAAA,GAFAC,GAAAL,EAAAI,WAAA,SAAArY,MAEAvS,EAAA,EAAAgpB,EAAA6B,EAAA5qB,OAA6C+oB,EAAAhpB,EAAQA,GAAA,EAErDse,EAAAzP,IAAAgc,EAAA7qB,GAAA6qB,EAAA7qB,EAAA,GAAA6qB,EAAA7qB,EAAA,IAEAse,EAAAgF,aAAAiH,EAAAjG,aAEA8F,EAAAnB,cAAA3K,KAUAhhB,SAMAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAma,GAKA,MAHA9rB,MAAA+S,IAAApB,KAAAma,EAAA/Y,KACA/S,KAAAyJ,IAAAkI,KAAAma,EAAAriB,KAEAzJ,MAIAyrB,UAAA,WAKA,MAHAzrB,MAAA+S,IAAA9J,EAAAjJ,KAAA+S,IAAAyL,EAAAxe,KAAA+S,IAAA0L,EAAA6M,EAAAA,EACAtrB,KAAAyJ,IAAAR,EAAAjJ,KAAAyJ,IAAA+U,EAAAxe,KAAAyJ,IAAAgV,IAAA6M,EAAAA,GAEAtrB,MAIA+rB,MAAA,WAIA,MAAA/rB,MAAAyJ,IAAAR,EAAAjJ,KAAA+S,IAAA9J,GAAAjJ,KAAAyJ,IAAA+U,EAAAxe,KAAA+S,IAAAyL,GAAAxe,KAAAyJ,IAAAgV,EAAAze,KAAA+S,IAAA0L,GAIAgH,OAAA,SAAAzR,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OACA,OAAAqJ,GAAA7G,WAAA5jB,KAAA+S,IAAA/S,KAAAyJ,KAAAoL,eAAA,KAIA5B,KAAA,SAAAe,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OACA,OAAAqJ,GAAA1G,WAAA/jB,KAAAyJ,IAAAzJ,KAAA+S,MAIA4Y,cAAA,SAAAX,GAKA,MAHAhrB,MAAA+S,IAAAA,IAAAiY,GACAhrB,KAAAyJ,IAAAA,IAAAuhB,GAEAhrB,MAIAgsB,eAAA,SAAAxb,GAKA,MAHAxQ,MAAA+S,IAAA+Q,IAAAtT,GACAxQ,KAAAyJ,IAAA8K,IAAA/D,GAEAxQ,MAIAisB,eAAA,SAAAhI,GAKA,MAHAjkB,MAAA+S,IAAA4B,WAAAsP,GACAjkB,KAAAyJ,IAAAkL,UAAAsP,GAEAjkB,MAIAksB,cAAA,SAAAlB,GAEA,MAAAA,GAAA/hB,EAAAjJ,KAAA+S,IAAA9J,GAAA+hB,EAAA/hB,EAAAjJ,KAAAyJ,IAAAR,GACA+hB,EAAAxM,EAAAxe,KAAA+S,IAAAyL,GAAAwM,EAAAxM,EAAAxe,KAAAyJ,IAAA+U,GACAwM,EAAAvM,EAAAze,KAAA+S,IAAA0L,GAAAuM,EAAAvM,EAAAze,KAAAyJ,IAAAgV,GAEA,GAIA,GAIA0N,YAAA,SAAAL,GAEA,MAAA9rB,MAAA+S,IAAA9J,GAAA6iB,EAAA/Y,IAAA9J,GAAA6iB,EAAAriB,IAAAR,GAAAjJ,KAAAyJ,IAAAR,GACAjJ,KAAA+S,IAAAyL,GAAAsN,EAAA/Y,IAAAyL,GAAAsN,EAAAriB,IAAA+U,GAAAxe,KAAAyJ,IAAA+U,GACAxe,KAAA+S,IAAA0L,GAAAqN,EAAA/Y,IAAA0L,GAAAqN,EAAAriB,IAAAgV,GAAAze,KAAAyJ,IAAAgV,GAEA,GAIA,GAIA2N,aAAA,SAAApB,EAAAhX,GAKA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OAEA,OAAAqJ,GAAAlZ,KACAyZ,EAAA/hB,EAAAjJ,KAAA+S,IAAA9J,IAAAjJ,KAAAyJ,IAAAR,EAAAjJ,KAAA+S,IAAA9J,IACA+hB,EAAAxM,EAAAxe,KAAA+S,IAAAyL,IAAAxe,KAAAyJ,IAAA+U,EAAAxe,KAAA+S,IAAAyL,IACAwM,EAAAvM,EAAAze,KAAA+S,IAAA0L,IAAAze,KAAAyJ,IAAAgV,EAAAze,KAAA+S,IAAA0L,KAKA4N,kBAAA,SAAAP,GAIA,MAAAA,GAAAriB,IAAAR,EAAAjJ,KAAA+S,IAAA9J,GAAA6iB,EAAA/Y,IAAA9J,EAAAjJ,KAAAyJ,IAAAR,GACA6iB,EAAAriB,IAAA+U,EAAAxe,KAAA+S,IAAAyL,GAAAsN,EAAA/Y,IAAAyL,EAAAxe,KAAAyJ,IAAA+U,GACAsN,EAAAriB,IAAAgV,EAAAze,KAAA+S,IAAA0L,GAAAqN,EAAA/Y,IAAA0L,EAAAze,KAAAyJ,IAAAgV,GAEA,GAIA,GAIA6N,WAAA,SAAAtB,EAAAhX,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OACA,OAAAqJ,GAAA9Y,KAAAqZ,GAAAxY,MAAAxS,KAAA+S,IAAA/S,KAAAyJ,MAIA8iB,gBAAA,WAEA,GAAAvL,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAA4J,GAEA,GAAAwB,GAAAxL,EAAArP,KAAAqZ,GAAAxY,MAAAxS,KAAA+S,IAAA/S,KAAAyJ,IACA,OAAA+iB,GAAA1I,IAAAkH,GAAAroB,aAMA6qB,kBAAA,WAEA,GAAAxM,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAApN,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAA6kB,MAKA,OAHAhD,GAAAhF,OAAAzlB,KAAAylB,SACAgF,EAAAiD,OAAA,GAAA1tB,KAAAiT,KAAA+N,GAAAre,SAEA8nB,MAMAgC,UAAA,SAAAX,GAKA,MAHA9rB,MAAA+S,IAAAtJ,IAAAqiB,EAAA/Y,KACA/S,KAAAyJ,IAAAsJ,IAAA+Y,EAAAriB,KAEAzJ,MAIA0sB,MAAA,SAAAZ,GAKA,MAHA9rB,MAAA+S,IAAAA,IAAA+Y,EAAA/Y,KACA/S,KAAAyJ,IAAAA,IAAAqiB,EAAAriB,KAEAzJ,MAIAgmB,aAAA,WAEA,GAAAwF,IACA,GAAA5iB,GAAAwY,QACA,GAAAxY,GAAAwY,QACA,GAAAxY,GAAAwY,QACA,GAAAxY,GAAAwY,QACA,GAAAxY,GAAAwY,QACA,GAAAxY,GAAAwY,QACA,GAAAxY,GAAAwY,QACA,GAAAxY,GAAAwY,QAGA,OAAA,UAAAuF,GAeA,MAZA6E,GAAA,GAAAja,IAAAvR,KAAA+S,IAAA9J,EAAAjJ,KAAA+S,IAAAyL,EAAAxe,KAAA+S,IAAA0L,GAAAuH,aAAAW,GACA6E,EAAA,GAAAja,IAAAvR,KAAA+S,IAAA9J,EAAAjJ,KAAA+S,IAAAyL,EAAAxe,KAAAyJ,IAAAgV,GAAAuH,aAAAW,GACA6E,EAAA,GAAAja,IAAAvR,KAAA+S,IAAA9J,EAAAjJ,KAAAyJ,IAAA+U,EAAAxe,KAAA+S,IAAA0L,GAAAuH,aAAAW,GACA6E,EAAA,GAAAja,IAAAvR,KAAA+S,IAAA9J,EAAAjJ,KAAAyJ,IAAA+U,EAAAxe,KAAAyJ,IAAAgV,GAAAuH,aAAAW,GACA6E,EAAA,GAAAja,IAAAvR,KAAAyJ,IAAAR,EAAAjJ,KAAA+S,IAAAyL,EAAAxe,KAAA+S,IAAA0L,GAAAuH,aAAAW,GACA6E,EAAA,GAAAja,IAAAvR,KAAAyJ,IAAAR,EAAAjJ,KAAA+S,IAAAyL,EAAAxe,KAAAyJ,IAAAgV,GAAAuH,aAAAW,GACA6E,EAAA,GAAAja,IAAAvR,KAAAyJ,IAAAR,EAAAjJ,KAAAyJ,IAAA+U,EAAAxe,KAAA+S,IAAA0L,GAAAuH,aAAAW,GACA6E,EAAA,GAAAja,IAAAvR,KAAAyJ,IAAAR,EAAAjJ,KAAAyJ,IAAA+U,EAAAxe,KAAAyJ,IAAAgV,GAAAuH,aAAAW,GAEA3mB,KAAAyrB,YACAzrB,KAAAurB,cAAAC,GAEAxrB,SAMA2sB,UAAA,SAAAzX,GAKA,MAHAlV,MAAA+S,IAAAwB,IAAAW,GACAlV,KAAAyJ,IAAA8K,IAAAW,GAEAlV,MAIAgV,OAAA,SAAA8W,GAEA,MAAAA,GAAA/Y,IAAAiC,OAAAhV,KAAA+S,MAAA+Y,EAAAriB,IAAAuL,OAAAhV,KAAAyJ,OAcAb,EAAA+kB,QAAA,WAEA3tB,KAAAogB,SAAA,GAAAwN,eAEA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,IAIAjnB,UAAAhE,OAAA,GAEAuF,QAAAoI,MAAA,kFAMA1H,EAAA+kB,QAAA7rB,WAEAE,YAAA4G,EAAA+kB,QAEApc,IAAA,SAAAsc,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAlO,GAAAngB,KAAAogB,QAMA,OAJAD,GAAA,GAAA0N,EAAgB1N,EAAA,GAAA2N,EAAe3N,EAAA,GAAA4N,EAC/B5N,EAAA,GAAA6N,EAAgB7N,EAAA,GAAA8N,EAAe9N,EAAA,GAAA+N,EAC/B/N,EAAA,GAAAgO,EAAgBhO,EAAA,GAAAiO,EAAejO,EAAA,GAAAkO,EAE/BruB,MAIAsuB,SAAA,WAUA,MARAtuB,MAAAuR,IAEA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GAIAvR,MAIAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAAsP,UAAAtR,KAAAogB,WAIAzO,KAAA,SAAAnR,GAEA,GAAAooB,GAAApoB,EAAA4f,QAUA,OARApgB,MAAAuR,IAEAqX,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIA5oB,MAIAuiB,gBAAA,SAAA/R,GAGA,MADAtI,SAAAuI,KAAA,kGACAD,EAAAsV,aAAA9lB,OAIAuuB,qBAAA,SAAAzM,GAGA,MADA5Z,SAAAuI,KAAA,6GACAzQ,KAAAwuB,oBAAA1M,IAIA0M,oBAAA,WAEA,GAAAxN,EAEA,OAAA,UAAA/L,EAAAC,EAAAvS,GAEAgB,SAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,SACAzd,SAAAuR,IAAAA,EAAA,GACAvR,SAAAhB,IAAAA,EAAAsS,EAAAtS,OAEA,KAAA,GAAAD,GAAA,EAAAoE,EAAAoO,EAA+BvS,EAAAD,EAAYA,GAAA,EAAAoE,GAAA,EAE3Cka,EAAA1P,UAAA2D,EAAAnO,GACAka,EAAA8E,aAAA9lB,MACAghB,EAAA7L,QAAAF,EAAAnO,EAIA,OAAAmO,OAMAwZ,cAAA,WAEA,GAAAzN,EAEA,OAAA,UAAA0N,EAAAxZ,EAAAvS,GAEAgB,SAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,SACAzd,SAAAuR,IAAAA,EAAA,GACAvR,SAAAhB,IAAAA,EAAA+rB,EAAA/rB,OAAA+rB,EAAAnJ,SAEA,KAAA,GAAA7iB,GAAA,EAAAoE,EAAAoO,EAA+BvS,EAAAD,EAAYA,IAAAoE,IAE3Cka,EAAA/X,EAAAylB,EAAAC,KAAA7nB,GACAka,EAAAxC,EAAAkQ,EAAAE,KAAA9nB,GACAka,EAAAvC,EAAAiQ,EAAAG,KAAA/nB,GAEAka,EAAA8E,aAAA9lB,MAEA0uB,EAAAI,OAAA9N,EAAA/X,EAAA+X,EAAAxC,EAAAwC,EAAAvC,EAIA,OAAAiQ,OAMA7Z,eAAA,SAAAvC,GAEA,GAAA6N,GAAAngB,KAAAogB,QAMA,OAJAD,GAAA,IAAA7N,EAAe6N,EAAA,IAAA7N,EAAc6N,EAAA,IAAA7N,EAC7B6N,EAAA,IAAA7N,EAAe6N,EAAA,IAAA7N,EAAc6N,EAAA,IAAA7N,EAC7B6N,EAAA,IAAA7N,EAAe6N,EAAA,IAAA7N,EAAc6N,EAAA,IAAA7N,EAE7BtS,MAIA+uB,YAAA,WAEA,GAAA5O,GAAAngB,KAAAogB,SAEA0B,EAAA3B,EAAA,GAAAzO,EAAAyO,EAAA,GAAA1f,EAAA0f,EAAA,GACA+F,EAAA/F,EAAA,GAAA4F,EAAA5F,EAAA,GAAA6O,EAAA7O,EAAA,GACA1O,EAAA0O,EAAA,GAAA9N,EAAA8N,EAAA,GAAAzd,EAAAyd,EAAA,EAEA,OAAA2B,GAAAiE,EAAArjB,EAAAof,EAAAkN,EAAA3c,EAAAX,EAAAwU,EAAAxjB,EAAAgP,EAAAsd,EAAAvd,EAAAhR,EAAAylB,EAAA7T,EAAA5R,EAAAslB,EAAAtU,GAIAsV,WAAA,SAAAJ,EAAAsI,GAKA,GAAArG,GAAAjC,EAAAvG,SACAD,EAAAngB,KAAAogB,QAEAD,GAAA,GAAAyI,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAzI,EAAA,IAAAyI,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAzI,EAAA,GAAAyI,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAzI,EAAA,IAAAyI,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAzI,EAAA,GAAAyI,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAzI,EAAA,IAAAyI,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAzI,EAAA,GAAAyI,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAzI,EAAA,IAAAyI,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAzI,EAAA,GAAAyI,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAEA,IAAAsG,GAAAtG,EAAA,GAAAzI,EAAA,GAAAyI,EAAA,GAAAzI,EAAA,GAAAyI,EAAA,GAAAzI,EAAA,EAIA,IAAA,IAAA+O,EAAA,CAEA,GAAAC,GAAA,6DAEA,IAAAF,EAEA,KAAA,IAAA7P,OAAA+P,EAUA,OANAjnB,SAAAuI,KAAA0e,GAIAnvB,KAAAsuB,WAEAtuB,KAMA,MAFAA,MAAA6U,eAAA,EAAAqa,GAEAlvB,MAIAovB,UAAA,WAEA,GAAAC,GAAA7uB,EAAAR,KAAAogB,QAMA,OAJAiP,GAAA7uB,EAAA,GAAeA,EAAA,GAAAA,EAAA,GAAiBA,EAAA,GAAA6uB,EAChCA,EAAA7uB,EAAA,GAAeA,EAAA,GAAAA,EAAA,GAAiBA,EAAA,GAAA6uB,EAChCA,EAAA7uB,EAAA,GAAeA,EAAA,GAAAA,EAAA,GAAiBA,EAAA,GAAA6uB,EAEhCrvB,MAIAsvB,qBAAA,SAAAra,EAAAC,GAEA,GAAAiL,GAAAngB,KAAAogB,QAcA,OAZAnL,GAAAC,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GAEAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GAEAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GAEAlL,GAIAsa,gBAAA,SAAA/uB,GAMA,MAFAR,MAAA+mB,WAAAvmB,GAAA4uB,YAEApvB,MAIAwvB,mBAAA,SAAAhe,GAEA,GAAAhR,GAAAR,KAAAogB,QAYA,OAVA5O,GAAA,GAAAhR,EAAA,GACAgR,EAAA,GAAAhR,EAAA,GACAgR,EAAA,GAAAhR,EAAA,GACAgR,EAAA,GAAAhR,EAAA,GACAgR,EAAA,GAAAhR,EAAA,GACAgR,EAAA,GAAAhR,EAAA,GACAgR,EAAA,GAAAhR,EAAA,GACAgR,EAAA,GAAAhR,EAAA,GACAgR,EAAA,GAAAhR,EAAA,GAEAR,MAIAsR,UAAA,SAAA2D,GAIA,MAFAjV,MAAAogB,SAAA7O,IAAA0D,GAEAjV,MAIAmV,QAAA,WAEA,GAAAgL,GAAAngB,KAAAogB,QAEA,QACAD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAsBAvX,EAAAge,QAAA,WAEA5mB,KAAAogB,SAAA,GAAAwN,eAEA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,IAIAjnB,UAAAhE,OAAA,GAEAuF,QAAAoI,MAAA,kFAMA1H,EAAAge,QAAA9kB,WAEAE,YAAA4G,EAAAge,QAEArV,IAAA,SAAAsc,EAAAC,EAAAC,EAAA0B,EAAAzB,EAAAC,EAAAC,EAAAwB,EAAAvB,EAAAC,EAAAC,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAA5P,GAAAngB,KAAAogB,QAOA,OALAD,GAAA,GAAA0N,EAAgB1N,EAAA,GAAA2N,EAAe3N,EAAA,GAAA4N,EAAe5N,EAAA,IAAAsP,EAC9CtP,EAAA,GAAA6N,EAAgB7N,EAAA,GAAA8N,EAAe9N,EAAA,GAAA+N,EAAe/N,EAAA,IAAAuP,EAC9CvP,EAAA,GAAAgO,EAAgBhO,EAAA,GAAAiO,EAAejO,EAAA,IAAAkO,EAAgBlO,EAAA,IAAAwP,EAC/CxP,EAAA,GAAAyP,EAAgBzP,EAAA,GAAA0P,EAAe1P,EAAA,IAAA2P,EAAgB3P,EAAA,IAAA4P,EAE/C/vB,MAIAsuB,SAAA,WAWA,MATAtuB,MAAAuR,IAEA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAIAvR,MAIAoT,MAAA,WAEA,OAAA,GAAAxK,GAAAge,SAAAtV,UAAAtR,KAAAogB,WAIAzO,KAAA,SAAAnR,GAIA,MAFAR,MAAAogB,SAAA7O,IAAA/Q,EAAA4f,UAEApgB,MAIAgwB,gBAAA,SAAAxvB,GAGA,MADA0H,SAAAuI,KAAA,0EACAzQ,KAAAiwB,aAAAzvB,IAIAyvB,aAAA,SAAAzvB,GAEA,GAAA2f,GAAAngB,KAAAogB,SACAwI,EAAApoB,EAAA4f,QAMA,OAJAD,GAAA,IAAAyI,EAAA,IACAzI,EAAA,IAAAyI,EAAA,IACAzI,EAAA,IAAAyI,EAAA,IAEA5oB,MAIAkwB,aAAA,SAAAC,EAAAC,EAAAC,GAEA,GAAAlQ,GAAAngB,KAAAogB,QAMA,OAJA+P,GAAA5e,IAAA4O,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAiQ,EAAA7e,IAAA4O,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAkQ,EAAA9e,IAAA4O,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEAngB,MAIAswB,UAAA,SAAAH,EAAAC,EAAAC,GASA,MAPArwB,MAAAuR,IACA4e,EAAAlnB,EAAAmnB,EAAAnnB,EAAAonB,EAAApnB,EAAA,EACAknB,EAAA3R,EAAA4R,EAAA5R,EAAA6R,EAAA7R,EAAA,EACA2R,EAAA1R,EAAA2R,EAAA3R,EAAA4R,EAAA5R,EAAA,EACA,EAAA,EAAA,EAAA,GAGAze,MAIAuwB,gBAAA,WAEA,GAAAvP,EAEA,OAAA,UAAAxgB,GAEAmD,SAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,QAEA,IAAAjB,GAAAngB,KAAAogB,SACAwI,EAAApoB,EAAA4f,SAEAoQ,EAAA,EAAAxP,EAAAzP,IAAAqX,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAjmB,SACA8tB,EAAA,EAAAzP,EAAAzP,IAAAqX,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAjmB,SACA+tB,EAAA,EAAA1P,EAAAzP,IAAAqX,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAAAjmB,QAcA,OAZAwd,GAAA,GAAAyI,EAAA,GAAA4H,EACArQ,EAAA,GAAAyI,EAAA,GAAA4H,EACArQ,EAAA,GAAAyI,EAAA,GAAA4H,EAEArQ,EAAA,GAAAyI,EAAA,GAAA6H,EACAtQ,EAAA,GAAAyI,EAAA,GAAA6H,EACAtQ,EAAA,GAAAyI,EAAA,GAAA6H,EAEAtQ,EAAA,GAAAyI,EAAA,GAAA8H,EACAvQ,EAAA,GAAAyI,EAAA,GAAA8H,EACAvQ,EAAA,IAAAyI,EAAA,IAAA8H,EAEA1wB,SAMA2wB,sBAAA,SAAA1R,GAEAA,YAAArW,GAAAuW,QAAA,GAEAjX,QAAAoI,MAAA,uGAIA,IAAA6P,GAAAngB,KAAAogB,SAEAnX,EAAAgW,EAAAhW,EAAAuV,EAAAS,EAAAT,EAAAC,EAAAQ,EAAAR,EACAqD,EAAAtY,KAAA8V,IAAArW,GAAAyI,EAAAlI,KAAAkW,IAAAzW,GACAxI,EAAA+I,KAAA8V,IAAAd,GAAA0H,EAAA1c,KAAAkW,IAAAlB,GACAuH,EAAAvc,KAAA8V,IAAAb,GAAAuQ,EAAAxlB,KAAAkW,IAAAjB,EAEA,IAAA,QAAAQ,EAAAY,MAAA,CAEA,GAAA+Q,GAAA9O,EAAAiE,EAAA8K,EAAA/O,EAAAkN,EAAA8B,EAAApf,EAAAqU,EAAAgL,EAAArf,EAAAsd,CAEA7O,GAAA,GAAA1f,EAAAslB,EACA5F,EAAA,IAAA1f,EAAAuuB,EACA7O,EAAA,GAAA+F,EAEA/F,EAAA,GAAA0Q,EAAAC,EAAA5K,EACA/F,EAAA,GAAAyQ,EAAAG,EAAA7K,EACA/F,EAAA,IAAAzO,EAAAjR,EAEA0f,EAAA,GAAA4Q,EAAAH,EAAA1K,EACA/F,EAAA,GAAA2Q,EAAAD,EAAA3K,EACA/F,EAAA,IAAA2B,EAAArhB,MAEG,IAAA,QAAAwe,EAAAY,MAAA,CAEH,GAAAmR,GAAAvwB,EAAAslB,EAAAkL,EAAAxwB,EAAAuuB,EAAAkC,EAAAhL,EAAAH,EAAAoL,EAAAjL,EAAA8I,CAEA7O,GAAA,GAAA6Q,EAAAG,EAAAzf,EACAyO,EAAA,GAAA+Q,EAAAxf,EAAAuf,EACA9Q,EAAA,GAAA2B,EAAAoE,EAEA/F,EAAA,GAAA2B,EAAAkN,EACA7O,EAAA,GAAA2B,EAAAiE,EACA5F,EAAA,IAAAzO,EAEAyO,EAAA,GAAA8Q,EAAAvf,EAAAwf,EACA/Q,EAAA,GAAAgR,EAAAH,EAAAtf,EACAyO,EAAA,IAAA2B,EAAArhB,MAEG,IAAA,QAAAwe,EAAAY,MAAA,CAEH,GAAAmR,GAAAvwB,EAAAslB,EAAAkL,EAAAxwB,EAAAuuB,EAAAkC,EAAAhL,EAAAH,EAAAoL,EAAAjL,EAAA8I,CAEA7O,GAAA,GAAA6Q,EAAAG,EAAAzf,EACAyO,EAAA,IAAA2B,EAAAkN,EACA7O,EAAA,GAAA+Q,EAAAD,EAAAvf,EAEAyO,EAAA,GAAA8Q,EAAAC,EAAAxf,EACAyO,EAAA,GAAA2B,EAAAiE,EACA5F,EAAA,GAAAgR,EAAAH,EAAAtf,EAEAyO,EAAA,IAAA2B,EAAAoE,EACA/F,EAAA,GAAAzO,EACAyO,EAAA,IAAA2B,EAAArhB,MAEG,IAAA,QAAAwe,EAAAY,MAAA,CAEH,GAAA+Q,GAAA9O,EAAAiE,EAAA8K,EAAA/O,EAAAkN,EAAA8B,EAAApf,EAAAqU,EAAAgL,EAAArf,EAAAsd,CAEA7O,GAAA,GAAA1f,EAAAslB,EACA5F,EAAA,GAAA2Q,EAAA5K,EAAA2K,EACA1Q,EAAA,GAAAyQ,EAAA1K,EAAA6K,EAEA5Q,EAAA,GAAA1f,EAAAuuB,EACA7O,EAAA,GAAA4Q,EAAA7K,EAAA0K,EACAzQ,EAAA,GAAA0Q,EAAA3K,EAAA4K,EAEA3Q,EAAA,IAAA+F,EACA/F,EAAA,GAAAzO,EAAAjR,EACA0f,EAAA,IAAA2B,EAAArhB,MAEG,IAAA,QAAAwe,EAAAY,MAAA,CAEH,GAAAuR,GAAAtP,EAAArhB,EAAA4wB,EAAAvP,EAAAoE,EAAAoL,EAAA5f,EAAAjR,EAAA8wB,EAAA7f,EAAAwU,CAEA/F,GAAA,GAAA1f,EAAAslB,EACA5F,EAAA,GAAAoR,EAAAH,EAAApC,EACA7O,EAAA,GAAAmR,EAAAtC,EAAAqC,EAEAlR,EAAA,GAAA6O,EACA7O,EAAA,GAAA2B,EAAAiE,EACA5F,EAAA,IAAAzO,EAAAqU,EAEA5F,EAAA,IAAA+F,EAAAH,EACA5F,EAAA,GAAAkR,EAAArC,EAAAsC,EACAnR,EAAA,IAAAiR,EAAAG,EAAAvC,MAEG,IAAA,QAAA/P,EAAAY,MAAA,CAEH,GAAAuR,GAAAtP,EAAArhB,EAAA4wB,EAAAvP,EAAAoE,EAAAoL,EAAA5f,EAAAjR,EAAA8wB,EAAA7f,EAAAwU,CAEA/F,GAAA,GAAA1f,EAAAslB,EACA5F,EAAA,IAAA6O,EACA7O,EAAA,GAAA+F,EAAAH,EAEA5F,EAAA,GAAAiR,EAAApC,EAAAuC,EACApR,EAAA,GAAA2B,EAAAiE,EACA5F,EAAA,GAAAkR,EAAArC,EAAAsC,EAEAnR,EAAA,GAAAmR,EAAAtC,EAAAqC,EACAlR,EAAA,GAAAzO,EAAAqU,EACA5F,EAAA,IAAAoR,EAAAvC,EAAAoC,EAeA,MAVAjR,GAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,IAAA,EAGAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EAEAngB,MAIAwxB,0BAAA,SAAArf,GAIA,MAFAjK,SAAAuI,KAAA,kGAEAzQ,KAAAgqB,2BAAA7X,IAIA6X,2BAAA,SAAA7X,GAEA,GAAAgO,GAAAngB,KAAAogB,SAEAnX,EAAAkJ,EAAAlJ,EAAAuV,EAAArM,EAAAqM,EAAAC,EAAAtM,EAAAsM,EAAAC,EAAAvM,EAAAuM,EACA+S,EAAAxoB,EAAAA,EAAAyoB,EAAAlT,EAAAA,EAAAmT,EAAAlT,EAAAA,EACA2K,EAAAngB,EAAAwoB,EAAAlI,EAAAtgB,EAAAyoB,EAAAlI,EAAAvgB,EAAA0oB,EACAtI,EAAA7K,EAAAkT,EAAAjI,EAAAjL,EAAAmT,EAAArI,EAAA7K,EAAAkT,EACAC,EAAAlT,EAAA+S,EAAAI,EAAAnT,EAAAgT,EAAAI,EAAApT,EAAAiT,CAyBA,OAvBAxR,GAAA,GAAA,GAAAkJ,EAAAC,GACAnJ,EAAA,GAAAoJ,EAAAuI,EACA3R,EAAA,GAAAqJ,EAAAqI,EAEA1R,EAAA,GAAAoJ,EAAAuI,EACA3R,EAAA,GAAA,GAAAiJ,EAAAE,GACAnJ,EAAA,GAAAsJ,EAAAmI,EAEAzR,EAAA,GAAAqJ,EAAAqI,EACA1R,EAAA,GAAAsJ,EAAAmI,EACAzR,EAAA,IAAA,GAAAiJ,EAAAC,GAGAlJ,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,IAAA,EAGAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EAEAngB,MAIA+xB,OAAA,WAEA,GAAA9oB,GAAAuV,EAAAC,CAEA,OAAA,UAAAuT,EAAAxvB,EAAAyvB,GAEAtuB,SAAAsF,IAAAA,EAAA,GAAAL,GAAAwY,SACAzd,SAAA6a,IAAAA,EAAA,GAAA5V,GAAAwY,SACAzd,SAAA8a,IAAAA,EAAA,GAAA7V,GAAAwY,QAEA,IAAAjB,GAAAngB,KAAAogB,QA0BA,OAxBA3B,GAAAsF,WAAAiO,EAAAxvB,GAAAgf,YAEA,IAAA/C,EAAAmD,aAEAnD,EAAAA,EAAA,GAIAxV,EAAAsY,aAAA0Q,EAAAxT,GAAA+C,YAEA,IAAAvY,EAAA2Y,aAEAnD,EAAAxV,GAAA,KACAA,EAAAsY,aAAA0Q,EAAAxT,GAAA+C,aAIAhD,EAAA+C,aAAA9C,EAAAxV,GAGAkX,EAAA,GAAAlX,EAAAA,EAAiBkX,EAAA,GAAA3B,EAAAvV,EAAekX,EAAA,GAAA1B,EAAAxV,EAChCkX,EAAA,GAAAlX,EAAAuV,EAAiB2B,EAAA,GAAA3B,EAAAA,EAAe2B,EAAA,GAAA1B,EAAAD,EAChC2B,EAAA,GAAAlX,EAAAwV,EAAiB0B,EAAA,GAAA3B,EAAAC,EAAe0B,EAAA,IAAA1B,EAAAA,EAEhCze,SAMA4U,SAAA,SAAApU,EAAA0xB,GAEA,MAAAvuB,UAAAuuB,GAEAhqB,QAAAuI,KAAA,oGACAzQ,KAAA6mB,iBAAArmB,EAAA0xB,IAIAlyB,KAAA6mB,iBAAA7mB,KAAAQ,IAIAqmB,iBAAA,SAAA/E,EAAApQ,GAEA,GAAAkf,GAAA9O,EAAA1B,SACA0Q,EAAApf,EAAA0O,SACAD,EAAAngB,KAAAogB,SAEA+R,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,IACA2B,EAAA3B,EAAA,GAAA4B,EAAA5B,EAAA,GAAA6B,EAAA7B,EAAA,GAAA8B,EAAA9B,EAAA,IACA+B,EAAA/B,EAAA,GAAAgC,EAAAhC,EAAA,GAAAiC,EAAAjC,EAAA,IAAAkC,EAAAlC,EAAA,IACAmC,EAAAnC,EAAA,GAAAoC,EAAApC,EAAA,GAAAqC,EAAArC,EAAA,IAAAsC,EAAAtC,EAAA,IAEAuC,EAAArC,EAAA,GAAAsC,EAAAtC,EAAA,GAAAuC,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA,IACAyC,EAAAzC,EAAA,GAAA0C,EAAA1C,EAAA,GAAA2C,EAAA3C,EAAA,GAAA4C,EAAA5C,EAAA,IACA6C,EAAA7C,EAAA,GAAA8C,EAAA9C,EAAA,GAAA+C,EAAA/C,EAAA,IAAAgD,EAAAhD,EAAA,IACAiD,EAAAjD,EAAA,GAAAkD,EAAAlD,EAAA,GAAAmD,EAAAnD,EAAA,IAAAoD,EAAApD,EAAA,GAsBA,OApBA3Q,GAAA,GAAAgS,EAAAgB,EAAAf,EAAAmB,EAAAlB,EAAAsB,EAAArB,EAAAyB,EACA5T,EAAA,GAAAgS,EAAAiB,EAAAhB,EAAAoB,EAAAnB,EAAAuB,EAAAtB,EAAA0B,EACA7T,EAAA,GAAAgS,EAAAkB,EAAAjB,EAAAqB,EAAApB,EAAAwB,EAAAvB,EAAA2B,EACA9T,EAAA,IAAAgS,EAAAmB,EAAAlB,EAAAsB,EAAArB,EAAAyB,EAAAxB,EAAA4B,EAEA/T,EAAA,GAAAoS,EAAAY,EAAAX,EAAAe,EAAAd,EAAAkB,EAAAjB,EAAAqB,EACA5T,EAAA,GAAAoS,EAAAa,EAAAZ,EAAAgB,EAAAf,EAAAmB,EAAAlB,EAAAsB,EACA7T,EAAA,GAAAoS,EAAAc,EAAAb,EAAAiB,EAAAhB,EAAAoB,EAAAnB,EAAAuB,EACA9T,EAAA,IAAAoS,EAAAe,EAAAd,EAAAkB,EAAAjB,EAAAqB,EAAApB,EAAAwB,EAEA/T,EAAA,GAAAwS,EAAAQ,EAAAP,EAAAW,EAAAV,EAAAc,EAAAb,EAAAiB,EACA5T,EAAA,GAAAwS,EAAAS,EAAAR,EAAAY,EAAAX,EAAAe,EAAAd,EAAAkB,EACA7T,EAAA,IAAAwS,EAAAU,EAAAT,EAAAa,EAAAZ,EAAAgB,EAAAf,EAAAmB,EACA9T,EAAA,IAAAwS,EAAAW,EAAAV,EAAAc,EAAAb,EAAAiB,EAAAhB,EAAAoB,EAEA/T,EAAA,GAAA4S,EAAAI,EAAAH,EAAAO,EAAAN,EAAAU,EAAAT,EAAAa,EACA5T,EAAA,GAAA4S,EAAAK,EAAAJ,EAAAQ,EAAAP,EAAAW,EAAAV,EAAAc,EACA7T,EAAA,IAAA4S,EAAAM,EAAAL,EAAAS,EAAAR,EAAAY,EAAAX,EAAAe,EACA9T,EAAA,IAAA4S,EAAAO,EAAAN,EAAAU,EAAAT,EAAAa,EAAAZ,EAAAgB,EAEAl0B,MAIAm0B,gBAAA,SAAArS,EAAApQ,EAAAF,GAEA,GAAA2O,GAAAngB,KAAAogB,QASA,OAPApgB,MAAA6mB,iBAAA/E,EAAApQ,GAEAF,EAAA,GAAA2O,EAAA,GAAmB3O,EAAA,GAAA2O,EAAA,GAAkB3O,EAAA,GAAA2O,EAAA,GAAkB3O,EAAA,GAAA2O,EAAA,GACvD3O,EAAA,GAAA2O,EAAA,GAAmB3O,EAAA,GAAA2O,EAAA,GAAkB3O,EAAA,GAAA2O,EAAA,GAAkB3O,EAAA,GAAA2O,EAAA,GACvD3O,EAAA,GAAA2O,EAAA,GAAoB3O,EAAA,GAAA2O,EAAA,GAAmB3O,EAAA,IAAA2O,EAAA,IAAoB3O,EAAA,IAAA2O,EAAA,IAC3D3O,EAAA,IAAA2O,EAAA,IAAqB3O,EAAA,IAAA2O,EAAA,IAAoB3O,EAAA,IAAA2O,EAAA,IAAoB3O,EAAA,IAAA2O,EAAA,IAE7DngB,MAIA6U,eAAA,SAAAvC,GAEA,GAAA6N,GAAAngB,KAAAogB,QAOA,OALAD,GAAA,IAAA7N,EAAe6N,EAAA,IAAA7N,EAAc6N,EAAA,IAAA7N,EAAc6N,EAAA,KAAA7N,EAC3C6N,EAAA,IAAA7N,EAAe6N,EAAA,IAAA7N,EAAc6N,EAAA,IAAA7N,EAAc6N,EAAA,KAAA7N,EAC3C6N,EAAA,IAAA7N,EAAe6N,EAAA,IAAA7N,EAAc6N,EAAA,KAAA7N,EAAe6N,EAAA,KAAA7N,EAC5C6N,EAAA,IAAA7N,EAAe6N,EAAA,IAAA7N,EAAc6N,EAAA,KAAA7N,EAAe6N,EAAA,KAAA7N,EAE5CtS,MAIAuiB,gBAAA,SAAA/R,GAGA,MADAtI,SAAAuI,KAAA,sIACAD,EAAAyV,gBAAAjmB,OAIAo0B,gBAAA,SAAA5jB,GAGA,MADAtI,SAAAuI,KAAA,kGACAD,EAAAwV,aAAAhmB,OAIAuuB,qBAAA,SAAAzM,GAGA,MADA5Z,SAAAuI,KAAA,6GACAzQ,KAAAwuB,oBAAA1M,IAIA0M,oBAAA,WAEA,GAAAxN,EAEA,OAAA,UAAA/L,EAAAC,EAAAvS,GAEAgB,SAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,SACAzd,SAAAuR,IAAAA,EAAA,GACAvR,SAAAhB,IAAAA,EAAAsS,EAAAtS,OAEA,KAAA,GAAAD,GAAA,EAAAoE,EAAAoO,EAA+BvS,EAAAD,EAAYA,GAAA,EAAAoE,GAAA,EAE3Cka,EAAA1P,UAAA2D,EAAAnO,GACAka,EAAAgF,aAAAhmB,MACAghB,EAAA7L,QAAAF,EAAAnO,EAIA,OAAAmO,OAMAwZ,cAAA,WAEA,GAAAzN,EAEA,OAAA,UAAA0N,EAAAxZ,EAAAvS,GAEAgB,SAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,SACAzd,SAAAuR,IAAAA,EAAA,GACAvR,SAAAhB,IAAAA,EAAA+rB,EAAA/rB,OAAA+rB,EAAAnJ,SAEA,KAAA,GAAA7iB,GAAA,EAAAoE,EAAAoO,EAA+BvS,EAAAD,EAAYA,IAAAoE,IAE3Cka,EAAA/X,EAAAylB,EAAAC,KAAA7nB,GACAka,EAAAxC,EAAAkQ,EAAAE,KAAA9nB,GACAka,EAAAvC,EAAAiQ,EAAAG,KAAA/nB,GAEAka,EAAAgF,aAAAhmB,MAEA0uB,EAAAI,OAAA9N,EAAA/X,EAAA+X,EAAAxC,EAAAwC,EAAAvC,EAIA,OAAAiQ,OAMA2F,WAAA,SAAA1S,GAEAzZ,QAAAuI,KAAA,oGAEAkR,EAAAsF,mBAAAjnB,OAIAs0B,YAAA,SAAA9jB,GAGA,MADAtI,SAAAuI,KAAA,8FACAD,EAAAwV,aAAAhmB,OAIA+uB,YAAA,WAEA,GAAA5O,GAAAngB,KAAAogB,SAEAyN,EAAA1N,EAAA,GAAA2N,EAAA3N,EAAA,GAAA4N,EAAA5N,EAAA,GAAAsP,EAAAtP,EAAA,IACA6N,EAAA7N,EAAA,GAAA8N,EAAA9N,EAAA,GAAA+N,EAAA/N,EAAA,GAAAuP,EAAAvP,EAAA,IACAgO,EAAAhO,EAAA,GAAAiO,EAAAjO,EAAA,GAAAkO,EAAAlO,EAAA,IAAAwP,EAAAxP,EAAA,IACAyP,EAAAzP,EAAA,GAAA0P,EAAA1P,EAAA,GAAA2P,EAAA3P,EAAA,IAAA4P,EAAA5P,EAAA,GAKA,OACAyP,KACAH,EAAAvB,EAAAE,EACAL,EAAA2B,EAAAtB,EACAqB,EAAAxB,EAAAI,EACAP,EAAA4B,EAAArB,EACAN,EAAAE,EAAA0B,EACA7B,EAAAI,EAAAyB,GAEAE,IACAhC,EAAAK,EAAAyB,EACA9B,EAAA6B,EAAArB,EACAoB,EAAAzB,EAAAK,EACAN,EAAAC,EAAA2B,EACA5B,EAAA2B,EAAAvB,EACAsB,EAAAvB,EAAAC,GAEA2B,IACAjC,EAAA6B,EAAAtB,EACAP,EAAAI,EAAA0B,EACAF,EAAAzB,EAAAI,EACAN,EAAAE,EAAA2B,EACAF,EAAAxB,EAAAE,EACAL,EAAA4B,EAAAvB,GAEA4B,IACAhC,EAAAE,EAAAE,EACAN,EAAAK,EAAAE,EACAP,EAAAI,EAAAI,EACAN,EAAAC,EAAAI,EACAN,EAAAE,EAAAK,EACAP,EAAAI,EAAAC,IAOAiB,UAAA,WAEA,GACAC,GADAlP,EAAAngB,KAAAogB,QAWA,OARAiP,GAAAlP,EAAA,GAAgBA,EAAA,GAAAA,EAAA,GAAmBA,EAAA,GAAAkP,EACnCA,EAAAlP,EAAA,GAAgBA,EAAA,GAAAA,EAAA,GAAmBA,EAAA,GAAAkP,EACnCA,EAAAlP,EAAA,GAAgBA,EAAA,GAAAA,EAAA,GAAmBA,EAAA,GAAAkP,EAEnCA,EAAAlP,EAAA,GAAgBA,EAAA,GAAAA,EAAA,IAAoBA,EAAA,IAAAkP,EACpCA,EAAAlP,EAAA,GAAgBA,EAAA,GAAAA,EAAA,IAAoBA,EAAA,IAAAkP,EACpCA,EAAAlP,EAAA,IAAiBA,EAAA,IAAAA,EAAA,IAAqBA,EAAA,IAAAkP,EAEtCrvB,MAIAsvB,qBAAA,SAAAra,EAAAC,GAEA,GAAAiL,GAAAngB,KAAAogB,QAsBA,OApBAnL,GAAAC,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GAEAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GAEAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,EAAAC,EAAA,IAAAiL,EAAA,IAEAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,EAAAC,EAAA,IAAAiL,EAAA,IAEAlL,GAIAsf,YAAA,WAEA,GAAAvT,EAEA,OAAA,YAEArd,SAAAqd,IAAAA,EAAA,GAAApY,GAAAwY,SACAlZ,QAAAuI,KAAA,uGAEA,IAAA0P,GAAAngB,KAAAogB,QACA,OAAAY,GAAAzP,IAAA4O,EAAA,IAAAA,EAAA,IAAAA,EAAA,SAMAqU,YAAA,SAAA7S,GAEA,GAAAxB,GAAAngB,KAAAogB,QAMA,OAJAD,GAAA,IAAAwB,EAAA1Y,EACAkX,EAAA,IAAAwB,EAAAnD,EACA2B,EAAA,IAAAwB,EAAAlD,EAEAze,MAIA+mB,WAAA,SAAAvmB,EAAAyuB,GAGA,GAAA9O,GAAAngB,KAAAogB,SACAwI,EAAApoB,EAAA4f,SAEAyN,EAAAjF,EAAA,GAAAkF,EAAAlF,EAAA,GAAAmF,EAAAnF,EAAA,GAAA6G,EAAA7G,EAAA,IACAoF,EAAApF,EAAA,GAAAqF,EAAArF,EAAA,GAAAsF,EAAAtF,EAAA,GAAA8G,EAAA9G,EAAA,IACAuF,EAAAvF,EAAA,GAAAwF,EAAAxF,EAAA,GAAAyF,EAAAzF,EAAA,IAAA+G,EAAA/G,EAAA,IACAgH,EAAAhH,EAAA,GAAAiH,EAAAjH,EAAA,GAAAkH,EAAAlH,EAAA,IAAAmH,EAAAnH,EAAA,GAEAzI,GAAA,GAAA+N,EAAAyB,EAAAE,EAAAH,EAAArB,EAAAwB,EAAAH,EAAAtB,EAAA0B,EAAA7B,EAAA0B,EAAAG,EAAA5B,EAAAE,EAAA2B,EAAA9B,EAAAI,EAAA0B,EACA5P,EAAA,GAAAsP,EAAApB,EAAAwB,EAAA9B,EAAA4B,EAAAE,EAAAJ,EAAArB,EAAA0B,EAAAhC,EAAA6B,EAAAG,EAAA/B,EAAAK,EAAA2B,EAAAjC,EAAAO,EAAA0B,EACA5P,EAAA,GAAA4N,EAAA2B,EAAAG,EAAAJ,EAAAvB,EAAA2B,EAAAJ,EAAAxB,EAAA6B,EAAAhC,EAAA4B,EAAAI,EAAA/B,EAAAE,EAAA8B,EAAAjC,EAAAI,EAAA6B,EACA5P,EAAA,IAAAsP,EAAAvB,EAAAE,EAAAL,EAAA2B,EAAAtB,EAAAqB,EAAAxB,EAAAI,EAAAP,EAAA4B,EAAArB,EAAAN,EAAAE,EAAA0B,EAAA7B,EAAAI,EAAAyB,EACAxP,EAAA,GAAAuP,EAAArB,EAAAuB,EAAA1B,EAAAyB,EAAAC,EAAAF,EAAAvB,EAAA2B,EAAA9B,EAAA2B,EAAAG,EAAA5B,EAAAC,EAAA4B,EAAA/B,EAAAK,EAAA0B,EACA5P,EAAA,GAAA4N,EAAA4B,EAAAC,EAAAH,EAAApB,EAAAuB,EAAAH,EAAAtB,EAAA2B,EAAAjC,EAAA8B,EAAAG,EAAA/B,EAAAI,EAAA4B,EAAAlC,EAAAQ,EAAA0B,EACA5P,EAAA,GAAAsP,EAAAvB,EAAA0B,EAAA7B,EAAA2B,EAAAE,EAAAH,EAAAzB,EAAA8B,EAAAjC,EAAA6B,EAAAI,EAAA/B,EAAAC,EAAA+B,EAAAlC,EAAAK,EAAA6B,EACA5P,EAAA,IAAA4N,EAAA2B,EAAAvB,EAAAsB,EAAAvB,EAAAC,EAAAsB,EAAAzB,EAAAK,EAAAR,EAAA6B,EAAArB,EAAAN,EAAAC,EAAA2B,EAAA9B,EAAAK,EAAAyB,EACAxP,EAAA,GAAA8N,EAAA0B,EAAAC,EAAAF,EAAAtB,EAAAwB,EAAAF,EAAAvB,EAAA0B,EAAA7B,EAAA2B,EAAAE,EAAA5B,EAAAE,EAAA4B,EAAA/B,EAAAI,EAAA2B,EACA5P,EAAA,GAAAsP,EAAArB,EAAAwB,EAAA9B,EAAA6B,EAAAC,EAAAH,EAAAtB,EAAA0B,EAAAhC,EAAA8B,EAAAE,EAAA/B,EAAAK,EAAA4B,EAAAlC,EAAAO,EAAA2B,EACA5P,EAAA,IAAA2N,EAAA4B,EAAAE,EAAAH,EAAAxB,EAAA2B,EAAAH,EAAAzB,EAAA6B,EAAAhC,EAAA6B,EAAAG,EAAA/B,EAAAE,EAAA+B,EAAAlC,EAAAI,EAAA8B,EACA5P,EAAA,IAAAsP,EAAAxB,EAAAE,EAAAL,EAAA4B,EAAAvB,EAAAsB,EAAAzB,EAAAI,EAAAP,EAAA6B,EAAAtB,EAAAN,EAAAE,EAAA2B,EAAA9B,EAAAI,EAAA0B,EACAxP,EAAA,GAAA+N,EAAAE,EAAAwB,EAAA3B,EAAAI,EAAAuB,EAAA1B,EAAAC,EAAA0B,EAAA7B,EAAAK,EAAAwB,EAAA5B,EAAAE,EAAA2B,EAAA9B,EAAAI,EAAA0B,EACA3P,EAAA,GAAA2N,EAAAO,EAAAuB,EAAA7B,EAAAK,EAAAwB,EAAA7B,EAAAI,EAAA0B,EAAAhC,EAAAQ,EAAAwB,EAAA/B,EAAAK,EAAA2B,EAAAjC,EAAAO,EAAA0B,EACA3P,EAAA,IAAA4N,EAAAE,EAAA2B,EAAA9B,EAAAI,EAAA0B,EAAA7B,EAAAC,EAAA6B,EAAAhC,EAAAK,EAAA2B,EAAA/B,EAAAE,EAAA8B,EAAAjC,EAAAI,EAAA6B,EACA3P,EAAA,IAAA2N,EAAAI,EAAAC,EAAAJ,EAAAE,EAAAE,EAAAJ,EAAAC,EAAAI,EAAAP,EAAAK,EAAAE,EAAAN,EAAAE,EAAAK,EAAAR,EAAAI,EAAAI,CAEA,IAAAa,GAAArB,EAAA1N,EAAA,GAAA6N,EAAA7N,EAAA,GAAAgO,EAAAhO,EAAA,GAAAyP,EAAAzP,EAAA,GAEA,IAAA,IAAA+O,EAAA,CAEA,GAAAC,GAAA,mEAEA,IAAAF,EAEA,KAAA,IAAA7P,OAAA+P,EAUA,OANAjnB,SAAAuI,KAAA0e,GAIAnvB,KAAAsuB,WAEAtuB,KAMA,MAFAA,MAAA6U,eAAA,EAAAqa,GAEAlvB,MAIA2sB,UAAA,SAAAhL,GAEAzZ,QAAAoI,MAAA,kDAIAmkB,QAAA,SAAAzU,GAEA9X,QAAAoI,MAAA,gDAIAokB,QAAA,SAAA1U,GAEA9X,QAAAoI,MAAA,gDAIAqkB,QAAA,SAAA3U,GAEA9X,QAAAoI,MAAA,gDAIAskB,aAAA,SAAA7U,EAAAC,GAEA9X,QAAAoI,MAAA,qDAIAukB,MAAA,SAAAlT,GAEA,GAAAxB,GAAAngB,KAAAogB,SACAnX,EAAA0Y,EAAA1Y,EAAAuV,EAAAmD,EAAAnD,EAAAC,EAAAkD,EAAAlD,CAOA,OALA0B,GAAA,IAAAlX,EAAekX,EAAA,IAAA3B,EAAc2B,EAAA,IAAA1B,EAC7B0B,EAAA,IAAAlX,EAAekX,EAAA,IAAA3B,EAAc2B,EAAA,IAAA1B,EAC7B0B,EAAA,IAAAlX,EAAekX,EAAA,IAAA3B,EAAc2B,EAAA,KAAA1B,EAC7B0B,EAAA,IAAAlX,EAAekX,EAAA,IAAA3B,EAAc2B,EAAA,KAAA1B,EAE7Bze,MAIA80B,kBAAA,WAEA,GAAA3U,GAAAngB,KAAAogB,SAEA2U,EAAA5U,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACA6U,EAAA7U,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACA8U,EAAA9U,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAEA,OAAA3W,MAAAmK,KAAAnK,KAAAC,IAAAsrB,EAAAC,EAAAC,KAIAC,gBAAA,SAAAjsB,EAAAuV,EAAAC,GAWA,MATAze,MAAAuR,IAEA,EAAA,EAAA,EAAAtI,EACA,EAAA,EAAA,EAAAuV,EACA,EAAA,EAAA,EAAAC,EACA,EAAA,EAAA,EAAA,GAIAze,MAIAm1B,cAAA,SAAApN,GAEA,GAAAtnB,GAAA+I,KAAA8V,IAAAyI,GAAAzV,EAAA9I,KAAAkW,IAAAqI,EAWA,OATA/nB,MAAAuR,IAEA,EAAA,EAAA,EAAA,EACA,EAAA9Q,GAAA6R,EAAA,EACA,EAAAA,EAAA7R,EAAA,EACA,EAAA,EAAA,EAAA,GAIAT,MAIAo1B,cAAA,SAAArN,GAEA,GAAAtnB,GAAA+I,KAAA8V,IAAAyI,GAAAzV,EAAA9I,KAAAkW,IAAAqI,EAWA,OATA/nB,MAAAuR,IAEA9Q,EAAA,EAAA6R,EAAA,EACA,EAAA,EAAA,EAAA,GACAA,EAAA,EAAA7R,EAAA,EACA,EAAA,EAAA,EAAA,GAIAT,MAIAq1B,cAAA,SAAAtN,GAEA,GAAAtnB,GAAA+I,KAAA8V,IAAAyI,GAAAzV,EAAA9I,KAAAkW,IAAAqI,EAWA,OATA/nB,MAAAuR,IAEA9Q,GAAA6R,EAAA,EAAA,EACAA,EAAA7R,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAIAT,MAIAs1B,iBAAA,SAAAvV,EAAAC,GAIA,GAAAvf,GAAA+I,KAAA8V,IAAAU,GACA1N,EAAA9I,KAAAkW,IAAAM,GACA5N,EAAA,EAAA3R,EACAwI,EAAA8W,EAAA9W,EAAAuV,EAAAuB,EAAAvB,EAAAC,EAAAsB,EAAAtB,EACA8W,EAAAnjB,EAAAnJ,EAAAusB,EAAApjB,EAAAoM,CAWA,OATAxe,MAAAuR,IAEAgkB,EAAAtsB,EAAAxI,EAAA80B,EAAA/W,EAAAlM,EAAAmM,EAAA8W,EAAA9W,EAAAnM,EAAAkM,EAAA,EACA+W,EAAA/W,EAAAlM,EAAAmM,EAAA+W,EAAAhX,EAAA/d,EAAA+0B,EAAA/W,EAAAnM,EAAArJ,EAAA,EACAssB,EAAA9W,EAAAnM,EAAAkM,EAAAgX,EAAA/W,EAAAnM,EAAArJ,EAAAmJ,EAAAqM,EAAAA,EAAAhe,EAAA,EACA,EAAA,EAAA,EAAA,GAIAT,MAIAy1B,UAAA,SAAAxsB,EAAAuV,EAAAC,GAWA,MATAze,MAAAuR,IAEAtI,EAAA,EAAA,EAAA,EACA,EAAAuV,EAAA,EAAA,EACA,EAAA,EAAAC,EAAA,EACA,EAAA,EAAA,EAAA,GAIAze,MAIA01B,QAAA,SAAAC,EAAA5W,EAAA8V,GAMA,MAJA70B,MAAAgqB,2BAAAjL,GACA/e,KAAA60B,MAAAA,GACA70B,KAAAw0B,YAAAmB,GAEA31B,MAIA41B,UAAA,WAEA,GAAAplB,GAAAmW,CAEA,OAAA,UAAAgP,EAAA5W,EAAA8V,GAEAlxB,SAAA6M,IAAAA,EAAA,GAAA5H,GAAAwY,SACAzd,SAAAgjB,IAAAA,EAAA,GAAA/d,GAAAge,QAEA,IAAAzG,GAAAngB,KAAAogB,SAEAqI,EAAAjY,EAAAe,IAAA4O,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAxd,SACA+lB,EAAAlY,EAAAe,IAAA4O,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAxd,SACAgmB,EAAAnY,EAAAe,IAAA4O,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAAAxd,SAGAusB,EAAAlvB,KAAA+uB;AACA,EAAAG,IAEAzG,GAAAA,GAIAkN,EAAA1sB,EAAAkX,EAAA,IACAwV,EAAAnX,EAAA2B,EAAA,IACAwV,EAAAlX,EAAA0B,EAAA,IAIAwG,EAAAvG,SAAA7O,IAAAvR,KAAAogB,SAEA,IAAAyV,GAAA,EAAApN,EACAqN,EAAA,EAAApN,EACAqN,EAAA,EAAApN,CAoBA,OAlBAhC,GAAAvG,SAAA,IAAAyV,EACAlP,EAAAvG,SAAA,IAAAyV,EACAlP,EAAAvG,SAAA,IAAAyV,EAEAlP,EAAAvG,SAAA,IAAA0V,EACAnP,EAAAvG,SAAA,IAAA0V,EACAnP,EAAAvG,SAAA,IAAA0V,EAEAnP,EAAAvG,SAAA,IAAA2V,EACApP,EAAAvG,SAAA,IAAA2V,EACApP,EAAAvG,SAAA,KAAA2V,EAEAhX,EAAAmB,sBAAAyG,GAEAkO,EAAA5rB,EAAAwf,EACAoM,EAAArW,EAAAkK,EACAmM,EAAApW,EAAAkK,EAEA3oB,SAMAg2B,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAnW,GAAAngB,KAAAogB,SACAnX,EAAA,EAAAotB,GAAAH,EAAAD,GACAzX,EAAA,EAAA6X,GAAAD,EAAAD,GAEArU,GAAAoU,EAAAD,IAAAC,EAAAD,GACAvkB,GAAA0kB,EAAAD,IAAAC,EAAAD,GACA11B,IAAA61B,EAAAD,IAAAC,EAAAD,GACAnQ,EAAA,GAAAoQ,EAAAD,GAAAC,EAAAD,EAOA,OALAlW,GAAA,GAAAlX,EAAckX,EAAA,GAAA,EAAaA,EAAA,GAAA2B,EAAa3B,EAAA,IAAA,EACxCA,EAAA,GAAA,EAAcA,EAAA,GAAA3B,EAAa2B,EAAA,GAAAzO,EAAayO,EAAA,IAAA,EACxCA,EAAA,GAAA,EAAcA,EAAA,GAAA,EAAaA,EAAA,IAAA1f,EAAc0f,EAAA,IAAA+F,EACzC/F,EAAA,GAAA,EAAcA,EAAA,GAAA,EAAaA,EAAA,IAAA,GAAgBA,EAAA,IAAA,EAE3CngB,MAIAu2B,gBAAA,SAAAC,EAAAC,EAAAJ,EAAAC,GAEA,GAAAI,GAAAL,EAAA7sB,KAAAoU,IAAAhV,EAAAY,KAAAmtB,SAAA,GAAAH,IACAI,GAAAF,EACAG,EAAAD,EAAAH,EACAK,EAAAJ,EAAAD,CAEA,OAAAz2B,MAAAg2B,YAAAa,EAAAC,EAAAF,EAAAF,EAAAL,EAAAC,IAIAS,iBAAA,SAAAd,EAAAC,EAAAE,EAAAD,EAAAE,EAAAC,GAEA,GAAAnW,GAAAngB,KAAAogB,SACA1B,EAAAwX,EAAAD,EACA5jB,EAAA+jB,EAAAD,EACAz1B,EAAA41B,EAAAD,EAEAptB,GAAAitB,EAAAD,GAAAvX,EACAF,GAAA4X,EAAAD,GAAA9jB,EACAoM,GAAA6X,EAAAD,GAAA31B,CAOA,OALAyf,GAAA,GAAA,EAAAzB,EAAkByB,EAAA,GAAA,EAAaA,EAAA,GAAA,EAAaA,EAAA,KAAAlX,EAC5CkX,EAAA,GAAA,EAAcA,EAAA,GAAA,EAAA9N,EAAiB8N,EAAA,GAAA,EAAaA,EAAA,KAAA3B,EAC5C2B,EAAA,GAAA,EAAcA,EAAA,GAAA,EAAaA,EAAA,IAAA,GAAAzf,EAAoByf,EAAA,KAAA1B,EAC/C0B,EAAA,GAAA,EAAcA,EAAA,GAAA,EAAaA,EAAA,IAAA,EAAcA,EAAA,IAAA,EAEzCngB,MAIAgV,OAAA,SAAA2R,GAKA,IAAA,GAHAxG,GAAAngB,KAAAogB,SACAwI,EAAAjC,EAAAvG,SAEA1d,EAAA,EAAkB,GAAAA,EAAQA,IAE1B,GAAAyd,EAAAzd,KAAAkmB,EAAAlmB,GAAA,OAAA,CAIA,QAAA,GAIA4O,UAAA,SAAA2D,GAIA,MAFAjV,MAAAogB,SAAA7O,IAAA0D,GAEAjV,MAIAmV,QAAA,WAEA,GAAAgL,GAAAngB,KAAAogB,QAEA,QACAD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,OAaAvX,EAAAouB,IAAA,SAAAC,EAAAC,GAEAl3B,KAAAi3B,OAAAtzB,SAAAszB,EAAAA,EAAA,GAAAruB,GAAAwY,QACAphB,KAAAk3B,UAAAvzB,SAAAuzB,EAAAA,EAAA,GAAAtuB,GAAAwY,SAIAxY,EAAAouB,IAAAl1B,WAEAE,YAAA4G,EAAAouB,IAEAzlB,IAAA,SAAA0lB,EAAAC,GAKA,MAHAl3B,MAAAi3B,OAAAtlB,KAAAslB,GACAj3B,KAAAk3B,UAAAvlB,KAAAulB,GAEAl3B,MAIAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAwlB,GAKA,MAHAn3B,MAAAi3B,OAAAtlB,KAAAwlB,EAAAF,QACAj3B,KAAAk3B,UAAAvlB,KAAAwlB,EAAAD,WAEAl3B,MAIA4qB,GAAA,SAAAxY,EAAA4B,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OAEA,OAAAqJ,GAAA9Y,KAAA3R,KAAAk3B,WAAAriB,eAAAzC,GAAAmC,IAAAvU,KAAAi3B,SAIAG,OAAA,WAEA,GAAApW,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAAhP,GAIA,MAFApS,MAAAi3B,OAAAtlB,KAAA3R,KAAA4qB,GAAAxY,EAAA4O,IAEAhhB,SAMAorB,oBAAA,SAAAJ,EAAAhX,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OACAqJ,GAAA1G,WAAAiH,EAAAhrB,KAAAi3B,OACA,IAAAI,GAAA5M,EAAApJ,IAAArhB,KAAAk3B,UAEA,OAAA,GAAAG,EAEA5M,EAAA9Y,KAAA3R,KAAAi3B,QAIAxM,EAAA9Y,KAAA3R,KAAAk3B,WAAAriB,eAAAwiB,GAAA9iB,IAAAvU,KAAAi3B,SAIA1K,gBAAA,SAAAvB,GAEA,MAAAxhB,MAAAmK,KAAA3T,KAAAs3B,kBAAAtM,KAIAsM,kBAAA,WAEA,GAAAtW,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAA4J,GAEA,GAAAqM,GAAArW,EAAA+C,WAAAiH,EAAAhrB,KAAAi3B,QAAA5V,IAAArhB,KAAAk3B,UAIA,OAAA,GAAAG,EAEAr3B,KAAAi3B,OAAAlS,kBAAAiG,IAIAhK,EAAArP,KAAA3R,KAAAk3B,WAAAriB,eAAAwiB,GAAA9iB,IAAAvU,KAAAi3B,QAEAjW,EAAA+D,kBAAAiG,QAMAuM,oBAAA,WAEA,GAAAC,GAAA,GAAA5uB,GAAAwY,QACAqW,EAAA,GAAA7uB,GAAAwY,QACAsW,EAAA,GAAA9uB,GAAAwY,OAEA,OAAA,UAAAuW,EAAA3W,EAAA4W,EAAAC,GASAL,EAAA7lB,KAAAgmB,GAAApjB,IAAAyM,GAAAnM,eAAA,IACA4iB,EAAA9lB,KAAAqP,GAAA8C,IAAA6T,GAAAnW,YACAkW,EAAA/lB,KAAA3R,KAAAi3B,QAAAnT,IAAA0T,EAEA,IAMAM,GAAArY,EAAAsY,EAAAC,EANAC,EAAA,GAAAN,EAAA7S,WAAA9D,GACAkX,GAAAl4B,KAAAk3B,UAAA7V,IAAAoW,GACAU,EAAAT,EAAArW,IAAArhB,KAAAk3B,WACAkB,GAAAV,EAAArW,IAAAoW,GACAh3B,EAAAi3B,EAAA9V,WACAsN,EAAA1lB,KAAA8X,IAAA,EAAA4W,EAAAA,EAGA,IAAAhJ,EAAA,EAQA,GAJA4I,EAAAI,EAAAE,EAAAD,EACA1Y,EAAAyY,EAAAC,EAAAC,EACAJ,EAAAC,EAAA/I,EAEA4I,GAAA,EAEA,GAAArY,IAAAuY,EAEA,GAAAA,GAAAvY,EAAA,CAKA,GAAA4Y,GAAA,EAAAnJ,CACA4I,IAAAO,EACA5Y,GAAA4Y,EACAN,EAAAD,GAAAA,EAAAI,EAAAzY,EAAA,EAAA0Y,GAAA1Y,GAAAyY,EAAAJ,EAAArY,EAAA,EAAA2Y,GAAA33B,MAMAgf,GAAAwY,EACAH,EAAAtuB,KAAAC,IAAA,IAAAyuB,EAAAzY,EAAA0Y,IACAJ,GAAAD,EAAAA,EAAArY,GAAAA,EAAA,EAAA2Y,GAAA33B,MAQAgf,IAAAwY,EACAH,EAAAtuB,KAAAC,IAAA,IAAAyuB,EAAAzY,EAAA0Y,IACAJ,GAAAD,EAAAA,EAAArY,GAAAA,EAAA,EAAA2Y,GAAA33B,OAMAu3B,GAAAvY,GAIAqY,EAAAtuB,KAAAC,IAAA,KAAAyuB,EAAAD,EAAAE,IACA1Y,EAAAqY,EAAA,GAAAG,EAAAzuB,KAAAuJ,IAAAvJ,KAAAC,KAAAwuB,GAAAG,GAAAH,GACAF,GAAAD,EAAAA,EAAArY,GAAAA,EAAA,EAAA2Y,GAAA33B,GAEMu3B,GAAAvY,GAINqY,EAAA,EACArY,EAAAjW,KAAAuJ,IAAAvJ,KAAAC,KAAAwuB,GAAAG,GAAAH,GACAF,EAAAtY,GAAAA,EAAA,EAAA2Y,GAAA33B,IAMAq3B,EAAAtuB,KAAAC,IAAA,IAAAyuB,EAAAD,EAAAE,IACA1Y,EAAAqY,EAAA,EAAAG,EAAAzuB,KAAAuJ,IAAAvJ,KAAAC,KAAAwuB,GAAAG,GAAAH,GACAF,GAAAD,EAAAA,EAAArY,GAAAA,EAAA,EAAA2Y,GAAA33B,OAUAgf,GAAAyY,EAAA,GAAAD,EAAAA,EACAH,EAAAtuB,KAAAC,IAAA,IAAAyuB,EAAAzY,EAAA0Y,IACAJ,GAAAD,EAAAA,EAAArY,GAAAA,EAAA,EAAA2Y,GAAA33B,CAgBA,OAZAm3B,IAEAA,EAAAjmB,KAAA3R,KAAAk3B,WAAAriB,eAAAijB,GAAAvjB,IAAAvU,KAAAi3B,QAIAY,GAEAA,EAAAlmB,KAAA8lB,GAAA5iB,eAAA4K,GAAAlL,IAAAijB,GAIAO,MAOAO,qBAAA,SAAAC,GAEA,MAAAv4B,MAAAusB,gBAAAgM,EAAA9S,SAAA8S,EAAA7K,QAIA8K,gBAAA,WAIA,GAAAxX,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAAmX,EAAAvkB,GAEAgN,EAAA+C,WAAAwU,EAAA9S,OAAAzlB,KAAAi3B,OAEA,IAAAwB,GAAAzX,EAAAK,IAAArhB,KAAAk3B,WAEAwB,EAAA1X,EAAAK,IAAAL,GAAAyX,EAAAA,EAEAE,EAAAJ,EAAA7K,OAAA6K,EAAA7K,MAEA,IAAAgL,EAAAC,EAAA,MAAA,KAEA,IAAAC,GAAApvB,KAAAmK,KAAAglB,EAAAD,GAGAG,EAAAJ,EAAAG,EAGAE,EAAAL,EAAAG,CAGA,OAAA,GAAAC,GAAA,EAAAC,EAAA,KAKA,EAAAD,EAAA74B,KAAA4qB,GAAAkO,EAAA9kB,GAGAhU,KAAA4qB,GAAAiO,EAAA7kB,OAMA+kB,oBAAA,SAAAC,GAIA,GAAAC,GAAAD,EAAAzM,gBAAAvsB,KAAAi3B,OAEA,IAAA,IAAAgC,EAEA,OAAA,CAIA,IAAAC,GAAAF,EAAAnR,OAAAxG,IAAArhB,KAAAk3B,UAEA,OAAA,GAAAgC,EAAAD,GAEA,GAMA,GAIAE,gBAAA,SAAAH,GAEA,GAAAE,GAAAF,EAAAnR,OAAAxG,IAAArhB,KAAAk3B,UACA,IAAA,IAAAgC,EAGA,MAAA,KAAAF,EAAAzM,gBAAAvsB,KAAAi3B,QAEA,EAMA,IAIA,IAAA7kB,KAAApS,KAAAi3B,OAAA5V,IAAA2X,EAAAnR,QAAAmR,EAAAI,UAAAF,CAIA,OAAA9mB,IAAA,EAAAA,EAAA,MAIAinB,eAAA,SAAAL,EAAAhlB,GAEA,GAAA5B,GAAApS,KAAAm5B,gBAAAH,EAEA,OAAA,QAAA5mB,EAEA,KAIApS,KAAA4qB,GAAAxY,EAAA4B,IAIAqY,kBAAA,WAEA,GAAA1K,GAAA,GAAA/Y,GAAAwY,OAEA,OAAA,UAAA0K,GAEA,MAAA,QAAA9rB,KAAAs5B,aAAAxN,EAAAnK,OAMA2X,aAAA,SAAAxN,EAAA9X,GAIA,GAAAulB,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEAC,EAAA,EAAA75B,KAAAk3B,UAAAjuB,EACA6wB,EAAA,EAAA95B,KAAAk3B,UAAA1Y,EACAub,EAAA,EAAA/5B,KAAAk3B,UAAAzY,EAEAwY,EAAAj3B,KAAAi3B,MA0BA,OAxBA4C,IAAA,GAEAN,GAAAzN,EAAA/Y,IAAA9J,EAAAguB,EAAAhuB,GAAA4wB,EACAL,GAAA1N,EAAAriB,IAAAR,EAAAguB,EAAAhuB,GAAA4wB,IAIAN,GAAAzN,EAAAriB,IAAAR,EAAAguB,EAAAhuB,GAAA4wB,EACAL,GAAA1N,EAAA/Y,IAAA9J,EAAAguB,EAAAhuB,GAAA4wB,GAIAC,GAAA,GAEAL,GAAA3N,EAAA/Y,IAAAyL,EAAAyY,EAAAzY,GAAAsb,EACAJ,GAAA5N,EAAAriB,IAAA+U,EAAAyY,EAAAzY,GAAAsb,IAIAL,GAAA3N,EAAAriB,IAAA+U,EAAAyY,EAAAzY,GAAAsb,EACAJ,GAAA5N,EAAA/Y,IAAAyL,EAAAyY,EAAAzY,GAAAsb,GAIAP,EAAAG,GAAAD,EAAAD,EAAA,OAKAC,EAAAF,GAAAA,IAAAA,KAAAA,EAAAE,IAEAD,EAAAE,GAAAF,IAAAA,KAAAA,EAAAE,GAEAK,GAAA,GAEAJ,GAAA7N,EAAA/Y,IAAA0L,EAAAwY,EAAAxY,GAAAsb,EACAH,GAAA9N,EAAAriB,IAAAgV,EAAAwY,EAAAxY,GAAAsb,IAIAJ,GAAA7N,EAAAriB,IAAAgV,EAAAwY,EAAAxY,GAAAsb,EACAH,GAAA9N,EAAA/Y,IAAA0L,EAAAwY,EAAAxY,GAAAsb,GAIAR,EAAAK,GAAAD,EAAAH,EAAA,OAEAG,EAAAJ,GAAAA,IAAAA,KAAAA,EAAAI,IAEAH,EAAAI,GAAAJ,IAAAA,KAAAA,EAAAI,GAIA,EAAAJ,EAAA,KAEAx5B,KAAA4qB,GAAA2O,GAAA,EAAAA,EAAAC,EAAAxlB,MAIAgmB,kBAAA,WAGA,GAAAtC,GAAA,GAAA9uB,GAAAwY,QACA6Y,EAAA,GAAArxB,GAAAwY,QACA8Y,EAAA,GAAAtxB,GAAAwY,QACAyG,EAAA,GAAAjf,GAAAwY,OAEA,OAAA,UAAAU,EAAApQ,EAAAjR,EAAA05B,EAAAnmB,GAIAimB,EAAAlW,WAAArS,EAAAoQ,GACAoY,EAAAnW,WAAAtjB,EAAAqhB,GACA+F,EAAAtG,aAAA0Y,EAAAC,EAOA,IACAlwB,GADAowB,EAAAp6B,KAAAk3B,UAAA7V,IAAAwG,EAGA,IAAAuS,EAAA,EAAA,CAEA,GAAAD,EAAA,MAAA,KACAnwB,GAAA,MAEI,CAAA,KAAA,EAAAowB,GAOJ,MAAA,KALApwB,GAAA,GACAowB,GAAAA,EAQA1C,EAAA3T,WAAA/jB,KAAAi3B,OAAAnV,EACA,IAAAuY,GAAArwB,EAAAhK,KAAAk3B,UAAA7V,IAAA6Y,EAAA3Y,aAAAmW,EAAAwC,GAGA,IAAA,EAAAG,EAEA,MAAA,KAIA,IAAAC,GAAAtwB,EAAAhK,KAAAk3B,UAAA7V,IAAA4Y,EAAA/S,MAAAwQ,GAGA,IAAA,EAAA4C,EAEA,MAAA,KAKA,IAAAD,EAAAC,EAAAF,EAEA,MAAA,KAKA,IAAAG,IAAAvwB,EAAA0tB,EAAArW,IAAAwG,EAGA,OAAA,GAAA0S,EAEA,KAKAv6B,KAAA4qB,GAAA2P,EAAAH,EAAApmB,OAMAgS,aAAA,SAAAwU,GAOA,MALAx6B,MAAAk3B,UAAA3iB,IAAAvU,KAAAi3B,QAAAjR,aAAAwU,GACAx6B,KAAAi3B,OAAAjR,aAAAwU,GACAx6B,KAAAk3B,UAAApT,IAAA9jB,KAAAi3B,QACAj3B,KAAAk3B,UAAA1V,YAEAxhB,MAIAgV,OAAA,SAAAmiB,GAEA,MAAAA,GAAAF,OAAAjiB,OAAAhV,KAAAi3B,SAAAE,EAAAD,UAAAliB,OAAAhV,KAAAk3B,aAaAtuB,EAAA6kB,OAAA,SAAAhI,EAAAiI,GAEA1tB,KAAAylB,OAAA9hB,SAAA8hB,EAAAA,EAAA,GAAA7c,GAAAwY,QACAphB,KAAA0tB,OAAA/pB,SAAA+pB,EAAAA,EAAA,GAIA9kB,EAAA6kB,OAAA3rB,WAEAE,YAAA4G,EAAA6kB,OAEAlc,IAAA,SAAAkU,EAAAiI,GAKA,MAHA1tB,MAAAylB,OAAA9T,KAAA8T,GACAzlB,KAAA0tB,OAAAA,EAEA1tB,MAIAurB,cAAA,WAEA,GAAAO,GAAA,GAAAljB,GAAAgkB,IAEA,OAAA,UAAApB,EAAAiP,GAEA,GAAAhV,GAAAzlB,KAAAylB,MAEA9hB,UAAA82B,EAEAhV,EAAA9T,KAAA8oB,GAIA3O,EAAAP,cAAAC,GAAA/F,OAAAA,EAMA,KAAA,GAFAiV,GAAA,EAEAh4B,EAAA,EAAAgpB,EAAAF,EAAA7oB,OAAuC+oB,EAAAhpB,EAAQA,IAE/Cg4B,EAAAlxB,KAAAC,IAAAixB,EAAAjV,EAAAV,kBAAAyG,EAAA9oB,IAMA,OAFA1C,MAAA0tB,OAAAlkB,KAAAmK,KAAA+mB,GAEA16B,SAMAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAA4mB,GAKA,MAHAv4B,MAAAylB,OAAA9T,KAAA4mB,EAAA9S,QACAzlB,KAAA0tB,OAAA6K,EAAA7K,OAEA1tB,MAIA+rB,MAAA,WAEA,MAAA/rB,MAAA0tB,QAAA,GAIAxB,cAAA,SAAAlB,GAEA,MAAAA,GAAAjG,kBAAA/kB,KAAAylB,SAAAzlB,KAAA0tB,OAAA1tB,KAAA0tB,QAIAnB,gBAAA,SAAAvB,GAEA,MAAAA,GAAAlG,WAAA9kB,KAAAylB,QAAAzlB,KAAA0tB,QAIAiN,iBAAA,SAAApC,GAEA,GAAAqC,GAAA56B,KAAA0tB,OAAA6K,EAAA7K,MAEA,OAAA6K,GAAA9S,OAAAV,kBAAA/kB,KAAAylB,SAAAmV,EAAAA,GAIAtO,WAAA,SAAAtB,EAAAhX,GAEA,GAAA6mB,GAAA76B,KAAAylB,OAAAV,kBAAAiG,GAEAP,EAAAzW,GAAA,GAAApL,GAAAwY,OAUA,OATAqJ,GAAA9Y,KAAAqZ,GAEA6P,EAAA76B,KAAA0tB,OAAA1tB,KAAA0tB,SAEAjD,EAAA3G,IAAA9jB,KAAAylB,QAAAjE,YACAiJ,EAAA5V,eAAA7U,KAAA0tB,QAAAnZ,IAAAvU,KAAAylB,SAIAgF,GAIAqQ,eAAA,SAAA9mB,GAEA,GAAA8X,GAAA9X,GAAA,GAAApL,GAAAgkB,IAKA,OAHAd,GAAAva,IAAAvR,KAAAylB,OAAAzlB,KAAAylB,QACAqG,EAAAG,eAAAjsB,KAAA0tB,QAEA5B,GAIA9F,aAAA,SAAAW,GAKA,MAHA3mB,MAAAylB,OAAAO,aAAAW,GACA3mB,KAAA0tB,OAAA1tB,KAAA0tB,OAAA/G,EAAAmO,oBAEA90B,MAIA2sB,UAAA,SAAAzX,GAIA,MAFAlV,MAAAylB,OAAAlR,IAAAW,GAEAlV,MAIAgV,OAAA,SAAAujB,GAEA,MAAAA,GAAA9S,OAAAzQ,OAAAhV,KAAAylB,SAAA8S,EAAA7K,SAAA1tB,KAAA0tB,SAcA9kB,EAAAmyB,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAr7B,KAAAs7B,QAEA33B,SAAAq3B,EAAAA,EAAA,GAAApyB,GAAA2yB,MACA53B,SAAAs3B,EAAAA,EAAA,GAAAryB,GAAA2yB,MACA53B,SAAAu3B,EAAAA,EAAA,GAAAtyB,GAAA2yB,MACA53B,SAAAw3B,EAAAA,EAAA,GAAAvyB,GAAA2yB,MACA53B,SAAAy3B,EAAAA,EAAA,GAAAxyB,GAAA2yB,MACA53B,SAAA03B,EAAAA,EAAA,GAAAzyB,GAAA2yB,QAMA3yB,EAAAmyB,QAAAj5B,WAEAE,YAAA4G,EAAAmyB,QAEAxpB,IAAA,SAAAypB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAAt7B,KAAAs7B,MASA,OAPAA,GAAA,GAAA3pB,KAAAqpB,GACAM,EAAA,GAAA3pB,KAAAspB,GACAK,EAAA,GAAA3pB,KAAAupB,GACAI,EAAA,GAAA3pB,KAAAwpB,GACAG,EAAA,GAAA3pB,KAAAypB,GACAE,EAAA,GAAA3pB,KAAA0pB,GAEAr7B,MAIAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAA6pB,GAIA,IAAA,GAFAF,GAAAt7B,KAAAs7B,OAEA54B,EAAA,EAAkB,EAAAA,EAAOA,IAEzB44B,EAAA54B,GAAAiP,KAAA6pB,EAAAF,OAAA54B,GAIA,OAAA1C,OAIAy7B,cAAA,SAAAj7B,GAEA,GAAA86B,GAAAt7B,KAAAs7B,OACA1S,EAAApoB,EAAA4f,SACAsb,EAAA9S,EAAA,GAAA+S,EAAA/S,EAAA,GAAAgT,EAAAhT,EAAA,GAAAiT,EAAAjT,EAAA,GACAkT,EAAAlT,EAAA,GAAAmT,EAAAnT,EAAA,GAAAoT,EAAApT,EAAA,GAAAqT,EAAArT,EAAA,GACAsT,EAAAtT,EAAA,GAAAuT,EAAAvT,EAAA,GAAAwT,EAAAxT,EAAA,IAAAyT,EAAAzT,EAAA,IACA0T,EAAA1T,EAAA,IAAA2T,EAAA3T,EAAA,IAAA4T,EAAA5T,EAAA,IAAA6T,EAAA7T,EAAA,GASA,OAPA0S,GAAA,GAAAoB,cAAAb,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,GAAA9a,YACA8Z,EAAA,GAAAoB,cAAAb,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,GAAA9a,YACA8Z,EAAA,GAAAoB,cAAAb,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,GAAA/a,YACA8Z,EAAA,GAAAoB,cAAAb,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,GAAA/a,YACA8Z,EAAA,GAAAoB,cAAAb,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,GAAAhb,YACA8Z,EAAA,GAAAoB,cAAAb,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,GAAAhb,YAEAxhB,MAIA28B,iBAAA,WAEA,GAAApE,GAAA,GAAA3vB,GAAA6kB,MAEA,OAAA,UAAApqB,GAEA,GAAA6pB,GAAA7pB,EAAA6pB,QAOA,OALA,QAAAA,EAAA0P,gBAAA1P,EAAA2P,wBAEAtE,EAAA5mB,KAAAub,EAAA0P,gBACArE,EAAAvS,aAAA3iB,EAAA2jB,aAEAhnB,KAAA26B,iBAAApC,OAMAoC,iBAAA,SAAApC,GAMA,IAAA,GAJA+C,GAAAt7B,KAAAs7B,OACA7V,EAAA8S,EAAA9S,OACAqX,GAAAvE,EAAA7K,OAEAhrB,EAAA,EAAkB,EAAAA,EAAOA,IAAA,CAEzB,GAAAioB,GAAA2Q,EAAA54B,GAAA6pB,gBAAA9G,EAEA,IAAAqX,EAAAnS,EAEA,OAAA,EAMA,OAAA,GAIAoS,cAAA,WAEA,GAAA9B,GAAA,GAAAryB,GAAAwY,QACA8Z,EAAA,GAAAtyB,GAAAwY,OAEA,OAAA,UAAA0K,GAIA,IAAA,GAFAwP,GAAAt7B,KAAAs7B,OAEA54B,EAAA,EAAmB,EAAAA,EAAQA,IAAA,CAE3B,GAAAs2B,GAAAsC,EAAA54B,EAEAu4B,GAAAhyB,EAAA+vB,EAAAnR,OAAA5e,EAAA,EAAA6iB,EAAA/Y,IAAA9J,EAAA6iB,EAAAriB,IAAAR,EACAiyB,EAAAjyB,EAAA+vB,EAAAnR,OAAA5e,EAAA,EAAA6iB,EAAAriB,IAAAR,EAAA6iB,EAAA/Y,IAAA9J,EACAgyB,EAAAzc,EAAAwa,EAAAnR,OAAArJ,EAAA,EAAAsN,EAAA/Y,IAAAyL,EAAAsN,EAAAriB,IAAA+U,EACA0c,EAAA1c,EAAAwa,EAAAnR,OAAArJ,EAAA,EAAAsN,EAAAriB,IAAA+U,EAAAsN,EAAA/Y,IAAAyL,EACAyc,EAAAxc,EAAAua,EAAAnR,OAAApJ,EAAA,EAAAqN,EAAA/Y,IAAA0L,EAAAqN,EAAAriB,IAAAgV,EACAyc,EAAAzc,EAAAua,EAAAnR,OAAApJ,EAAA,EAAAqN,EAAAriB,IAAAgV,EAAAqN,EAAA/Y,IAAA0L,CAEA,IAAAue,GAAAhE,EAAAzM,gBAAA0O,GACAvC,EAAAM,EAAAzM,gBAAA2O,EAIA,IAAA,EAAA8B,GAAA,EAAAtE,EAEA,OAAA,EAMA,OAAA,MAOAxM,cAAA,SAAAlB,GAIA,IAAA,GAFAsQ,GAAAt7B,KAAAs7B,OAEA54B,EAAA,EAAkB,EAAAA,EAAOA,IAEzB,GAAA44B,EAAA54B,GAAA6pB,gBAAAvB,GAAA,EAEA,OAAA,CAMA,QAAA,IAYApiB,EAAA2yB,MAAA,SAAA1T,EAAAuR,GAEAp5B,KAAA6nB,OAAAlkB,SAAAkkB,EAAAA,EAAA,GAAAjf,GAAAwY,QAAA,EAAA,EAAA,GACAphB,KAAAo5B,SAAAz1B,SAAAy1B,EAAAA,EAAA,GAIAxwB,EAAA2yB,MAAAz5B,WAEAE,YAAA4G,EAAA2yB,MAEAhqB,IAAA,SAAAsW,EAAAuR,GAKA,MAHAp5B,MAAA6nB,OAAAlW,KAAAkW,GACA7nB,KAAAo5B,SAAAA,EAEAp5B,MAIA08B,cAAA,SAAAzzB,EAAAuV,EAAAC,EAAAC,GAKA,MAHA1e,MAAA6nB,OAAAtW,IAAAtI,EAAAuV,EAAAC,GACAze,KAAAo5B,SAAA1a,EAEA1e,MAIAi9B,8BAAA,SAAApV,EAAAmD,GAKA,MAHAhrB,MAAA6nB,OAAAlW,KAAAkW,GACA7nB,KAAAo5B,UAAApO,EAAA3J,IAAArhB,KAAA6nB,QAEA7nB,MAIAk9B,sBAAA,WAEA,GAAAlc,GAAA,GAAApY,GAAAwY,QACAgE,EAAA,GAAAxc,GAAAwY,OAEA,OAAA,UAAAU,EAAApQ,EAAAjR,GAEA,GAAAonB,GAAA7G,EAAA+C,WAAAtjB,EAAAiR,GAAAwV,MAAA9B,EAAArB,WAAAjC,EAAApQ,IAAA8P,WAMA,OAFAxhB,MAAAi9B,8BAAApV,EAAA/F,GAEA9hB,SAMAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAqnB,GAKA,MAHAh5B,MAAA6nB,OAAAlW,KAAAqnB,EAAAnR,QACA7nB,KAAAo5B,SAAAJ,EAAAI,SAEAp5B,MAIAwhB,UAAA,WAIA,GAAA2b,GAAA,EAAAn9B,KAAA6nB,OAAAllB,QAIA,OAHA3C,MAAA6nB,OAAAhT,eAAAsoB,GACAn9B,KAAAo5B,UAAA+D,EAEAn9B,MAIA4kB,OAAA,WAKA,MAHA5kB,MAAAo5B,UAAA,GACAp5B,KAAA6nB,OAAAjD,SAEA5kB,MAIAusB,gBAAA,SAAAvB,GAEA,MAAAhrB,MAAA6nB,OAAAxG,IAAA2J,GAAAhrB,KAAAo5B,UAIAgE,iBAAA,SAAA7E,GAEA,MAAAv4B,MAAAusB,gBAAAgM,EAAA9S,QAAA8S,EAAA7K,QAIA2P,aAAA,SAAArS,EAAAhX,GAEA,MAAAhU,MAAAs9B,WAAAtS,EAAAhX,GAAA8P,IAAAkH,GAAApG,UAIA0Y,WAAA,SAAAtS,EAAAhX,GAEA,GAAAupB,GAAAv9B,KAAAusB,gBAAAvB,GAEAP,EAAAzW,GAAA,GAAApL,GAAAwY,OACA,OAAAqJ,GAAA9Y,KAAA3R,KAAA6nB,QAAAhT,eAAA0oB,IAIAC,mBAAA,SAAAhT,GAIA,GAAAiT,GAAAz9B,KAAAusB,gBAAA/B,EAAA5gB,OACA8zB,EAAA19B,KAAAusB,gBAAA/B,EAAAD,IAEA,OAAA,GAAAkT,GAAAC,EAAA,GAAA,EAAAA,GAAAD,EAAA,GAIAE,cAAA,WAEA,GAAA3c,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAAoJ,EAAAxW,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,QAEA8V,EAAA1M,EAAA3lB,MAAAmc,GAEAkY,EAAAl5B,KAAA6nB,OAAAxG,IAAA6V,EAEA,IAAA,IAAAgC,EAAA,CAcA,GAAA9mB,KAAAoY,EAAA5gB,MAAAyX,IAAArhB,KAAA6nB,QAAA7nB,KAAAo5B,UAAAF,CAEA,MAAA,EAAA9mB,GAAAA,EAAA,GAMA,MAAAqY,GAAA9Y,KAAAulB,GAAAriB,eAAAzC,GAAAmC,IAAAiW,EAAA5gB,WAnBA,IAAA,IAAA5J,KAAAusB,gBAAA/B,EAAA5gB,OAEA,MAAA6gB,GAAA9Y,KAAA6Y,EAAA5gB,WAwBAg0B,cAAA,SAAA5pB,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OACA,OAAAqJ,GAAA9Y,KAAA3R,KAAA6nB,QAAAhT,gBAAA7U,KAAAo5B,WAIApT,aAAA,WAEA,GAAAhF,GAAA,GAAApY,GAAAwY,QACAgE,EAAA,GAAAxc,GAAAwY,QACAyc,EAAA,GAAAj1B,GAAA+kB,OAEA,OAAA,UAAAhH,EAAAmX,GAIA,GAAAC,GAAAD,GAAAD,EAAAtO,gBAAA5I,GACAqX,EAAAhd,EAAArP,KAAA3R,KAAA6nB,QAAA/B,aAAAiY,GAEAE,EAAAj+B,KAAA49B,cAAAxY,EAKA,OAJA6Y,GAAAjY,aAAAW,GAEA3mB,KAAAi9B,8BAAAe,EAAAC,GAEAj+B,SAMA2sB,UAAA,SAAAzX,GAIA,MAFAlV,MAAAo5B,SAAAp5B,KAAAo5B,SAAAlkB,EAAAmM,IAAArhB,KAAA6nB,QAEA7nB,MAIAgV,OAAA,SAAAgkB,GAEA,MAAAA,GAAAnR,OAAA7S,OAAAhV,KAAA6nB,SAAAmR,EAAAI,WAAAp5B,KAAAo5B,WAaAxwB,EAAAY,MAEA00B,aAAA,WAIA,GAEA1sB,GAFA2sB,EAAA,iEAAAC,MAAA,IACAC,EAAA,GAAAl4B,OAAA,IACAm4B,EAAA,CAEA,OAAA,YAEA,IAAA,GAAA57B,GAAA,EAAmB,GAAAA,EAAQA,IAE3B,IAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,EAEA27B,EAAA37B,GAAA,IAEK,KAAAA,EAEL27B,EAAA37B,GAAA,KAIA,GAAA47B,IAAAA,EAAA,SAAA,SAAA90B,KAAA+0B,SAAA,GACA/sB,EAAA,GAAA8sB,EACAA,IAAA,EACAD,EAAA37B,GAAAy7B,EAAA,KAAAz7B,EAAA,EAAA8O,EAAA,EAAAA,GAMA,OAAA6sB,GAAAG,KAAA,QAMAhsB,MAAA,SAAAvR,EAAA8R,EAAAtJ,GAEA,MAAAD,MAAAC,IAAAsJ,EAAAvJ,KAAAuJ,IAAAtJ,EAAAxI,KAOAsR,gBAAA,SAAA2f,EAAA1xB,GAEA,OAAA0xB,EAAA1xB,EAAAA,GAAAA,GAMAi+B,UAAA,SAAAx1B,EAAA7C,EAAAC,EAAA+xB,EAAAsG,GAEA,MAAAtG,IAAAnvB,EAAA7C,IAAAs4B,EAAAtG,IAAA/xB,EAAAD,IAMAu4B,WAAA,SAAA11B,EAAA8J,EAAAtJ,GAEA,MAAAsJ,IAAA9J,EAAA,EACAA,GAAAQ,EAAA,GAEAR,GAAAA,EAAA8J,IAAAtJ,EAAAsJ,GAEA9J,EAAAA,GAAA,EAAA,EAAAA,KAIA21B,aAAA,SAAA31B,EAAA8J,EAAAtJ,GAEA,MAAAsJ,IAAA9J,EAAA,EACAA,GAAAQ,EAAA,GAEAR,GAAAA,EAAA8J,IAAAtJ,EAAAsJ,GAEA9J,EAAAA,EAAAA,GAAAA,GAAA,EAAAA,EAAA,IAAA,MAOA41B,SAAA,WAEA,OAAA,MAAAr1B,KAAA+0B,SAAA,IAAA/0B,KAAA+0B,UAAA,OAMAO,QAAA,SAAAC,EAAAC,GAEA,MAAAD,GAAAv1B,KAAAuI,MAAAvI,KAAA+0B,UAAAS,EAAAD,EAAA,KAMAE,UAAA,SAAAF,EAAAC,GAEA,MAAAD,GAAAv1B,KAAA+0B,UAAAS,EAAAD,IAMAG,gBAAA,SAAAC,GAEA,MAAAA,IAAA,GAAA31B,KAAA+0B,WAIA5H,SAAA,WAEA,GAAAyI,GAAA51B,KAAA2f,GAAA,GAEA,OAAA,UAAAkW,GAEA,MAAAA,GAAAD,MAMAE,SAAA,WAEA,GAAAC,GAAA,IAAA/1B,KAAA2f,EAEA,OAAA,UAAAqW,GAEA,MAAAA,GAAAD,MAMAE,aAAA,SAAAx+B,GAEA,MAAA,MAAAA,EAAAA,EAAA,IAAA,IAAAA,GAIAy+B,kBAAA,SAAAz+B,GAEA,MAAAuI,MAAAO,IAAA,EAAAP,KAAAkb,MAAAlb,KAAArB,IAAAlH,GAAAuI,KAAAm2B,OAIAC,eAAA,SAAA3+B,GAUA,MARAA,KACAA,GAAAA,GAAA,EACAA,GAAAA,GAAA,EACAA,GAAAA,GAAA,EACAA,GAAAA,GAAA,EACAA,GAAAA,GAAA,GACAA,IAEAA,IAgBA2H,EAAAi3B,OAAA,SAAArU,GA8JA,QAAAsU,GAAA9E,EAAAC,EAAAC,EAAAC,EAAA/oB,EAAA2tB,EAAAC,GAEA,GAAArI,GAAA,IAAAuD,EAAAF,GACAha,EAAA,IAAAma,EAAAF,EAEA,QAAA,GAAAA,EAAAC,GAAAvD,EAAA3W,GAAAgf,GAAA,IAAA/E,EAAAC,GAAA,EAAAvD,EAAA3W,GAAA+e,EAAApI,EAAAvlB,EAAA6oB,EAjKAj7B,KAAAwrB,OAAAA,CAEA,IACAR,GAAAiV,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAFA//B,KAAAggC,GAAmBx3B,EAAA,EAAAuV,EAAA,EAAAC,EAAA,EAInBze,MAAA0gC,cAAA,SAAA5e,GAEA9hB,KAAAwrB,SAEA,KAAA,GAAA9oB,GAAA,EAAkBA,EAAAof,EAAAnf,OAAcD,IAEhC1C,KAAAwrB,OAAA9oB,IAAuBuG,EAAA6Y,EAAApf,GAAA,GAAA8b,EAAAsD,EAAApf,GAAA,GAAA+b,EAAAqD,EAAApf,GAAA,KAMvB1C,KAAA2gC,SAAA,SAAAC,GAuBA,MArBA5V,IAAAhrB,KAAAwrB,OAAA7oB,OAAA,GAAAi+B,EACAX,EAAAz2B,KAAAuI,MAAAiZ,GACAkV,EAAAlV,EAAAiV,EAEAx/B,EAAA,GAAA,IAAAw/B,EAAAA,EAAAA,EAAA,EACAx/B,EAAA,GAAAw/B,EACAx/B,EAAA,GAAAw/B,EAAAjgC,KAAAwrB,OAAA7oB,OAAA,EAAA3C,KAAAwrB,OAAA7oB,OAAA,EAAAs9B,EAAA,EACAx/B,EAAA,GAAAw/B,EAAAjgC,KAAAwrB,OAAA7oB,OAAA,EAAA3C,KAAAwrB,OAAA7oB,OAAA,EAAAs9B,EAAA,EAEAI,EAAArgC,KAAAwrB,OAAA/qB,EAAA,IACA6/B,EAAAtgC,KAAAwrB,OAAA/qB,EAAA,IACA8/B,EAAAvgC,KAAAwrB,OAAA/qB,EAAA,IACA+/B,EAAAxgC,KAAAwrB,OAAA/qB,EAAA,IAEA0/B,EAAAD,EAAAA,EACAE,EAAAF,EAAAC,EAEAM,EAAAx3B,EAAA62B,EAAAO,EAAAp3B,EAAAq3B,EAAAr3B,EAAAs3B,EAAAt3B,EAAAu3B,EAAAv3B,EAAAi3B,EAAAC,EAAAC,GACAK,EAAAjiB,EAAAshB,EAAAO,EAAA7hB,EAAA8hB,EAAA9hB,EAAA+hB,EAAA/hB,EAAAgiB,EAAAhiB,EAAA0hB,EAAAC,EAAAC,GACAK,EAAAhiB,EAAAqhB,EAAAO,EAAA5hB,EAAA6hB,EAAA7hB,EAAA8hB,EAAA9hB,EAAA+hB,EAAA/hB,EAAAyhB,EAAAC,EAAAC,GAEAK,GAIAzgC,KAAA6gC,sBAAA,WAEA,GAAAn+B,GAAAhC,EAAAuF,EAAAjG,KAAAwrB,OAAA7oB,OACAm+B,IAEA,KAAAp+B,EAAA,EAAcuD,EAAAvD,EAAOA,IAErBhC,EAAAV,KAAAwrB,OAAA9oB,GACAo+B,EAAAp+B,IAAAhC,EAAAuI,EAAAvI,EAAA8d,EAAA9d,EAAA+d,EAIA,OAAAqiB,IAMA9gC,KAAA+gC,UAAA,SAAAC,GAEA,GAAAt+B,GAAAghB,EAAAud,EAAAtL,EACA3K,EAAA,EAAAiV,EAAA,EAAAiB,EAAA,EACAC,EAAA,GAAAv4B,GAAAwY,QACAggB,EAAA,GAAAx4B,GAAAwY,QACAigB,KACAC,EAAA,CAYA,KARAD,EAAA,GAAA,EAEAL,IAAAA,EAAA,KAEAC,EAAAjhC,KAAAwrB,OAAA7oB,OAAAq+B,EAEAG,EAAAxvB,KAAA3R,KAAAwrB,OAAA,IAEA9oB,EAAA,EAAcu+B,EAAAv+B,EAAcA,IAE5BghB,EAAAhhB,EAAAu+B,EAEAtL,EAAA31B,KAAA2gC,SAAAjd,GACA0d,EAAAzvB,KAAAgkB,GAEA2L,GAAAF,EAAAtc,WAAAqc,GAEAA,EAAAxvB,KAAAgkB,GAEA3K,GAAAhrB,KAAAwrB,OAAA7oB,OAAA,GAAA+gB,EACAuc,EAAAz2B,KAAAuI,MAAAiZ,GAEAiV,IAAAiB,IAEAG,EAAApB,GAAAqB,EACAJ,EAAAjB,EAUA,OAFAoB,GAAAA,EAAA1+B,QAAA2+B,GAEUC,OAAAF,EAAAG,MAAAF,IAIVthC,KAAAyhC,yBAAA,SAAAC,GAEA,GAAAh/B,GAAAoE,EACA4c,EAAAie,EAAAC,EACAC,EACAC,EAAAnM,EACAoM,KACAX,EAAA,GAAAx4B,GAAAwY,QACA4gB,EAAAhiC,KAAA+gC,WAIA,KAFAgB,EAAA96B,KAAAm6B,EAAAzvB,KAAA3R,KAAAwrB,OAAA,IAAApY,SAEA1Q,EAAA,EAAcA,EAAA1C,KAAAwrB,OAAA7oB,OAAwBD,IAAA,CAYtC,IAPAm/B,EAAAG,EAAAT,OAAA7+B,GAAAs/B,EAAAT,OAAA7+B,EAAA,GAEAo/B,EAAAt4B,KAAAib,KAAAid,EAAAG,EAAAG,EAAAR,OAEAG,GAAAj/B,EAAA,IAAA1C,KAAAwrB,OAAA7oB,OAAA,GACAi/B,EAAAl/B,GAAA1C,KAAAwrB,OAAA7oB,OAAA,GAEAmE,EAAA,EAAeg7B,EAAA,EAAAh7B,EAAkBA,IAEjC4c,EAAAie,EAAA76B,GAAA,EAAAg7B,IAAAF,EAAAD,GAEAhM,EAAA31B,KAAA2gC,SAAAjd,GACAqe,EAAA96B,KAAAm6B,EAAAzvB,KAAAgkB,GAAAviB,QAIA2uB,GAAA96B,KAAAm6B,EAAAzvB,KAAA3R,KAAAwrB,OAAA9oB,IAAA0Q,SAIApT,KAAAwrB,OAAAuW,IAwBAn5B,EAAAq5B,SAAA,SAAAngB,EAAApQ,EAAAjR,GAEAT,KAAA8hB,EAAAne,SAAAme,EAAAA,EAAA,GAAAlZ,GAAAwY,QACAphB,KAAA0R,EAAA/N,SAAA+N,EAAAA,EAAA,GAAA9I,GAAAwY,QACAphB,KAAAS,EAAAkD,SAAAlD,EAAAA,EAAA,GAAAmI,GAAAwY,SAIAxY,EAAAq5B,SAAApa,OAAA,WAEA,GAAA8P,GAAA,GAAA/uB,GAAAwY,OAEA,OAAA,UAAAU,EAAApQ,EAAAjR,EAAAuT,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OAEAqJ,GAAA1G,WAAAtjB,EAAAiR,GACAimB,EAAA5T,WAAAjC,EAAApQ,GACA+Y,EAAAvD,MAAAyQ,EAEA,IAAAuK,GAAAzX,EAAA7I,UACA,OAAAsgB,GAAA,EAEAzX,EAAA5V,eAAA,EAAArL,KAAAmK,KAAAuuB,IAIAzX,EAAAlZ,IAAA,EAAA,EAAA,OAQA3I,EAAAq5B,SAAAE,mBAAA,WAEA,GAAAxK,GAAA,GAAA/uB,GAAAwY,QACAJ,EAAA,GAAApY,GAAAwY,QACAgE,EAAA,GAAAxc,GAAAwY,OAEA,OAAA,UAAA4J,EAAAlJ,EAAApQ,EAAAjR,EAAAuT,GAEA2jB,EAAA5T,WAAAtjB,EAAAqhB,GACAd,EAAA+C,WAAArS,EAAAoQ,GACAsD,EAAArB,WAAAiH,EAAAlJ,EAEA,IAAAsgB,GAAAzK,EAAAtW,IAAAsW,GACA0K,EAAA1K,EAAAtW,IAAAL,GACAshB,EAAA3K,EAAAtW,IAAA+D,GACAmd,EAAAvhB,EAAAK,IAAAL,GACAwhB,EAAAxhB,EAAAK,IAAA+D,GAEAqd,EAAAL,EAAAG,EAAAF,EAAAA,EAEA5X,EAAAzW,GAAA,GAAApL,GAAAwY,OAGA,IAAA,IAAAqhB,EAIA,MAAAhY,GAAAlZ,IAAA,GAAA,GAAA,GAIA,IAAAmxB,GAAA,EAAAD,EACAE,GAAAJ,EAAAD,EAAAD,EAAAG,GAAAE,EACA/gB,GAAAygB,EAAAI,EAAAH,EAAAC,GAAAI,CAGA,OAAAjY,GAAAlZ,IAAA,EAAAoxB,EAAAhhB,EAAAA,EAAAghB,OAMA/5B,EAAAq5B,SAAA/V,cAAA,WAEA,GAAAlL,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAA4J,EAAAlJ,EAAApQ,EAAAjR,GAEA,GAAAgqB,GAAA7hB,EAAAq5B,SAAAE,mBAAAnX,EAAAlJ,EAAApQ,EAAAjR,EAAAugB,EAEA,OAAAyJ,GAAAxhB,GAAA,GAAAwhB,EAAAjM,GAAA,GAAAiM,EAAAxhB,EAAAwhB,EAAAjM,GAAA,MAMA5V,EAAAq5B,SAAAngC,WAEAE,YAAA4G,EAAAq5B,SAEA1wB,IAAA,SAAAuQ,EAAApQ,EAAAjR,GAMA,MAJAT,MAAA8hB,EAAAnQ,KAAAmQ,GACA9hB,KAAA0R,EAAAC,KAAAD,GACA1R,KAAAS,EAAAkR,KAAAlR,GAEAT,MAIA4iC,wBAAA,SAAApX,EAAAqX,EAAAC,EAAAC,GAMA,MAJA/iC,MAAA8hB,EAAAnQ,KAAA6Z,EAAAqX,IACA7iC,KAAA0R,EAAAC,KAAA6Z,EAAAsX,IACA9iC,KAAAS,EAAAkR,KAAA6Z,EAAAuX,IAEA/iC,MAIAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAqxB,GAMA,MAJAhjC,MAAA8hB,EAAAnQ,KAAAqxB,EAAAlhB,GACA9hB,KAAA0R,EAAAC,KAAAqxB,EAAAtxB,GACA1R,KAAAS,EAAAkR,KAAAqxB,EAAAviC,GAEAT,MAIAijC,KAAA,WAEA,GAAAtL,GAAA,GAAA/uB,GAAAwY,QACAJ,EAAA,GAAApY,GAAAwY,OAEA,OAAA,YAKA,MAHAuW,GAAA5T,WAAA/jB,KAAAS,EAAAT,KAAA0R,GACAsP,EAAA+C,WAAA/jB,KAAA8hB,EAAA9hB,KAAA0R,GAEA,GAAAimB,EAAAzQ,MAAAlG,GAAAre,aAMAugC,SAAA,SAAAlvB,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OACA,OAAAqJ,GAAA7G,WAAA5jB,KAAA8hB,EAAA9hB,KAAA0R,GAAA6C,IAAAvU,KAAAS,GAAAoU,eAAA,EAAA,IAIAgT,OAAA,SAAA7T,GAEA,MAAApL,GAAAq5B,SAAApa,OAAA7nB,KAAA8hB,EAAA9hB,KAAA0R,EAAA1R,KAAAS,EAAAuT,IAIAglB,MAAA,SAAAhlB,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAA2yB,KAEA,OAAA9Q,GAAAyS,sBAAAl9B,KAAA8hB,EAAA9hB,KAAA0R,EAAA1R,KAAAS,IAIA0hC,mBAAA,SAAAnX,EAAAhX,GAEA,MAAApL,GAAAq5B,SAAAE,mBAAAnX,EAAAhrB,KAAA8hB,EAAA9hB,KAAA0R,EAAA1R,KAAAS,EAAAuT,IAIAkY,cAAA,SAAAlB,GAEA,MAAApiB,GAAAq5B,SAAA/V,cAAAlB,EAAAhrB,KAAA8hB,EAAA9hB,KAAA0R,EAAA1R,KAAAS,IAIAuU,OAAA,SAAAguB,GAEA,MAAAA,GAAAlhB,EAAA9M,OAAAhV,KAAA8hB,IAAAkhB,EAAAtxB,EAAAsD,OAAAhV,KAAA0R,IAAAsxB,EAAAviC,EAAAuU,OAAAhV,KAAAS,KAYAmI,EAAAu6B,SAAA,WAEAnjC,KAAAojC,KAAA,GAIAx6B,EAAAu6B,SAAArhC,WAEAE,YAAA4G,EAAAu6B,SAEA5xB,IAAA,SAAA8xB,GAEArjC,KAAAojC,KAAA,GAAAC,GAIAC,OAAA,SAAAD,GAEArjC,KAAAojC,MAAA,GAAAC,GAIAE,OAAA,SAAAF,GAEArjC,KAAAojC,MAAA,GAAAC,GAIAG,QAAA,SAAAH,GAEArjC,KAAAojC,QAAA,GAAAC,KAYAz6B,EAAAL,MAAA,SAAAk7B,GAEAzjC,KAAAyjC,UAAA9/B,SAAA8/B,EAAAA,GAAA,EAEAzjC,KAAA0jC,UAAA,EACA1jC,KAAA2jC,QAAA,EACA3jC,KAAA4jC,YAAA,EAEA5jC,KAAA6jC,SAAA,GAIAj7B,EAAAL,MAAAzG,WAEAE,YAAA4G,EAAAL,MAEAqB,MAAA,WAEA5J,KAAA0jC,UAAA/6B,EAAAgB,YAAAL,MAEAtJ,KAAA2jC,QAAA3jC,KAAA0jC,UACA1jC,KAAA6jC,SAAA,GAIAC,KAAA,WAEA9jC,KAAA+jC,iBACA/jC,KAAA6jC,SAAA,GAIAE,eAAA,WAGA,MADA/jC,MAAA+E,WACA/E,KAAA4jC,aAIA7+B,SAAA,WAEA,GAAA2yB,GAAA,CAQA,IANA13B,KAAAyjC,YAAAzjC,KAAA6jC,SAEA7jC,KAAA4J,QAIA5J,KAAA6jC,QAAA,CAEA,GAAAG,GAAAr7B,EAAAgB,YAAAL,KAEAouB,GAAA,MAAAsM,EAAAhkC,KAAA2jC,SACA3jC,KAAA2jC,QAAAK,EAEAhkC,KAAA4jC,aAAAlM,EAIA,MAAAA,KAYA9uB,EAAAq7B,gBAAA,aAEAr7B,EAAAq7B,gBAAAniC,WAEAE,YAAA4G,EAAAq7B,gBAEAp9B,MAAA,SAAAxD,GAEAA,EAAA6gC,iBAAAt7B,EAAAq7B,gBAAAniC,UAAAoiC,iBACA7gC,EAAA8gC,iBAAAv7B,EAAAq7B,gBAAAniC,UAAAqiC,iBACA9gC,EAAA+gC,oBAAAx7B,EAAAq7B,gBAAAniC,UAAAsiC,oBACA/gC,EAAAghC,cAAAz7B,EAAAq7B,gBAAAniC,UAAAuiC,eAIAH,iBAAA,SAAAI,EAAAt9B,GAEArD,SAAA3D,KAAAukC,aAAAvkC,KAAAukC,cAEA,IAAA3+B,GAAA5F,KAAAukC,UAEA5gC,UAAAiC,EAAA0+B,KAEA1+B,EAAA0+B,OAIA,KAAA1+B,EAAA0+B,GAAAE,QAAAx9B,IAEApB,EAAA0+B,GAAAr9B,KAAAD,IAMAm9B,iBAAA,SAAAG,EAAAt9B,GAEA,GAAArD,SAAA3D,KAAAukC,WAAA,OAAA,CAEA,IAAA3+B,GAAA5F,KAAAukC,UAEA,OAAA5gC,UAAAiC,EAAA0+B,IAAA,KAAA1+B,EAAA0+B,GAAAE,QAAAx9B,IAEA,GAIA,GAIAo9B,oBAAA,SAAAE,EAAAt9B,GAEA,GAAArD,SAAA3D,KAAAukC,WAAA,CAEA,GAAA3+B,GAAA5F,KAAAukC,WACAE,EAAA7+B,EAAA0+B,EAEA,IAAA3gC,SAAA8gC,EAAA,CAEA,GAAA/gB,GAAA+gB,EAAAD,QAAAx9B,EAEA,MAAA0c,GAEA+gB,EAAAC,OAAAhhB,EAAA,MAQA2gB,cAAA,SAAAx+B,GAEA,GAAAlC,SAAA3D,KAAAukC,WAAA,CAEA,GAAA3+B,GAAA5F,KAAAukC,WACAE,EAAA7+B,EAAAC,EAAAy+B,KAEA,IAAA3gC,SAAA8gC,EAAA,CAEA5+B,EAAArD,OAAAxC,IAKA,KAAA,GAHAiV,MACAtS,EAAA8hC,EAAA9hC,OAEAD,EAAA,EAAmBC,EAAAD,EAAYA,IAE/BuS,EAAAvS,GAAA+hC,EAAA/hC,EAIA,KAAA,GAAAA,GAAA,EAAmBC,EAAAD,EAAYA,IAE/BuS,EAAAvS,GAAAnC,KAAAP,KAAA6F,OAkBA,SAAA+C,GA6BA,QAAA+7B,GAAA7iB,EAAApQ,GAEA,MAAAoQ,GAAA6I,SAAAjZ,EAAAiZ,SAIA,QAAAia,GAAAvhC,EAAAwhC,EAAAC,EAAAC,GAEA,GAAA1hC,EAAA2hC,WAAA,IAEA3hC,EAAA4hC,QAAAJ,EAAAC,GAEAC,KAAA,GAIA,IAAA,GAFAG,GAAA7hC,EAAA6hC,SAEAxiC,EAAA,EAAAuD,EAAAi/B,EAAAviC,OAAwCsD,EAAAvD,EAAOA,IAE/CkiC,EAAAM,EAAAxiC,GAAAmiC,EAAAC,GAAA,GA7CAl8B,EAAAu8B,UAAA,SAAAlO,EAAAC,EAAAb,EAAAC,GAEAt2B,KAAAm3B,IAAA,GAAAvuB,GAAAouB,IAAAC,EAAAC,GAGAl3B,KAAAq2B,KAAAA,GAAA,EACAr2B,KAAAs2B,IAAAA,GAAAhL,EAAAA,EAEAtrB,KAAAolC,QACAC,QACAC,QACAC,OACAC,QAAYC,UAAA,GACZC,WAGA3kC,OAAAwB,iBAAAvC,KAAAolC,QACAO,YACA9hC,IAAA,WAEA,MADAqE,SAAAuI,KAAA,yEACAzQ,KAAAwlC,YAmCA58B,EAAAu8B,UAAArjC,WAEAE,YAAA4G,EAAAu8B,UAEAS,cAAA,EAEAr0B,IAAA,SAAA0lB,EAAAC,GAIAl3B,KAAAm3B,IAAA5lB,IAAA0lB,EAAAC,IAIA2O,cAAA,SAAA/E,EAAAx4B,GAEAA,YAAAM,GAAAk9B,mBAEA9lC,KAAAm3B,IAAAF,OAAA7O,sBAAA9f,EAAA0e,aACAhnB,KAAAm3B,IAAAD,UAAA3lB,IAAAuvB,EAAA73B,EAAA63B,EAAAtiB,EAAA,IAAA5N,UAAAtI,GAAAwb,IAAA9jB,KAAAm3B,IAAAF,QAAAzV,aAEIlZ,YAAAM,GAAAm9B,oBAEJ/lC,KAAAm3B,IAAAF,OAAA1lB,IAAAuvB,EAAA73B,EAAA63B,EAAAtiB,EAAA,IAAA5N,UAAAtI,GACAtI,KAAAm3B,IAAAD,UAAA3lB,IAAA,EAAA,EAAA,IAAA0V,mBAAA3e,EAAA0e,cAIA9e,QAAAoI,MAAA,8CAMAs0B,gBAAA,SAAAvhC,EAAA0hC,GAEA,GAAAD,KAMA,OAJAF,GAAAvhC,EAAArD,KAAA8kC,EAAAC,GAEAD,EAAAkB,KAAArB,GAEAG,GAIAmB,iBAAA,SAAAC,EAAAnB,GAEA,GAAAD,KAEA,IAAA3+B,MAAAggC,QAAAD,MAAA,EAGA,MADAh+B,SAAAuI,KAAA,8DACAq0B,CAIA,KAAA,GAAApiC,GAAA,EAAAuD,EAAAigC,EAAAvjC,OAAuCsD,EAAAvD,EAAOA,IAE9CkiC,EAAAsB,EAAAxjC,GAAA1C,KAAA8kC,EAAAC,EAMA,OAFAD,GAAAkB,KAAArB,GAEAG,KAMCl8B,GAYDA,EAAAw9B,SAAA,WAoBA,QAAAC,KAEAtnB,EAAAC,aAAAsnB,GAAA,GAIA,QAAAC,KAEAD,EAAAvc,kBAAAhL,EAAApb,QAAA,GA1BA5C,OAAAC,eAAAhB,KAAA,MAAqCiB,MAAA2H,EAAA49B,oBAErCxmC,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAiK,KAAA,GACAjK,KAAAskC,KAAA,WAEAtkC,KAAA8D,OAAA,KACA9D,KAAAymC,SAAA,GAAA79B,GAAAu6B,SACAnjC,KAAAklC,YAEAllC,KAAAiyB,GAAArpB,EAAAw9B,SAAAM,UAAAtzB,OAEA,IAAAuiB,GAAA,GAAA/sB,GAAAwY,QACAklB,EAAA,GAAA19B,GAAAuW,MACAJ,EAAA,GAAAnW,GAAA2V,WACAsW,EAAA,GAAAjsB,GAAAwY,QAAA,EAAA,EAAA,EAcAklB,GAAArjB,SAAAojB,GACAtnB,EAAAkE,SAAAsjB,GAEAxlC,OAAAwB,iBAAAvC,MACA21B,UACA1zB,YAAA,EACAhB,MAAA00B,GAEA2Q,UACArkC,YAAA,EACAhB,MAAAqlC,GAEAvnB,YACA9c,YAAA,EACAhB,MAAA8d,GAEA8V,OACA5yB,YAAA,EACAhB,MAAA4zB,GAEA8R,iBACA1lC,MAAA,GAAA2H,GAAAge,SAEAmX,cACA98B,MAAA,GAAA2H,GAAA+kB,WAIA3tB,KAAA4mC,oBAAA,EAEA5mC,KAAA2mB,OAAA,GAAA/d,GAAAge,QACA5mB,KAAAgnB,YAAA,GAAApe,GAAAge,QAEA5mB,KAAA6mC,iBAAAj+B,EAAAw9B,SAAAU,wBACA9mC,KAAA+mC,wBAAA,EAEA/mC,KAAAglC,SAAA,EAEAhlC,KAAAgnC,YAAA,EACAhnC,KAAAinC,eAAA,EAEAjnC,KAAAknC,eAAA,EACAlnC,KAAAmnC,YAAA,EAEAnnC,KAAAonC,aAIAx+B,EAAAw9B,SAAAM,UAAA,GAAA99B,GAAAwY,QAAA,EAAA,EAAA,GACAxY,EAAAw9B,SAAAU,yBAAA,EAEAl+B,EAAAw9B,SAAAtkC,WAEAE,YAAA4G,EAAAw9B,SAEAiB,GAAAA,cAIA,MAFAn/B,SAAAuI,KAAA,uDAEAzQ,KAAAsmC,SAAAzmB,OAIAwnB,GAAAA,YAAApmC,GAEAiH,QAAAuI,KAAA,uDAEAzQ,KAAAsmC,SAAAzmB,MAAA5e,GAIAqmC,GAAAA,iBAEAp/B,QAAAuI,KAAA,kGAIA62B,GAAAA,eAAArmC,GAEAiH,QAAAuI,KAAA,kGAIA82B,GAAAA,aAAAtmC,GAEAiH,QAAAuI,KAAA,8EAMA+2B,YAAA,SAAA7gB,GAEA3mB,KAAA2mB,OAAAE,iBAAAF,EAAA3mB,KAAA2mB,QAEA3mB,KAAA2mB,OAAAiP,UAAA51B,KAAA21B,SAAA31B,KAAA+e,WAAA/e,KAAA60B,QAIA4S,yBAAA,SAAA1nB,EAAAC,GAIAhgB,KAAA+e,WAAAe,iBAAAC,EAAAC,IAIA0nB,qBAAA,SAAAzoB,GAEAjf,KAAA+e,WAAAC,aAAAC,GAAA,IAIA0oB,sBAAA,SAAAnnC,GAIAR,KAAA+e,WAAAmB,sBAAA1f,IAIAgxB,0BAAA,SAAArf,GAIAnS,KAAA+e,WAAApN,KAAAQ,IAIAy1B,aAAA,WAKA,GAAAC,GAAA,GAAAj/B,GAAA2V,UAEA,OAAA,UAAAwB,EAAAC,GAMA,MAJA6nB,GAAA/nB,iBAAAC,EAAAC,GAEAhgB,KAAA+e,WAAAnK,SAAAizB,GAEA7nC,SAMAy0B,QAAA,WAEA,GAAAzT,GAAA,GAAApY,GAAAwY,QAAA,EAAA,EAAA,EAEA,OAAA,UAAApB,GAEA,MAAAhgB,MAAA4nC,aAAA5mB,EAAAhB,OAMA0U,QAAA,WAEA,GAAA1T,GAAA,GAAApY,GAAAwY,QAAA,EAAA,EAAA,EAEA,OAAA,UAAApB,GAEA,MAAAhgB,MAAA4nC,aAAA5mB,EAAAhB,OAMA2U,QAAA,WAEA,GAAA3T,GAAA,GAAApY,GAAAwY,QAAA,EAAA,EAAA,EAEA,OAAA,UAAApB,GAEA,MAAAhgB,MAAA4nC,aAAA5mB,EAAAhB,OAMA8nB,gBAAA,WAKA,GAAA9mB,GAAA,GAAApY,GAAAwY,OAEA,OAAA,UAAArB,EAAA4K,GAMA,MAJA3J,GAAArP,KAAAoO,GAAAyC,gBAAAxiB,KAAA+e,YAEA/e,KAAA21B,SAAAphB,IAAAyM,EAAAnM,eAAA8V,IAEA3qB,SAMA2sB,UAAA,SAAAhC,EAAA5K,GAGA,MADA7X,SAAAuI,KAAA,kGACAzQ,KAAA8nC,gBAAA/nB,EAAA4K,IAIAod,WAAA,WAEA,GAAA/mB,GAAA,GAAApY,GAAAwY,QAAA,EAAA,EAAA,EAEA,OAAA,UAAAuJ,GAEA,MAAA3qB,MAAA8nC,gBAAA9mB,EAAA2J,OAMAqd,WAAA,WAEA,GAAAhnB,GAAA,GAAApY,GAAAwY,QAAA,EAAA,EAAA,EAEA,OAAA,UAAAuJ,GAEA,MAAA3qB,MAAA8nC,gBAAA9mB,EAAA2J,OAMAsd,WAAA,WAEA,GAAAjnB,GAAA,GAAApY,GAAAwY,QAAA,EAAA,EAAA,EAEA,OAAA,UAAAuJ,GAEA,MAAA3qB,MAAA8nC,gBAAA9mB,EAAA2J,OAMAud,aAAA,SAAA13B,GAEA,MAAAA,GAAAwV,aAAAhmB,KAAAgnB,cAIAmhB,aAAA,WAEA,GAAAtK,GAAA,GAAAj1B,GAAAge,OAEA,OAAA,UAAApW,GAEA,MAAAA,GAAAwV,aAAA6X,EAAA9W,WAAA/mB,KAAAgnB,kBAMA+K,OAAA,WAIA,GAAA8L,GAAA,GAAAj1B,GAAAge,OAEA,OAAA,UAAApW,GAEAqtB,EAAA9L,OAAAvhB,EAAAxQ,KAAA21B,SAAA31B,KAAAiyB,IAEAjyB,KAAA+e,WAAAmB,sBAAA2d,OAMAtpB,IAAA,SAAAlR,GAEA,GAAAsD,UAAAhE,OAAA,EAAA,CAEA,IAAA,GAAAD,GAAA,EAAmBA,EAAAiE,UAAAhE,OAAsBD,IAEzC1C,KAAAuU,IAAA5N,UAAAjE,GAIA,OAAA1C,MAIA,MAAAqD,KAAArD,MAEAkI,QAAAoI,MAAA,kEAAAjN,GACArD,OAIAqD,YAAAuF,GAAAw9B,UAEA,OAAA/iC,EAAAS,QAEAT,EAAAS,OAAAskC,OAAA/kC,GAIAA,EAAAS,OAAA9D,KACAqD,EAAAghC,eAA0BC,KAAA,UAE1BtkC,KAAAklC,SAAAj+B,KAAA5D,IAIA6E,QAAAoI,MAAA,gEAAAjN,GAIArD,OAIAooC,OAAA,SAAA/kC,GAEA,GAAAsD,UAAAhE,OAAA,EAEA,IAAA,GAAAD,GAAA,EAAmBA,EAAAiE,UAAAhE,OAAsBD,IAEzC1C,KAAAooC,OAAAzhC,UAAAjE,GAMA,IAAAghB,GAAA1jB,KAAAklC,SAAAV,QAAAnhC,EAEA,MAAAqgB,IAEArgB,EAAAS,OAAA,KAEAT,EAAAghC,eAA0BC,KAAA,YAE1BtkC,KAAAklC,SAAAR,OAAAhhB,EAAA,KAMA2kB,eAAA,SAAAp+B,GAGA,MADA/B,SAAAuI,KAAA,6EACAzQ,KAAAsoC,gBAAAr+B,IAIAs+B,cAAA,SAAAloC,GAEA,MAAAL,MAAAwoC,oBAAA,KAAAnoC,IAIAioC,gBAAA,SAAAr+B,GAEA,MAAAjK,MAAAwoC,oBAAA,OAAAv+B,IAIAu+B,oBAAA,SAAAv+B,EAAAhJ,GAEA,GAAAjB,KAAAiK,KAAAhJ,EAAA,MAAAjB,KAEA,KAAA,GAAA0C,GAAA,EAAAuD,EAAAjG,KAAAklC,SAAAviC,OAA4CsD,EAAAvD,EAAOA,IAAA,CAEnD,GAAA+lC,GAAAzoC,KAAAklC,SAAAxiC,GACAW,EAAAolC,EAAAD,oBAAAv+B,EAAAhJ,EAEA,IAAA0C,SAAAN,EAEA,MAAAA,KAUAqlC,iBAAA,SAAA10B,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OAIA,OAFAphB,MAAA+sB,mBAAA,GAEAtC,EAAArC,sBAAApoB,KAAAgnB,cAIA2hB,mBAAA,WAEA,GAAAhT,GAAA,GAAA/sB,GAAAwY,QACAyT,EAAA,GAAAjsB,GAAAwY,OAEA,OAAA,UAAApN,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAA2V,UAMA,OAJAve,MAAA+sB,mBAAA,GAEA/sB,KAAAgnB,YAAA4O,UAAAD,EAAAlL,EAAAoK,GAEApK,MAMAme,iBAAA,WAEA,GAAA7pB,GAAA,GAAAnW,GAAA2V,UAEA,OAAA,UAAAvK,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAuW,KAIA,OAFAnf,MAAA2oC,mBAAA5pB,GAEA0L,EAAAV,kBAAAhL,EAAA/e,KAAAsmC,SAAAzmB,OAAA,OAMAgpB,cAAA,WAEA,GAAAlT,GAAA,GAAA/sB,GAAAwY,QACArC,EAAA,GAAAnW,GAAA2V,UAEA,OAAA,UAAAvK,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OAMA,OAJAphB,MAAA+sB,mBAAA,GAEA/sB,KAAAgnB,YAAA4O,UAAAD,EAAA5W,EAAA0L,GAEAA,MAMAqe,kBAAA,WAEA,GAAA/pB,GAAA,GAAAnW,GAAA2V,UAEA,OAAA,UAAAvK,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OAIA,OAFAphB,MAAA2oC,mBAAA5pB,GAEA0L,EAAAlZ,IAAA,EAAA,EAAA,GAAAiR,gBAAAzD,OAMAkmB,QAAA,aAEAjY,SAAA,SAAA7jB,GAEAA,EAAAnJ,KAIA,KAAA,GAFAklC,GAAAllC,KAAAklC,SAEAxiC,EAAA,EAAAuD,EAAAi/B,EAAAviC,OAAuCsD,EAAAvD,EAAOA,IAE9CwiC,EAAAxiC,GAAAsqB,SAAA7jB,IAMA4/B,gBAAA,SAAA5/B,GAEA,GAAAnJ,KAAAglC,WAAA,EAAA,CAEA77B,EAAAnJ,KAIA,KAAA,GAFAklC,GAAAllC,KAAAklC,SAEAxiC,EAAA,EAAAuD,EAAAi/B,EAAAviC,OAAuCsD,EAAAvD,EAAOA,IAE9CwiC,EAAAxiC,GAAAqmC,gBAAA5/B,KAMA6/B,kBAAA,SAAA7/B,GAEA,GAAArF,GAAA9D,KAAA8D,MAEA,QAAAA,IAEAqF,EAAArF,GAEAA,EAAAklC,kBAAA7/B,KAMA8/B,aAAA,WAEAjpC,KAAA2mB,OAAA+O,QAAA11B,KAAA21B,SAAA31B,KAAA+e,WAAA/e,KAAA60B,OAEA70B,KAAA+mC,wBAAA,GAIAha,kBAAA,SAAAmc,GAEAlpC,KAAA6mC,oBAAA,GAAA7mC,KAAAipC,gBAEAjpC,KAAA+mC,0BAAA,GAAAmC,KAAA,KAEA,OAAAlpC,KAAA8D,OAEA9D,KAAAgnB,YAAArV,KAAA3R,KAAA2mB,QAIA3mB,KAAAgnB,YAAAH,iBAAA7mB,KAAA8D,OAAAkjB,YAAAhnB,KAAA2mB,QAIA3mB,KAAA+mC,wBAAA,EAEAmC,GAAA,EAMA,KAAA,GAAAxmC,GAAA,EAAAuD,EAAAjG,KAAAklC,SAAAviC,OAA4CsD,EAAAvD,EAAOA,IAEnD1C,KAAAklC,SAAAxiC,GAAAqqB,kBAAAmc,IAMAC,OAAA,SAAAC,GAuGA,QAAAC,GAAAC,GAEA,GAAAC,KACA,KAAA,GAAA1mC,KAAAymC,GAAA,CAEA,GAAAE,GAAAF,EAAAzmC,SACA2mC,GAAAC,SACAF,EAAAtiC,KAAAuiC,GAGA,MAAAD,GA/GA,GAAAG,GAAA/lC,SAAAylC,EAEAO,IAKAD,KAGAN,GACAQ,cACAC,aACAC,YACAC,WAGAJ,EAAAF,UACApoC,QAAA,IACAijC,KAAA,SACA0F,UAAA,mBAOA,IAAA3mC,KAyCA,IAvCAA,EAAAg7B,KAAAr+B,KAAAq+B,KACAh7B,EAAAihC,KAAAtkC,KAAAskC,KAEA,KAAAtkC,KAAAiK,OAAA5G,EAAA4G,KAAAjK,KAAAiK,MACA,OAAAggC,KAAAC,UAAAlqC,KAAAonC,YAA8C/jC,EAAA+jC,SAAApnC,KAAAonC,UAC9CpnC,KAAAgnC,cAAA,IAAA3jC,EAAA2jC,YAAA,GACAhnC,KAAAinC,iBAAA,IAAA5jC,EAAA4jC,eAAA,GACAjnC,KAAAglC,WAAA,IAAA3hC,EAAA2hC,SAAA,GAEA3hC,EAAAsjB,OAAA3mB,KAAA2mB,OAAAxR,UAIAxR,SAAA3D,KAAAktB,WAEAvpB,SAAAylC,EAAAQ,WAAA5pC,KAAAktB,SAAAmR,QAEA+K,EAAAQ,WAAA5pC,KAAAktB,SAAAmR,MAAAr+B,KAAAktB,SAAAic,OAAAC,IAIA/lC,EAAA6pB,SAAAltB,KAAAktB,SAAAmR,MAIA16B,SAAA3D,KAAAmqC,WAEAxmC,SAAAylC,EAAAS,UAAA7pC,KAAAmqC,SAAA9L,QAEA+K,EAAAS,UAAA7pC,KAAAmqC,SAAA9L,MAAAr+B,KAAAmqC,SAAAhB,OAAAC,IAIA/lC,EAAA8mC,SAAAnqC,KAAAmqC,SAAA9L,MAMAr+B,KAAAklC,SAAAviC,OAAA,EAAA,CAEAU,EAAA6hC,WAEA,KAAA,GAAAxiC,GAAA,EAAmBA,EAAA1C,KAAAklC,SAAAviC,OAA0BD,IAE7CW,EAAA6hC,SAAAj+B,KAAAjH,KAAAklC,SAAAxiC,GAAAymC,OAAAC,GAAA/lC,QAMA,GAAAqmC,EAAA,CAEA,GAAAE,GAAAP,EAAAD,EAAAQ,YACAC,EAAAR,EAAAD,EAAAS,WACAC,EAAAT,EAAAD,EAAAU,UACAC,EAAAV,EAAAD,EAAAW,OAEAH,GAAAjnC,OAAA,IAAAgnC,EAAAC,WAAAA,GACAC,EAAAlnC,OAAA,IAAAgnC,EAAAE,UAAAA,GACAC,EAAAnnC,OAAA,IAAAgnC,EAAAG,SAAAA,GACAC,EAAApnC,OAAA,IAAAgnC,EAAAI,OAAAA,GAMA,MAFAJ,GAAAtmC,OAAAA,EAEAsmC,GAqBAv2B,MAAA,SAAA2xB,GAEA,OAAA,GAAA/kC,MAAAgC,aAAA2P,KAAA3R,KAAA+kC,IAIApzB,KAAA,SAAAy4B,EAAArF,GA8BA,GA5BAphC,SAAAohC,IAAAA,GAAA,GAEA/kC,KAAAiK,KAAAmgC,EAAAngC,KAEAjK,KAAAiyB,GAAAtgB,KAAAy4B,EAAAnY,IAEAjyB,KAAA21B,SAAAhkB,KAAAy4B,EAAAzU,UACA31B,KAAA+e,WAAApN,KAAAy4B,EAAArrB,YACA/e,KAAA60B,MAAAljB,KAAAy4B,EAAAvV,OAEA70B,KAAA4mC,mBAAAwD,EAAAxD,mBAEA5mC,KAAA2mB,OAAAhV,KAAAy4B,EAAAzjB,QACA3mB,KAAAgnB,YAAArV,KAAAy4B,EAAApjB,aAEAhnB,KAAA6mC,iBAAAuD,EAAAvD,iBACA7mC,KAAA+mC,uBAAAqD,EAAArD,uBAEA/mC,KAAAglC,QAAAoF,EAAApF,QAEAhlC,KAAAgnC,WAAAoD,EAAApD,WACAhnC,KAAAinC,cAAAmD,EAAAnD,cAEAjnC,KAAAknC,cAAAkD,EAAAlD,cACAlnC,KAAAmnC,YAAAiD,EAAAjD,YAEAnnC,KAAAonC,SAAA6C,KAAAI,MAAAJ,KAAAC,UAAAE,EAAAhD,WAEArC,KAAA,EAEA,IAAA,GAAAriC,GAAA,EAAmBA,EAAA0nC,EAAAlF,SAAAviC,OAA4BD,IAAA,CAE/C,GAAA+lC,GAAA2B,EAAAlF,SAAAxiC,EACA1C,MAAAuU,IAAAk0B,EAAAr1B,SAMA,MAAApT,QAMA4I,EAAAq7B,gBAAAniC,UAAA+E,MAAA+B,EAAAw9B,SAAAtkC,WAEA8G,EAAA49B,gBAAA,EASA59B,EAAA0hC,MAAA,SAAAxoB,EAAApQ,EAAAjR,EAAAonB,EAAAxW,EAAAk5B,GAEAvqC,KAAA8hB,EAAAA,EACA9hB,KAAA0R,EAAAA,EACA1R,KAAAS,EAAAA,EAEAT,KAAA6nB,OAAAA,YAAAjf,GAAAwY,QAAAyG,EAAA,GAAAjf,GAAAwY,QACAphB,KAAAwqC,cAAArkC,MAAAggC,QAAAte,GAAAA,KAEA7nB,KAAAqR,MAAAA,YAAAzI,GAAAwI,MAAAC,EAAA,GAAAzI,GAAAwI,MACApR,KAAAyqC,aAAAtkC,MAAAggC,QAAA90B,GAAAA,KAEArR,KAAAuqC,cAAA5mC,SAAA4mC,EAAAA,EAAA,GAIA3hC,EAAA0hC,MAAAxoC,WAEAE,YAAA4G,EAAA0hC,MAEAl3B,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAy4B,GAEApqC,KAAA8hB,EAAAsoB,EAAAtoB,EACA9hB,KAAA0R,EAAA04B,EAAA14B,EACA1R,KAAAS,EAAA2pC,EAAA3pC,EAEAT,KAAA6nB,OAAAlW,KAAAy4B,EAAAviB,QACA7nB,KAAAqR,MAAAM,KAAAy4B,EAAA/4B,OAEArR,KAAAuqC,cAAAH,EAAAG,aAEA,KAAA,GAAA7nC,GAAA,EAAAgpB,EAAA0e,EAAAI,cAAA7nC,OAAoD+oB,EAAAhpB,EAAQA,IAE5D1C,KAAAwqC,cAAA9nC,GAAA0nC,EAAAI,cAAA9nC,GAAA0Q,OAIA,KAAA,GAAA1Q,GAAA,EAAAgpB,EAAA0e,EAAAK,aAAA9nC,OAAmD+oB,EAAAhpB,EAAQA,IAE3D1C,KAAAyqC,aAAA/nC,GAAA0nC,EAAAK,aAAA/nC,GAAA0Q,OAIA,OAAApT,QAYA4I,EAAA8hC,MAAA,SAAA5oB,EAAApQ,EAAAjR,EAAAylB,EAAA2B,EAAAxW,EAAAk5B,GAGA,MADAriC,SAAAuI,KAAA,wEACA,GAAA7H,GAAA0hC,MAAAxoB,EAAApQ,EAAAjR,EAAAonB,EAAAxW,EAAAk5B,IAUA3hC,EAAA+hC,gBAAA,SAAA11B,EAAAsQ,GAEAvlB,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAiV,MAAAA,EACAjV,KAAAulB,SAAAA,EAEAvlB,KAAA4qC,SAAA,EACA5qC,KAAA6qC,aAAqB31B,OAAA,EAAA41B,MAAA,IAErB9qC,KAAAqB,QAAA,GAIAuH,EAAA+hC,gBAAA7oC,WAEAE,YAAA4G,EAAA+hC,gBAEAhoC,GAAAA,UAGA,MADAuF,SAAAuI,KAAA,0EACAzQ,KAAAiV,MAAAtS,QAIAmoC,GAAAA,SAEA,MAAA9qC,MAAAiV,MAAAtS,OAAA3C,KAAAulB,UAIAwlB,GAAAA,aAAA9pC,GAEAA,KAAA,GAAAjB,KAAAqB,WAIA2pC,WAAA,SAAA/pC,GAIA,MAFAjB,MAAA4qC,QAAA3pC,EAEAjB,MAIA2R,KAAA,SAAAy4B,GAOA,MALApqC,MAAAiV,MAAA,GAAAm1B,GAAAn1B,MAAAjT,YAAAooC,EAAAn1B,OACAjV,KAAAulB,SAAA6kB,EAAA7kB,SAEAvlB,KAAA4qC,QAAAR,EAAAQ,QAEA5qC,MAIAirC,OAAA,SAAAC,EAAA5lB,EAAA6lB,GAEAD,GAAAlrC,KAAAulB,SACA4lB,GAAA7lB,EAAAC,QAEA,KAAA,GAAA7iB,GAAA,EAAAuD,EAAAjG,KAAAulB,SAAqCtf,EAAAvD,EAAOA,IAE5C1C,KAAAiV,MAAAi2B,EAAAxoC,GAAA4iB,EAAArQ,MAAAk2B,EAAAzoC,EAIA,OAAA1C,OAIAorC,UAAA,SAAAn2B,GAIA,MAFAjV,MAAAiV,MAAA1D,IAAA0D,GAEAjV,MAIAqrC,gBAAA,SAAAC,GAIA,IAAA,GAFAr2B,GAAAjV,KAAAiV,MAAAC,EAAA,EAEAxS,EAAA,EAAAuD,EAAAqlC,EAAA3oC,OAAqCsD,EAAAvD,EAAOA,IAAA,CAE5C,GAAA2O,GAAAi6B,EAAA5oC,EAEAiB,UAAA0N,IAEAnJ,QAAAuI,KAAA,8DAAA/N,GACA2O,EAAA,GAAAzI,GAAAwI,OAIA6D,EAAAC,KAAA7D,EAAAG,EACAyD,EAAAC,KAAA7D,EAAAI,EACAwD,EAAAC,KAAA7D,EAAAK,EAIA,MAAA1R,OAIAurC,iBAAA,SAAAC,GAIA,IAAA,GAFAv2B,GAAAjV,KAAAiV,MAAAC,EAAA,EAEAxS,EAAA,EAAAuD,EAAAulC,EAAA7oC,OAAsCsD,EAAAvD,EAAOA,IAAA,CAE7C,GAAAghB,GAAA8nB,EAAA9oC,EAEAuS,GAAAC,KAAAwO,EAAA5B,EACA7M,EAAAC,KAAAwO,EAAAhS,EACAuD,EAAAC,KAAAwO,EAAAjjB,EAIA,MAAAT,OAIAyrC,kBAAA,SAAAC,GAIA,IAAA,GAFAz2B,GAAAjV,KAAAiV,MAAAC,EAAA,EAEAxS,EAAA,EAAAuD,EAAAylC,EAAA/oC,OAAsCsD,EAAAvD,EAAOA,IAAA,CAE7C,GAAA8N,GAAAk7B,EAAAhpC,EAEAiB,UAAA6M,IAEAtI,QAAAuI,KAAA,iEAAA/N,GACA8N,EAAA,GAAA5H,GAAAwa,SAIAnO,EAAAC,KAAA1E,EAAAvH,EACAgM,EAAAC,KAAA1E,EAAAgO,EAIA,MAAAxe,OAIA2rC,kBAAA,SAAAD,GAIA,IAAA,GAFAz2B,GAAAjV,KAAAiV,MAAAC,EAAA,EAEAxS,EAAA,EAAAuD,EAAAylC,EAAA/oC,OAAsCsD,EAAAvD,EAAOA,IAAA,CAE7C,GAAA8N,GAAAk7B,EAAAhpC,EAEAiB,UAAA6M,IAEAtI,QAAAuI,KAAA,iEAAA/N,GACA8N,EAAA,GAAA5H,GAAAwY,SAIAnM,EAAAC,KAAA1E,EAAAvH,EACAgM,EAAAC,KAAA1E,EAAAgO,EACAvJ,EAAAC,KAAA1E,EAAAiO,EAIA,MAAAze,OAIA4rC,kBAAA,SAAAF,GAIA,IAAA,GAFAz2B,GAAAjV,KAAAiV,MAAAC,EAAA,EAEAxS,EAAA,EAAAuD,EAAAylC,EAAA/oC,OAAsCsD,EAAAvD,EAAOA,IAAA,CAE7C,GAAA8N,GAAAk7B,EAAAhpC,EAEAiB,UAAA6M,IAEAtI,QAAAuI,KAAA,iEAAA/N,GACA8N,EAAA,GAAA5H,GAAAigB,SAIA5T,EAAAC,KAAA1E,EAAAvH,EACAgM,EAAAC,KAAA1E,EAAAgO,EACAvJ,EAAAC,KAAA1E,EAAAiO,EACAxJ,EAAAC,KAAA1E,EAAAkO,EAIA,MAAA1e,OAIAuR,IAAA,SAAAtQ,EAAAiU,GAMA,MAJAvR,UAAAuR,IAAAA,EAAA,GAEAlV,KAAAiV,MAAA1D,IAAAtQ,EAAAiU,GAEAlV,MAIA2uB,KAAA,SAAAjL,GAEA,MAAA1jB,MAAAiV,MAAAyO,EAAA1jB,KAAAulB,WAIAhC,KAAA,SAAAG,EAAAza,GAIA,MAFAjJ,MAAAiV,MAAAyO,EAAA1jB,KAAAulB,UAAAtc,EAEAjJ,MAIA4uB,KAAA,SAAAlL,GAEA,MAAA1jB,MAAAiV,MAAAyO,EAAA1jB,KAAAulB,SAAA,IAIA/B,KAAA,SAAAE,EAAAlF,GAIA,MAFAxe,MAAAiV,MAAAyO,EAAA1jB,KAAAulB,SAAA,GAAA/G,EAEAxe,MAIA6uB,KAAA,SAAAnL,GAEA,MAAA1jB,MAAAiV,MAAAyO,EAAA1jB,KAAAulB,SAAA,IAIAG,KAAA,SAAAhC,EAAAjF,GAIA,MAFAze,MAAAiV,MAAAyO,EAAA1jB,KAAAulB,SAAA,GAAA9G,EAEAze,MAIA6rC,KAAA,SAAAnoB,GAEA,MAAA1jB,MAAAiV,MAAAyO,EAAA1jB,KAAAulB,SAAA,IAIAuD,KAAA,SAAApF,EAAAhF,GAIA,MAFA1e,MAAAiV,MAAAyO,EAAA1jB,KAAAulB,SAAA,GAAA7G,EAEA1e,MAIA8rC,MAAA,SAAApoB,EAAAza,EAAAuV,GAOA,MALAkF,IAAA1jB,KAAAulB,SAEAvlB,KAAAiV,MAAAyO,EAAA,GAAAza,EACAjJ,KAAAiV,MAAAyO,EAAA,GAAAlF,EAEAxe,MAIA8uB,OAAA,SAAApL,EAAAza,EAAAuV,EAAAC,GAQA,MANAiF,IAAA1jB,KAAAulB,SAEAvlB,KAAAiV,MAAAyO,EAAA,GAAAza,EACAjJ,KAAAiV,MAAAyO,EAAA,GAAAlF,EACAxe,KAAAiV,MAAAyO,EAAA,GAAAjF,EAEAze,MAIA+rC,QAAA,SAAAroB,EAAAza,EAAAuV,EAAAC,EAAAC,GASA,MAPAgF,IAAA1jB,KAAAulB,SAEAvlB,KAAAiV,MAAAyO,EAAA,GAAAza,EACAjJ,KAAAiV,MAAAyO,EAAA,GAAAlF,EACAxe,KAAAiV,MAAAyO,EAAA,GAAAjF,EACAze,KAAAiV,MAAAyO,EAAA,GAAAhF,EAEA1e,MAIAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,QAQA4I,EAAAojC,cAAA,SAAA/2B,EAAAsQ,GAEA,MAAA,IAAA3c,GAAA+hC,gBAAA,GAAAsB,WAAAh3B,GAAAsQ,IAIA3c,EAAAsjC,eAAA,SAAAj3B,EAAAsQ,GAEA,MAAA,IAAA3c,GAAA+hC,gBAAA,GAAAwB,YAAAl3B,GAAAsQ,IAIA3c,EAAAwjC,sBAAA,SAAAn3B,EAAAsQ,GAEA,MAAA,IAAA3c,GAAA+hC,gBAAA,GAAA0B,mBAAAp3B,GAAAsQ,IAIA3c,EAAA0jC,eAAA,SAAAr3B,EAAAsQ,GAEA,MAAA,IAAA3c,GAAA+hC,gBAAA,GAAA4B,YAAAt3B,GAAAsQ,IAIA3c,EAAA4jC,gBAAA,SAAAv3B,EAAAsQ,GAEA,MAAA,IAAA3c,GAAA+hC,gBAAA,GAAA8B,aAAAx3B,GAAAsQ,IAIA3c,EAAA8jC,eAAA,SAAAz3B,EAAAsQ,GAEA,MAAA,IAAA3c,GAAA+hC,gBAAA,GAAAgC,YAAA13B,GAAAsQ,IAIA3c,EAAAgkC,gBAAA,SAAA33B,EAAAsQ,GAEA,MAAA,IAAA3c,GAAA+hC,gBAAA,GAAAkC,aAAA53B,GAAAsQ,IAIA3c,EAAAkkC,iBAAA,SAAA73B,EAAAsQ,GAEA,MAAA,IAAA3c,GAAA+hC,gBAAA,GAAA/c,cAAA3Y,GAAAsQ,IAIA3c,EAAAmkC,iBAAA,SAAA93B,EAAAsQ,GAEA,MAAA,IAAA3c,GAAA+hC,gBAAA,GAAAqC,cAAA/3B,GAAAsQ,IAOA3c,EAAAqkC,uBAAA,SAAAh4B,EAAAsQ,GAGA,MADArd,SAAAuI,KAAA,8GACA,GAAA7H,GAAA+hC,gBAAA11B,EAAAsQ,GAAAylB,YAAA,IAUApiC,EAAAskC,yBAAA,SAAAj4B,EAAAsQ,EAAA4nB,GAEAvkC,EAAA+hC,gBAAApqC,KAAAP,KAAAiV,EAAAsQ;AAEAvlB,KAAAmtC,iBAAAA,GAAA,GAIAvkC,EAAAskC,yBAAAprC,UAAAf,OAAAgB,OAAA6G,EAAA+hC,gBAAA7oC,WACA8G,EAAAskC,yBAAAprC,UAAAE,YAAA4G,EAAAskC,yBAEAtkC,EAAAskC,yBAAAprC,UAAA6P,KAAA,SAAAy4B,GAMA,MAJAxhC,GAAA+hC,gBAAA7oC,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAmtC,iBAAA/C,EAAA+C,iBAEAntC,MAUA4I,EAAAwkC,kBAAA,SAAAn4B,EAAAo4B,GAEArtC,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAiV,MAAAA,EACAjV,KAAAqtC,OAAAA,EAEArtC,KAAA4qC,SAAA,EACA5qC,KAAA6qC,aAAqB31B,OAAA,EAAA41B,MAAA,IAErB9qC,KAAAqB,QAAA,GAIAuH,EAAAwkC,kBAAAtrC,WAEAE,YAAA4G,EAAAwkC,kBAEAzqC,GAAAA,UAEA,MAAA3C,MAAAiV,MAAAtS,QAIAmoC,GAAAA,SAEA,MAAA9qC,MAAAiV,MAAAtS,OAAA3C,KAAAqtC,QAIAtC,GAAAA,aAAA9pC,GAEAA,KAAA,GAAAjB,KAAAqB,WAIA2pC,WAAA,SAAA/pC,GAIA,MAFAjB,MAAA4qC,QAAA3pC,EAEAjB,MAIA2R,KAAA,SAAAy4B,GAEApqC,KAAAiV,MAAA,GAAAm1B,GAAAn1B,MAAAjT,YAAAooC,EAAAn1B,OACAjV,KAAAqtC,OAAAjD,EAAAiD,OACArtC,KAAA4qC,QAAAR,EAAAQ,SAIAK,OAAA,SAAAC,EAAA5lB,EAAA6lB,GAEAD,GAAAlrC,KAAAqtC,OACAlC,GAAA7lB,EAAA+nB,MAEA,KAAA,GAAA3qC,GAAA,EAAAuD,EAAAjG,KAAAqtC,OAAmCpnC,EAAAvD,EAAOA,IAE1C1C,KAAAiV,MAAAi2B,EAAAxoC,GAAA4iB,EAAArQ,MAAAk2B,EAAAzoC,EAIA,OAAA1C,OAIAuR,IAAA,SAAAtQ,EAAAiU,GAMA,MAJAvR,UAAAuR,IAAAA,EAAA,GAEAlV,KAAAiV,MAAA1D,IAAAtQ,EAAAiU,GAEAlV,MAIAoT,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,QAYA4I,EAAA0kC,2BAAA,SAAAr4B,EAAAo4B,EAAAF,GAEAvkC,EAAAwkC,kBAAA7sC,KAAAP,KAAAiV,EAAAo4B,GAEArtC,KAAAmtC,iBAAAA,GAAA,GAIAvkC,EAAA0kC,2BAAAxrC,UAAAf,OAAAgB,OAAA6G,EAAAwkC,kBAAAtrC,WACA8G,EAAA0kC,2BAAAxrC,UAAAE,YAAA4G,EAAA0kC,2BAEA1kC,EAAA0kC,2BAAAxrC,UAAA6P,KAAA,SAAAy4B,GAMA,MAJAxhC,GAAAwkC,kBAAAtrC,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAmtC,iBAAA/C,EAAA+C,iBAEAntC,MAUA4I,EAAA2kC,2BAAA,SAAAC,EAAAjoB,EAAArQ,GAEAlV,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAwpC,KAAAgE,EACAxtC,KAAAulB,SAAAA,EACAvlB,KAAAkV,OAAAA,GAKAtM,EAAA2kC,2BAAAzrC,WAEAE,YAAA4G,EAAA2kC,2BAEA5qC,GAAAA,UAGA,MADAuF,SAAAuI,KAAA,0EACAzQ,KAAAiV,MAAAtS,QAIAmoC,GAAAA,SAEA,MAAA9qC,MAAAwpC,KAAAv0B,MAAAtS,OAAA3C,KAAAwpC,KAAA6D,QAIA9pB,KAAA,SAAAG,EAAAza,GAIA,MAFAjJ,MAAAwpC,KAAAv0B,MAAAyO,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,QAAAjM,EAEAjJ,MAIAwjB,KAAA,SAAAE,EAAAlF,GAIA,MAFAxe,MAAAwpC,KAAAv0B,MAAAyO,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,OAAA,GAAAsJ,EAEAxe,MAIA0lB,KAAA,SAAAhC,EAAAjF,GAIA,MAFAze,MAAAwpC,KAAAv0B,MAAAyO,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,OAAA,GAAAuJ,EAEAze,MAIA8oB,KAAA,SAAApF,EAAAhF,GAIA,MAFA1e,MAAAwpC,KAAAv0B,MAAAyO,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,OAAA,GAAAwJ,EAEA1e,MAIA2uB,KAAA,SAAAjL,GAEA,MAAA1jB,MAAAwpC,KAAAv0B,MAAAyO,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,SAIA0Z,KAAA,SAAAlL,GAEA,MAAA1jB,MAAAwpC,KAAAv0B,MAAAyO,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,OAAA,IAIA2Z,KAAA,SAAAnL,GAEA,MAAA1jB,MAAAwpC,KAAAv0B,MAAAyO,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,OAAA,IAIA22B,KAAA,SAAAnoB,GAEA,MAAA1jB,MAAAwpC,KAAAv0B,MAAAyO,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,OAAA,IAIA42B,MAAA,SAAApoB,EAAAza,EAAAuV,GAOA,MALAkF,GAAAA,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,OAEAlV,KAAAwpC,KAAAv0B,MAAAyO,EAAA,GAAAza,EACAjJ,KAAAwpC,KAAAv0B,MAAAyO,EAAA,GAAAlF,EAEAxe,MAIA8uB,OAAA,SAAApL,EAAAza,EAAAuV,EAAAC,GAQA,MANAiF,GAAAA,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,OAEAlV,KAAAwpC,KAAAv0B,MAAAyO,EAAA,GAAAza,EACAjJ,KAAAwpC,KAAAv0B,MAAAyO,EAAA,GAAAlF,EACAxe,KAAAwpC,KAAAv0B,MAAAyO,EAAA,GAAAjF,EAEAze,MAIA+rC,QAAA,SAAAroB,EAAAza,EAAAuV,EAAAC,EAAAC,GASA,MAPAgF,GAAAA,EAAA1jB,KAAAwpC,KAAA6D,OAAArtC,KAAAkV,OAEAlV,KAAAwpC,KAAAv0B,MAAAyO,EAAA,GAAAza,EACAjJ,KAAAwpC,KAAAv0B,MAAAyO,EAAA,GAAAlF,EACAxe,KAAAwpC,KAAAv0B,MAAAyO,EAAA,GAAAjF,EACAze,KAAAwpC,KAAAv0B,MAAAyO,EAAA,GAAAhF,EAEA1e,OAiBA4I,EAAAukB,SAAA,WAEApsB,OAAAC,eAAAhB,KAAA,MAAqCiB,MAAA2H,EAAA6kC,oBAErCztC,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAiK,KAAA,GACAjK,KAAAskC,KAAA,WAEAtkC,KAAAotB,YACAptB,KAAAsrC,UACAtrC,KAAA0tC,SACA1tC,KAAA2tC,mBAEA3tC,KAAA4tC,gBACA5tC,KAAA6tC,gBAEA7tC,KAAA8tC,eACA9tC,KAAA+tC,eAEA/tC,KAAAguC,iBAEAhuC,KAAAiuC,YAAA,KACAjuC,KAAA48B,eAAA,KAIA58B,KAAAkuC,oBAAA,EACAluC,KAAAmuC,oBAAA,EACAnuC,KAAAouC,eAAA,EACApuC,KAAAquC,mBAAA,EACAruC,KAAAsuC,kBAAA,EACAtuC,KAAAuuC,yBAAA,EACAvuC,KAAAwuC,kBAAA,GAIA5lC,EAAAukB,SAAArrB,WAEAE,YAAA4G,EAAAukB,SAEAqa,YAAA,SAAA7gB,GAIA,IAAA,GAFAoX,IAAA,GAAAn1B,GAAA+kB,SAAA4B,gBAAA5I,GAEAjkB,EAAA,EAAAgpB,EAAA1rB,KAAAotB,SAAAzqB,OAA6C+oB,EAAAhpB,EAAQA,IAAA,CAErD,GAAA+rC,GAAAzuC,KAAAotB,SAAA1qB,EACA+rC,GAAAzoB,aAAAW,GAIA,IAAA,GAAAjkB,GAAA,EAAAgpB,EAAA1rB,KAAA0tC,MAAA/qC,OAA0C+oB,EAAAhpB,EAAQA,IAAA,CAElD,GAAAgsC,GAAA1uC,KAAA0tC,MAAAhrC,EACAgsC,GAAA7mB,OAAA/B,aAAAiY,GAAAvc,WAEA,KAAA,GAAA1a,GAAA,EAAA6nC,EAAAD,EAAAlE,cAAA7nC,OAAmDgsC,EAAA7nC,EAAQA,IAE3D4nC,EAAAlE,cAAA1jC,GAAAgf,aAAAiY,GAAAvc,YAMA,OAAAxhB,KAAAiuC,aAEAjuC,KAAA4uC,qBAIA,OAAA5uC,KAAA48B,gBAEA58B,KAAA68B,wBAIA78B,KAAAkuC,oBAAA,EACAluC,KAAAquC,mBAAA,GAIA5Z,QAAA,WAIA,GAAAoJ,EAEA,OAAA,UAAA7d,GAQA,MANArc,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAA1I,cAAAnV,GAEAhgB,KAAAwnC,YAAA3J,GAEA79B,SAMA00B,QAAA,WAIA,GAAAmJ,EAEA,OAAA,UAAA7d,GAQA,MANArc,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAAzI,cAAApV,GAEAhgB,KAAAwnC,YAAA3J,GAEA79B,SAMA20B,QAAA,WAIA,GAAAkJ,EAEA,OAAA,UAAA7d,GAQA,MANArc,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAAxI,cAAArV,GAEAhgB,KAAAwnC,YAAA3J,GAEA79B,SAMA2sB,UAAA,WAIA,GAAAkR,EAEA,OAAA,UAAA50B,EAAAuV,EAAAC,GAQA,MANA9a,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAA3I,gBAAAjsB,EAAAuV,EAAAC,GAEAze,KAAAwnC,YAAA3J,GAEA79B,SAMA60B,MAAA,WAIA,GAAAgJ,EAEA,OAAA,UAAA50B,EAAAuV,EAAAC,GAQA,MANA9a,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAApI,UAAAxsB,EAAAuV,EAAAC,GAEAze,KAAAwnC,YAAA3J,GAEA79B,SAMA+xB,OAAA,WAEA,GAAAnxB,EAEA,OAAA,UAAA4P,GAEA7M,SAAA/C,IAAAA,EAAA,GAAAgI,GAAAw9B,UAEAxlC,EAAAmxB,OAAAvhB,GAEA5P,EAAAqoC,eAEAjpC,KAAAwnC,YAAA5mC,EAAA+lB,YAMAkoB,mBAAA,SAAA3hB,GAiDA,QAAA4hB,GAAAhtB,EAAApQ,EAAAjR,GAEA,GAAA+pC,GAAA7mC,SAAAorC,GAAAC,EAAAltB,GAAA1O,QAAA47B,EAAAt9B,GAAA0B,QAAA47B,EAAAvuC,GAAA2S,YACAq3B,EAAA9mC,SAAA2nC,GAAAxe,EAAAwe,OAAAxpB,GAAA1O,QAAA0Z,EAAAwe,OAAA55B,GAAA0B,QAAA0Z,EAAAwe,OAAA7qC,GAAA2S,YAEAs7B,EAAA,GAAA9lC,GAAA0hC,MAAAxoB,EAAApQ,EAAAjR,EAAA+pC,EAAAC,EAEA3d,GAAA4gB,MAAAzmC,KAAAynC,GAEA/qC,SAAAsrC,GAEAniB,EAAA6gB,cAAA,GAAA1mC,MAAAioC,EAAAptB,GAAA1O,QAAA87B,EAAAx9B,GAAA0B,QAAA87B,EAAAzuC,GAAA2S,UAIAzP,SAAAwrC,GAEAriB,EAAA6gB,cAAA,GAAA1mC,MAAAmoC,EAAAttB,GAAA1O,QAAAg8B,EAAA19B,GAAA0B,QAAAg8B,EAAA3uC,GAAA2S,UAhEA,GAAA0Z,GAAA9sB,KAEAwrC,EAAA,OAAAte,EAAAxJ,MAAAwJ,EAAAxJ,MAAAzO,MAAAtR,OACA2pB,EAAAJ,EAAAI,WAEAF,EAAAE,EAAAqI,SAAA1gB,MACA85B,EAAAprC,SAAA2pB,EAAAzF,OAAAyF,EAAAzF,OAAA5S,MAAAtR,OACA2nC,EAAA3nC,SAAA2pB,EAAAjc,MAAAic,EAAAjc,MAAA4D,MAAAtR,OACAsrC,EAAAtrC,SAAA2pB,EAAA+hB,GAAA/hB,EAAA+hB,GAAAp6B,MAAAtR,OACAwrC,EAAAxrC,SAAA2pB,EAAAgiB,IAAAhiB,EAAAgiB,IAAAr6B,MAAAtR,MAEAA,UAAAwrC,IAAAnvC,KAAA2tC,cAAA,MAMA,KAAA,GAJAqB,MACAE,KACAE,KAEA1sC,EAAA,EAAAoE,EAAA,EAAA85B,EAAA,EAAgCl+B,EAAA0qB,EAAAzqB,OAAqBD,GAAA,EAAAoE,GAAA,EAAA85B,GAAA,EAErD9T,EAAAM,SAAAnmB,KAAA,GAAA2B,GAAAwY,QAAAgM,EAAA1qB,GAAA0qB,EAAA1qB,EAAA,GAAA0qB,EAAA1qB,EAAA,KAEAiB,SAAAorC,GAEAC,EAAA/nC,KAAA,GAAA2B,GAAAwY,QAAA2tB,EAAArsC,GAAAqsC,EAAArsC,EAAA,GAAAqsC,EAAArsC,EAAA,KAIAiB,SAAA2nC,GAEAxe,EAAAwe,OAAArkC,KAAA,GAAA2B,GAAAwI,MAAAk6B,EAAA5oC,GAAA4oC,EAAA5oC,EAAA,GAAA4oC,EAAA5oC,EAAA,KAIAiB,SAAAsrC,GAEAC,EAAAjoC,KAAA,GAAA2B,GAAAwa,QAAA6rB,EAAAnoC,GAAAmoC,EAAAnoC,EAAA,KAIAnD,SAAAwrC,GAEAC,EAAAnoC,KAAA,GAAA2B,GAAAwa,QAAA+rB,EAAAroC,GAAAqoC,EAAAroC,EAAA,IA6BA,IAAAnD,SAAA6nC,EAAA,CAEA,GAAA+D,GAAAriB,EAAAqiB,MAEA,IAAAA,EAAA5sC,OAAA,EAEA,IAAA,GAAAD,GAAA,EAAoBA,EAAA6sC,EAAA5sC,OAAmBD,IAOvC,IAAA,GALA8sC,GAAAD,EAAA7sC,GAEAkH,EAAA4lC,EAAA5lC,MACAkhC,EAAA0E,EAAA1E,MAEAhkC,EAAA8C,EAAA+kC,EAAA/kC,EAAAkhC,EAA6C6D,EAAA7nC,EAAQA,GAAA,EAErDgoC,EAAAtD,EAAA1kC,GAAA0kC,EAAA1kC,EAAA,GAAA0kC,EAAA1kC,EAAA,QAQA,KAAA,GAAApE,GAAA,EAAoBA,EAAA8oC,EAAA7oC,OAAoBD,GAAA,EAExCosC,EAAAtD,EAAA9oC,GAAA8oC,EAAA9oC,EAAA,GAAA8oC,EAAA9oC,EAAA,QAQA,KAAA,GAAAA,GAAA,EAAmBA,EAAA0qB,EAAAzqB,OAAA,EAAyBD,GAAA,EAE5CosC,EAAApsC,EAAAA,EAAA,EAAAA,EAAA,EAoBA,OAdA1C,MAAAyvC,qBAEA,OAAAviB,EAAA+gB,cAEAjuC,KAAAiuC,YAAA/gB,EAAA+gB,YAAA76B,SAIA,OAAA8Z,EAAA0P,iBAEA58B,KAAA48B,eAAA1P,EAAA0P,eAAAxpB,SAIApT,MAIAylB,OAAA,WAEAzlB,KAAA4uC,oBAEA,IAAA15B,GAAAlV,KAAAiuC,YAAAxoB,SAAAb,QAIA,OAFA5kB,MAAA2sB,UAAAzX,EAAAjM,EAAAiM,EAAAsJ,EAAAtJ,EAAAuJ,GAEAvJ,GAIAsM,UAAA,WAEAxhB,KAAA68B,uBAEA,IAAApX,GAAAzlB,KAAA48B,eAAAnX,OACAiI,EAAA1tB,KAAA48B,eAAAlP,OAEApb,EAAA,IAAAob,EAAA,EAAA,EAAAA,EAEA/G,EAAA,GAAA/d,GAAAge,OAUA,OATAD,GAAApV,IACAe,EAAA,EAAA,GAAAA,EAAAmT,EAAAxc,EACA,EAAAqJ,EAAA,GAAAA,EAAAmT,EAAAjH,EACA,EAAA,EAAAlM,GAAAA,EAAAmT,EAAAhH,EACA,EAAA,EAAA,EAAA,GAGAze,KAAAwnC,YAAA7gB,GAEA3mB,MAIAyvC,mBAAA,WAIA,IAAA,GAFAC,GAAA,GAAA9mC,GAAAwY,QAAAuuB,EAAA,GAAA/mC,GAAAwY,QAEA4N,EAAA,EAAA4gB,EAAA5vC,KAAA0tC,MAAA/qC,OAA0CitC,EAAA5gB,EAAQA,IAAA,CAElD,GAAA0f,GAAA1uC,KAAA0tC,MAAA1e,GAEA6gB,EAAA7vC,KAAAotB,SAAAshB,EAAA5sB,GACAguB,EAAA9vC,KAAAotB,SAAAshB,EAAAh9B,GACAq+B,EAAA/vC,KAAAotB,SAAAshB,EAAAjuC,EAEAivC,GAAA3rB,WAAAgsB,EAAAD,GACAH,EAAA5rB,WAAA8rB,EAAAC,GACAJ,EAAAxoB,MAAAyoB,GAEAD,EAAAluB,YAEAktB,EAAA7mB,OAAAlW,KAAA+9B,KAMAM,qBAAA,SAAAC,GAEA,GAAAtuB,GAAAuuB,EAAAlhB,EAAA4gB,EAAAlB,EAAAthB,CAIA,KAFAA,EAAA,GAAAjnB,OAAAnG,KAAAotB,SAAAzqB,QAEAgf,EAAA,EAAAuuB,EAAAlwC,KAAAotB,SAAAzqB,OAAyCutC,EAAAvuB,EAAQA,IAEjDyL,EAAAzL,GAAA,GAAA/Y,GAAAwY,OAIA,IAAA6uB,EAAA,CAKA,GAAAJ,GAAAC,EAAAC,EACAL,EAAA,GAAA9mC,GAAAwY,QAAAuuB,EAAA,GAAA/mC,GAAAwY,OAEA,KAAA4N,EAAA,EAAA4gB,EAAA5vC,KAAA0tC,MAAA/qC,OAAuCitC,EAAA5gB,EAAQA,IAE/C0f,EAAA1uC,KAAA0tC,MAAA1e,GAEA6gB,EAAA7vC,KAAAotB,SAAAshB,EAAA5sB,GACAguB,EAAA9vC,KAAAotB,SAAAshB,EAAAh9B,GACAq+B,EAAA/vC,KAAAotB,SAAAshB,EAAAjuC,GAEAivC,EAAA3rB,WAAAgsB,EAAAD,GACAH,EAAA5rB,WAAA8rB,EAAAC,GACAJ,EAAAxoB,MAAAyoB,GAEAviB,EAAAshB,EAAA5sB,GAAAvN,IAAAm7B,GACAtiB,EAAAshB,EAAAh9B,GAAA6C,IAAAm7B,GACAtiB,EAAAshB,EAAAjuC,GAAA8T,IAAAm7B,OAMA,KAAA1gB,EAAA,EAAA4gB,EAAA5vC,KAAA0tC,MAAA/qC,OAAuCitC,EAAA5gB,EAAQA,IAE/C0f,EAAA1uC,KAAA0tC,MAAA1e,GAEA5B,EAAAshB,EAAA5sB,GAAAvN,IAAAm6B,EAAA7mB,QACAuF,EAAAshB,EAAAh9B,GAAA6C,IAAAm6B,EAAA7mB,QACAuF,EAAAshB,EAAAjuC,GAAA8T,IAAAm6B,EAAA7mB,OAMA,KAAAlG,EAAA,EAAAuuB,EAAAlwC,KAAAotB,SAAAzqB,OAAyCutC,EAAAvuB,EAAQA,IAEjDyL,EAAAzL,GAAAH,WAIA,KAAAwN,EAAA,EAAA4gB,EAAA5vC,KAAA0tC,MAAA/qC,OAAsCitC,EAAA5gB,EAAQA,IAAA,CAE9C0f,EAAA1uC,KAAA0tC,MAAA1e,EAEA,IAAAwb,GAAAkE,EAAAlE,aAEA,KAAAA,EAAA7nC,QAEA6nC,EAAA,GAAA74B,KAAAyb,EAAAshB,EAAA5sB,IACA0oB,EAAA,GAAA74B,KAAAyb,EAAAshB,EAAAh9B,IACA84B,EAAA,GAAA74B,KAAAyb,EAAAshB,EAAAjuC,MAIA+pC,EAAA,GAAApd,EAAAshB,EAAA5sB,GAAA1O,QACAo3B,EAAA,GAAApd,EAAAshB,EAAAh9B,GAAA0B,QACAo3B,EAAA,GAAApd,EAAAshB,EAAAjuC,GAAA2S,WAQA+8B,oBAAA,WAEA,GAAAztC,GAAAgpB,EAAAsD,EAAA4gB,EAAAlB,CAMA,KAAA1f,EAAA,EAAA4gB,EAAA5vC,KAAA0tC,MAAA/qC,OAAsCitC,EAAA5gB,EAAQA,IAgB9C,IAdA0f,EAAA1uC,KAAA0tC,MAAA1e,GAEA0f,EAAA0B,qBAMA1B,EAAA0B,qBAAAz+B,KAAA+8B,EAAA7mB,QAJA6mB,EAAA0B,qBAAA1B,EAAA7mB,OAAAzU,QAQAs7B,EAAA2B,0BAAA3B,EAAA2B,4BAEA3tC,EAAA,EAAAgpB,EAAAgjB,EAAAlE,cAAA7nC,OAA+C+oB,EAAAhpB,EAAQA,IAEvDgsC,EAAA2B,wBAAA3tC,GAMAgsC,EAAA2B,wBAAA3tC,GAAAiP,KAAA+8B,EAAAlE,cAAA9nC,IAJAgsC,EAAA2B,wBAAA3tC,GAAAgsC,EAAAlE,cAAA9nC,GAAA0Q,OAcA,IAAAk9B,GAAA,GAAA1nC,GAAAukB,QAGA,KAFAmjB,EAAA5C,MAAA1tC,KAAA0tC,MAEAhrC,EAAA,EAAAgpB,EAAA1rB,KAAA4tC,aAAAjrC,OAA6C+oB,EAAAhpB,EAAQA,IAAA,CAIrD,IAAA1C,KAAA6tC,aAAAnrC,GAAA,CAEA1C,KAAA6tC,aAAAnrC,MACA1C,KAAA6tC,aAAAnrC,GAAA6tC,eACAvwC,KAAA6tC,aAAAnrC,GAAA8nC,gBAEA,IAGAgG,GAAAhG,EAHAiG,EAAAzwC,KAAA6tC,aAAAnrC,GAAA6tC,YACAG,EAAA1wC,KAAA6tC,aAAAnrC,GAAA8nC,aAIA,KAAAxb,EAAA,EAAA4gB,EAAA5vC,KAAA0tC,MAAA/qC,OAAwCitC,EAAA5gB,EAAQA,IAEhDwhB,EAAA,GAAA5nC,GAAAwY,QACAopB,GAAsB1oB,EAAA,GAAAlZ,GAAAwY,QAAA1P,EAAA,GAAA9I,GAAAwY,QAAA3gB,EAAA,GAAAmI,GAAAwY,SAEtBqvB,EAAAxpC,KAAAupC,GACAE,EAAAzpC,KAAAujC,GAMA,GAAAqD,GAAA7tC,KAAA6tC,aAAAnrC,EAIA4tC,GAAAljB,SAAAptB,KAAA4tC,aAAAlrC,GAAA0qB,SAIAkjB,EAAAb,qBACAa,EAAAN,sBAIA,IAAAQ,GAAAhG,CAEA,KAAAxb,EAAA,EAAA4gB,EAAA5vC,KAAA0tC,MAAA/qC,OAAuCitC,EAAA5gB,EAAQA,IAE/C0f,EAAA1uC,KAAA0tC,MAAA1e,GAEAwhB,EAAA3C,EAAA0C,YAAAvhB,GACAwb,EAAAqD,EAAArD,cAAAxb,GAEAwhB,EAAA7+B,KAAA+8B,EAAA7mB,QAEA2iB,EAAA1oB,EAAAnQ,KAAA+8B,EAAAlE,cAAA,IACAA,EAAA94B,EAAAC,KAAA+8B,EAAAlE,cAAA,IACAA,EAAA/pC,EAAAkR,KAAA+8B,EAAAlE,cAAA,IAQA,IAAAxb,EAAA,EAAA4gB,EAAA5vC,KAAA0tC,MAAA/qC,OAAsCitC,EAAA5gB,EAAQA,IAE9C0f,EAAA1uC,KAAA0tC,MAAA1e,GAEA0f,EAAA7mB,OAAA6mB,EAAA0B,qBACA1B,EAAAlE,cAAAkE,EAAA2B,yBAMAM,gBAAA,WAEAzoC,QAAAuI,KAAA,yDAIAmgC,qBAAA,WAKA,IAAA,GAHA1qB,GAAA,EACAkH,EAAAptB,KAAAotB,SAEA1qB,EAAA,EAAAgpB,EAAA0B,EAAAzqB,OAAwC+oB,EAAAhpB,EAAQA,IAEhDA,EAAA,IAEAwjB,GAAAkH,EAAA1qB,GAAAoiB,WAAAsI,EAAA1qB,EAAA,KAIA1C,KAAAguC,cAAAtrC,GAAAwjB,GAMA0oB,mBAAA,WAEA,OAAA5uC,KAAAiuC,cAEAjuC,KAAAiuC,YAAA,GAAArlC,GAAAgkB,MAIA5sB,KAAAiuC,YAAA1iB,cAAAvrB,KAAAotB,WAIAyP,sBAAA,WAEA,OAAA78B,KAAA48B,iBAEA58B,KAAA48B,eAAA,GAAAh0B,GAAA6kB,QAIAztB,KAAA48B,eAAArR,cAAAvrB,KAAAotB,WAIAyjB,MAAA,SAAA3jB,EAAAvG,EAAAmqB,GAEA,GAAA5jB,YAAAtkB,GAAAukB,WAAA,EAGA,WADAjlB,SAAAoI,MAAA,sEAAA4c,EAKA,IAAA6Q,GACAgT,EAAA/wC,KAAAotB,SAAAzqB,OACAquC,EAAAhxC,KAAAotB,SACA6jB,EAAA/jB,EAAAE,SACA8jB,EAAAlxC,KAAA0tC,MACAyD,EAAAjkB,EAAAwgB,MACA0D,EAAApxC,KAAA2tC,cAAA,GACAwB,EAAAjiB,EAAAygB,cAAA,EAEAhqC,UAAAmtC,IAAAA,EAAA,GAEAntC,SAAAgjB,IAEAoX,GAAA,GAAAn1B,GAAA+kB,SAAA4B,gBAAA5I,GAMA,KAAA,GAAAjkB,GAAA,EAAAgpB,EAAAulB,EAAAtuC,OAAyC+oB,EAAAhpB,EAAQA,IAAA,CAEjD,GAAA+rC,GAAAwC,EAAAvuC,GAEA2uC,EAAA5C,EAAAr7B,OAEAzP,UAAAgjB,GAAA0qB,EAAArrB,aAAAW,GAEAqqB,EAAA/pC,KAAAoqC,GAMA,IAAA3uC,EAAA,EAAAgpB,EAAAylB,EAAAxuC,OAAkC+oB,EAAAhpB,EAAQA,IAAA,CAE1C,GAAA4uC,GAAAzpB,EAAAxW,EAAAq9B,EAAAyC,EAAAzuC,GACA6uC,EAAA7C,EAAAlE,cACAgH,EAAA9C,EAAAjE,YAEA6G,GAAA,GAAA1oC,GAAA0hC,MAAAoE,EAAA5sB,EAAAivB,EAAArC,EAAAh9B,EAAAq/B,EAAArC,EAAAjuC,EAAAswC,GACAO,EAAAzpB,OAAAlW,KAAA+8B,EAAA7mB,QAEAlkB,SAAAo6B,GAEAuT,EAAAzpB,OAAA/B,aAAAiY,GAAAvc,WAIA,KAAA,GAAA1a,GAAA,EAAA6nC,EAAA4C,EAAA5uC,OAAkDgsC,EAAA7nC,EAAQA,IAE1D+gB,EAAA0pB,EAAAzqC,GAAAsM,QAEAzP,SAAAo6B,GAEAlW,EAAA/B,aAAAiY,GAAAvc,YAIA8vB,EAAA9G,cAAAvjC,KAAA4gB,EAIAypB,GAAAjgC,MAAAM,KAAA+8B,EAAAr9B,MAEA,KAAA,GAAAvK,GAAA,EAAA6nC,EAAA6C,EAAA7uC,OAAiDgsC,EAAA7nC,EAAQA,IAEzDuK,EAAAmgC,EAAA1qC,GACAwqC,EAAA7G,aAAAxjC,KAAAoK,EAAA+B,QAIAk+B,GAAA/G,cAAAmE,EAAAnE,cAAAuG,EAEAI,EAAAjqC,KAAAqqC,GAMA,IAAA5uC,EAAA,EAAAgpB,EAAAyjB,EAAAxsC,OAAgC+oB,EAAAhpB,EAAQA,IAAA,CAExC,GAAA2sC,GAAAF,EAAAzsC,GAAA+uC,IAEA,IAAA9tC,SAAA0rC,EAAA,CAMA,IAAA,GAAAvoC,GAAA,EAAA6nC,EAAAU,EAAA1sC,OAAmCgsC,EAAA7nC,EAAQA,IAE3C2qC,EAAAxqC,KAAAooC,EAAAvoC,GAAAsM,QAIAg+B,GAAAnqC,KAAAwqC,MAMAC,UAAA,SAAAC,GAEA,MAAAA,aAAA/oC,GAAAy8B,OAAA,MAEAn9B,SAAAoI,MAAA,kEAAAqhC,IAKAA,EAAA9K,kBAAA8K,EAAA1I,mBAEAjpC,MAAA6wC,MAAAc,EAAAzkB,SAAAykB,EAAAhrB,UAUAirB,cAAA,WAEA,GAGAjwB,GAAA9e,EAGAH,EAAAgpB,EAAAgjB,EACAlD,EAAA1kC,EAAA6nC,EAPAkD,KACAC,KAAAC,KAGAC,EAAA,EACAC,EAAAzoC,KAAAO,IAAA,GAAAioC,EAIA,KAAAtvC,EAAA,EAAAgpB,EAAA1rB,KAAAotB,SAAAzqB,OAAyC+oB,EAAAhpB,EAAQA,IAEjDif,EAAA3hB,KAAAotB,SAAA1qB,GACAG,EAAA2G,KAAAkb,MAAA/C,EAAA1Y,EAAAgpC,GAAA,IAAAzoC,KAAAkb,MAAA/C,EAAAnD,EAAAyzB,GAAA,IAAAzoC,KAAAkb,MAAA/C,EAAAlD,EAAAwzB,GAEAtuC,SAAAkuC,EAAAhvC,IAEAgvC,EAAAhvC,GAAAH,EACAovC,EAAA7qC,KAAAjH,KAAAotB,SAAA1qB,IACAqvC,EAAArvC,GAAAovC,EAAAnvC,OAAA,GAKAovC,EAAArvC,GAAAqvC,EAAAF,EAAAhvC,GASA,IAAAqvC,KAEA,KAAAxvC,EAAA,EAAAgpB,EAAA1rB,KAAA0tC,MAAA/qC,OAAsC+oB,EAAAhpB,EAAQA,IAAA,CAE9CgsC,EAAA1uC,KAAA0tC,MAAAhrC,GAEAgsC,EAAA5sB,EAAAiwB,EAAArD,EAAA5sB,GACA4sB,EAAAh9B,EAAAqgC,EAAArD,EAAAh9B,GACAg9B,EAAAjuC,EAAAsxC,EAAArD,EAAAjuC,GAEA+qC,GAAAkD,EAAA5sB,EAAA4sB,EAAAh9B,EAAAg9B,EAAAjuC,EAMA,KAAA,GAJA0xC,GAAA,GAIAjgB,EAAA,EAAmB,EAAAA,EAAOA,IAE1B,GAAAsZ,EAAAtZ,KAAAsZ,GAAAtZ,EAAA,GAAA,GAAA,CAEAigB,EAAAjgB,EACAggB,EAAAjrC,KAAAvE,EACA,QAQA,IAAAA,EAAAwvC,EAAAvvC,OAAA,EAA2CD,GAAA,EAAQA,IAAA,CAEnD,GAAA0vC,GAAAF,EAAAxvC,EAIA,KAFA1C,KAAA0tC,MAAAhJ,OAAA0N,EAAA,GAEAtrC,EAAA,EAAA6nC,EAAA3uC,KAAA2tC,cAAAhrC,OAA+CgsC,EAAA7nC,EAAQA,IAEvD9G,KAAA2tC,cAAA7mC,GAAA49B,OAAA0N,EAAA,GAQA,GAAA1a,GAAA13B,KAAAotB,SAAAzqB,OAAAmvC,EAAAnvC,MAEA,OADA3C,MAAAotB,SAAA0kB,EACApa,GAIA2a,yBAAA,WAeA,QAAAC,GAAAxwB,EAAApQ,GAEA,MAAAoQ,GAAAyoB,cAAA74B,EAAA64B,cAVA,IAAA,GALAmD,GAAA1tC,KAAA0tC,MACA/qC,EAAA+qC,EAAA/qC,OAIAD,EAAA,EAAkBC,EAAAD,EAAYA,IAE9BgrC,EAAAhrC,GAAA6vC,IAAA7vC,CAYAgrC,GAAA1H,KAAAsM,EAIA,IAGAE,GAAAC,EAHArB,EAAApxC,KAAA2tC,cAAA,GACAwB,EAAAnvC,KAAA2tC,cAAA,EAIAyD,IAAAA,EAAAzuC,SAAAA,IAAA6vC,MACArD,GAAAA,EAAAxsC,SAAAA,IAAA8vC,KAEA,KAAA,GAAA/vC,GAAA,EAAkBC,EAAAD,EAAYA,IAAA,CAE9B,GAAArC,GAAAqtC,EAAAhrC,GAAA6vC,GAEAC,IAAAA,EAAAvrC,KAAAmqC,EAAA/wC,IACAoyC,GAAAA,EAAAxrC,KAAAkoC,EAAA9uC,IAIAmyC,IAAAxyC,KAAA2tC,cAAA,GAAA6E,GACAC,IAAAzyC,KAAA2tC,cAAA,GAAA8E,IAIAtJ,OAAA,WA2HA,QAAAuJ,GAAAzxC,EAAA00B,EAAAgd,GAEA,MAAAA,GAAA1xC,EAAA,GAAA00B,EAAA10B,IAAA,GAAA00B,GAIA,QAAAid,GAAA/qB,GAEA,GAAAgrB,GAAAhrB,EAAA5e,EAAAiB,WAAA2d,EAAArJ,EAAAtU,WAAA2d,EAAApJ,EAAAvU,UAEA,OAAAvG,UAAAmvC,EAAAD,GAEAC,EAAAD,IAIAC,EAAAD,GAAA9D,EAAApsC,OAAA,EACAosC,EAAA9nC,KAAA4gB,EAAA5e,EAAA4e,EAAArJ,EAAAqJ,EAAApJ,GAEAq0B,EAAAD,IAIA,QAAAE,GAAA1hC,GAEA,GAAAwhC,GAAAxhC,EAAAG,EAAAtH,WAAAmH,EAAAI,EAAAvH,WAAAmH,EAAAK,EAAAxH,UAEA,OAAAvG,UAAAqvC,EAAAH,GAEAG,EAAAH,IAIAG,EAAAH,GAAAvH,EAAA3oC,OACA2oC,EAAArkC,KAAAoK,EAAAuC,UAEAo/B,EAAAH,IAIA,QAAAI,GAAA5D,GAEA,GAAAwD,GAAAxD,EAAApmC,EAAAiB,WAAAmlC,EAAA7wB,EAAAtU,UAEA,OAAAvG,UAAAuvC,EAAAL,GAEAK,EAAAL,IAIAK,EAAAL,GAAA5D,EAAAtsC,OAAA,EACAssC,EAAAhoC,KAAAooC,EAAApmC,EAAAomC,EAAA7wB,GAEA00B,EAAAL,IA9KA,GAAArJ,IACAC,UACApoC,QAAA,IACAijC,KAAA,WACA0F,UAAA,mBAUA,IAJAR,EAAAnL,KAAAr+B,KAAAq+B,KACAmL,EAAAlF,KAAAtkC,KAAAskC,KACA,KAAAtkC,KAAAiK,OAAAu/B,EAAAv/B,KAAAjK,KAAAiK,MAEAtG,SAAA3D,KAAAmzC,WAAA,CAEA,GAAAA,GAAAnzC,KAAAmzC,UAEA,KAAA,GAAAtwC,KAAAswC,GAEAxvC,SAAAwvC,EAAAtwC,KAAA2mC,EAAA3mC,GAAAswC,EAAAtwC,GAIA,OAAA2mC,GAMA,IAAA,GAFApc,MAEA1qB,EAAA,EAAkBA,EAAA1C,KAAAotB,SAAAzqB,OAA0BD,IAAA,CAE5C,GAAA+rC,GAAAzuC,KAAAotB,SAAA1qB,EACA0qB,GAAAnmB,KAAAwnC,EAAAxlC,EAAAwlC,EAAAjwB,EAAAiwB,EAAAhwB,GAYA,IAAA,GARAivB,MACAqB,KACA+D,KACAxH,KACA0H,KACA/D,KACAiE,KAEAxwC,EAAA,EAAkBA,EAAA1C,KAAA0tC,MAAA/qC,OAAuBD,IAAA,CAEzC,GAAAgsC,GAAA1uC,KAAA0tC,MAAAhrC,GAEA0wC,GAAA,EACAC,GAAA,EACAC,EAAA3vC,SAAA3D,KAAA2tC,cAAA,GAAAjrC,GACA6wC,EAAA7E,EAAA7mB,OAAAllB,SAAA,EACA6wC,EAAA9E,EAAAlE,cAAA7nC,OAAA,EACA8wC,EAAA,IAAA/E,EAAAr9B,MAAAG,GAAA,IAAAk9B,EAAAr9B,MAAAI,GAAA,IAAAi9B,EAAAr9B,MAAAK,EACAgiC,EAAAhF,EAAAjE,aAAA9nC,OAAA,EAEAgxC,EAAA,CAcA,IAZAA,EAAAjB,EAAAiB,EAAA,EAAA,GACAA,EAAAjB,EAAAiB,EAAA,EAAAP,GACAO,EAAAjB,EAAAiB,EAAA,EAAAN,GACAM,EAAAjB,EAAAiB,EAAA,EAAAL,GACAK,EAAAjB,EAAAiB,EAAA,EAAAJ,GACAI,EAAAjB,EAAAiB,EAAA,EAAAH,GACAG,EAAAjB,EAAAiB,EAAA,EAAAF,GACAE,EAAAjB,EAAAiB,EAAA,EAAAD,GAEAhG,EAAAzmC,KAAA0sC,GACAjG,EAAAzmC,KAAAynC,EAAA5sB,EAAA4sB,EAAAh9B,EAAAg9B,EAAAjuC,GAEA6yC,EAAA,CAEA,GAAA3F,GAAA3tC,KAAA2tC,cAAA,GAAAjrC,EAEAgrC,GAAAzmC,KACAgsC,EAAAtF,EAAA,IACAsF,EAAAtF,EAAA,IACAsF,EAAAtF,EAAA,KAWA,GANA4F,GAEA7F,EAAAzmC,KAAA2rC,EAAAlE,EAAA7mB,SAIA2rB,EAAA,CAEA,GAAAhJ,GAAAkE,EAAAlE,aAEAkD,GAAAzmC,KACA2rC,EAAApI,EAAA,IACAoI,EAAApI,EAAA,IACAoI,EAAApI,EAAA,KAWA,GANAiJ,GAEA/F,EAAAzmC,KAAA8rC,EAAArE,EAAAr9B,QAIAqiC,EAAA,CAEA,GAAAjJ,GAAAiE,EAAAjE,YAEAiD,GAAAzmC,KACA8rC,EAAAtI,EAAA,IACAsI,EAAAtI,EAAA,IACAsI,EAAAtI,EAAA,MAwEA,MARAjB,GAAAA,QAEAA,EAAAA,KAAApc,SAAAA,EACAoc,EAAAA,KAAAuF,QAAAA,EACAzD,EAAA3oC,OAAA,IAAA6mC,EAAAA,KAAA8B,OAAAA,GACA2D,EAAAtsC,OAAA,IAAA6mC,EAAAA,KAAAyF,KAAAA,IACAzF,EAAAA,KAAAkE,MAAAA,EAEAlE,GAIAp2B,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAy4B,GAEApqC,KAAAotB,YACAptB,KAAA0tC,SACA1tC,KAAA2tC,kBAIA,KAAA,GAFAvgB,GAAAgd,EAAAhd,SAEA1qB,EAAA,EAAAgpB,EAAA0B,EAAAzqB,OAAwC+oB,EAAAhpB,EAAQA,IAEhD1C,KAAAotB,SAAAnmB,KAAAmmB,EAAA1qB,GAAA0Q,QAMA,KAAA,GAFAs6B,GAAAtD,EAAAsD,MAEAhrC,EAAA,EAAAgpB,EAAAgiB,EAAA/qC,OAAqC+oB,EAAAhpB,EAAQA,IAE7C1C,KAAA0tC,MAAAzmC,KAAAymC,EAAAhrC,GAAA0Q,QAIA,KAAA,GAAA1Q,GAAA,EAAAgpB,EAAA0e,EAAAuD,cAAAhrC,OAAoD+oB,EAAAhpB,EAAQA,IAAA,CAE5D,GAAAirC,GAAAvD,EAAAuD,cAAAjrC,EAEAiB,UAAA3D,KAAA2tC,cAAAjrC,KAEA1C,KAAA2tC,cAAAjrC,MAIA,KAAA,GAAAoE,GAAA,EAAA6nC,EAAAhB,EAAAhrC,OAA8CgsC,EAAA7nC,EAAQA,IAAA,CAItD,IAAA,GAFAmoC,GAAAtB,EAAA7mC,GAAA8sC,KAEAhT,EAAA,EAAAiT,EAAA5E,EAAAtsC,OAAqCkxC,EAAAjT,EAAQA,IAAA,CAE7C,GAAAyO,GAAAJ,EAAArO,EAEAgT,GAAA3sC,KAAAooC,EAAAj8B,SAIApT,KAAA2tC,cAAAjrC,GAAAuE,KAAA2sC,IAMA,MAAA5zC,OAIA8zC,QAAA,WAEA9zC,KAAAqkC,eAAuBC,KAAA,cAMvB17B,EAAAq7B,gBAAAniC,UAAA+E,MAAA+B,EAAAukB,SAAArrB,WAEA8G,EAAA6kC,gBAAA,EAQA7kC,EAAAmrC,eAAA,WAEAhzC,OAAAC,eAAAhB,KAAA,MAAqCiB,MAAA2H,EAAA6kC,oBAErCztC,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAiK,KAAA,GACAjK,KAAAskC,KAAA,iBAEAtkC,KAAAwrC,WACAxrC,KAAAotB,YACAptB,KAAA+uC,WACA/uC,KAAAsrC,UACAtrC,KAAAivC,OACAjvC,KAAAmvC,QAEAnvC,KAAAuvC,UAEAvvC,KAAA4tC,gBAEA5tC,KAAA8tC,eACA9tC,KAAA+tC,eAIA/tC,KAAAiuC,YAAA,KACAjuC,KAAA48B,eAAA,KAIA58B,KAAAkuC,oBAAA,EACAluC,KAAAquC,mBAAA,EACAruC,KAAAsuC,kBAAA,EACAtuC,KAAAouC,eAAA,EACApuC,KAAAwuC,kBAAA,GAIA5lC,EAAAmrC,eAAAjyC,WAEAE,YAAA4G,EAAAmrC,eAEAnF,mBAAAhmC,EAAAukB,SAAArrB,UAAA8sC,mBACA/R,sBAAAj0B,EAAAukB,SAAArrB,UAAA+6B,sBAEA4S,mBAAA,WAEAvnC,QAAAuI,KAAA,yFAIAu/B,qBAAA,WAEA9nC,QAAAuI,KAAA,2FAIAujC,cAAA,SAAA9mB,GAQA,IAAA,GANAsiB,GAEAjF,EADAgF,KAGA7B,EAAAxgB,EAAAwgB,MAEAhrC,EAAA,EAAkBA,EAAAgrC,EAAA/qC,OAAkBD,IAAA,CAEpC,GAAAgsC,GAAAhB,EAAAhrC,EAIAgsC,GAAAnE,gBAAAA,IAEAA,EAAAmE,EAAAnE,cAEA5mC,SAAA6rC,IAEAA,EAAA1E,MAAA,EAAApoC,EAAA8sC,EAAA5lC,MACA2lC,EAAAtoC,KAAAuoC,IAIAA,GACA5lC,MAAA,EAAAlH,EACA6nC,cAAAA,IAOA5mC,SAAA6rC,IAEAA,EAAA1E,MAAA,EAAApoC,EAAA8sC,EAAA5lC,MACA2lC,EAAAtoC,KAAAuoC,IAIAxvC,KAAAuvC,OAAAA,GAIA0E,aAAA,SAAA/mB,GAEA,GAAAwgB,GAAAxgB,EAAAwgB,MACAtgB,EAAAF,EAAAE,SACAugB,EAAAzgB,EAAAygB,cAEA2F,EAAA3F,EAAA,IAAAA,EAAA,GAAAhrC,OAAA,EACAuxC,EAAAvG,EAAA,IAAAA,EAAA,GAAAhrC,OAAA,EAIAirC,EAAA1gB,EAAA0gB,aACAuG,EAAAvG,EAAAjrC,MAEA,IAAAwxC,EAAA,EAAA,CAIA,IAAA,GAFAC,MAEA1xC,EAAA,EAAmByxC,EAAAzxC,EAAwBA,IAE3C0xC,EAAA1xC,KAIA1C,MAAA4tC,aAAAjY,SAAAye,EAIA,GAAAvG,GAAA3gB,EAAA2gB,aACAwG,EAAAxG,EAAAlrC,MAEA,IAAA0xC,EAAA,EAAA,CAIA,IAAA,GAFAC,MAEA5xC,EAAA,EAAmB2xC,EAAA3xC,EAAwBA,IAE3C4xC,EAAA5xC,KAIA1C,MAAA4tC,aAAA/lB,OAAAysB,EAcA,IAAA,GARAvG,GAAA7gB,EAAA6gB,YACAD,EAAA5gB,EAAA4gB,YAEAyG,EAAAxG,EAAAprC,SAAAyqB,EAAAzqB,OACA6xC,EAAA1G,EAAAnrC,SAAAyqB,EAAAzqB,OAIAD,EAAA,EAAkBA,EAAAgrC,EAAA/qC,OAAkBD,IAAA,CAEpC,GAAAgsC,GAAAhB,EAAAhrC,EAEA1C,MAAAotB,SAAAnmB,KAAAmmB,EAAAshB,EAAA5sB,GAAAsL,EAAAshB,EAAAh9B,GAAA0b,EAAAshB,EAAAjuC,GAEA,IAAA+pC,GAAAkE,EAAAlE,aAEA,IAAA,IAAAA,EAAA7nC,OAEA3C,KAAA+uC,QAAA9nC,KAAAujC,EAAA,GAAAA,EAAA,GAAAA,EAAA,QAEI,CAEJ,GAAA3iB,GAAA6mB,EAAA7mB,MAEA7nB,MAAA+uC,QAAA9nC,KAAA4gB,EAAAA,EAAAA,GAIA,GAAA4iB,GAAAiE,EAAAjE,YAEA,IAAA,IAAAA,EAAA9nC,OAEA3C,KAAAsrC,OAAArkC,KAAAwjC,EAAA,GAAAA,EAAA,GAAAA,EAAA,QAEI,CAEJ,GAAAp5B,GAAAq9B,EAAAr9B,KAEArR,MAAAsrC,OAAArkC,KAAAoK,EAAAA,EAAAA,GAIA,GAAAiiC,KAAA,EAAA,CAEA,GAAAmB,GAAA9G,EAAA,GAAAjrC,EAEAiB,UAAA8wC,EAEAz0C,KAAAivC,IAAAhoC,KAAAwtC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAIAvsC,QAAAuI,KAAA,2DAAA/N,GAEA1C,KAAAivC,IAAAhoC,KAAA,GAAA2B,GAAAwa,QAAA,GAAAxa,GAAAwa,QAAA,GAAAxa,GAAAwa,UAMA,GAAA8wB,KAAA,EAAA,CAEA,GAAAO,GAAA9G,EAAA,GAAAjrC,EAEAiB,UAAA8wC,EAEAz0C,KAAAmvC,KAAAloC,KAAAwtC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAIAvsC,QAAAuI,KAAA,4DAAA/N,GAEA1C,KAAAmvC,KAAAloC,KAAA,GAAA2B,GAAAwa,QAAA,GAAAxa,GAAAwa,QAAA,GAAAxa,GAAAwa,UAQA,IAAA,GAAAtc,GAAA,EAAmBqtC,EAAArtC,EAAwBA,IAAA,CAE3C,GAAA4tC,GAAA9G,EAAA9mC,GAAAsmB,QAEAgnB,GAAAttC,GAAAG,KAAAytC,EAAAhG,EAAA5sB,GAAA4yB,EAAAhG,EAAAh9B,GAAAgjC,EAAAhG,EAAAjuC,IAIA,IAAA,GAAAqG,GAAA,EAAmButC,EAAAvtC,EAAwBA,IAAA,CAE3C,GAAA6tC,GAAA9G,EAAA/mC,GAAA0jC,cAAA9nC,EAEA4xC,GAAAxtC,GAAAG,KAAA0tC,EAAA7yB,EAAA6yB,EAAAjjC,EAAAijC,EAAAl0C,GAMA8zC,GAEAv0C,KAAA+tC,YAAA9mC,KAAA8mC,EAAAW,EAAA5sB,GAAAisB,EAAAW,EAAAh9B,GAAAq8B,EAAAW,EAAAjuC,IAIA+zC,GAEAx0C,KAAA8tC,YAAA7mC,KAAA6mC,EAAAY,EAAA5sB,GAAAgsB,EAAAY,EAAAh9B,GAAAo8B,EAAAY,EAAAjuC,IAcA,MARAT,MAAAg0C,cAAA9mB,GAEAltB,KAAAkuC,mBAAAhhB,EAAAghB,mBACAluC,KAAAquC,kBAAAnhB,EAAAmhB,kBACAruC,KAAAsuC,iBAAAphB,EAAAohB,iBACAtuC,KAAAouC,cAAAlhB,EAAAkhB,cACApuC,KAAAwuC,iBAAAthB,EAAAshB,iBAEAxuC,MAIA8zC,QAAA,WAEA9zC,KAAAqkC,eAAuBC,KAAA,cAMvB17B,EAAAq7B,gBAAAniC,UAAA+E,MAAA+B,EAAAmrC,eAAAjyC,WASA8G,EAAAykB,eAAA,WAEAtsB,OAAAC,eAAAhB,KAAA,MAAqCiB,MAAA2H,EAAA6kC,oBAErCztC,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAiK,KAAA,GACAjK,KAAAskC,KAAA,iBAEAtkC,KAAA0jB,MAAA,KACA1jB,KAAAstB,cAEAttB,KAAA40C,mBAEA50C,KAAAuvC,UAEAvvC,KAAAiuC,YAAA,KACAjuC,KAAA48B,eAAA,KAEA58B,KAAA60C,WAAmBjrC,MAAA,EAAAkhC,MAAAxf,EAAAA,IAInB1iB,EAAAykB,eAAAvrB,WAEAE,YAAA4G,EAAAykB,eAEAynB,SAAA,SAAApxB,GAEAxb,QAAAuI,KAAA,sEACAzQ,KAAA+0C,SAAArxB,IAIAsxB,SAAA,WAEA,MAAAh1C,MAAA0jB,OAIAqxB,SAAA,SAAArxB,GAEA1jB,KAAA0jB,MAAAA,GAIAuxB,aAAA,SAAAhrC,EAAAqb,GAEA,MAAAA,aAAA1c,GAAA+hC,kBAAA,GAAArlB,YAAA1c,GAAA2kC,6BAAA,GAEArlC,QAAAuI,KAAA,8EAEAzQ,MAAAi1C,aAAAhrC,EAAA,GAAArB,GAAA+hC,gBAAAhkC,UAAA,GAAAA,UAAA,MAMA,UAAAsD,GAEA/B,QAAAuI,KAAA,+EACAzQ,MAAA+0C,SAAAzvB,SAMAtlB,KAAAstB,WAAArjB,GAAAqb,IAIA4vB,aAAA,SAAAjrC,GAEA,MAAAjK,MAAAstB,WAAArjB,IAIAkrC,gBAAA,SAAAlrC,SAEAjK,MAAAstB,WAAArjB,IAIAmrC,GAAAA,aAGA,MADAltC,SAAAoI,MAAA,iEACAtQ,KAAAuvC,QAIA8F,GAAAA,WAGA,MADAntC,SAAAuI,KAAA,+DACAzQ,KAAAuvC,QAIA+F,YAAA,SAAA1rC,EAAAkhC,EAAAyK,GAEA5xC,SAAA4xC,GAEArtC,QAAAuI,KAAA,wEAIAvI,QAAAuI,KAAA,4DACAzQ,KAAAw1C,SAAA5rC,EAAAkhC,IAIA2K,eAAA,WAEAvtC,QAAAuI,KAAA,kEACAzQ,KAAA01C,eAIAF,SAAA,SAAA5rC,EAAAkhC,EAAAP,GAEAvqC,KAAAuvC,OAAAtoC,MAEA2C,MAAAA,EACAkhC,MAAAA,EACAP,cAAA5mC,SAAA4mC,EAAAA,EAAA,KAMAmL,YAAA,WAEA11C,KAAAuvC,WAIAoG,aAAA,SAAA/rC,EAAAkhC,GAEA9qC,KAAA60C,UAAAjrC,MAAAA,EACA5J,KAAA60C,UAAA/J,MAAAA,GAIAtD,YAAA,SAAA7gB,GAEA,GAAAgP,GAAA31B,KAAAstB,WAAAqI,QAEAhyB,UAAAgyB,IAEAhP,EAAA6H,oBAAAmH,EAAA1gB,OACA0gB,EAAAoV,aAAA,EAIA,IAAAljB,GAAA7nB,KAAAstB,WAAAzF,MAEA,IAAAlkB,SAAAkkB,EAAA,CAEA,GAAAkW,IAAA,GAAAn1B,GAAA+kB,SAAA4B,gBAAA5I,EAEAoX,GAAAvP,oBAAA3G,EAAA5S,OACA4S,EAAAkjB,aAAA,EAIA,OAAA/qC,KAAAiuC,aAEAjuC,KAAA4uC,qBAIA,OAAA5uC,KAAA48B,gBAEA58B,KAAA68B,yBAMApI,QAAA,WAIA,GAAAoJ,EAEA,OAAA,UAAA7d,GAQA,MANArc,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAA1I,cAAAnV,GAEAhgB,KAAAwnC,YAAA3J,GAEA79B,SAMA00B,QAAA,WAIA,GAAAmJ,EAEA,OAAA,UAAA7d,GAQA,MANArc,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAAzI,cAAApV,GAEAhgB,KAAAwnC,YAAA3J,GAEA79B,SAMA20B,QAAA,WAIA,GAAAkJ,EAEA,OAAA,UAAA7d,GAQA,MANArc,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAAxI,cAAArV,GAEAhgB,KAAAwnC,YAAA3J,GAEA79B,SAMA2sB,UAAA,WAIA,GAAAkR,EAEA,OAAA,UAAA50B,EAAAuV,EAAAC,GAQA,MANA9a,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAA3I,gBAAAjsB,EAAAuV,EAAAC,GAEAze,KAAAwnC,YAAA3J,GAEA79B,SAMA60B,MAAA,WAIA,GAAAgJ,EAEA,OAAA,UAAA50B,EAAAuV,EAAAC,GAQA,MANA9a,UAAAk6B,IAAAA,EAAA,GAAAj1B,GAAAge,SAEAiX,EAAApI,UAAAxsB,EAAAuV,EAAAC,GAEAze,KAAAwnC,YAAA3J,GAEA79B,SAMA+xB,OAAA,WAEA,GAAAnxB,EAEA,OAAA,UAAA4P,GAEA7M,SAAA/C,IAAAA,EAAA,GAAAgI,GAAAw9B,UAEAxlC,EAAAmxB,OAAAvhB,GAEA5P,EAAAqoC,eAEAjpC,KAAAwnC,YAAA5mC,EAAA+lB,YAMAlB,OAAA,WAEAzlB,KAAA4uC,oBAEA,IAAA15B,GAAAlV,KAAAiuC,YAAAxoB,SAAAb,QAIA,OAFA5kB,MAAA2sB,UAAAzX,EAAAjM,EAAAiM,EAAAsJ,EAAAtJ,EAAAuJ,GAEAvJ,GAIA2X,cAAA,SAAAxpB,GAIA,GAAA6pB,GAAA7pB,EAAA6pB,QAEA,IAAA7pB,YAAAuF,GAAA48B,QAAAniC,YAAAuF,GAAA08B,KAAA,CAEA,GAAA/X,GAAA,GAAA3kB,GAAAkkC,iBAAA,EAAA5f,EAAAE,SAAAzqB,OAAA,GACA2oC,EAAA,GAAA1iC,GAAAkkC,iBAAA,EAAA5f,EAAAoe,OAAA3oC,OAAA,EAKA,IAHA3C,KAAAi1C,aAAA,WAAA1nB,EAAAoe,kBAAAze,EAAAE,WACAptB,KAAAi1C,aAAA,QAAA3J,EAAAD,gBAAAne,EAAAoe,SAEApe,EAAA8gB,eAAA9gB,EAAA8gB,cAAArrC,SAAAuqB,EAAAE,SAAAzqB,OAAA,CAEA,GAAAqrC,GAAA,GAAAplC,GAAAkkC,iBAAA5f,EAAA8gB,cAAArrC,OAAA,EAEA3C,MAAAi1C,aAAA,eAAAjH,EAAA5C,UAAAle,EAAA8gB,gBAIA,OAAA9gB,EAAA0P,iBAEA58B,KAAA48B,eAAA1P,EAAA0P,eAAAxpB,SAIA,OAAA8Z,EAAA+gB,cAEAjuC,KAAAiuC,YAAA/gB,EAAA+gB,YAAA76B,aAIG/P,aAAAuF,GAAAy8B,MAEHnY,YAAAtkB,GAAAukB,UAEAntB,KAAAi0C,aAAA/mB,EAMA,OAAAltB,OAIA41C,iBAAA,SAAAvyC,GAEA,GAAA6pB,GAAA7pB,EAAA6pB,QAEA,IAAA7pB,YAAAuF,GAAAy8B,KAAA,CAEA,GAAAwQ,GAAA3oB,EAAA4oB,gBAEA,IAAAnyC,SAAAkyC,EAEA,MAAA71C,MAAAi0C,aAAA/mB,EAIA2oB,GAAA3H,mBAAAhhB,EAAAghB,mBACA2H,EAAAxH,kBAAAnhB,EAAAmhB,kBACAwH,EAAAvH,iBAAAphB,EAAAohB,iBACAuH,EAAAzH,cAAAlhB,EAAAkhB,cACAyH,EAAArH,iBAAAthB,EAAAshB,iBAEAthB,EAAAghB,oBAAA,EACAhhB,EAAAmhB,mBAAA,EACAnhB,EAAAohB,kBAAA,EACAphB,EAAAkhB,eAAA,EACAlhB,EAAAshB,kBAAA,EAEAthB,EAAA2oB,EAIA,GAAA3oB,EAAAghB,sBAAA,EAAA,CAEA,GAAA5oB,GAAAtlB,KAAAstB,WAAAqI,QAEAhyB,UAAA2hB,IAEAA,EAAAqmB,kBAAAze,EAAAE,UACA9H,EAAAylB,aAAA,GAIA7d,EAAAghB,oBAAA,EAIA,GAAAhhB,EAAAmhB,qBAAA,EAAA,CAEA,GAAA/oB,GAAAtlB,KAAAstB,WAAAzF,MAEAlkB,UAAA2hB,IAEAA,EAAAqmB,kBAAAze,EAAA6hB,SACAzpB,EAAAylB,aAAA,GAIA7d,EAAAmhB,mBAAA,EAIA,GAAAnhB,EAAAohB,oBAAA,EAAA,CAEA,GAAAhpB,GAAAtlB,KAAAstB,WAAAjc,KAEA1N,UAAA2hB,IAEAA,EAAA+lB,gBAAAne,EAAAoe,QACAhmB,EAAAylB,aAAA,GAIA7d,EAAAohB,kBAAA,EAIA,GAAAphB,EAAAkhB,cAAA,CAEA,GAAA9oB,GAAAtlB,KAAAstB,WAAA+hB,EAEA1rC,UAAA2hB,IAEAA,EAAAmmB,kBAAAve,EAAA+hB,KACA3pB,EAAAylB,aAAA,GAIA7d,EAAAkhB,eAAA,EAIA,GAAAlhB,EAAAqhB,wBAAA,CAEA,GAAAjpB,GAAAtlB,KAAAstB,WAAAyoB,YAEApyC,UAAA2hB,IAEAA,EAAA8lB,UAAAle,EAAA8gB,eACA1oB,EAAAylB,aAAA,GAIA7d,EAAAqhB,yBAAA,EAaA,MATArhB,GAAAshB,mBAEAthB,EAAA8mB,cAAA3wC,EAAA6pB,UACAltB,KAAAuvC,OAAAriB,EAAAqiB,OAEAriB,EAAAshB,kBAAA,GAIAxuC,MAIAi0C,aAAA,SAAA/mB,GAIA,MAFAA,GAAA4oB,kBAAA,GAAAltC,GAAAmrC,gBAAAE,aAAA/mB,GAEAltB,KAAAg2C,mBAAA9oB,EAAA4oB,mBAIAE,mBAAA,SAAA9oB,GAEA,GAAAK,GAAA,GAAAK,cAAA,EAAAV,EAAAE,SAAAzqB,OAGA,IAFA3C,KAAAi1C,aAAA,WAAA,GAAArsC,GAAA+hC,gBAAApd,EAAA,GAAAoe,kBAAAze,EAAAE,WAEAF,EAAA6hB,QAAApsC,OAAA,EAAA,CAEA,GAAAosC,GAAA,GAAAnhB,cAAA,EAAAV,EAAA6hB,QAAApsC,OACA3C,MAAAi1C,aAAA,SAAA,GAAArsC,GAAA+hC,gBAAAoE,EAAA,GAAApD,kBAAAze,EAAA6hB,UAIA,GAAA7hB,EAAAoe,OAAA3oC,OAAA,EAAA,CAEA,GAAA2oC,GAAA,GAAA1d,cAAA,EAAAV,EAAAoe,OAAA3oC,OACA3C,MAAAi1C,aAAA,QAAA,GAAArsC,GAAA+hC,gBAAAW,EAAA,GAAAD,gBAAAne,EAAAoe,SAIA,GAAApe,EAAA+hB,IAAAtsC,OAAA,EAAA,CAEA,GAAAssC,GAAA,GAAArhB,cAAA,EAAAV,EAAA+hB,IAAAtsC,OACA3C,MAAAi1C,aAAA,KAAA,GAAArsC,GAAA+hC,gBAAAsE,EAAA,GAAAxD,kBAAAve,EAAA+hB,MAIA,GAAA/hB,EAAAiiB,KAAAxsC,OAAA,EAAA,CAEA,GAAAwsC,GAAA,GAAAvhB,cAAA,EAAAV,EAAAiiB,KAAAxsC,OACA3C,MAAAi1C,aAAA,MAAA,GAAArsC,GAAA+hC,gBAAAwE,EAAA,GAAA1D,kBAAAve,EAAAiiB,OAIA,GAAAjiB,EAAAse,QAAA7oC,OAAA,EAAA,CAEA,GAAAszC,GAAA/oB,EAAAE,SAAAzqB,OAAA,MAAAkqC,YAAAJ,YACAjB,EAAA,GAAAyK,GAAA,EAAA/oB,EAAAse,QAAA7oC,OACA3C,MAAA+0C,SAAA,GAAAnsC,GAAA+hC,gBAAAa,EAAA,GAAAD,iBAAAre,EAAAse,UAMAxrC,KAAAuvC,OAAAriB,EAAAqiB,MAIA,KAAA,GAAAtlC,KAAAijB,GAAA0gB,aAAA,CAKA,IAAA,GAHA34B,MACA24B,EAAA1gB,EAAA0gB,aAAA3jC,GAEAvH,EAAA,EAAAuD,EAAA2nC,EAAAjrC,OAA4CsD,EAAAvD,EAAOA,IAAA,CAEnD,GAAAgyC,GAAA9G,EAAAlrC,GAEA4iB,EAAA,GAAA1c,GAAAkkC,iBAAA,EAAA4H,EAAA/xC,OAAA,EAEAsS,GAAAhO,KAAAqe,EAAAqmB,kBAAA+I,IAIA10C,KAAA40C,gBAAA3qC,GAAAgL,EAMA,GAAAiY,EAAA6gB,YAAAprC,OAAA,EAAA,CAEA,GAAAorC,GAAA,GAAAnlC,GAAAkkC,iBAAA,EAAA5f,EAAA6gB,YAAAprC,OAAA,EACA3C,MAAAi1C,aAAA,YAAAlH,EAAAnC,kBAAA1e,EAAA6gB,cAIA,GAAA7gB,EAAA4gB,YAAAnrC,OAAA,EAAA,CAEA,GAAAmrC,GAAA,GAAAllC,GAAAkkC,iBAAA,EAAA5f,EAAA4gB,YAAAnrC,OAAA,EACA3C,MAAAi1C,aAAA,aAAAnH,EAAAlC,kBAAA1e,EAAA4gB,cAkBA,MAZA,QAAA5gB,EAAA0P,iBAEA58B,KAAA48B,eAAA1P,EAAA0P,eAAAxpB,SAIA,OAAA8Z,EAAA+gB,cAEAjuC,KAAAiuC,YAAA/gB,EAAA+gB,YAAA76B,SAIApT,MAIA4uC,mBAAA,WAEA,GAAAp+B,GAAA,GAAA5H,GAAAwY,OAEA,OAAA,YAEA,OAAAphB,KAAAiuC,cAEAjuC,KAAAiuC,YAAA,GAAArlC,GAAAgkB,KAIA,IAAAW,GAAAvtB,KAAAstB,WAAAqI,SAAA1gB,KAEA,IAAAsY,EAAA,CAEA,GAAA2oB,GAAAl2C,KAAAiuC,WACAiI,GAAAzqB,WAEA,KAAA,GAAA/oB,GAAA,EAAAgpB,EAAA6B,EAAA5qB,OAA2C+oB,EAAAhpB,EAAQA,GAAA,EAEnD8N,EAAAc,UAAAic,EAAA7qB,GACAwzC,EAAAvqB,cAAAnb,IAMA7M,SAAA4pB,GAAA,IAAAA,EAAA5qB,UAEA3C,KAAAiuC,YAAAl7B,IAAAxB,IAAA,EAAA,EAAA,GACAvR,KAAAiuC,YAAAxkC,IAAA8H,IAAA,EAAA,EAAA,KAIA4kC,MAAAn2C,KAAAiuC,YAAAl7B,IAAA9J,IAAAktC,MAAAn2C,KAAAiuC,YAAAl7B,IAAAyL,IAAA23B,MAAAn2C,KAAAiuC,YAAAl7B,IAAA0L,KAEAvW,QAAAoI,MAAA,oIAAAtQ,UAQA68B,sBAAA,WAEA,GAAA/Q,GAAA,GAAAljB,GAAAgkB,KACApc,EAAA,GAAA5H,GAAAwY,OAEA,OAAA,YAEA,OAAAphB,KAAA48B,iBAEA58B,KAAA48B,eAAA,GAAAh0B,GAAA6kB,OAIA,IAAAF,GAAAvtB,KAAAstB,WAAAqI,SAAA1gB,KAEA,IAAAsY,EAAA,CAEAzB,EAAAL,WAIA,KAAA,GAFAhG,GAAAzlB,KAAA48B,eAAAnX,OAEA/iB,EAAA,EAAAgpB,EAAA6B,EAAA5qB,OAA2C+oB,EAAAhpB,EAAQA,GAAA,EAEnD8N,EAAAc,UAAAic,EAAA7qB,GACAopB,EAAAH,cAAAnb,EAIAsb,GAAArG,OAAAA,EAOA,KAAA,GAFAiV,GAAA,EAEAh4B,EAAA,EAAAgpB,EAAA6B,EAAA5qB,OAA2C+oB,EAAAhpB,EAAQA,GAAA,EAEnD8N,EAAAc,UAAAic,EAAA7qB,GACAg4B,EAAAlxB,KAAAC,IAAAixB,EAAAjV,EAAAV,kBAAAvU,GAIAxQ,MAAA48B,eAAAlP,OAAAlkB,KAAAmK,KAAA+mB,GAEAyb,MAAAn2C,KAAA48B,eAAAlP,SAEAxlB,QAAAoI,MAAA,+HAAAtQ,WAUAyvC,mBAAA,aAMAO,qBAAA,WAEA,GAAAtsB,GAAA1jB,KAAA0jB,MACA4J,EAAAttB,KAAAstB,WACAiiB,EAAAvvC,KAAAuvC,MAEA,IAAAjiB,EAAAqI,SAAA,CAEA,GAAApI,GAAAD,EAAAqI,SAAA1gB,KAEA,IAAAtR,SAAA2pB,EAAAzF,OAEA7nB,KAAAi1C,aAAA,SAAA,GAAArsC,GAAA+hC,gBAAA,GAAA/c,cAAAL,EAAA5qB,QAAA,QAQA,KAAA,GAFAosC,GAAAzhB,EAAAzF,OAAA5S,MAEAvS,EAAA,EAAAgpB,EAAAqjB,EAAApsC,OAAyC+oB,EAAAhpB,EAAQA,IAEjDqsC,EAAArsC,GAAA,CAMA,IAEAmtC,GAAAC,EAAAC,EAFAhB,EAAAzhB,EAAAzF,OAAA5S,MAIAmhC,EAAA,GAAAxtC,GAAAwY,QACAi1B,EAAA,GAAAztC,GAAAwY,QACAk1B,EAAA,GAAA1tC,GAAAwY,QAEAsuB,EAAA,GAAA9mC,GAAAwY,QACAuuB,EAAA,GAAA/mC,GAAAwY,OAIA,IAAAsC,EAAA,CAEA,GAAA8nB,GAAA9nB,EAAAzO,KAEA,KAAAs6B,EAAA5sC,QAEA3C,KAAAw1C,SAAA,EAAAhK,EAAA7oC,OAIA,KAAA,GAAAmE,GAAA,EAAA6nC,EAAAY,EAAA5sC,OAAwCgsC,EAAA7nC,IAAQA,EAOhD,IAAA,GALA0oC,GAAAD,EAAAzoC,GAEA8C,EAAA4lC,EAAA5lC,MACAkhC,EAAA0E,EAAA1E,MAEApoC,EAAAkH,EAAA8hB,EAAA9hB,EAAAkhC,EAA6Cpf,EAAAhpB,EAAQA,GAAA,EAErDmtC,EAAA,EAAArE,EAAA9oC,EAAA,GACAotC,EAAA,EAAAtE,EAAA9oC,EAAA,GACAqtC,EAAA,EAAAvE,EAAA9oC,EAAA,GAEA0zC,EAAA9kC,UAAAic,EAAAsiB,GACAwG,EAAA/kC,UAAAic,EAAAuiB,GACAwG,EAAAhlC,UAAAic,EAAAwiB,GAEAL,EAAA3rB,WAAAuyB,EAAAD,GACA1G,EAAA5rB,WAAAqyB,EAAAC,GACA3G,EAAAxoB,MAAAyoB,GAEAZ,EAAAc,IAAAH,EAAAzmC,EACA8lC,EAAAc,EAAA,IAAAH,EAAAlxB,EACAuwB,EAAAc,EAAA,IAAAH,EAAAjxB,EAEAswB,EAAAe,IAAAJ,EAAAzmC,EACA8lC,EAAAe,EAAA,IAAAJ,EAAAlxB,EACAuwB,EAAAe,EAAA,IAAAJ,EAAAjxB,EAEAswB,EAAAgB,IAAAL,EAAAzmC,EACA8lC,EAAAgB,EAAA,IAAAL,EAAAlxB,EACAuwB,EAAAgB,EAAA,IAAAL,EAAAjxB,MAUA,KAAA,GAAA/b,GAAA,EAAAgpB,EAAA6B,EAAA5qB,OAA2C+oB,EAAAhpB,EAAQA,GAAA,EAEnD0zC,EAAA9kC,UAAAic,EAAA7qB,GACA2zC,EAAA/kC,UAAAic,EAAA7qB,EAAA,GACA4zC,EAAAhlC,UAAAic,EAAA7qB,EAAA,GAEAgtC,EAAA3rB,WAAAuyB,EAAAD,GACA1G,EAAA5rB,WAAAqyB,EAAAC,GACA3G,EAAAxoB,MAAAyoB,GAEAZ,EAAArsC,GAAAgtC,EAAAzmC,EACA8lC,EAAArsC,EAAA,GAAAgtC,EAAAlxB,EACAuwB,EAAArsC,EAAA,GAAAgtC,EAAAjxB,EAEAswB,EAAArsC,EAAA,GAAAgtC,EAAAzmC,EACA8lC,EAAArsC,EAAA,GAAAgtC,EAAAlxB,EACAuwB,EAAArsC,EAAA,GAAAgtC,EAAAjxB,EAEAswB,EAAArsC,EAAA,GAAAgtC,EAAAzmC,EACA8lC,EAAArsC,EAAA,GAAAgtC,EAAAlxB,EACAuwB,EAAArsC,EAAA,GAAAgtC,EAAAjxB,CAMAze,MAAAu2C,mBAEAjpB,EAAAzF,OAAAkjB,aAAA,IAMA4F,gBAAA,WAEAzoC,QAAAuI,KAAA,+DAIA+lC,eAAA,SAAAvjC,GAEA/K,QAAAuI,KAAA,8DAIAogC,MAAA,SAAA3jB,EAAAhY,GAEA,GAAAgY,YAAAtkB,GAAAykB,iBAAA,EAGA,WADAnlB,SAAAoI,MAAA,kFAAA4c,EAKAvpB,UAAAuR,IAAAA,EAAA,EAEA,IAAAoY,GAAAttB,KAAAstB,UAEA,KAAA,GAAAzqB,KAAAyqB,GAEA,GAAA3pB,SAAAupB,EAAAI,WAAAzqB,GAUA,IAAA,GARA4zC,GAAAnpB,EAAAzqB,GACA6zC,EAAAD,EAAAxhC,MAEA0hC,EAAAzpB,EAAAI,WAAAzqB,GACA+zC,EAAAD,EAAA1hC,MAEA4hC,EAAAF,EAAApxB,SAEA7iB,EAAA,EAAAoE,EAAA+vC,EAAA3hC,EAA+CxS,EAAAk0C,EAAAj0C,OAA4BD,IAAAoE,IAE3E4vC,EAAA5vC,GAAA8vC,EAAAl0C,EAMA,OAAA1C,OAIAu2C,iBAAA,WAMA,IAAA,GAFAttC,GAAAuV,EAAAC,EAAAyT,EAFA6c,EAAA/uC,KAAAstB,WAAAzF,OAAA5S,MAIAvS,EAAA,EAAAgpB,EAAAqjB,EAAApsC,OAAuC+oB,EAAAhpB,EAAQA,GAAA,EAE/CuG,EAAA8lC,EAAArsC,GACA8b,EAAAuwB,EAAArsC,EAAA,GACA+b,EAAAswB,EAAArsC,EAAA,GAEAwvB,EAAA,EAAA1oB,KAAAmK,KAAA1K,EAAAA,EAAAuV,EAAAA,EAAAC,EAAAA,GAEAswB,EAAArsC,IAAAwvB,EACA6c,EAAArsC,EAAA,IAAAwvB,EACA6c,EAAArsC,EAAA,IAAAwvB,GAMAiX,OAAA,WAEA,GAAAK,IACAC,UACApoC,QAAA,IACAijC,KAAA,iBACA0F,UAAA,yBAUA,IAJAR,EAAAnL,KAAAr+B,KAAAq+B,KACAmL,EAAAlF,KAAAtkC,KAAAskC,KACA,KAAAtkC,KAAAiK,OAAAu/B,EAAAv/B,KAAAjK,KAAAiK,MAEAtG,SAAA3D,KAAAmzC,WAAA,CAEA,GAAAA,GAAAnzC,KAAAmzC,UAEA,KAAA,GAAAtwC,KAAAswC,GAEAxvC,SAAAwvC,EAAAtwC,KAAA2mC,EAAA3mC,GAAAswC,EAAAtwC,GAIA,OAAA2mC,GAIAA,EAAAA,MAAelc,cAEf,IAAA5J,GAAA1jB,KAAA0jB,KAEA,IAAA,OAAAA,EAAA,CAEA,GAAAzO,GAAA9O,MAAArE,UAAAgS,MAAAvT,KAAAmjB,EAAAzO,MAEAu0B,GAAAA,KAAA9lB,OACA4gB,KAAA5gB,EAAAzO,MAAAjT,YAAAiI,KACAgL,MAAAA,GAKA,GAAAqY,GAAAttB,KAAAstB,UAEA,KAAA,GAAAzqB,KAAAyqB,GAAA,CAEA,GAAAhI,GAAAgI,EAAAzqB,GAEAoS,EAAA9O,MAAArE,UAAAgS,MAAAvT,KAAA+kB,EAAArQ,MAEAu0B,GAAAA,KAAAlc,WAAAzqB,IACA0iB,SAAAD,EAAAC,SACA+e,KAAAhf,EAAArQ,MAAAjT,YAAAiI,KACAgL,MAAAA,GAKA,GAAAs6B,GAAAvvC,KAAAuvC,MAEAA,GAAA5sC,OAAA,IAEA6mC,EAAAA,KAAA+F,OAAAtF,KAAAI,MAAAJ,KAAAC,UAAAqF,IAIA,IAAA3S,GAAA58B,KAAA48B,cAWA,OATA,QAAAA,IAEA4M,EAAAA,KAAA5M,gBACAnX,OAAAmX,EAAAnX,OAAAtQ,UACAuY,OAAAkP,EAAAlP,SAKA8b,GAIAp2B,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAy4B,GAEA,GAAA1mB,GAAA0mB,EAAA1mB,KAEA,QAAAA,GAEA1jB,KAAA+0C,SAAArxB,EAAAtQ,QAIA,IAAAka,GAAA8c,EAAA9c,UAEA,KAAA,GAAArjB,KAAAqjB,GAAA,CAEA,GAAAhI,GAAAgI,EAAArjB,EACAjK,MAAAi1C,aAAAhrC,EAAAqb,EAAAlS,SAMA,IAAA,GAFAm8B,GAAAnF,EAAAmF,OAEA7sC,EAAA,EAAAuD,EAAAspC,EAAA5sC,OAAqCsD,EAAAvD,EAAOA,IAAA,CAE5C,GAAA8sC,GAAAD,EAAA7sC,EACA1C,MAAAw1C,SAAAhG,EAAA5lC,MAAA4lC,EAAA1E,OAIA,MAAA9qC,OAIA8zC,QAAA,WAEA9zC,KAAAqkC,eAAuBC,KAAA,cAMvB17B,EAAAq7B,gBAAAniC,UAAA+E,MAAA+B,EAAAykB,eAAAvrB,WAEA8G,EAAAykB,eAAAypB,SAAA,MAQAluC,EAAAmuC,wBAAA,WAEAnuC,EAAAykB,eAAA9sB,KAAAP,MAEAA,KAAAskC,KAAA,0BACAtkC,KAAAg3C,kBAAArzC,QAIAiF,EAAAmuC,wBAAAj1C,UAAAf,OAAAgB,OAAA6G,EAAAykB,eAAAvrB,WACA8G,EAAAmuC,wBAAAj1C,UAAAE,YAAA4G,EAAAmuC,wBAEAnuC,EAAAmuC,wBAAAj1C,UAAA0zC,SAAA,SAAA5rC,EAAAkhC,EAAAmM,GAEAj3C,KAAAuvC,OAAAtoC,MAEA2C,MAAAA,EACAkhC,MAAAA,EACAmM,UAAAA,KAMAruC,EAAAmuC,wBAAAj1C,UAAA6P,KAAA,SAAAy4B,GAEA,GAAA1mB,GAAA0mB,EAAA1mB,KAEA,QAAAA,GAEA1jB,KAAA+0C,SAAArxB,EAAAtQ,QAIA,IAAAka,GAAA8c,EAAA9c,UAEA,KAAA,GAAArjB,KAAAqjB,GAAA,CAEA,GAAAhI,GAAAgI,EAAArjB,EACAjK,MAAAi1C,aAAAhrC,EAAAqb,EAAAlS,SAMA,IAAA,GAFAm8B,GAAAnF,EAAAmF,OAEA7sC,EAAA,EAAAuD,EAAAspC,EAAA5sC,OAAoCsD,EAAAvD,EAAOA,IAAA,CAE3C,GAAA8sC,GAAAD,EAAA7sC,EACA1C,MAAAw1C,SAAAhG,EAAA5lC,MAAA4lC,EAAA1E,MAAA0E,EAAAyH,WAIA,MAAAj3C,OAIA4I,EAAAq7B,gBAAAniC,UAAA+E,MAAA+B,EAAAmuC,wBAAAj1C,WAYA8G,EAAAsuC,gBAAA,SAAAC,EAAAzT,EAAA0T,EAAAlX,EAAAmX,GAEA,GAAA1zC,SAAAwzC,EAAA,KAAA,IAAA/3B,OAAA,eACApf,MAAAm3C,KAAAA,EACAn3C,KAAAs3C,UAAA,KACAt3C,KAAA0jC,UAAAA,GAAA,EACA1jC,KAAAo3C,UAAAA,GAAA,EACAp3C,KAAAkgC,OAAAA,GAAA,EACAlgC,KAAAq3C,KAAAA,GAAAzuC,EAAAuH,WACAnQ,KAAAu3C,UAAA,EACAv3C,KAAA2yC,SAAA,EAEA3yC,KAAAw3C,YAAAx3C,KAAA0jC,UACA1jC,KAAAy3C,SAAA,EAEAz3C,KAAA03C,qBASA9uC,EAAAsuC,gBAAAp1C,WAEAE,YAAA4G,EAAAsuC,gBAEAS,aAAA,SAAAL,GAIA,MAFAt3C,MAAAs3C,UAAAA,EAEAt3C,MAIA43C,WAAA,SAAAC,GAEA,GAAAC,GAAA93C,KAAAy3C,SACAM,EAAA/3C,KAAAu3C,UAGAS,GAFAh4C,KAAAw3C,WAEAx3C,KAAAm3C,KAAAa,SAIA,IAFAh4C,KAAAw3C,WAAAx3C,KAAAw3C,WAAAK,EAEA73C,KAAAq3C,OAAAzuC,EAAAsH,SAqBA,MAnBAlQ,MAAAu3C,UAAA,EACAv3C,KAAAy3C,SAAAjuC,KAAAuJ,IAAAvJ,KAAAC,IAAAzJ,KAAAw3C,WAAA,GAAAQ,GAGAh4C,KAAAy3C,WAAAK,IAEA93C,KAAAy3C,WAAAO,EAEAh4C,KAAAi4C,MAAA5T,eAAgCC,KAAA,WAAA4T,OAAAl4C,KAAAk3B,UAAA,IAE3B,IAAAl3B,KAAAy3C,UAELz3C,KAAAi4C,MAAA5T,eAAgCC,KAAA,WAAA4T,OAAAl4C,KAAAk3B,UAAA,MAOhCl3B,KAAAy3C,QAIAz3C,MAAAu3C,UAAA/tC,KAAAuI,MAAA/R,KAAAw3C,WAAAQ,EAEA,IAAAG,GAAAn4C,KAAAw3C,WAAAx3C,KAAAu3C,UAAAS,CAsBA,OArBAG,IAAAH,EAGAh4C,KAAAq3C,MAAAzuC,EAAAwH,cAEA,IAAA5G,KAAA8X,IAAAthB,KAAAu3C,UAAA,KAEAY,EAAAH,EAAAG,GAMAn4C,KAAAy3C,SAAAU,EAEAn4C,KAAAu3C,YAAAQ,GAEA/3C,KAAAi4C,MAAA5T,eAAiCC,KAAA,OAAA4T,OAAAl4C,KAAAo4C,UAAAp4C,KAAAu3C,UAAAv3C,KAAAu3C,YAIjCv3C,KAAAy3C,UAIAY,SAAA,SAAAH,GAKA,MAHAl4C,MAAAw3C,WAAAU,EAAAV,WACAx3C,KAAAo3C,UAAAc,EAAAd,UAEAp3C,MAGAs4C,eAAA,SAAAN,GAIA,MAFAh4C,MAAAo3C,UAAAp3C,KAAAm3C,KAAAa,SAAAA,EAEAh4C,MAGAu4C,KAAA,SAAAC,GAIA,MAFAx4C,MAAAy3C,SAAAe,EAAAx4C,KAAA0jC,UAEA1jC,MAIAkf,OAAA,SAAA24B,GAEA73C,KAAA43C,WAAAC,EAEA,IAAAY,GAAAz4C,KAAAm3C,KAAAuB,MAAA14C,KAAAy3C,SAEA,OAAAgB,IAIAE,eAAA,SAAAH,GAEA,MAAAx4C,MAAAo3C,UAAAsB,MAEA14C,KAAAo3C,UAAAsB,MAAAF,GAIAx4C,KAAAo3C,WAIAwB,YAAA,SAAAJ,GAEA,MAAAx4C,MAAAkgC,OAAAwY,MAEA14C,KAAAkgC,OAAAwY,MAAAF,GAIAx4C,KAAAkgC,SAgBAt3B,EAAAiwC,cAAA,SAAA5uC,EAAA+tC,EAAAc,GAOA,GALA94C,KAAAiK,KAAAA,EACAjK,KAAA84C,OAAAA,EACA94C,KAAAg4C,SAAAr0C,SAAAq0C,EAAAA,EAAA,GAGAh4C,KAAAg4C,SAAA,EACA,IAAA,GAAAt1C,GAAA,EAAkBA,EAAA1C,KAAA84C,OAAAn2C,OAAwBD,IAAA,CAC1C,GAAAq2C,GAAA/4C,KAAA84C,OAAAp2C,EACA1C,MAAAg4C,SAAAxuC,KAAAC,IAAAsvC,EAAAC,KAAAD,EAAAC,KAAAr2C,OAAA,GAAA61C,MAMAx4C,KAAAi5C,OACAj5C,KAAAk5C,WAEAl5C,KAAAm5C,YAIAvwC,EAAAiwC,cAAA/2C,WAEAE,YAAA4G,EAAAiwC,cAEAH,MAAA,SAAAjB,GAEAA,EAAAjuC,KAAAC,IAAA,EAAAD,KAAAuJ,IAAA0kC,EAAAz3C,KAAAg4C,UAEA,KAAA,GAAAt1C,GAAA,EAAkBA,EAAA1C,KAAA84C,OAAAn2C,OAAwBD,IAAA,CAE1C,GAAAq2C,GAAA/4C,KAAA84C,OAAAp2C,EAEA1C,MAAAm5C,QAAAz2C,GAAAq2C,EAAAL,MAAAjB,GAIA,MAAAz3C,MAAAm5C,SAGAF,KAAA,WAEA,IAAA,GAAAv2C,GAAA,EAAkBA,EAAA1C,KAAA84C,OAAAn2C,OAAwBD,IAE1C1C,KAAA84C,OAAAp2C,GAAAu2C,KAAA,EAAAj5C,KAAAg4C,SAIA,OAAAh4C,OAIAk5C,SAAA,WAEA,IAAA,GAAAx2C,GAAA,EAAkBA,EAAA1C,KAAA84C,OAAAn2C,OAAwBD,IAE1C1C,KAAA84C,OAAAp2C,GAAAw2C,UAIA,OAAAl5C,QAOA4I,EAAAiwC,cAAAO,8BAAA,SAAAnvC,EAAAovC,EAAAC,GAMA,IAAA,GAHAC,GAAAF,EAAA12C,OACAm2C,KAEAp2C,EAAA,EAAiB62C,EAAA72C,EAAqBA,IAAA,CAEtC,GAAAs2C,KAEAA,GAAA/xC,MAAcuxC,MAAA91C,EAAA62C,EAAA,GAAAA,EAAAt4C,MAAA,IACd+3C,EAAA/xC,MAAcuxC,KAAA91C,EAAAzB,MAAA,IACd+3C,EAAA/xC,MAAcuxC,MAAA91C,EAAA,GAAA62C,EAAAt4C,MAAA,IAEd+3C,EAAAhT,KAAAp9B,EAAA4wC,cAAAC,aAGA,IAAAT,EAAA,GAAAR,MACAQ,EAAA/xC,MACAuxC,KAAAe,EACAt4C,MAAA+3C,EAAA,GAAA/3C,QAIA63C,EAAA7xC,KAAA,GAAA2B,GAAA8wC,oBAAA,0BAAAL,EAAA32C,GAAAuH,KAAA,IAAA+uC,GAAAnkB,MAAA,EAAAykB,IAGA,MAAA,IAAA1wC,GAAAiwC,cAAA5uC,EAAA,GAAA6uC,IAIAlwC,EAAAiwC,cAAAc,WAAA,SAAAC,EAAA3vC,GAEA,IAAA,GAAAvH,GAAA,EAAiBA,EAAAk3C,EAAAj3C,OAAsBD,IAEvC,GAAAk3C,EAAAl3C,GAAAuH,OAAAA,EAEA,MAAA2vC,GAAAl3C,EAKA,OAAA,OAIAkG,EAAAiwC,cAAAgB,oCAAA,SAAAjM,EAAA0L,GAQA,IAAA,GANAQ,MAGAC,EAAA,qBAGAr3C,EAAA,EAAAgpB,EAAAkiB,EAAAjrC,OAA2C+oB,EAAAhpB,EAAQA,IAAA,CAEnD,GAAAgyC,GAAA9G,EAAAlrC,GACAs3C,EAAAtF,EAAAzqC,KAAAE,MAAA4vC,EAEA,IAAAC,GAAAA,EAAAr3C,OAAA,EAAA,CAEA,GAAAsH,GAAA+vC,EAAA,GAEAC,EAAAH,EAAA7vC,EACAgwC,KACAH,EAAA7vC,GAAAgwC,MAGAA,EAAAhzC,KAAAytC,IAMA,GAAAwF,KAEA,KAAA,GAAAjwC,KAAA6vC,GAEAI,EAAAjzC,KAAA2B,EAAAiwC,cAAAO,8BAAAnvC,EAAA6vC,EAAA7vC,GAAAqvC,GAGA,OAAAY,IAKAtxC,EAAAiwC,cAAAxO,MAAA,SAAA8P,GAIA,IAAA,GAFArB,MAEAp2C,EAAA,EAAiBA,EAAAy3C,EAAArB,OAAAn2C,OAAwBD,IAEzCo2C,EAAA7xC,KAAA2B,EAAA4wC,cAAAnP,MAAA8P,EAAArB,OAAAp2C,IAAAmyB,MAAA,EAAAslB,EAAAb;AAIA,MAAA,IAAA1wC,GAAAiwC,cAAAsB,EAAAlwC,KAAAkwC,EAAAnC,SAAAc,IAMAlwC,EAAAiwC,cAAAuB,eAAA,SAAAC,EAAAC,EAAAC,GAEA,IAAAF,EAEA,MADAnyC,SAAAoI,MAAA,qCACA,IAqCA,KAAA,GAlCAkqC,GAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAIA,IAAA,GAFA7B,MAEApY,EAAA,EAAkBA,EAAA8Z,EAAA/3C,OAA0Bi+B,IAAA,CAE5C,GAAAka,GAAAJ,EAAA9Z,EAEAj9B,UAAAm3C,EAAAH,IAEA3B,EAAA/xC,MAAgBuxC,KAAAsC,EAAAtC,KAAAv3C,MAAA45C,EAAAC,KAMhB,MAAA9B,GAAAr2C,OAAA,EAEA,GAAAi4C,GAAAH,EAAAzB,GAIA,MAIAF,KAEAiC,EAAAV,EAAApwC,MAAA,UACA+tC,EAAAqC,EAAA13C,QAAA,GACA22C,EAAAe,EAAAf,KAAA,GAEA0B,EAAAX,EAAAY,cAEA5oC,EAAA,EAAiBA,EAAA2oC,EAAAr4C,OAA4B0P,IAAA,CAE7C,GAAAqoC,GAAAM,EAAA3oC,GAAA2mC,IAGA,IAAA0B,GAAA,GAAAA,EAAA/3C,OAKA,GAAA+3C,EAAA,GAAA9M,aAAA,CAIA,IAAA,GADAsN,MACAta,EAAA,EAAmBA,EAAA8Z,EAAA/3C,OAA0Bi+B,IAE7C,GAAA8Z,EAAA9Z,GAAAgN,aACA,IAAA,GAAAptC,GAAA,EAAqBA,EAAAk6C,EAAA9Z,GAAAgN,aAAAjrC,OAA0CnC,IAE/D06C,EAAAR,EAAA9Z,GAAAgN,aAAAptC,IAAA,EAOA,KAAA,GAAA26C,KAAAD,GAAA,CAIA,IAAA,GAFAlC,MAEAx4C,EAAA,EAAoBA,EAAAk6C,EAAA9Z,GAAAgN,aAAAjrC,OAA0CnC,IAAA,CAE9D,GAAAs6C,GAAAJ,EAAA9Z,EAEAoY,GAAA/xC,MACAuxC,KAAAsC,EAAAtC,KACAv3C,MAAA65C,EAAApG,cAAAyG,EAAA,EAAA,IAKArC,EAAA7xC,KAAA,GAAA2B,GAAA8wC,oBAAAa,EAAA,yBAAAY,EAAA,IAAAnC,IAIAhB,EAAAkD,EAAAv4C,QAAA22C,GAAA,OAEG,CAEH,GAAA8B,GAAAb,EAAA,UAAAD,EAAAjoC,GAAApI,KAAA,IAGAoxC,EAAAb,EAAAY,EAAA,YAAAV,EAAA,MAAA9xC,EAAA0yC,oBAAA,SAAAR,GACA,OAAA,GAAAlyC,GAAAwY,SAAA9P,UAAAwpC,EAAAS,MAGAF,IAAAvC,EAAA7xC,KAAAo0C,EAGA,IAAAG,GAAAhB,EAAAY,EAAA,cAAAV,EAAA,MAAA9xC,EAAA6yC,wBAAA,SAAAX,GACA,MAAAA,GAAAY,IAAAj5B,MACAq4B,EAAAY,IAAAtoC,SAEA,GAAAxK,GAAA2V,YAAAjN,UAAAwpC,EAAAY,MAIAF,IAAA1C,EAAA7xC,KAAAu0C,EAGA,IAAAG,GAAAnB,EAAAY,EAAA,SAAAV,EAAA,MAAA9xC,EAAA0yC,oBAAA,SAAAR,GACA,OAAA,GAAAlyC,GAAAwY,SAAA9P,UAAAwpC,EAAAc,MAGAD,IAAA7C,EAAA7xC,KAAA00C,IAKA,GAAA,IAAA7C,EAAAn2C,OAEA,MAAA,KAIA,IAAAw0C,GAAA,GAAAvuC,GAAAiwC,cAAAkC,EAAA/C,EAAAc,EAEA,OAAA3B,IAeAvuC,EAAAizC,eAAA,SAAAn8C,GAEAM,KAAAN,KAAAA,EACAM,KAAAw4C,KAAA,EACAx4C,KAAAo3C,UAAA,EACAp3C,KAAA87C,WACA97C,KAAA+7C,uBAIAnzC,EAAAizC,eAAA/5C,WAEAE,YAAA4G,EAAAizC,eAEAG,UAAA,SAAA9D,GAIAl4C,KAAA87C,QAAA70C,KAAAixC,GACAA,EAAAK,KAAAv4C,KAAAw4C,MACAN,EAAAD,MAAAj4C,IAMA,KAAA,GAJA84C,GAAAZ,EAAAf,KAAA2B,OAEAp5C,EAAAw4C,EAAAZ,WAAAt3C,KAAAN,KAEAgD,EAAA,EAAkBA,EAAAo2C,EAAAn2C,OAAmBD,IAAA,CAErC,GAAAq2C,GAAAD,EAAAp2C,GAEAu5C,EAAAv8C,EAAA2+B,KAAA,IAAA0a,EAAA9uC,KACAiyC,EAAAl8C,KAAA+7C,mBAAAE,EAEAt4C,UAAAu4C,IAEAA,EAAA,GAAAtzC,GAAAuzC,gBAAAz8C,EAAAq5C,EAAA9uC,MACAjK,KAAA+7C,mBAAAE,GAAAC,GAKAhE,EAAAR,iBAAAzwC,KAAAi1C,GAGAA,EAAAE,gBAAA,IAMAC,iBAAA,WAEA,IAAA,GAAA35C,GAAA,EAAkBA,EAAA1C,KAAA87C,QAAAn5C,OAAyBD,IAE3C1C,KAAA87C,QAAAp5C,GAAAu1C,MAAA,IAKA,KAAA,GAAAqE,KAAAt8C,MAAA+7C,mBAEA/7C,KAAA+7C,mBAAAO,GAAAC,QAOA,OAHAv8C,MAAA87C,WACA97C,KAAA+7C,sBAEA/7C,MAIAw8C,aAAA,SAAAtE,GAEA,GAAAx0B,GAAA1jB,KAAA87C,QAAAtX,QAAA0T,EAEA,MAAAx0B,IAEA1jB,KAAA87C,QAAApX,OAAAhhB,EAAA,GACAw0B,EAAAD,MAAA,KASA,KAAA,GAHAv4C,GAAAw4C,EAAAZ,WAAAt3C,KAAAN,KACAo5C,EAAAZ,EAAAf,KAAA2B,OAEAp2C,EAAA,EAAkBA,EAAAo2C,EAAAn2C,OAAmBD,IAAA,CAErC,GAAAq2C,GAAAD,EAAAp2C,GAEAu5C,EAAAv8C,EAAA2+B,KAAA,IAAA0a,EAAA9uC,KACAiyC,EAAAl8C,KAAA+7C,mBAAAE,EAEAC,GAAAE,gBAAA,EAEAF,EAAAE,gBAAA,IAEAF,EAAAK,eAEAv8C,MAAA+7C,mBAAAE,IAKA,MAAAj8C,OAKAy8C,iBAAA,SAAAxyC,GAEA,IAAA,GAAAvH,GAAA,EAAkBA,EAAA1C,KAAA87C,QAAAn5C,OAAyBD,IAE3C,GAAA1C,KAAA87C,QAAAp5C,GAAAuH,OAAAA,EAAA,MAAAjK,MAAA87C,QAAAp5C,EAIA,OAAA,OAIAg6C,KAAA,SAAAxE,EAAAyE,GAKA,MAHAzE,GAAAxU,UAAA1jC,KAAAw4C,KACAx4C,KAAAg8C,UAAA9D,GAEAl4C,MAIA48C,QAAA,SAAA1E,EAAAF,GAEA,GAAAgB,KAOA,OALAA,GAAA/xC,MAAcuxC,KAAAx4C,KAAAw4C,KAAAv3C,MAAA,IACd+3C,EAAA/xC,MAAcuxC,KAAAx4C,KAAAw4C,KAAAR,EAAA/2C,MAAA,IAEdi3C,EAAAhY,OAAA,GAAAt3B,GAAA8wC,oBAAA,SAAAV,GAEAh5C,MAIA68C,OAAA,SAAA3E,EAAAF,GAEA,GAAAgB,KAOA,OALAA,GAAA/xC,MAAcuxC,KAAAx4C,KAAAw4C,KAAAv3C,MAAA,IACd+3C,EAAA/xC,MAAcuxC,KAAAx4C,KAAAw4C,KAAAR,EAAA/2C,MAAA,IAEdi3C,EAAAhY,OAAA,GAAAt3B,GAAA8wC,oBAAA,SAAAV,GAEAh5C,MAIA88C,KAAA,SAAA5E,EAAA6E,EAAAC,EAAAhF,GAEA,GAAAgB,KAOA,OALAA,GAAA/xC,MAAcuxC,KAAAx4C,KAAAw4C,KAAAv3C,MAAA87C,IACd/D,EAAA/xC,MAAcuxC,KAAAx4C,KAAAw4C,KAAAR,EAAA/2C,MAAA+7C,IAEd9E,EAAAd,UAAA,GAAAxuC,GAAA8wC,oBAAA,YAAAV,GAEAh5C,MAIAi9C,UAAA,SAAAC,EAAAC,EAAAnF,EAAA8E,GAKA,GAHA98C,KAAA48C,QAAAM,EAAAlF,GACAh4C,KAAA68C,OAAAM,EAAAnF,GAEA8E,EAAA,CAEA,GAAAM,GAAAF,EAAA/F,KAAAa,SAAAmF,EAAAhG,KAAAa,SACAqF,EAAA,EAAAD,CAEAp9C,MAAA88C,KAAAI,EAAA,EAAAE,EAAApF,GACAh4C,KAAA88C,KAAAK,EAAAE,EAAA,EAAArF,GAIA,MAAAh4C,OAIAkf,OAAA,SAAAo+B,GAEA,GAAAC,GAAAD,EAAAt9C,KAAAo3C,SACAp3C,MAAAw4C,MAAA+E,CAEA,KAAA,GAAA76C,GAAA,EAAkBA,EAAA1C,KAAA87C,QAAAn5C,OAAyBD,IAAA,CAE3C,GAAAw1C,GAAAl4C,KAAA87C,QAAAp5C,GAEAw9B,EAAAgY,EAAAU,YAAA54C,KAAAw4C,MAEAgF,EAAAtF,EAAAS,eAAA34C,KAAAw4C,MACAiF,EAAAF,EAAAC,EAEAE,EAAAxF,EAAAh5B,OAAAu+B,EAEA,MAAAvF,EAAAhY,QAAA,IAAAgY,EAAAvF,QAEA,IAAA,GAAA7rC,GAAA,EAAmBA,EAAA42C,EAAA/6C,OAA0BmE,IAAA,CAE7CoxC,EAAAf,KAAA2B,OAAAhyC,GAAAmD,IAEAiuC,GAAAR,iBAAA5wC,GAAA62C,WAAAD,EAAA52C,GAAAo5B,IAOA,IAAA,GAAA+b,KAAAj8C,MAAA+7C,mBAEA/7C,KAAA+7C,mBAAAE,GAAAp1C,OAIA,OAAA7G,QAMA4I,EAAAq7B,gBAAAniC,UAAA+E,MAAA+B,EAAAizC,eAAA/5C,WASA8G,EAAAg1C,gBAEAC,cAAA,SAAAC,GAEA,MAAAA,GAAA9oC,OACA,SAAA8M,EAAApQ,GACA,MAAAoQ,GAAA9M,OAAAtD,IAIA,SAAAoQ,EAAApQ,GACA,MAAAoQ,KAAApQ,IAKA0B,MAAA,SAAA0qC,GAEA,GAAAC,SAAAD,EACA,IAAA,WAAAC,EAAA,CACA,GAAAD,EAAA1qC,MACA,MAAA0qC,GAAA1qC,OAEAlL,SAAAoI,MAAA,+CAAAwtC,GAGA,MAAAA,IAIAhpC,KAAA,SAAAgN,EAAApQ,EAAAqD,EAAAipC,GAEA,GAAAC,GAAAr1C,EAAAg1C,eAAAM,YAAAp8B,EAAAk8B,EAEA,OAAAC,GAAAn8B,EAAApQ,EAAAqD,IAIAopC,YAAA,SAAAr8B,EAAApQ,EAAAqD,GACA,MAAA+M,GAAAhN,KAAApD,EAAAqD,IAGAqpC,aAAA,SAAAt8B,EAAApQ,EAAAqD,GACA,MAAA+M,GAAAW,MAAA/Q,EAAAqD,IAGAspC,YAAA,SAAAv8B,EAAApQ,EAAAqD,GACA,MAAA+M,IAAA,EAAA/M,GAAArD,EAAAqD,GAGAupC,aAAA,SAAAx8B,EAAApQ,EAAAqD,GACA,MAAA,GAAAA,EAAA+M,EAAApQ,GAGA6sC,uBAAA,SAAAz8B,EAAApQ,EAAAqD,GACA,MAAA+M,IAGA08B,YAAA,SAAA18B,EAAApQ,EAAAqD,GACA,MAAA,GAAAA,EAAA+M,EAAApQ,GAGA+sC,sBAAA,SAAA38B,EAAApQ,EAAAqD,GACA,MAAA+M,IAIAo8B,YAAA,SAAAJ,EAAAE,GAEA,GAAAr6C,SAAAm6C,GAAA,OAAAA,EAAA,KAAA,IAAA1+B,OAAA,wBAEA,IAAA2+B,SAAAD,EAEA,QAAAC,GAEA,IAAA,SACA,GAAAD,EAAAhpC,KACA,MAAAlM,GAAAg1C,eAAAO,WAGA,IAAAL,EAAAr7B,MACA,MAAA7Z,GAAAg1C,eAAAQ,YAEA,MAEA,KAAA,SACA,MAAAx1C,GAAAg1C,eAAAS,WAEA,KAAA,UACA,MAAAL,GACAp1C,EAAAg1C,eAAAU,aAEA11C,EAAAg1C,eAAAW,sBAGA,KAAA,SACA,MAAAP,GACAp1C,EAAAg1C,eAAAY,YAEA51C,EAAAg1C,eAAAa,yBAmBA71C,EAAA4wC,cAAA,SAAAvvC,EAAA+uC,GAEA,GAAAr1C,SAAAsG,EAAA,KAAA,IAAAmV,OAAA,0BACA,IAAAzb,SAAAq1C,GAAA,IAAAA,EAAAr2C,OAAA,KAAA,IAAAyc,OAAA,0BAAAnV,EAEAjK,MAAAiK,KAAAA,EACAjK,KAAAg5C,KAAAA,EAGAh5C,KAAA0+C,UAAA,EAEA1+C,KAAA2+C,WACA3+C,KAAAk5C,YAIAtwC,EAAA4wC,cAAA13C,WAEAE,YAAA4G,EAAA4wC,cAEAd,MAAA,SAAAF,GAIA,KAAAx4C,KAAA0+C,UAAA1+C,KAAAg5C,KAAAr2C,QAAA61C,GAAAx4C,KAAAg5C,KAAAh5C,KAAA0+C,WAAAlG,MACAx4C,KAAA0+C,WAIA,MAAA1+C,KAAA0+C,UAAA,GAAAlG,EAAAx4C,KAAAg5C,KAAAh5C,KAAA0+C,UAAA,GAAAlG,MACAx4C,KAAA0+C,WAGA,IAAA1+C,KAAA0+C,WAAA1+C,KAAAg5C,KAAAr2C,OAIA,MAFA3C,MAAA4+C,UAAA5+C,KAAAg5C,KAAAh5C,KAAAg5C,KAAAr2C,OAAA,GAAA1B,OAEAjB,KAAAyqB,MAIA,IAAA,IAAAzqB,KAAA0+C,UAIA,MAFA1+C,MAAA4+C,UAAA5+C,KAAAg5C,KAAA,GAAA/3C,OAEAjB,KAAAyqB,MAIA,IAAAo0B,GAAA7+C,KAAAg5C,KAAAh5C,KAAA0+C,UAAA,EAIA,IAHA1+C,KAAA4+C,UAAAC,EAAA59C,OAGA49C,EAAAC,eAEA,MAAA9+C,MAAAyqB,MAKA,IAAAs0B,GAAA/+C,KAAAg5C,KAAAh5C,KAAA0+C,WACA3pC,GAAAyjC,EAAAqG,EAAArG,OAAAuG,EAAAvG,KAAAqG,EAAArG,KAGA,OAFAx4C,MAAAyqB,OAAAzqB,KAAAg/C,WAAAh/C,KAAAyqB,OAAAs0B,EAAA99C,MAAA8T,GAEA/U,KAAAyqB,QAKAw0B,MAAA,SAAAC,GAEA,GAAA,IAAAA,EAEA,IAAA,GAAAx8C,GAAA,EAAmBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IACzC1C,KAAAg5C,KAAAt2C,GAAA81C,MAAA0G,CAKA,OAAAl/C,OAKA60B,MAAA,SAAAuiB,GAEA,GAAA,IAAAA,EAEA,IAAA,GAAA10C,GAAA,EAAmBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IACzC1C,KAAAg5C,KAAAt2C,GAAA81C,MAAApB,CAKA,OAAAp3C,OAMAi5C,KAAA,SAAAvV,EAAAyb,GAGA,IAAA,GADAC,GAAA,EACA18C,EAAA,EAAkBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IACxC1C,KAAAg5C,KAAAt2C,IAAAghC,GACA0b,GAKA,KAAA,GADAC,GAAA,EACA38C,EAAA1C,KAAAg5C,KAAAr2C,OAAA,EAAqCD,EAAA,GACrC1C,KAAAg5C,KAAAt2C,IAAAy8C,EAD4Cz8C,IAE5C28C,GAWA,OAJAD,GAAAC,EAAA,IACAr/C,KAAAg5C,KAAAh5C,KAAAg5C,KAAAtU,OAAA0a,EAAAp/C,KAAAg5C,KAAAr2C,OAAA08C,EAAAD,IAGAp/C,MAgBA2+C,SAAA,WAEA,GAAAE,GAAA,IAEA,IAAA,IAAA7+C,KAAAg5C,KAAAr2C,OAEA,WADAuF,SAAAoI,MAAA,4BAAAtQ,KAIA,KAAA,GAAA0C,GAAA,EAAkBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IAAA,CAExC,GAAA48C,GAAAt/C,KAAAg5C,KAAAt2C,EAEA,KAAA48C,EAEA,WADAp3C,SAAAoI,MAAA,yBAAAtQ,KAAA0C,EAIA,IAAA,gBAAA48C,GAAA9G,MAAArC,MAAAmJ,EAAA9G,MAEA,WADAtwC,SAAAoI,MAAA,mCAAAtQ,KAAA0C,EAAA48C,EAIA,IAAA37C,SAAA27C,EAAAr+C,OAAA,OAAAq+C,EAAAr+C,MAEA,WADAiH,SAAAoI,MAAA,+BAAAtQ,KAAA0C,EAAA48C,EAIA,IAAAT,GAAAA,EAAArG,KAAA8G,EAAA9G,KAEA,WADAtwC,SAAAoI,MAAA,+DAAAtQ,KAAA0C,EAAA48C,EAAAT,EAIAA,GAAAS,EAIA,MAAAt/C,OAKAk5C,SAAA,WAEA,GAAAqG,MACAV,EAAA7+C,KAAAg5C,KAAA,EACAuG,GAAAt4C,KAAA43C,EAIA,KAAA,GAAAn8C,IAFAkG,EAAAg1C,eAAAC,cAAAgB,EAAA59C,OAEA,GAAkByB,EAAA1C,KAAAg5C,KAAAr2C,OAAA,EAA0BD,IAAA,CAC5C,GAAA48C,GAAAt/C,KAAAg5C,KAAAt2C,GACA88C,EAAAx/C,KAAAg5C,KAAAt2C,EAAA,EAIAm8C,GAAArG,OAAA8G,EAAA9G,OAOAx4C,KAAAy/C,cAAAZ,EAAA59C,MAAAq+C,EAAAr+C,QAAAjB,KAAAy/C,cAAAH,EAAAr+C,MAAAu+C,EAAAv+C,SAOA49C,EAAAC,eAAA9+C,KAAAy/C,cAAAZ,EAAA59C,MAAAq+C,EAAAr+C,OAEAs+C,EAAAt4C,KAAAq4C,GACAT,EAAAS,IAMA,MAJAC,GAAAt4C,KAAAjH,KAAAg5C,KAAAh5C,KAAAg5C,KAAAr2C,OAAA,IAEA3C,KAAAg5C,KAAAuG,EAEAv/C,OAMA4I,EAAA4wC,cAAAC,YAAA,SAAAiG,EAAAC,GACA,MAAAD,GAAAlH,KAAAmH,EAAAnH,MAGA5vC,EAAA4wC,cAAAnP,MAAA,SAAA8P,GAEA,GAAAx2C,SAAAw2C,EAAA7V,KAAA,KAAA,IAAAllB,OAAA,sCAEA,IAAAw7B,GAAAhyC,EAAA4wC,cAAAoG,wBAAAzF,EAAA7V,KAEA,OAAAsW,GAAAvQ,MAAA8P,IAIAvxC,EAAA4wC,cAAAoG,wBAAA,SAAA7B,GACA,OAAAA,EAAA8B,eACA,IAAA,SACA,IAAA,UACA,IAAA,UACA,IAAA,UACA,MAAAj3C,GAAA0yC,mBAEA,KAAA,aACA,MAAA1yC,GAAA6yC,uBAEA,KAAA,UACA,IAAA,SACA,IAAA,SACA,IAAA,QACA,IAAA,SACA,MAAA7yC,GAAA8wC,mBAEA,KAAA,OACA,IAAA,UACA,MAAA9wC,GAAAk3C,oBAEA,KAAA,SACA,MAAAl3C,GAAAm3C,oBAGA,KAAA,IAAA3gC,OAAA,yBAAA2+B,IAaAn1C,EAAAuzC,gBAAA,SAAA6D,EAAAvF,GAEAz6C,KAAAggD,SAAAA,EACAhgD,KAAAy6C,UAAAA,EACAz6C,KAAAo8C,eAAA,EACAp8C,KAAAigD,cAAA,IAEA,IAAAC,GAAAt3C,EAAAuzC,gBAAAgE,eAAA1F,EAEAz6C,MAAAogD,cAAAF,EAAAE,cACApgD,KAAAu6C,SAAA2F,EAAA3F,SACAv6C,KAAAqgD,WAAAH,EAAAG,WACArgD,KAAAsgD,YAAAJ,EAAAI,YACAtgD,KAAA26C,aAAAuF,EAAAvF,aACA36C,KAAAugD,cAAAL,EAAAK,cAEAvgD,KAAAitB,KAAArkB,EAAAuzC,gBAAAqE,SAAAR,EAAAhgD,KAAAu6C,WAAAyF,EAEAhgD,KAAAygD,gBAAA,KACAzgD,KAAA0gD,iBAAA,GAGA93C,EAAAuzC,gBAAAr6C,WAEAE,YAAA4G,EAAAuzC,gBAEAwE,MAAA,WAEA3gD,KAAAygD,gBAAA,KACAzgD,KAAA0gD,iBAAA,GAIA/C,WAAA,SAAA18C,EAAAi/B,GAIA,GAFAlgC,KAAA4gD,SAAA5gD,KAAAkF,OAEA,IAAAlF,KAAA0gD,iBAEAxgB,EAAA,IAEA,OAAAlgC,KAAAygD,kBACAzgD,KAAAygD,gBAAA73C,EAAAg1C,eAAAxqC,MAAAnS,IAEAjB,KAAA0gD,iBAAAxgB,OAIG,CAEH,GAAA2gB,GAAA3gB,GAAAlgC,KAAA0gD,iBAAAxgB,EACAlgC,MAAAygD,gBAAAzgD,KAAA8gD,UAAA9gD,KAAAygD,gBAAAx/C,EAAA4/C,GACA7gD,KAAA0gD,kBAAAxgB,IAMAqc,OAAA,WAEAv8C,KAAA4gD,UAEA5gD,KAAA+gD,SAAA/gD,KAAAigD,eAEAjgD,KAAA+gD,SAAA,KACA/gD,KAAAghD,SAAA,KACAhhD,KAAA8gD,UAAA,KACA9gD,KAAAihD,YAAA,KACAjhD,KAAAkhD,aAAA,KACAlhD,KAAA4gD,SAAA,IAKA17C,KAAA,WAEA,IAAAlF,KAAA4gD,QAAA,CAEA,GAAAO,GAAAnhD,KAAAitB,IAGA,KAAAk0B,EAEA,WADAj5C,SAAAoI,MAAA,sCAAAtQ,KAAAy6C,UAAA,wBAIA,IAAAz6C,KAAAqgD,WAAA,CAEA,GAAA,cAAArgD,KAAAqgD,WAAA,CACA,IAAAc,EAAAhX,SAEA,WADAjiC,SAAAoI,MAAA,8DAAAtQ,KAGA,KAAAmhD,EAAAhX,SAAAN,UAEA,WADA3hC,SAAAoI,MAAA,wFAAAtQ,KAGAmhD,GAAAA,EAAAhX,SAAAN,cACI,IAAA,UAAA7pC,KAAAqgD,WAAA,CACJ,IAAAc,EAAAC,SAEA,WADAl5C,SAAAoI,MAAA,2DAAAtQ,KAKAmhD,GAAAA,EAAAC,SAAA9G,KAGA,KAAA,GAAA53C,GAAA,EAAoBA,EAAAy+C,EAAAx+C,OAAyBD,IAC7C,GAAAy+C,EAAAz+C,GAAAuH,OAAAjK,KAAAsgD,YAAA,CACAtgD,KAAAsgD,YAAA59C,CACA,YAGI,CAEJ,GAAAiB,SAAAw9C,EAAAnhD,KAAAqgD,YAEA,WADAn4C,SAAAoI,MAAA,kDAAAtQ,KAGAmhD,GAAAA,EAAAnhD,KAAAqgD,YAGA,GAAA18C,SAAA3D,KAAAsgD,YAAA,CACA,GAAA38C,SAAAw9C,EAAAnhD,KAAAsgD,aAEA,WADAp4C,SAAAoI,MAAA,mEAAAtQ,KAAAmhD,EAIAA,GAAAA,EAAAnhD,KAAAsgD,cAMA,GAAAe,GAAAF,EAAAnhD,KAAA26C,aACA,KAAA0G,EAEA,WADAn5C,SAAAoI,MAAA,0CAAAtQ,KAAAu6C,SAAA,IAAAv6C,KAAA26C,aAAA,wBAAAwG,EAKA,IAAAx9C,SAAA3D,KAAAugD,cAAA,CAEA,GAAA,0BAAAvgD,KAAA26C,aAAA,CAIAwG,EAAAj0B,UACAhlB,QAAAoI,MAAA,iFAAAtQ,MAEAmhD,EAAAj0B,SAAA0gB,cACA1lC,QAAAoI,MAAA,8FAAAtQ,KAGA,KAAA,GAAA0C,GAAA,EAAoBA,EAAA1C,KAAAitB,KAAAC,SAAA0gB,aAAAjrC,OAA4CD,IAChE,GAAAy+C,EAAAj0B,SAAA0gB,aAAAlrC,GAAAuH,OAAAjK,KAAAugD,cAAA,CACAvgD,KAAAugD,cAAA79C,CACA,QAKA1C,KAAA+gD,SAAA,SAAA9/C,GACA,MAAAjB,MAAAihD,YAAAI,EAAArhD,KAAAugD,eAAAt/C,IAIA,GAHAogD,EAAArhD,KAAAugD,eAAAt/C,GACA,IAKAjB,KAAAghD,SAAA,WACA,MAAAK,GAAArhD,KAAAugD,oBAKAc,GAAA1vC,MAEA3R,KAAA+gD,SAAA,SAAA9/C,GACA,MAAAjB,MAAAihD,YAAAI,EAAApgD,IAIA,GAHAogD,EAAA1vC,KAAA1Q,IACA,IAKAjB,KAAAghD,SAAA,WACA,MAAAK,MAOArhD,KAAA+gD,SAAA,SAAA9/C,GACA,MAAAjB,MAAAihD,YAAAE,EAAAnhD,KAAA26C,cAAA15C,IAIA,GAHAkgD,EAAAnhD,KAAA26C,cAAA15C,GACA,IAKAjB,KAAAghD,SAAA,WACA,MAAAG,GAAAnhD,KAAA26C,eAMAh3C,UAAAw9C,EAAApW,YAEA/qC,KAAAkhD,aAAA,WACAlhD,KAAAitB,KAAA8d,aAAA,GAGGpnC,SAAAw9C,EAAApa,yBAEH/mC,KAAAkhD,aAAA,WACAC,EAAApa,wBAAA,IAKA/mC,KAAAigD,cAAAjgD,KAAAghD,WAEAhhD,KAAAihD,YAAAr4C,EAAAg1C,eAAAC,cAAA79C,KAAAigD,eACAjgD,KAAA8gD,UAAAl4C,EAAAg1C,eAAAM,YAAAl+C,KAAAigD,eAAA,GAEAjgD,KAAA4gD,SAAA,IAIA/5C,MAAA,WAMA,GAHA7G,KAAA4gD,SAAA5gD,KAAAkF,OAGAlF,KAAA0gD,iBAAA,EAAA,CAGA,GAAA1gD,KAAA0gD,iBAAA,EAAA,CAEA,GAAAY,GAAA,EAAAthD,KAAA0gD,iBACAG,EAAAS,GAAAthD,KAAA0gD,iBAAAY,EACAthD,MAAAygD,gBAAAzgD,KAAA8gD,UAAA9gD,KAAAygD,gBAAAzgD,KAAAigD,cAAAY,GAIA,GAAAU,GAAAvhD,KAAA+gD,SAAA/gD,KAAAygD,gBAEAc,IAAAvhD,KAAAkhD,cACAlhD,KAAAkhD,eAIAlhD,KAAAygD,gBAAA,KACAzgD,KAAA0gD,iBAAA,KAQA93C,EAAAuzC,gBAAAgE,eAAA,SAAA1F,GAaA,GAAA+G,GAAA,oGACAC,EAAAD,EAAA3uC,KAAA4nC,EAEA,KAAAgH,EACA,KAAA,IAAAriC,OAAA,kCAAAq7B,EAGAgH,GAAA/9B,QAAA89B,EAAA9C,WACA8C,EAAA9C,WAGA,IAAAvF,IACAiH,cAAAqB,EAAA,GACAlH,SAAAkH,EAAA,GACApB,WAAAoB,EAAA,GACAnB,YAAAmB,EAAA,GACA9G,aAAA8G,EAAA,GACAlB,cAAAkB,EAAA,IAGA,IAAA,OAAAtI,EAAAwB,cAAA,IAAAxB,EAAAwB,aAAAh4C,OACA,KAAA,IAAAyc,OAAA,8CAAAq7B,EAGA,OAAAtB,IAIAvwC,EAAAuzC,gBAAAqE,SAAA,SAAA9gD,EAAA66C,GAEA,QAAAmH,GAAAN,GAEA,IAAA,GAAA1+C,GAAA,EAAkBA,EAAA0+C,EAAA9G,MAAA33C,OAA2BD,IAAA,CAE7C,GAAAi/C,GAAAP,EAAA9G,MAAA53C,EAEA,IAAAi/C,EAAA13C,OAAAswC,EAEA,MAAAoH,GAKA,MAAA,MAIA,QAAAC,GAAA1c,GAEA,IAAA,GAAAxiC,GAAA,EAAkBA,EAAAwiC,EAAAviC,OAAqBD,IAAA,CAEvC,GAAAm/C,GAAA3c,EAAAxiC,EAEA,IAAAm/C,EAAA53C,OAAAswC,GAAAsH,EAAAxjB,OAAAkc,EAEA,MAAAsH,EAIA,IAAAp3B,GAAAm3B,EAAAC,EAAA3c,SAEA,IAAAza,EAAA,MAAAA,GAIA,MAAA,MAMA,IAAA8vB,GAAA,KAAAA,GAAA,SAAAA,GAAA,MAAAA,GAAA,KAAAA,GAAAA,IAAA76C,EAAAuK,MAAAswC,IAAA76C,EAAA2+B,KAEA,MAAA3+B,EAKA,IAAAA,EAAA0hD,SAAA,CAEA,GAAAO,GAAAD,EAAAhiD,EAAA0hD,SAEA,IAAAO,EAEA,MAAAA,GAMA,GAAAjiD,EAAAwlC,SAAA,CAEA,GAAA4c,GAAAF,EAAAliD,EAAAwlC,SAEA,IAAA4c,EAEA,MAAAA,GAMA,MAAA,OAaAl5C,EAAA0yC,oBAAA,SAAArxC,EAAA+uC,GAEApwC,EAAA4wC,cAAAj5C,KAAAP,KAAAiK,EAAA+uC,GAGAh5C,KAAAyqB,OAAAzqB,KAAAg5C,KAAA,GAAA/3C,MAAAmS,SAIAxK,EAAA0yC,oBAAAx5C,UAAAf,OAAAgB,OAAA6G,EAAA4wC,cAAA13C,WAEA8G,EAAA0yC,oBAAAx5C,UAAAE,YAAA4G,EAAA0yC,oBAEA1yC,EAAA0yC,oBAAAx5C,UAAA88C,UAAA,SAAA39C,GAEAjB,KAAAyqB,OAAA9Y,KAAA1Q,IAMA2H,EAAA0yC,oBAAAx5C,UAAAk9C,WAAA,SAAA+C,EAAAC,EAAAjtC,GAEA,MAAAgtC,GAAAjtC,KAAAktC,EAAAjtC,IAIAnM,EAAA0yC,oBAAAx5C,UAAA29C,cAAA,SAAAsC,EAAAC,GAEA,MAAAD,GAAA/sC,OAAAgtC,IAIAp5C,EAAA0yC,oBAAAx5C,UAAAsR,MAAA,WAIA,IAAA,GAFA6uC,MAEAv/C,EAAA,EAAiBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IAAA,CAEvC,GAAAG,GAAA7C,KAAAg5C,KAAAt2C,EACAu/C,GAAAh7C,MACAuxC,KAAA31C,EAAA21C,KACAv3C,MAAA4B,EAAA5B,MAAAmS,UAIA,MAAA,IAAAxK,GAAA0yC,oBAAAt7C,KAAAiK,KAAAg4C,IAIAr5C,EAAA0yC,oBAAAjR,MAAA,SAAA8P,GAOA,IAAA,GALA+H,GAAA/H,EAAAnB,KAAA,GAAA/3C,MAAA0B,OACAw/C,EAAAv5C,EAAA,SAAAs5C,GAEAlJ,KAEAt2C,EAAA,EAAiBA,EAAAy3C,EAAAnB,KAAAr2C,OAAsBD,IAAA,CACvC,GAAA0/C,GAAAjI,EAAAnB,KAAAt2C,EACAs2C,GAAA/xC,MACAhG,OAAA,GAAAkhD,IAAA7wC,UAAA8wC,EAAAnhD,OACAu3C,KAAA4J,EAAA5J,OAIA,MAAA,IAAA5vC,GAAA0yC,oBAAAnB,EAAAlwC,KAAA+uC,IAcApwC,EAAA6yC,wBAAA,SAAAxxC,EAAA+uC,GAEApwC,EAAA4wC,cAAAj5C,KAAAP,KAAAiK,EAAA+uC,GAGAh5C,KAAAyqB,OAAAzqB,KAAAg5C,KAAA,GAAA/3C,MAAAmS,SAIAxK,EAAA6yC,wBAAA35C,UAAAf,OAAAgB,OAAA6G,EAAA4wC,cAAA13C,WAEA8G,EAAA6yC,wBAAA35C,UAAAE,YAAA4G,EAAA6yC,wBAEA7yC,EAAA6yC,wBAAA35C,UAAA88C,UAAA,SAAA39C,GAEAjB,KAAAyqB,OAAA9Y,KAAA1Q,IAMA2H,EAAA6yC,wBAAA35C,UAAAk9C,WAAA,SAAA+C,EAAAC,EAAAjtC,GAEA,MAAAgtC,GAAAt/B,MAAAu/B,EAAAjtC,IAIAnM,EAAA6yC,wBAAA35C,UAAA29C,cAAA,SAAAsC,EAAAC,GAEA,MAAAD,GAAA/sC,OAAAgtC,IAIAp5C,EAAA6yC,wBAAA35C,UAAA8S,SAAA,SAAAytC,GAEA,IAAA,GAAA3/C,GAAA,EAAiBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IAEvC1C,KAAAg5C,KAAAt2C,GAAAzB,MAAA2T,SAAAytC,EAIA,OAAAriD,OAIA4I,EAAA6yC,wBAAA35C,UAAAsR,MAAA,WAIA,IAAA,GAFA6uC,MAEAv/C,EAAA,EAAiBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IAAA,CAEvC,GAAAG,GAAA7C,KAAAg5C,KAAAt2C,EACAu/C,GAAAh7C,MACAuxC,KAAA31C,EAAA21C,KACAv3C,MAAA4B,EAAA5B,MAAAmS,UAIA,MAAA,IAAAxK,GAAA6yC,wBAAAz7C,KAAAiK,KAAAg4C,IAIAr5C,EAAA6yC,wBAAApR,MAAA,SAAA8P,GAIA,IAAA,GAFAnB,MAEAt2C,EAAA,EAAiBA,EAAAy3C,EAAAnB,KAAAr2C,OAAsBD,IAAA,CACvC,GAAA0/C,GAAAjI,EAAAnB,KAAAt2C,EACAs2C,GAAA/xC,MACAhG,OAAA,GAAA2H,GAAA2V,YAAAjN,UAAA8wC,EAAAnhD,OACAu3C,KAAA4J,EAAA5J,OAIA,MAAA,IAAA5vC,GAAA6yC,wBAAAtB,EAAAlwC,KAAA+uC,IAcApwC,EAAAm3C,oBAAA,SAAA91C,EAAA+uC,GAEApwC,EAAA4wC,cAAAj5C,KAAAP,KAAAiK,EAAA+uC,GAGAh5C,KAAAyqB,OAAAzqB,KAAAg5C,KAAA,GAAA/3C,OAIA2H,EAAAm3C,oBAAAj+C,UAAAf,OAAAgB,OAAA6G,EAAA4wC,cAAA13C,WAEA8G,EAAAm3C,oBAAAj+C,UAAAE,YAAA4G,EAAAm3C,oBAEAn3C,EAAAm3C,oBAAAj+C,UAAA88C,UAAA,SAAA39C,GAEAjB,KAAAyqB,OAAAxpB,GAMA2H,EAAAm3C,oBAAAj+C,UAAAk9C,WAAA,SAAA+C,EAAAC,EAAAjtC,GAEA,MAAA,GAAAA,EAAAgtC,EAAAC,GAIAp5C,EAAAm3C,oBAAAj+C,UAAA29C,cAAA,SAAAsC,EAAAC,GAEA,MAAAD,KAAAC,GAIAp5C,EAAAm3C,oBAAAj+C,UAAAsR,MAAA,WAIA,IAAA,GAFA6uC,MAEAv/C,EAAA,EAAiBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IAAA,CAEvC,GAAAG,GAAA7C,KAAAg5C,KAAAt2C,EACAu/C,GAAAh7C,MACAuxC,KAAA31C,EAAA21C,KACAv3C,MAAA4B,EAAA5B,QAIA,MAAA,IAAA2H,GAAAm3C,oBAAA//C,KAAAiK,KAAAg4C,IAIAr5C,EAAAm3C,oBAAA1V,MAAA,SAAA8P,GAEA,MAAA,IAAAvxC,GAAAm3C,oBAAA5F,EAAAlwC,KAAAkwC,EAAAnB,OAcApwC,EAAAk3C,qBAAA,SAAA71C,EAAA+uC,GAEApwC,EAAA4wC,cAAAj5C,KAAAP,KAAAiK,EAAA+uC,GAGAh5C,KAAAyqB,OAAAzqB,KAAAg5C,KAAA,GAAA/3C,OAIA2H,EAAAk3C,qBAAAh+C,UAAAf,OAAAgB,OAAA6G,EAAA4wC,cAAA13C,WAEA8G,EAAAk3C,qBAAAh+C,UAAAE,YAAA4G,EAAAk3C,qBAEAl3C,EAAAk3C,qBAAAh+C,UAAA88C,UAAA,SAAA39C,GAEAjB,KAAAyqB,OAAAxpB,GAMA2H,EAAAk3C,qBAAAh+C,UAAAk9C,WAAA,SAAA+C,EAAAC,EAAAjtC,GAEA,MAAA,GAAAA,EAAAgtC,EAAAC,GAIAp5C,EAAAk3C,qBAAAh+C,UAAA29C,cAAA,SAAAsC,EAAAC,GAEA,MAAAD,KAAAC,GAIAp5C,EAAAk3C,qBAAAh+C,UAAAsR,MAAA,WAIA,IAAA,GAFA6uC,MAEAv/C,EAAA,EAAiBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IAAA,CAEvC,GAAAG,GAAA7C,KAAAg5C,KAAAt2C,EACAu/C,GAAAh7C,MACAuxC,KAAA31C,EAAA21C,KACAv3C,MAAA4B,EAAA5B,QAIA,MAAA,IAAA2H,GAAAk3C,qBAAA9/C,KAAAiK,KAAAg4C,IAIAr5C,EAAAk3C,qBAAAzV,MAAA,SAAA8P,GAEA,MAAA,IAAAvxC,GAAAk3C,qBAAA3F,EAAAlwC,KAAAkwC,EAAAnB,OAcApwC,EAAA8wC,oBAAA,SAAAzvC,EAAA+uC,GAEApwC,EAAA4wC,cAAAj5C,KAAAP,KAAAiK,EAAA+uC,GAGAh5C,KAAAyqB,OAAAzqB,KAAAg5C,KAAA,GAAA/3C,OAIA2H,EAAA8wC,oBAAA53C,UAAAf,OAAAgB,OAAA6G,EAAA4wC,cAAA13C,WAEA8G,EAAA8wC,oBAAA53C,UAAAE,YAAA4G,EAAA8wC,oBAEA9wC,EAAA8wC,oBAAA53C,UAAA88C,UAAA,SAAA39C,GAEAjB,KAAAyqB,OAAAxpB,GAMA2H,EAAA8wC,oBAAA53C,UAAAk9C,WAAA,SAAA+C,EAAAC,EAAAjtC,GAEA,MAAAgtC,IAAA,EAAAhtC,GAAAitC,EAAAjtC,GAIAnM,EAAA8wC,oBAAA53C,UAAA29C,cAAA,SAAAsC,EAAAC,GAEA,MAAAD,KAAAC,GAIAp5C,EAAA8wC,oBAAA53C,UAAAsR,MAAA,WAIA,IAAA,GAFA6uC,MAEAv/C,EAAA,EAAiBA,EAAA1C,KAAAg5C,KAAAr2C,OAAsBD,IAAA,CAEvC,GAAAG,GAAA7C,KAAAg5C,KAAAt2C,EACAu/C,GAAAh7C,MACAuxC,KAAA31C,EAAA21C,KACAv3C,MAAA4B,EAAA5B,QAIA,MAAA,IAAA2H,GAAA8wC,oBAAA15C,KAAAiK,KAAAg4C,IAIAr5C,EAAA8wC,oBAAArP,MAAA,SAAA8P,GAEA,MAAA,IAAAvxC,GAAA8wC,oBAAAS,EAAAlwC,KAAAkwC,EAAAnB,OAYApwC,EAAA05C,OAAA,WAEA15C,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,SAEAtkC,KAAAuiD,mBAAA,GAAA35C,GAAAge,QACA5mB,KAAA8mB,iBAAA,GAAAle,GAAAge,SAIAhe,EAAA05C,OAAAxgD,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAA05C,OAAAxgD,UAAAE,YAAA4G,EAAA05C,OAEA15C,EAAA05C,OAAAxgD,UAAAgnC,kBAAA,WAEA,GAAA/pB,GAAA,GAAAnW,GAAA2V,UAEA,OAAA,UAAAvK,GAEA,GAAAyW,GAAAzW,GAAA,GAAApL,GAAAwY,OAIA,OAFAphB,MAAA2oC,mBAAA5pB,GAEA0L,EAAAlZ,IAAA,EAAA,EAAA,IAAAiR,gBAAAzD,OAMAnW,EAAA05C,OAAAxgD,UAAAiwB,OAAA,WAIA,GAAA8L,GAAA,GAAAj1B,GAAAge,OAEA,OAAA,UAAApW,GAEAqtB,EAAA9L,OAAA/xB,KAAA21B,SAAAnlB,EAAAxQ,KAAAiyB,IAEAjyB,KAAA+e,WAAAmB,sBAAA2d,OAMAj1B,EAAA05C,OAAAxgD,UAAAsR,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA4I,EAAA05C,OAAAxgD,UAAA6P,KAAA,SAAAy4B,GAOA,MALAxhC,GAAAw9B,SAAAtkC,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAuiD,mBAAA5wC,KAAAy4B,EAAAmY,oBACAviD,KAAA8mB,iBAAAnV,KAAAy4B,EAAAtjB,kBAEA9mB,MAaA4I,EAAA45C,WAAA,SAAAnsB,EAAAC,EAAAmsB,GAEA75C,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,YAEA,IAAA9N,GAAA,GAAAC,EAAA,EAEAisB,EAAA,GAAA95C,GAAAk9B,kBAAAtP,EAAAC,EAAAJ,EAAAC,EACAosB,GAAAzwB,GAAA1gB,IAAA,EAAA,GAAA,GACAmxC,EAAA3wB,OAAA,GAAAnpB,GAAAwY,QAAA,EAAA,EAAA,IACAphB,KAAAuU,IAAAmuC,EAEA,IAAAC,GAAA,GAAA/5C,GAAAk9B,kBAAAtP,EAAAC,EAAAJ,EAAAC,EACAqsB,GAAA1wB,GAAA1gB,IAAA,EAAA,GAAA,GACAoxC,EAAA5wB,OAAA,GAAAnpB,GAAAwY,QAAA,GAAA,EAAA,IACAphB,KAAAuU,IAAAouC,EAEA,IAAAC,GAAA,GAAAh6C,GAAAk9B,kBAAAtP,EAAAC,EAAAJ,EAAAC,EACAssB,GAAA3wB,GAAA1gB,IAAA,EAAA,EAAA,GACAqxC,EAAA7wB,OAAA,GAAAnpB,GAAAwY,QAAA,EAAA,EAAA,IACAphB,KAAAuU,IAAAquC,EAEA,IAAAC,GAAA,GAAAj6C,GAAAk9B,kBAAAtP,EAAAC,EAAAJ,EAAAC,EACAusB,GAAA5wB,GAAA1gB,IAAA,EAAA,EAAA,IACAsxC,EAAA9wB,OAAA,GAAAnpB,GAAAwY,QAAA,EAAA,GAAA,IACAphB,KAAAuU,IAAAsuC,EAEA,IAAAC,GAAA,GAAAl6C,GAAAk9B,kBAAAtP,EAAAC,EAAAJ,EAAAC,EACAwsB,GAAA7wB,GAAA1gB,IAAA,EAAA,GAAA,GACAuxC,EAAA/wB,OAAA,GAAAnpB,GAAAwY,QAAA,EAAA,EAAA,IACAphB,KAAAuU,IAAAuuC,EAEA,IAAAC,GAAA,GAAAn6C,GAAAk9B,kBAAAtP,EAAAC,EAAAJ,EAAAC,EACAysB,GAAA9wB,GAAA1gB,IAAA,EAAA,GAAA,GACAwxC,EAAAhxB,OAAA,GAAAnpB,GAAAwY,QAAA,EAAA,EAAA,KACAphB,KAAAuU,IAAAwuC,GAEA/iD,KAAAgjD,aAAA,GAAAp6C,GAAAq6C,sBAAAR,EAAAA,GAAuFS,OAAAt6C,EAAAyG,UAAA8zC,UAAAv6C,EAAA0F,aAAA80C,UAAAx6C,EAAA0F,eAEvFtO,KAAAqjD,cAAA,SAAAh7C,EAAAD,GAEA,OAAApI,KAAA8D,QAAA9D,KAAA+sB,mBAEA,IAAAi2B,GAAAhjD,KAAAgjD,aACAM,EAAAN,EAAAO,QAAAD,eAEAN,GAAAO,QAAAD,iBAAA,EAEAN,EAAAQ,eAAA,EACAn7C,EAAAG,OAAAJ,EAAAs6C,EAAAM,GAEAA,EAAAQ,eAAA,EACAn7C,EAAAG,OAAAJ,EAAAu6C,EAAAK,GAEAA,EAAAQ,eAAA,EACAn7C,EAAAG,OAAAJ,EAAAw6C,EAAAI,GAEAA,EAAAQ,eAAA,EACAn7C,EAAAG,OAAAJ,EAAAy6C,EAAAG,GAEAA,EAAAQ,eAAA,EACAn7C,EAAAG,OAAAJ,EAAA06C,EAAAE,GAEAA,EAAAO,QAAAD,gBAAAA,EAEAN,EAAAQ,eAAA,EACAn7C,EAAAG,OAAAJ,EAAA26C,EAAAC,GAEA36C,EAAAo7C,gBAAA,QAMA76C,EAAA45C,WAAA1gD,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAA45C,WAAA1gD,UAAAE,YAAA4G,EAAA45C,WAQA55C,EAAAm9B,mBAAA,SAAA9P,EAAAC,EAAAE,EAAAD,EAAAE,EAAAC,GAEA1tB,EAAA05C,OAAA/hD,KAAAP,MAEAA,KAAAskC,KAAA,qBAEAtkC,KAAA0jD,KAAA,EAEA1jD,KAAAi2B,KAAAA,EACAj2B,KAAAk2B,MAAAA,EACAl2B,KAAAo2B,IAAAA,EACAp2B,KAAAm2B,OAAAA,EAEAn2B,KAAAq2B,KAAA1yB,SAAA0yB,EAAAA,EAAA,GACAr2B,KAAAs2B,IAAA3yB,SAAA2yB,EAAAA,EAAA,IAEAt2B,KAAA2jD,0BAIA/6C,EAAAm9B,mBAAAjkC,UAAAf,OAAAgB,OAAA6G,EAAA05C,OAAAxgD,WACA8G,EAAAm9B,mBAAAjkC,UAAAE,YAAA4G,EAAAm9B,mBAEAn9B,EAAAm9B,mBAAAjkC,UAAA6hD,uBAAA,WAEA,GAAA3+B,IAAAhlB,KAAAk2B,MAAAl2B,KAAAi2B,OAAA,EAAAj2B,KAAA0jD,MACAz+B,GAAAjlB,KAAAo2B,IAAAp2B,KAAAm2B,SAAA,EAAAn2B,KAAA0jD,MACAE,GAAA5jD,KAAAk2B,MAAAl2B,KAAAi2B,MAAA,EACA4tB,GAAA7jD,KAAAo2B,IAAAp2B,KAAAm2B,QAAA,CAEAn2B,MAAA8mB,iBAAAiQ,iBAAA6sB,EAAA5+B,EAAA4+B,EAAA5+B,EAAA6+B,EAAA5+B,EAAA4+B,EAAA5+B,EAAAjlB,KAAAq2B,KAAAr2B,KAAAs2B,MAIA1tB,EAAAm9B,mBAAAjkC,UAAA6P,KAAA,SAAAy4B,GAaA,MAXAxhC,GAAA05C,OAAAxgD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAi2B,KAAAmU,EAAAnU,KACAj2B,KAAAk2B,MAAAkU,EAAAlU,MACAl2B,KAAAo2B,IAAAgU,EAAAhU,IACAp2B,KAAAm2B,OAAAiU,EAAAjU,OACAn2B,KAAAq2B,KAAA+T,EAAA/T,KACAr2B,KAAAs2B,IAAA8T,EAAA9T,IAEAt2B,KAAA0jD,KAAAtZ,EAAAsZ,KAEA1jD,MAIA4I,EAAAm9B,mBAAAjkC,UAAAqnC,OAAA,SAAAC,GAEA,GAAAI,GAAA5gC,EAAAw9B,SAAAtkC,UAAAqnC,OAAA5oC,KAAAP,KAAAopC,EAUA,OARAI,GAAAnmC,OAAAqgD,KAAA1jD,KAAA0jD,KACAla,EAAAnmC,OAAA4yB,KAAAj2B,KAAAi2B,KACAuT,EAAAnmC,OAAA6yB,MAAAl2B,KAAAk2B,MACAsT,EAAAnmC,OAAA+yB,IAAAp2B,KAAAo2B,IACAoT,EAAAnmC,OAAA8yB,OAAAn2B,KAAAm2B,OACAqT,EAAAnmC,OAAAgzB,KAAAr2B,KAAAq2B,KACAmT,EAAAnmC,OAAAizB,IAAAt2B,KAAAs2B,IAEAkT,GAYA5gC,EAAAk9B,kBAAA,SAAAtP,EAAAC,EAAAJ,EAAAC,GAEA1tB,EAAA05C,OAAA/hD,KAAAP,MAEAA,KAAAskC,KAAA,oBAEAtkC,KAAA0jD,KAAA,EAEA1jD,KAAAw2B,IAAA7yB,SAAA6yB,EAAAA,EAAA,GACAx2B,KAAAy2B,OAAA9yB,SAAA8yB,EAAAA,EAAA,EACAz2B,KAAAq2B,KAAA1yB,SAAA0yB,EAAAA,EAAA,GACAr2B,KAAAs2B,IAAA3yB,SAAA2yB,EAAAA,EAAA,IAEAt2B,KAAA2jD,0BAIA/6C,EAAAk9B,kBAAAhkC,UAAAf,OAAAgB,OAAA6G,EAAA05C,OAAAxgD,WACA8G,EAAAk9B,kBAAAhkC,UAAAE,YAAA4G,EAAAk9B,kBASAl9B,EAAAk9B,kBAAAhkC,UAAAgiD,QAAA,SAAAC,EAAAC,GAEArgD,SAAAqgD,IAAAA,EAAA,IAEAhkD,KAAAw2B,IAAA,EAAA5tB,EAAAY,KAAA81B,SAAA91B,KAAAy6C,KAAAD,GAAA,EAAAD,KACA/jD,KAAA2jD,0BAyCA/6C,EAAAk9B,kBAAAhkC,UAAAoiD,cAAA,SAAAC,EAAAC,EAAAn7C,EAAAuV,EAAA6E,EAAAC,GAEAtjB,KAAAmkD,UAAAA,EACAnkD,KAAAokD,WAAAA,EACApkD,KAAAiJ,EAAAA,EACAjJ,KAAAwe,EAAAA,EACAxe,KAAAqjB,MAAAA,EACArjB,KAAAsjB,OAAAA,EAEAtjB,KAAA2jD,0BAKA/6C,EAAAk9B,kBAAAhkC,UAAA6hD,uBAAA,WAEA,GAAAntB,GAAA5tB,EAAAY,KAAA81B,SAAA,EAAA91B,KAAAy6C,KAAAz6C,KAAAoU,IAAA,GAAAhV,EAAAY,KAAAmtB,SAAA32B,KAAAw2B,MAAAx2B,KAAA0jD,MAEA,IAAA1jD,KAAAmkD,UAAA,CAEA,GAAA1tB,GAAAz2B,KAAAmkD,UAAAnkD,KAAAokD,WACAhuB,EAAA5sB,KAAAoU,IAAAhV,EAAAY,KAAAmtB,SAAA,GAAAH,IAAAx2B,KAAAq2B,KACAF,GAAAC,EACAH,EAAAQ,EAAAN,EACAD,EAAAO,EAAAL,EACA/S,EAAA7Z,KAAA8X,IAAA4U,EAAAD,GACA3S,EAAA9Z,KAAA8X,IAAA8U,EAAAD,EAEAn2B,MAAA8mB,iBAAAkP,YACAC,EAAAj2B,KAAAiJ,EAAAoa,EAAArjB,KAAAmkD,UACAluB,GAAAj2B,KAAAiJ,EAAAjJ,KAAAqjB,OAAAA,EAAArjB,KAAAmkD,UACA/tB,GAAAp2B,KAAAwe,EAAAxe,KAAAsjB,QAAAA,EAAAtjB,KAAAokD,WACAhuB,EAAAp2B,KAAAwe,EAAA8E,EAAAtjB,KAAAokD,WACApkD,KAAAq2B,KACAr2B,KAAAs2B,SAKAt2B,MAAA8mB,iBAAAyP,gBAAAC,EAAAx2B,KAAAy2B,OAAAz2B,KAAAq2B,KAAAr2B,KAAAs2B,MAMA1tB,EAAAk9B,kBAAAhkC,UAAA6P,KAAA,SAAAy4B,GAWA,MATAxhC,GAAA05C,OAAAxgD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAw2B,IAAA4T,EAAA5T,IACAx2B,KAAAy2B,OAAA2T,EAAA3T,OACAz2B,KAAAq2B,KAAA+T,EAAA/T,KACAr2B,KAAAs2B,IAAA8T,EAAA9T,IAEAt2B,KAAA0jD,KAAAtZ,EAAAsZ,KAEA1jD,MAIA4I,EAAAk9B,kBAAAhkC,UAAAqnC,OAAA,SAAAC,GAEA,GAAAI,GAAA5gC,EAAAw9B,SAAAtkC,UAAAqnC,OAAA5oC,KAAAP,KAAAopC,EAQA,OANAI,GAAAnmC,OAAAqgD,KAAA1jD,KAAA0jD,KACAla,EAAAnmC,OAAAmzB,IAAAx2B,KAAAw2B,IACAgT,EAAAnmC,OAAAozB,OAAAz2B,KAAAy2B,OACA+S,EAAAnmC,OAAAgzB,KAAAr2B,KAAAq2B,KACAmT,EAAAnmC,OAAAizB,IAAAt2B,KAAAs2B,IAEAkT,GAWA5gC,EAAAy7C,MAAA,SAAAhzC,GAEAzI,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,QAEAtkC,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAAC,GAEArR,KAAAinC,cAAAtjC,QAIAiF,EAAAy7C,MAAAviD,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAAy7C,MAAAviD,UAAAE,YAAA4G,EAAAy7C,MAEAtjD,OAAAwB,iBAAAqG,EAAAy7C,MAAAviD,WACAwiD,YACA/yC,IAAA,SAAAtQ,GACAiH,QAAAuI,KAAA,gDAGA8zC,iBACAhzC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAl8C,OAAAkuB,IAAAv1B,IAGAwjD,kBACAlzC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAl8C,OAAA2tB,KAAAh1B,IAGAyjD,mBACAnzC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAl8C,OAAA4tB,MAAAj1B,IAGA0jD,iBACApzC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAl8C,OAAA8tB,IAAAn1B,IAGA2jD,oBACArzC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAl8C,OAAA6tB,OAAAl1B,IAGA4jD,kBACAtzC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAl8C,OAAA+tB,KAAAp1B,IAGA6jD,iBACAvzC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAl8C,OAAAguB,IAAAr1B,IAGA8jD,qBACAxzC,IAAA,SAAAtQ,GACAiH,QAAAuI,KAAA,6GAGAu0C,YACAzzC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAS,KAAAhkD,IAGAikD,gBACA3zC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAW,SAAAlkD,IAGAmkD,gBACA7zC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAa,QAAAhiC,MAAApiB,IAGAqkD,iBACA/zC,IAAA,SAAAtQ,GACAjB,KAAAwkD,OAAAa,QAAA/hC,OAAAriB,MAKA2H,EAAAy7C,MAAAviD,UAAA6P,KAAA,SAAAy4B,GAMA,MAJAxhC,GAAAw9B,SAAAtkC,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAqR,MAAAM,KAAAy4B,EAAA/4B,OAEArR,MAIA4I,EAAAy7C,MAAAviD,UAAAqnC,OAAA,SAAAC,GAEA,GAAAI,GAAA5gC,EAAAw9B,SAAAtkC,UAAAqnC,OAAA5oC,KAAAP,KAAAopC,EAWA,OATAI,GAAAnmC,OAAAgO,MAAArR,KAAAqR,MAAAuC,SACAjQ,SAAA3D,KAAAulD,cAAA/b,EAAAnmC,OAAAkiD,YAAAvlD,KAAAulD,YAAA3xC,UAEAjQ,SAAA3D,KAAAwlD,YAAAhc,EAAAnmC,OAAAmiD,UAAAxlD,KAAAwlD,WACA7hD,SAAA3D,KAAA2qB,WAAA6e,EAAAnmC,OAAAsnB,SAAA3qB,KAAA2qB,UACAhnB,SAAA3D,KAAAggB,QAAAwpB,EAAAnmC,OAAA2c,MAAAhgB,KAAAggB,OACArc,SAAA3D,KAAAylD,QAAAjc,EAAAnmC,OAAAoiD,MAAAzlD,KAAAylD,OACA9hD,SAAA3D,KAAA0lD,WAAAlc,EAAAnmC,OAAAqiD,SAAA1lD,KAAA0lD,UAEAlc,GAUA5gC,EAAA+8C,YAAA,SAAAr9C,GAEAtI,KAAAsI,OAAAA,EAEAtI,KAAAilD,KAAA,EACAjlD,KAAAmlD,SAAA,EAEAnlD,KAAAqlD,QAAA,GAAAz8C,GAAAwa,QAAA,IAAA,KAEApjB,KAAA4lD,IAAA,KACA5lD,KAAA2mB,OAAA,MAIA/d,EAAA+8C,YAAA7jD,WAEAE,YAAA4G,EAAA+8C,YAEAh0C,KAAA,SAAAy4B,GAEApqC,KAAAsI,OAAA8hC,EAAA9hC,OAAA8K,QAEApT,KAAAilD,KAAA7a,EAAA6a,KACAjlD,KAAAmlD,SAAA/a,EAAA+a,SAEAnlD,KAAAqlD,QAAA1zC,KAAAy4B,EAAAib,UAIAjyC,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,QAYA4I,EAAAi9C,aAAA,SAAAx0C,GAEAzI,EAAAy7C,MAAA9jD,KAAAP,KAAAqR,GAEArR,KAAAskC,KAAA,eAEAtkC,KAAAgnC,WAAArjC,QAIAiF,EAAAi9C,aAAA/jD,UAAAf,OAAAgB,OAAA6G,EAAAy7C,MAAAviD,WACA8G,EAAAi9C,aAAA/jD,UAAAE,YAAA4G,EAAAi9C,aASAj9C,EAAAk9C,iBAAA,SAAAz0C,EAAAm0C,GAEA58C,EAAAy7C,MAAA9jD,KAAAP,KAAAqR,GAEArR,KAAAskC,KAAA,mBAEAtkC,KAAA21B,SAAApkB,IAAA,EAAA,EAAA,GACAvR,KAAAipC,eAEAjpC,KAAAwC,OAAA,GAAAoG,GAAAw9B,SAEApmC,KAAAwlD,UAAA7hD,SAAA6hD,EAAAA,EAAA,EAEAxlD,KAAAwkD,OAAA,GAAA57C,GAAA+8C,YAAA,GAAA/8C,GAAAm9B,mBAAA,KAAA,IAAA,IAAA,KAAA,GAAA,OAIAn9B,EAAAk9C,iBAAAhkD,UAAAf,OAAAgB,OAAA6G,EAAAy7C,MAAAviD,WACA8G,EAAAk9C,iBAAAhkD,UAAAE,YAAA4G,EAAAk9C,iBAEAl9C,EAAAk9C,iBAAAhkD,UAAA6P,KAAA,SAAAy4B,GASA,MAPAxhC,GAAAy7C,MAAAviD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAwlD,UAAApb,EAAAob,UACAxlD,KAAAwC,OAAA4nC,EAAA5nC,OAAA4Q,QAEApT,KAAAwkD,OAAApa,EAAAoa,OAAApxC,QAEApT,MAUA4I,EAAAm9C,gBAAA,SAAAC,EAAAT,EAAAC,GAEA58C,EAAAy7C,MAAA9jD,KAAAP,KAAAgmD,GAEAhmD,KAAAskC,KAAA,kBAEAtkC,KAAAgnC,WAAArjC,OAEA3D,KAAA21B,SAAApkB,IAAA,EAAA,EAAA,GACAvR,KAAAipC,eAEAjpC,KAAAulD,YAAA,GAAA38C,GAAAwI,MAAAm0C,GACAvlD,KAAAwlD,UAAA7hD,SAAA6hD,EAAAA,EAAA,GAIA58C,EAAAm9C,gBAAAjkD,UAAAf,OAAAgB,OAAA6G,EAAAy7C,MAAAviD,WACA8G,EAAAm9C,gBAAAjkD,UAAAE,YAAA4G,EAAAm9C,gBAEAn9C,EAAAm9C,gBAAAjkD,UAAA6P,KAAA,SAAAy4B,GAOA,MALAxhC,GAAAy7C,MAAAviD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAulD,YAAA5zC,KAAAy4B,EAAAmb,aACAvlD,KAAAwlD,UAAApb,EAAAob,UAEAxlD,MAWA4I,EAAAq9C,WAAA,SAAA50C,EAAAm0C,EAAA76B,EAAA86B,GAEA78C,EAAAy7C,MAAA9jD,KAAAP,KAAAqR,GAEArR,KAAAskC,KAAA,aAEAtkC,KAAAwlD,UAAA7hD,SAAA6hD,EAAAA,EAAA,EACAxlD,KAAA2qB,SAAAhnB,SAAAgnB,EAAAA,EAAA,EACA3qB,KAAAylD,MAAA9hD,SAAA8hD,EAAAA,EAAA,EAEAzlD,KAAAwkD,OAAA,GAAA57C,GAAA+8C,YAAA,GAAA/8C,GAAAk9B,kBAAA,GAAA,EAAA,EAAA,OAIAl9B,EAAAq9C,WAAAnkD,UAAAf,OAAAgB,OAAA6G,EAAAy7C,MAAAviD,WACA8G,EAAAq9C,WAAAnkD,UAAAE,YAAA4G,EAAAq9C,WAEAr9C,EAAAq9C,WAAAnkD,UAAA6P,KAAA,SAAAy4B,GAUA,MARAxhC,GAAAy7C,MAAAviD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAwlD,UAAApb,EAAAob,UACAxlD,KAAA2qB,SAAAyf,EAAAzf,SACA3qB,KAAAylD,MAAArb,EAAAqb,MAEAzlD,KAAAwkD,OAAApa,EAAAoa,OAAApxC,QAEApT,MAUA4I,EAAAs9C,UAAA,SAAA70C,EAAAm0C,EAAA76B,EAAA3K,EAAA0lC,EAAAD,GAEA78C,EAAAy7C,MAAA9jD,KAAAP,KAAAqR,GAEArR,KAAAskC,KAAA,YAEAtkC,KAAA21B,SAAApkB,IAAA,EAAA,EAAA,GACAvR,KAAAipC,eAEAjpC,KAAAwC,OAAA,GAAAoG,GAAAw9B,SAEApmC,KAAAwlD,UAAA7hD,SAAA6hD,EAAAA,EAAA,EACAxlD,KAAA2qB,SAAAhnB,SAAAgnB,EAAAA,EAAA,EACA3qB,KAAAggB,MAAArc,SAAAqc,EAAAA,EAAAxW,KAAA2f,GAAA,EACAnpB,KAAA0lD,SAAA/hD,SAAA+hD,EAAAA,EAAA,GACA1lD,KAAAylD,MAAA9hD,SAAA8hD,EAAAA,EAAA,EAEAzlD,KAAAwkD,OAAA,GAAA57C,GAAA+8C,YAAA,GAAA/8C,GAAAk9B,kBAAA,GAAA,EAAA,GAAA,OAIAl9B,EAAAs9C,UAAApkD,UAAAf,OAAAgB,OAAA6G,EAAAy7C,MAAAviD,WACA8G,EAAAs9C,UAAApkD,UAAAE,YAAA4G,EAAAs9C,UAEAt9C,EAAAs9C,UAAApkD,UAAA6P,KAAA,SAAAy4B,GAcA,MAZAxhC,GAAAy7C,MAAAviD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAwlD,UAAApb,EAAAob,UACAxlD,KAAA2qB,SAAAyf,EAAAzf,SACA3qB,KAAAggB,MAAAoqB,EAAApqB,MACAhgB,KAAA0lD,SAAAtb,EAAAsb,SACA1lD,KAAAylD,MAAArb,EAAAqb,MAEAzlD,KAAAwC,OAAA4nC,EAAA5nC,OAAA4Q,QAEApT,KAAAwkD,OAAApa,EAAAoa,OAAApxC,QAEApT,MAUA4I,EAAAu9C,OAEAxT,SAAA,EAEAyT,SAEA7xC,IAAA,SAAA1R,EAAAwjD,GAEArmD,KAAA2yC,WAAA,IAIA3yC,KAAAomD,MAAAvjD,GAAAwjD,IAIAxiD,IAAA,SAAAhB,GAEA,MAAA7C,MAAA2yC,WAAA,EAIA3yC,KAAAomD,MAAAvjD,GAJA,QAQAulC,OAAA,SAAAvlC,SAEA7C,MAAAomD,MAAAvjD,IAIAoO,MAAA,WAEAjR,KAAAomD,WAYAx9C,EAAA09C,OAAA,WAEAtmD,KAAAumD,YAAA,aACAvmD,KAAAwmD,eAAA,aACAxmD,KAAAymD,eAAA,cAIA79C,EAAA09C,OAAAxkD,WAEAE,YAAA4G,EAAA09C,OAEAI,YAAA/iD,OAEAgjD,eAAA,SAAAC,GAEA,GAAA5M,GAAA4M,EAAAxoB,MAAA,IAEA,OAAA,KAAA4b,EAAAr3C,OAAA,MAEAq3C,EAAA6M,MAEA7M,EAAAxb,KAAA,KAAA,MAIAsoB,cAAA,SAAAjd,EAAAkd,EAAAL,GAIA,IAAA,GAFAzxC,MAEAvS,EAAA,EAAkBA,EAAAmnC,EAAAlnC,SAAsBD,EAExCuS,EAAAvS,GAAA1C,KAAAgnD,eAAAnd,EAAAnnC,GAAAqkD,EAAAL,EAIA,OAAAzxC,IAIA+xC,eAAA,WAEA,GAAA31C,GAAA41C,EAAAC,CAEA,OAAA,UAAA1mD,EAAAumD,EAAAL,GAUA,QAAAS,GAAAC,EAAAC,EAAAnyC,EAAAoyC,EAAAC,GAEA,GAGAhE,GAHAiE,EAAAT,EAAAK,EACAK,EAAA7+C,EAAA09C,OAAAoB,SAAA7jD,IAAA2jD,EAIA,QAAAC,EAEAlE,EAAAkE,EAAAE,KAAAH,IAIAP,EAAAW,eAAAlB,GACAnD,EAAA0D,EAAAU,KAAAH,IAIA7jD,SAAA0jD,IAEA9D,EAAA8D,OAAA/1C,UAAA+1C,GAEA,IAAAA,EAAA,KAAA9D,EAAAsE,MAAAj/C,EAAAoF,gBACA,IAAAq5C,EAAA,KAAA9D,EAAAuE,MAAAl/C,EAAAoF,iBAIArK,SAAAuR,GAEAquC,EAAAruC,OAAA5D,UAAA4D,GAIAvR,SAAA2jD,IAEA,WAAAA,EAAA,KAAA/D,EAAAsE,MAAAj/C,EAAAoF,gBACA,WAAAs5C,EAAA,KAAA/D,EAAAsE,MAAAj/C,EAAAsF,wBAEA,WAAAo5C,EAAA,KAAA/D,EAAAuE,MAAAl/C,EAAAoF,gBACA,WAAAs5C,EAAA,KAAA/D,EAAAuE,MAAAl/C,EAAAsF,yBAIAvK,SAAA4jD,IAEAhE,EAAAgE,WAAAA,EAIA,IAAAlpB,GAAAz1B,EAAAY,KAAA00B,cAIA,OAFA4L,GAAAzL,GAAAklB,EAEAllB,EA7DA16B,SAAA0N,IAAAA,EAAA,GAAAzI,GAAAwI,OACAzN,SAAAsjD,IAAAA,EAAA,GAAAr+C,GAAAm/C,eACApkD,SAAAujD,IAAAA,EAAA,GAAAt+C,GAAAo/C,eAIA,IAAAle,MA6DAqQ,GACA9b,KAAAz1B,EAAAY,KAAA00B,eACAoG,KAAA,sBAGA,KAAA,GAAAr6B,KAAAzJ,GAAA,CAEA,GAAAS,GAAAT,EAAAyJ,EAEA,QAAAA,GACA,IAAA,WACAkwC,EAAA9oC,MAAApQ,CACA,MACA,KAAA,WACA,IAAA,iBACA,IAAA,eAEA,KACA,KAAA,UACAk5C,EAAAlwC,KAAAhJ,CACA,MACA,KAAA,WACAk5C,EAAA8N,SAAAr/C,EAAA3H,EACA,MACA,KAAA,eACAk5C,EAAA9oC,MAAAA,EAAAC,UAAArQ,GAAA2S,QACA,MACA,KAAA,gBACAumC,EAAA+N,SAAA72C,EAAAC,UAAArQ,GAAA2S,QACA,MACA,KAAA,gBACAumC,EAAAgO,SAAA92C,EAAAC,UAAArQ,GAAA2S,QACA,MACA,KAAA,eACAumC,EAAAiO,UAAAnnD,CACA,MACA,KAAA,UACA,UAAAA,EAAA4+C,gBAAA1F,EAAA7V,KAAA,qBACA,UAAArjC,EAAA4+C,gBAAA1F,EAAA7V,KAAA,oBACA,MACA,KAAA,aACA6V,EAAAyL,IAAAuB,EAAAlmD,EAAAT,EAAA6nD,iBAAA7nD,EAAA8nD,iBAAA9nD,EAAA+nD,eAAA/nD,EAAAgoD,qBACA,MACA,KAAA,mBACA,IAAA,mBACA,IAAA,iBACA,IAAA,uBACA,KACA,KAAA,WACArO,EAAAsO,SAAAtB,EAAAlmD,EAAAT,EAAAkoD,eAAAloD,EAAAmoD,eAAAnoD,EAAAooD,aAAApoD,EAAAqoD,mBACA,MACA,KAAA,iBACA,IAAA,iBACA,IAAA,eACA,IAAA,qBACA,KACA,KAAA,QACA1O,EAAA2O,MAAA3B,EAAAlmD,EAAAT,EAAAuoD,YAAAvoD,EAAAwoD,YAAAxoD,EAAAyoD,UAAAzoD,EAAA0oD,gBACA,MACA,KAAA,cACA,IAAA,cACA,IAAA,YACA,IAAA,kBACA,KACA,KAAA,UACA/O,EAAAgP,QAAAhC,EAAAlmD,EAAAT,EAAA4oD,cAAA5oD,EAAA6oD,cAAA7oD,EAAA8oD,YAAA9oD,EAAA+oD,kBACA,MACA,KAAA,eACApP,EAAAqP,UAAAvoD,CACA,MACA,KAAA,gBACA,IAAA,gBACA,IAAA,cACA,IAAA,oBACA,KACA,KAAA,YACAk5C,EAAAsP,UAAAtC,EAAAlmD,EAAAT,EAAAkpD,gBAAAlpD,EAAAmpD,gBAAAnpD,EAAAopD,cAAAppD,EAAAqpD,oBACA,MACA,KAAA,kBACA1P,EAAA2P,aAAA7oD,EAAAA,EACA,MACA,KAAA,kBACA,IAAA,kBACA,IAAA,gBACA,IAAA,sBACA,KACA,KAAA,cACAk5C,EAAA4P,YAAA5C,EAAAlmD,EAAAT,EAAAwpD,kBAAAxpD,EAAAypD,kBAAAzpD,EAAA0pD,gBAAA1pD,EAAA2pD,sBACA,MACA,KAAA,oBACA,IAAA,oBACA,IAAA,kBACA,IAAA,wBACA,KACA,KAAA,WACAhQ,EAAAiQ,SAAAjD,EAAAlmD,EAAAT,EAAA6pD,eAAA7pD,EAAA8pD,eAAA9pD,EAAA+pD,aAAA/pD,EAAAgqD,mBACA,MACA,KAAA,iBACA,IAAA,iBACA,IAAA,eACA,IAAA,qBACA,KACA,KAAA,YACArQ,EAAAsQ,KAAA7hD,EAAAsC,QACA,MACA,KAAA,cACAivC,EAAAsQ,KAAA7hD,EAAAuC,UACA,MACA,KAAA,eACAjD,QAAAuI,KAAA,0DACA0pC,EAAAuQ,QAAAzpD,CACA,MACA,KAAA,UACA,IAAA,cACA,IAAA,YACA,IAAA,aACA,IAAA,cACA,IAAA,UACA,IAAA,YACAk5C,EAAAlwC,GAAAhJ,CACA,MACA,KAAA,eACAA,KAAA,IAAAk5C,EAAA1P,aAAA7hC,EAAA4C,cACA,SAAAvK,IAAAk5C,EAAA1P,aAAA7hC,EAAA2C,WACA,MACA,SACArD,QAAAoI,MAAA,qCAAArG,EAAAhJ,IAWA,MALA,sBAAAk5C,EAAA7V,YAAA6V,GAAA+N,SACA/N,EAAAuQ,QAAA,IAAAvQ,EAAAwQ,aAAA,GAEAzD,EAAA0D,YAAA9gB,GAEAod,EAAA7c,MAAA8P,QAQAvxC,EAAA09C,OAAAoB,UAEAmD,YAEAt2C,IAAA,SAAAu2C,EAAArD,GAEAznD,KAAA6qD,SAAA5jD,KAAA6jD,EAAArD,IAIA5jD,IAAA,SAAAwiD,GAIA,IAAA,GAFAwE,GAAA7qD,KAAA6qD,SAEAnoD,EAAA,EAAAuD,EAAA4kD,EAAAloD,OAAuCsD,EAAAvD,EAAOA,GAAA,EAAA,CAE9C,GAAAooD,GAAAD,EAAAnoD,GACA+kD,EAAAoD,EAAAnoD,EAAA,EAEA,IAAAooD,EAAAC,KAAA1E,GAEA,MAAAoB,GAMA,MAAA,QAYA7+C,EAAAoiD,UAAA,SAAAC,GAEAjrD,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,uBAIAtiD,EAAAoiD,UAAAlpD,WAEAE,YAAA4G,EAAAoiD,UAEArD,KAAA,SAAAf,EAAAuE,EAAAC,EAAAC,GAEA,GAAAv+B,GAAA9sB,KAEAsrD,EAAA1iD,EAAAu9C,MAAAtiD,IAAA+iD,EAEA,IAAAjjD,SAAA2nD,EAYA,MAVAH,IAEAjiD,WAAA,WAEAiiD,EAAAG,IAEK,GAILA,CAIA,IAAAC,GAAA,GAAAC,eAyCA,OAxCAD,GAAAE,KAAA,MAAA7E,GAAA,GAEA2E,EAAArnB,iBAAA,OAAA,SAAAr+B,GAEA,GAAA6lD,GAAA7lD,EAAArD,OAAAkpD,QAEA9iD,GAAAu9C,MAAA5xC,IAAAqyC,EAAA8E,GAEAP,GAAAA,EAAAO,GAEA5+B,EAAAm+B,QAAAU,QAAA/E,KAEG,GAEHjjD,SAAAynD,GAEAG,EAAArnB,iBAAA,WAAA,SAAAr+B,GAEAulD,EAAAvlD,KAEI,GAIJ0lD,EAAArnB,iBAAA,QAAA,SAAAr+B,GAEAwlD,GAAAA,EAAAxlD,GAEAinB,EAAAm+B,QAAAW,UAAAhF,KAEG,GAEHjjD,SAAA3D,KAAA0mD,cAAA6E,EAAA7E,YAAA1mD,KAAA0mD,aACA/iD,SAAA3D,KAAA6rD,eAAAN,EAAAM,aAAA7rD,KAAA6rD,cACAloD,SAAA3D,KAAA8rD,kBAAAP,EAAAO,gBAAA9rD,KAAA8rD,iBAEAP,EAAAQ,KAAA,MAEAj/B,EAAAm+B,QAAAe,UAAApF,GAEA2E,GAIAU,gBAAA,SAAAhrD,GAEAjB,KAAA6rD,aAAA5qD,GAIA2mD,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,GAIAirD,mBAAA,SAAAjrD,GAEAjB,KAAA8rD,gBAAA7qD,IAYA2H,EAAAujD,YAAA,SAAAlB,GAEAjrD,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,uBAIAtiD,EAAAujD,YAAArqD,WAEAE,YAAA4G,EAAAujD,YAEAxE,KAAA,SAAAf,EAAAuE,EAAAC,EAAAC,GAEA,GAAAv+B,GAAA9sB,KAEAsrD,EAAA1iD,EAAAu9C,MAAAtiD,IAAA+iD,EAEA,IAAAjjD,SAAA2nD,EAoBA,MAlBAx+B,GAAAm+B,QAAAe,UAAApF,GAEAuE,EAEAjiD,WAAA,WAEAiiD,EAAAG,GAEAx+B,EAAAm+B,QAAAU,QAAA/E,IAEK,GAIL95B,EAAAm+B,QAAAU,QAAA/E,GAIA0E,CAIA,IAAAc,GAAA1nD,SAAAsM,cAAA,MAoCA,OAlCAo7C,GAAAloB,iBAAA,OAAA,SAAAr+B;AAEA+C,EAAAu9C,MAAA5xC,IAAAqyC,EAAA5mD,MAEAmrD,GAAAA,EAAAnrD,MAEA8sB,EAAAm+B,QAAAU,QAAA/E,KAEG,GAEHjjD,SAAAynD,GAEAgB,EAAAloB,iBAAA,WAAA,SAAAr+B,GAEAulD,EAAAvlD,KAEI,GAIJumD,EAAAloB,iBAAA,QAAA,SAAAr+B,GAEAwlD,GAAAA,EAAAxlD,GAEAinB,EAAAm+B,QAAAW,UAAAhF,KAEG,GAEHjjD,SAAA3D,KAAA0mD,cAAA0F,EAAA1F,YAAA1mD,KAAA0mD,aAEA55B,EAAAm+B,QAAAe,UAAApF,GAEAwF,EAAAC,IAAAzF,EAEAwF,GAIAxE,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,IAaA2H,EAAA0jD,WAAA,SAAArB,GAEA,iBAAAA,KAEA/iD,QAAAuI,KAAA,6EACAw6C,EAAAtnD,QAIA3D,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,sBAEAlrD,KAAA8rD,iBAAA,GAIAljD,EAAA0jD,WAAAxqD,WAEAE,YAAA4G,EAAA0jD,WAIAC,GAAAA,oBASA,MAPA5oD,UAAA3D,KAAAwsD,oBAEAxsD,KAAAwsD,kBAAA9nD,SAAAsM,cAAA,QAIA9I,QAAAuI,KAAA,yDACAzQ,KAAAwsD,mBAIA7E,KAAA,SAAAf,EAAAuE,EAAAC,EAAAC,GAEA,GAAAv+B,GAAA9sB,KAEA+mD,EAAA/mD,KAAA+mD,aAAA,gBAAA/mD,MAAA+mD,YAAA/mD,KAAA+mD,YAAAn+C,EAAA09C,OAAAxkD,UAAA6kD,eAAAC,GAEAa,EAAA,GAAA7+C,GAAAoiD,UAAAhrD,KAAAirD,QACAxD,GAAAG,eAAA5nD,KAAA0mD,aACAe,EAAAyE,mBAAAlsD,KAAA8rD,iBACArE,EAAAE,KAAAf,EAAA,SAAA6F,GAEA,GAAAtS,GAAAlQ,KAAAI,MAAAoiB,GACAhjB,EAAA0Q,EAAA1Q,QAEA,IAAA9lC,SAAA8lC,EAAA,CAEA,GAAA,WAAAA,EAAAnF,KAGA,WADAp8B,SAAAoI,MAAA,qBAAAs2C,EAAA,qDAKA,IAAA,UAAAnd,EAAAnF,KAGA,WADAp8B,SAAAoI,MAAA,qBAAAs2C,EAAA,qDAOA,GAAAvjD,GAAAypB,EAAAud,MAAA8P,EAAA4M,EACAoE,GAAA9nD,EAAA6pB,SAAA7pB,EAAAwmC,cAMA+d,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,GAIAyrD,eAAA,SAAAzrD,GAEAjB,KAAA+mD,YAAA9lD,GAIAopC,MAAA,SAAA8P,EAAA4M,GAcA,QAAA4F,GAAA93B,GAEA,QAAA+3B,GAAA3rD,EAAA00B,GAEA,MAAA10B,GAAA,GAAA00B,EAIA,GAAAjzB,GAAAoE,EAAA+lD,EAEA33C,EAAA43C,EAEAC,EAAAC,EAAAC,EAAA1iB,EAEAjG,EACA4oB,EACA9Z,EACAE,EACAC,EAAAC,EACAC,EAAAC,EAEAjF,EAAAC,EAAAye,EAAAC,EAAAt7C,EAAA+V,EAEAwlC,EAAAhe,EAAA1M,EAAAhhB,EAEA+rB,EAAAyM,EAAAzM,MACAtgB,EAAA+sB,EAAA/sB,SACA2hB,EAAAoL,EAAApL,QACAzD,EAAA6O,EAAA7O,OAEAgiB,EAAA,CAEA,IAAA3pD,SAAAw2C,EAAAlL,IAAA,CAIA,IAAAvsC,EAAA,EAAgBA,EAAAy3C,EAAAlL,IAAAtsC,OAAqBD,IAErCy3C,EAAAlL,IAAAvsC,GAAAC,QAAA2qD,GAIA,KAAA5qD,EAAA,EAAgB4qD,EAAA5qD,EAAeA,IAE/BwqB,EAAAygB,cAAAjrC,MASA,IAHAwS,EAAA,EACA43C,EAAA1/B,EAAAzqB,OAEAmqD,EAAA53C,GAEAu5B,EAAA,GAAA7lC,GAAAwY,QAEAqtB,EAAAxlC,EAAAmkB,EAAAlY,KAAA2f,EACA4Z,EAAAjwB,EAAA4O,EAAAlY,KAAA2f,EACA4Z,EAAAhwB,EAAA2O,EAAAlY,KAAA2f,EAEA3H,EAAAE,SAAAnmB,KAAAwnC,EAOA,KAHAv5B,EAAA,EACA43C,EAAApf,EAAA/qC,OAEAmqD,EAAA53C,GAeA,GAbAovB,EAAAoJ,EAAAx4B,KAGAg4C,EAAAN,EAAAtoB,EAAA,GACA8O,EAAAwZ,EAAAtoB,EAAA,GACAgP,EAAAsZ,EAAAtoB,EAAA,GACAiP,EAAAqZ,EAAAtoB,EAAA,GACAkP,EAAAoZ,EAAAtoB,EAAA,GACAmP,EAAAmZ,EAAAtoB,EAAA,GACAoP,EAAAkZ,EAAAtoB,EAAA,GAIA4oB,EAAA,CA0BA,GAxBAC,EAAA,GAAAvkD,GAAA0hC,MACA6iB,EAAArrC,EAAA4rB,EAAAx4B,GACAi4C,EAAAz7C,EAAAg8B,EAAAx4B,EAAA,GACAi4C,EAAA1sD,EAAAitC,EAAAx4B,EAAA,GAEAk4C,EAAA,GAAAxkD,GAAA0hC,MACA8iB,EAAAtrC,EAAA4rB,EAAAx4B,EAAA,GACAk4C,EAAA17C,EAAAg8B,EAAAx4B,EAAA,GACAk4C,EAAA3sD,EAAAitC,EAAAx4B,EAAA,GAEAA,GAAA,EAEAk+B,IAEA7I,EAAAmD,EAAAx4B,KACAi4C,EAAA5iB,cAAAA,EACA6iB,EAAA7iB,cAAAA,GAMAsiB,EAAA3/B,EAAAwgB,MAAA/qC,OAEA2wC,EAEA,IAAA5wC,EAAA,EAAkB4qD,EAAA5qD,EAAeA,IAOjC,IALA2qD,EAAAlT,EAAAlL,IAAAvsC,GAEAwqB,EAAAygB,cAAAjrC,GAAAmqD,MACA3/B,EAAAygB,cAAAjrC,GAAAmqD,EAAA,MAEA/lD,EAAA,EAAmB,EAAAA,EAAOA,IAE1BmmD,EAAAvf,EAAAx4B,KAEAytB,EAAA0qB,EAAA,EAAAJ,GACAtrC,EAAA0rC,EAAA,EAAAJ,EAAA,GAEA5d,EAAA,GAAAzmC,GAAAwa,QAAAuf,EAAAhhB,GAEA,IAAA7a,GAAAomB,EAAAygB,cAAAjrC,GAAAmqD,GAAA5lD,KAAAooC,GACA,IAAAvoC,GAAAomB,EAAAygB,cAAAjrC,GAAAmqD,EAAA,GAAA5lD,KAAAooC,EAsBA,IAdAkE,IAEAyZ,EAAA,EAAAtf,EAAAx4B,KAEAi4C,EAAAtlC,OAAAtW,IACAw9B,EAAAie,KACAje,EAAAie,KACAje,EAAAie,IAGAI,EAAAvlC,OAAAlW,KAAAw7C,EAAAtlC,SAIA2rB,EAEA,IAAA9wC,EAAA,EAAkB,EAAAA,EAAOA,IAEzBsqD,EAAA,EAAAtf,EAAAx4B,KAEA2S,EAAA,GAAAjf,GAAAwY,QACA2tB,EAAAie,KACAje,EAAAie,KACAje,EAAAie,IAIA,IAAAtqD,GAAAyqD,EAAA3iB,cAAAvjC,KAAA4gB,GACA,IAAAnlB,GAAA0qD,EAAA5iB,cAAAvjC,KAAA4gB,EAkBA,IAXA4rB,IAEAsZ,EAAArf,EAAAx4B,KACApD,EAAAw5B,EAAAyhB,GAEAI,EAAA97C,MAAAO,OAAAE,GACAs7C,EAAA/7C,MAAAO,OAAAE,IAKA4hC,EAEA,IAAAhxC,EAAA,EAAkB,EAAAA,EAAOA,IAEzBqqD,EAAArf,EAAAx4B,KACApD,EAAAw5B,EAAAyhB,GAEA,IAAArqD,GAAAyqD,EAAA1iB,aAAAxjC,KAAA,GAAA2B,GAAAwI,MAAAU,IACA,IAAApP,GAAA0qD,EAAA3iB,aAAAxjC,KAAA,GAAA2B,GAAAwI,MAAAU,GAMAob,GAAAwgB,MAAAzmC,KAAAkmD,GACAjgC,EAAAwgB,MAAAzmC,KAAAmmD,OAEK,CAkBL,GAhBA1e,EAAA,GAAA9lC,GAAA0hC,MACAoE,EAAA5sB,EAAA4rB,EAAAx4B,KACAw5B,EAAAh9B,EAAAg8B,EAAAx4B,KACAw5B,EAAAjuC,EAAAitC,EAAAx4B,KAEAk+B,IAEA7I,EAAAmD,EAAAx4B,KACAw5B,EAAAnE,cAAAA,GAMAsiB,EAAA3/B,EAAAwgB,MAAA/qC,OAEA2wC,EAEA,IAAA5wC,EAAA,EAAkB4qD,EAAA5qD,EAAeA,IAMjC,IAJA2qD,EAAAlT,EAAAlL,IAAAvsC,GAEAwqB,EAAAygB,cAAAjrC,GAAAmqD,MAEA/lD,EAAA,EAAmB,EAAAA,EAAOA,IAE1BmmD,EAAAvf,EAAAx4B,KAEAytB,EAAA0qB,EAAA,EAAAJ,GACAtrC,EAAA0rC,EAAA,EAAAJ,EAAA,GAEA5d,EAAA,GAAAzmC,GAAAwa,QAAAuf,EAAAhhB,GAEAuL,EAAAygB,cAAAjrC,GAAAmqD,GAAA5lD,KAAAooC,EAoBA,IAZAkE,IAEAyZ,EAAA,EAAAtf,EAAAx4B,KAEAw5B,EAAA7mB,OAAAtW,IACAw9B,EAAAie,KACAje,EAAAie,KACAje,EAAAie,KAKAxZ,EAEA,IAAA9wC,EAAA,EAAkB,EAAAA,EAAOA,IAEzBsqD,EAAA,EAAAtf,EAAAx4B,KAEA2S,EAAA,GAAAjf,GAAAwY,QACA2tB,EAAAie,KACAje,EAAAie,KACAje,EAAAie,IAGAte,EAAAlE,cAAAvjC,KAAA4gB,EAeA,IARA4rB,IAEAsZ,EAAArf,EAAAx4B,KACAw5B,EAAAr9B,MAAAO,OAAA05B,EAAAyhB,KAKArZ,EAEA,IAAAhxC,EAAA,EAAkB,EAAAA,EAAOA,IAEzBqqD,EAAArf,EAAAx4B,KACAw5B,EAAAjE,aAAAxjC,KAAA,GAAA2B,GAAAwI,MAAAk6B,EAAAyhB,IAMA7/B,GAAAwgB,MAAAzmC,KAAAynC,IAQA,QAAA6e,KAEA,GAAAC,GAAA7pD,SAAAw2C,EAAAqT,oBAAArT,EAAAqT,oBAAA,CAEA,IAAArT,EAAArM,YAEA,IAAA,GAAAprC,GAAA,EAAAuD,EAAAk0C,EAAArM,YAAAnrC,OAAiDsD,EAAAvD,EAAOA,GAAA8qD,EAAA,CAExD,GAAAvkD,GAAAkxC,EAAArM,YAAAprC,GACA8b,EAAAgvC,EAAA,EAAArT,EAAArM,YAAAprC,EAAA,GAAA,EACA+b,EAAA+uC,EAAA,EAAArT,EAAArM,YAAAprC,EAAA,GAAA,EACAgc,EAAA8uC,EAAA,EAAArT,EAAArM,YAAAprC,EAAA,GAAA,CAEAwqB,GAAA4gB,YAAA7mC,KAAA,GAAA2B,GAAAigB,QAAA5f,EAAAuV,EAAAC,EAAAC,IAMA,GAAAy7B,EAAApM,YAEA,IAAA,GAAArrC,GAAA,EAAAuD,EAAAk0C,EAAApM,YAAAprC,OAAiDsD,EAAAvD,EAAOA,GAAA8qD,EAAA,CAExD,GAAA1rC,GAAAq4B,EAAApM,YAAArrC,GACAgP,EAAA87C,EAAA,EAAArT,EAAApM,YAAArrC,EAAA,GAAA,EACAjC,EAAA+sD,EAAA,EAAArT,EAAApM,YAAArrC,EAAA,GAAA,EACAwjB,EAAAsnC,EAAA,EAAArT,EAAApM,YAAArrC,EAAA,GAAA,CAEAwqB,GAAA6gB,YAAA9mC,KAAA,GAAA2B,GAAAigB,QAAA/G,EAAApQ,EAAAjR,EAAAylB,IAMAgH,EAAAotB,MAAAH,EAAAG,MAEAptB,EAAAotB,OAAAptB,EAAAotB,MAAA33C,OAAA,IAAAuqB,EAAA4gB,YAAAnrC,SAAAuqB,EAAA6gB,YAAAprC,QAAAuqB,EAAA6gB,YAAAprC,SAAAuqB,EAAAE,SAAAzqB,SAEAuF,QAAAuI,KAAA,sCAAAyc,EAAAE,SAAAzqB,OAAA,mBACAuqB,EAAA6gB,YAAAprC,OAAA,uBAAAuqB,EAAA4gB,YAAAnrC,OAAA,mBAMA,QAAA8qD,GAAA54B,GAEA,GAAAlxB,SAAAw2C,EAAAvM,aAEA,IAAA,GAAAlrC,GAAA,EAAAuD,EAAAk0C,EAAAvM,aAAAjrC,OAAkDsD,EAAAvD,EAAOA,IAAA,CAEzDwqB,EAAA0gB,aAAAlrC,MACAwqB,EAAA0gB,aAAAlrC,GAAAuH,KAAAkwC,EAAAvM,aAAAlrC,GAAAuH,KACAijB,EAAA0gB,aAAAlrC,GAAA0qB,WAKA,KAAA,GAHAsgC,GAAAxgC,EAAA0gB,aAAAlrC,GAAA0qB,SACAugC,EAAAxT,EAAAvM,aAAAlrC,GAAA0qB,SAEAzL,EAAA,EAAAuuB,EAAAyd,EAAAhrD,OAA8CutC,EAAAvuB,EAAQA,GAAA,EAAA,CAEtD,GAAA8sB,GAAA,GAAA7lC,GAAAwY,OACAqtB,GAAAxlC,EAAA0kD,EAAAhsC,GAAAkT,EACA4Z,EAAAjwB,EAAAmvC,EAAAhsC,EAAA,GAAAkT,EACA4Z,EAAAhwB,EAAAkvC,EAAAhsC,EAAA,GAAAkT,EAEA64B,EAAAzmD,KAAAwnC,IAQA,GAAA9qC,SAAAw2C,EAAAyT,aAAAzT,EAAAyT,YAAAjrD,OAAA,EAAA,CAEAuF,QAAAuI,KAAA,kFAKA,KAAA,GAHAi9B,GAAAxgB,EAAAwgB,MACAkgB,EAAAzT,EAAAyT,YAAA,GAAAtiB,OAEA5oC,EAAA,EAAAuD,EAAAynC,EAAA/qC,OAAsCsD,EAAAvD,EAAOA,IAE7CgrC,EAAAhrC,GAAA2O,MAAAC,UAAAs8C,EAAA,EAAAlrD,IAQA,QAAAmrD,KAEA,GAAAC,MAGAC,IACApqD,UAAAw2C,EAAAE,WACA0T,EAAA9mD,KAAAkzC,EAAAE,WAEA12C,SAAAw2C,EAAA4T,aACA5T,EAAA4T,WAAAprD,OACAorD,EAAAA,EAAAC,OAAA7T,EAAA4T,YAEAA,EAAA9mD,KAAAkzC,EAAA4T,YAIA,KAAA,GAAArrD,GAAA,EAAmBA,EAAAqrD,EAAAprD,OAAuBD,IAAA,CAE1C,GAAAy0C,GAAAvuC,EAAAiwC,cAAAuB,eAAA2T,EAAArrD,GAAAwqB,EAAAotB,MACAnD,IAAA2W,EAAA7mD,KAAAkwC,GAKA,GAAAjqB,EAAA0gB,aAAA,CAGA,GAAAqgB,GAAArlD,EAAAiwC,cAAAgB,oCAAA3sB,EAAA0gB,aAAA,GACAkgB,GAAAA,EAAAE,OAAAC,GAIAH,EAAAnrD,OAAA,IAAAuqB,EAAA6gC,WAAAD,GAnbA,GAAA5gC,GAAA,GAAAtkB,GAAAukB,SACA0H,EAAAlxB,SAAAw2C,EAAAtlB,MAAA,EAAAslB,EAAAtlB,MAAA,CAsbA,IApbA83B,EAAA93B,GAEA04B,IACAE,EAAA54B,GACAg5B,IAEA3gC,EAAAuiB,qBACAviB,EAAA2P,wBA6aAl5B,SAAAw2C,EAAAtQ,WAAA,IAAAsQ,EAAAtQ,UAAAlnC,OAEA,OAAWuqB,SAAAA,EAIX,IAAA2c,GAAAjhC,EAAA09C,OAAAxkD,UAAAglD,cAAA3M,EAAAtQ,UAAAkd,EAAA/mD,KAAA0mD,YAEA,QAAWx5B,SAAAA,EAAA2c,UAAAA,KAcXjhC,EAAAslD,eAAA,SAAA/C,EAAAC,EAAAC,GAEA,GAAAv+B,GAAA9sB,KAEAmuD,GAAA,EAAAC,EAAA,EAAAC,EAAA,CAEAruD,MAAAsuD,QAAA3qD,OACA3D,KAAAmrD,OAAAA,EACAnrD,KAAAorD,WAAAA,EACAprD,KAAAqrD,QAAAA,EAEArrD,KAAAgsD,UAAA,SAAApF,GAEAyH,IAEAF,KAAA,GAEAxqD,SAAAmpB,EAAAwhC,SAEAxhC,EAAAwhC,QAAA1H,EAAAwH,EAAAC,GAMAF,GAAA,GAIAnuD,KAAA2rD,QAAA,SAAA/E,GAEAwH,IAEAzqD,SAAAmpB,EAAAs+B,YAEAt+B,EAAAs+B,WAAAxE,EAAAwH,EAAAC,GAIAD,IAAAC,IAEAF,GAAA,EAEAxqD,SAAAmpB,EAAAq+B,QAEAr+B,EAAAq+B,WAQAnrD,KAAA4rD,UAAA,SAAAhF,GAEAjjD,SAAAmpB,EAAAu+B,SAEAv+B,EAAAu+B,QAAAzE,KAQAh+C,EAAAsiD,sBAAA,GAAAtiD,GAAAslD,eAQAtlD,EAAA2lD,qBAAA,SAAAtD,GAEAjrD,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,uBAIAtiD,EAAA2lD,qBAAAzsD,WAEAE,YAAA4G,EAAA2lD,qBAEA5G,KAAA,SAAAf,EAAAuE,EAAAC,EAAAC,GAEA,GAAAv+B,GAAA9sB,KAEAynD,EAAA,GAAA7+C,GAAAoiD,UAAAl+B,EAAAm+B,QACAxD,GAAAG,eAAA5nD,KAAA0mD,aACAe,EAAAE,KAAAf,EAAA,SAAA6F,GAEAtB,EAAAr+B,EAAAud,MAAAJ,KAAAI,MAAAoiB,MAEGrB,EAAAC,IAIHzD,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,GAIAopC,MAAA,SAAA8P,GAEA,GAAAjtB,GAAA,GAAAtkB,GAAAykB,eAEA3J,EAAAy2B,EAAA3Q,KAAA9lB,KAEA,IAAA/f,SAAA+f,EAAA,CAEA,GAAA8qC,GAAA,GAAA7lD,GAAA+a,EAAA4gB,MAAA5gB,EAAAzO,MACAiY,GAAA6nB,SAAA,GAAAnsC,GAAA+hC,gBAAA6jB,EAAA,IAIA,GAAAlhC,GAAA6sB,EAAA3Q,KAAAlc,UAEA,KAAA,GAAAzqB,KAAAyqB,GAAA,CAEA,GAAAhI,GAAAgI,EAAAzqB,GACA2rD,EAAA,GAAA7lD,GAAA2c,EAAAgf,MAAAhf,EAAArQ,MAEAiY,GAAA+nB,aAAApyC,EAAA,GAAA+F,GAAA+hC,gBAAA6jB,EAAAlpC,EAAAC,WAIA,GAAAgqB,GAAA4K,EAAA3Q,KAAA+F,QAAA4K,EAAA3Q,KAAA4L,WAAA+E,EAAA3Q,KAAA6L,OAEA,IAAA1xC,SAAA4rC,EAEA,IAAA,GAAA7sC,GAAA,EAAAwvB,EAAAqd,EAAA5sC,OAAsCD,IAAAwvB,IAASxvB,EAAA,CAE/C,GAAA8sC,GAAAD,EAAA7sC,EAEAwqB,GAAAsoB,SAAAhG,EAAA5lC,MAAA4lC,EAAA1E,OAMA,GAAAlO,GAAAud,EAAA3Q,KAAA5M,cAEA,IAAAj5B,SAAAi5B,EAAA,CAEA,GAAAnX,GAAA,GAAA7c,GAAAwY,OAEAzd,UAAAi5B,EAAAnX,QAEAA,EAAAnU,UAAAsrB,EAAAnX,QAIAyH,EAAA0P,eAAA,GAAAh0B,GAAA6kB,OAAAhI,EAAAmX,EAAAlP,QAIA,MAAAR,KAYAtkB,EAAAo/C,eAAA,SAAAiD,GAEAjrD,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,sBACAlrD,KAAA8pC,aAIAlhC,EAAAo/C,eAAAlmD,WAEAE,YAAA4G,EAAAo/C,eAEAL,KAAA,SAAAf,EAAAuE,EAAAC,EAAAC,GAEA,GAAAv+B,GAAA9sB,KAEAynD,EAAA,GAAA7+C,GAAAoiD,UAAAl+B,EAAAm+B,QACAxD,GAAAG,eAAA5nD,KAAA0mD,aACAe,EAAAE,KAAAf,EAAA,SAAA6F,GAEAtB,EAAAr+B,EAAAud,MAAAJ,KAAAI,MAAAoiB,MAEGrB,EAAAC,IAIHzD,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,GAIA2pD,YAAA,SAAA3pD,GAEAjB,KAAA8pC,SAAA7oC,GAIAwtD,WAAA,SAAAxkD,GAEA,GAAA6/B,GAAA9pC,KAAA8pC,QAQA,OANAnmC,UAAAmmC,EAAA7/B,IAEA/B,QAAAuI,KAAA,0CAAAxG,GAIA6/B,EAAA7/B,IAIAogC,MAAA,SAAA8P,GAEA,GAAAhQ,GAAA,GAAAvhC,GAAAuxC,EAAA7V,KAmEA,IAlEA6F,EAAA9L,KAAA8b,EAAA9b,KAEA16B,SAAAw2C,EAAAlwC,OAAAkgC,EAAAlgC,KAAAkwC,EAAAlwC,MACAtG,SAAAw2C,EAAA9oC,OAAA84B,EAAA94B,MAAAO,OAAAuoC,EAAA9oC,OACA1N,SAAAw2C,EAAAgO,UAAAhe,EAAAge,SAAAv2C,OAAAuoC,EAAAgO,UACAxkD,SAAAw2C,EAAA+N,UAAA/d,EAAA+d,SAAAt2C,OAAAuoC,EAAA+N,UACAvkD,SAAAw2C,EAAAiO,YAAAje,EAAAie,UAAAjO,EAAAiO,WACAzkD,SAAAw2C,EAAAuU,WAAAvkB,EAAAukB,SAAAvU,EAAAuU,UACA/qD,SAAAw2C,EAAAwU,eAAAxkB,EAAAwkB,aAAAxU,EAAAwU,cACAhrD,SAAAw2C,EAAAyU,iBAAAzkB,EAAAykB,eAAAzU,EAAAyU,gBACAjrD,SAAAw2C,EAAA1P,eAAAN,EAAAM,aAAA0P,EAAA1P,cACA9mC,SAAAw2C,EAAA0U,UAAA1kB,EAAA0kB,QAAA1U,EAAA0U,SACAlrD,SAAAw2C,EAAA8N,WAAA9d,EAAA8d,SAAA9N,EAAA8N,UACAtkD,SAAAw2C,EAAAsQ,OAAAtgB,EAAAsgB,KAAAtQ,EAAAsQ,MACA9mD,SAAAw2C,EAAAuQ,UAAAvgB,EAAAugB,QAAAvQ,EAAAuQ,SACA/mD,SAAAw2C,EAAAwQ,cAAAxgB,EAAAwgB,YAAAxQ,EAAAwQ,aACAhnD,SAAAw2C,EAAA2U,YAAA3kB,EAAA2kB,UAAA3U,EAAA2U,WACAnrD,SAAAw2C,EAAA4U,YAAA5kB,EAAA4kB,UAAA5U,EAAA4U,WACAprD,SAAAw2C,EAAA6U,aAAA7kB,EAAA6kB,WAAA7U,EAAA6U,YACArrD,SAAAw2C,EAAA8U,YAAA9kB,EAAA8kB,UAAA9U,EAAA8U,WACAtrD,SAAAw2C,EAAA+U,qBAAA/kB,EAAA+kB,mBAAA/U,EAAA+U,oBAGAvrD,SAAAw2C,EAAAlnC,OAAAk3B,EAAAl3B,KAAAknC,EAAAlnC,MACAtP,SAAAw2C,EAAAgV,kBAAAhlB,EAAAglB,gBAAAhV,EAAAgV,iBAIAxrD,SAAAw2C,EAAAyL,MAAAzb,EAAAyb,IAAA5lD,KAAAyuD,WAAAtU,EAAAyL,MAEAjiD,SAAAw2C,EAAAiQ,WAEAjgB,EAAAigB,SAAApqD,KAAAyuD,WAAAtU,EAAAiQ,UACAjgB,EAAAwgB,aAAA,GAIAhnD,SAAAw2C,EAAAgP,UAAAhf,EAAAgf,QAAAnpD,KAAAyuD,WAAAtU,EAAAgP,UACAxlD,SAAAw2C,EAAAqP,YAAArf,EAAAqf,UAAArP,EAAAqP,WAEA7lD,SAAAw2C,EAAAsP,YAAAtf,EAAAsf,UAAAzpD,KAAAyuD,WAAAtU,EAAAsP,YACAtP,EAAA2P,cAAA3f,EAAA2f,YAAA,GAAAlhD,GAAAwa,QAAA+2B,EAAA2P,YAAA3P,EAAA2P,cAEAnmD,SAAAw2C,EAAAiV,kBAAAjlB,EAAAilB,gBAAApvD,KAAAyuD,WAAAtU,EAAAiV,kBACAzrD,SAAAw2C,EAAAkV,oBAAAllB,EAAAklB,kBAAAlV,EAAAkV,mBACA1rD,SAAAw2C,EAAAmV,mBAAAnlB,EAAAmlB,iBAAAnV,EAAAmV,kBAEA3rD,SAAAw2C,EAAA4P,cAAA5f,EAAA4f,YAAA/pD,KAAAyuD,WAAAtU,EAAA4P,cAEApmD,SAAAw2C,EAAAoV,SAEAplB,EAAAolB,OAAAvvD,KAAAyuD,WAAAtU,EAAAoV,QACAplB,EAAAqlB,QAAA5mD,EAAA2E,mBAIA4sC,EAAAsV,eAAAtlB,EAAAslB,aAAAtV,EAAAsV,cAEA9rD,SAAAw2C,EAAAsO,WAAAte,EAAAse,SAAAzoD,KAAAyuD,WAAAtU,EAAAsO,WACA9kD,SAAAw2C,EAAAuV,oBAAAvlB,EAAAulB,kBAAAvV,EAAAuV,mBAEA/rD,SAAAw2C,EAAA2O,QAAA3e,EAAA2e,MAAA9oD,KAAAyuD,WAAAtU,EAAA2O,QACAnlD,SAAAw2C,EAAAwV,iBAAAxlB,EAAAwlB,eAAAxV,EAAAwV,gBAIAhsD,SAAAw2C,EAAAtQ,UAEA,IAAA,GAAAnnC,GAAA,EAAAuD,EAAAk0C,EAAAtQ,UAAAlnC,OAA8CsD,EAAAvD,EAAOA,IAErDynC,EAAAN,UAAA5iC,KAAAjH,KAAAqqC,MAAA8P,EAAAtQ,UAAAnnC,IAMA,OAAAynC,KAYAvhC,EAAAgnD,aAAA,SAAA3E,GAEAjrD,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,sBACAlrD,KAAA+mD,YAAA,IAIAn+C,EAAAgnD,aAAA9tD,WAEAE,YAAA4G,EAAAgnD,aAEAjI,KAAA,SAAAf,EAAAuE,EAAAC,EAAAC,GAEA,KAAArrD,KAAA+mD,cAEA/mD,KAAA+mD,YAAAH,EAAAiJ,UAAA,EAAAjJ,EAAAkJ,YAAA,KAAA,GAIA,IAAAhjC,GAAA9sB,KAEAynD,EAAA,GAAA7+C,GAAAoiD,UAAAl+B,EAAAm+B,QACAxD,GAAAG,eAAA5nD,KAAA0mD,aACAe,EAAAE,KAAAf,EAAA,SAAA6F,GAEA3/B,EAAAud,MAAAJ,KAAAI,MAAAoiB,GAAAtB,IAEGC,EAAAC,IAIHqB,eAAA,SAAAzrD,GAEAjB,KAAA+mD,YAAA9lD,GAIA2mD,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,GAIAopC,MAAA,SAAA8P,EAAAgR,GAEA,GAAAvhB,GAAA5pC,KAAA+vD,gBAAA5V,EAAAvQ,YAEAG,EAAA/pC,KAAAgwD,YAAA7V,EAAApQ,OAAA,WAEApmC,SAAAwnD,GAAAA,EAAA9nD,KAIAymC,EAAA9pC,KAAAiwD,cAAA9V,EAAArQ,SAAAC,GACAF,EAAA7pC,KAAAkwD,eAAA/V,EAAAtQ,UAAAC,GAEAzmC,EAAArD,KAAAmwD,YAAAhW,EAAA92C,OAAAumC,EAAAC,EAcA,OAZAsQ,GAAA4T,aAEA1qD,EAAA0qD,WAAA/tD,KAAA6tD,gBAAA1T,EAAA4T,cAIApqD,SAAAw2C,EAAApQ,QAAA,IAAAoQ,EAAApQ,OAAApnC,SAEAgB,SAAAwnD,GAAAA,EAAA9nD,GAIAA,GAIA0sD,gBAAA,SAAA5V,GAEA,GAAAvQ,KAEA,IAAAjmC,SAAAw2C,EAKA,IAAA,GAHAiW,GAAA,GAAAxnD,GAAA0jD,WACA+D,EAAA,GAAAznD,GAAA2lD,qBAEA7rD,EAAA,EAAAuD,EAAAk0C,EAAAx3C,OAAoCsD,EAAAvD,EAAOA,IAAA,CAE3C,GAAAwqB,GACAsc,EAAA2Q,EAAAz3C,EAEA,QAAA8mC,EAAAlF,MAEA,IAAA,gBACA,IAAA,sBAEApX,EAAA,GAAAtkB,GAAA4gC,EAAAlF,MACAkF,EAAAnmB,MACAmmB,EAAAlmB,OACAkmB,EAAA8mB,cACA9mB,EAAA+mB,eAGA,MAEA,KAAA,cACA,IAAA,eAEArjC,EAAA,GAAAtkB,GAAA4nD,YACAhnB,EAAAnmB,MACAmmB,EAAAlmB,OACAkmB,EAAAinB,MACAjnB,EAAA8mB,cACA9mB,EAAA+mB,eACA/mB,EAAAknB,cAGA,MAEA,KAAA,uBAEAxjC,EAAA,GAAAtkB,GAAA+nD,qBACAnnB,EAAA9b,OACA8b,EAAAonB,SACApnB,EAAAqnB,WACArnB,EAAAsnB,YAGA,MAEA,KAAA,iBAEA5jC,EAAA,GAAAtkB,GAAAmoD,eACAvnB,EAAA9b,OACA8b,EAAAonB,SACApnB,EAAAqnB,WACArnB,EAAAsnB,YAGA,MAEA,KAAA,mBAEA5jC,EAAA,GAAAtkB,GAAAooD,iBACAxnB,EAAAynB,UACAznB,EAAA0nB,aACA1nB,EAAAlmB,OACAkmB,EAAA2nB,eACA3nB,EAAA+mB,eACA/mB,EAAA4nB,UACA5nB,EAAAqnB,WACArnB,EAAAsnB,YAGA,MAEA,KAAA,iBAEA5jC,EAAA,GAAAtkB,GAAAyoD,eACA7nB,EAAA9b,OACA8b,EAAA8mB,cACA9mB,EAAA+mB,eACA/mB,EAAA8nB,SACA9nB,EAAA+nB,UACA/nB,EAAAqnB,WACArnB,EAAAsnB,YAGA,MAEA,KAAA,uBAEA5jC,EAAA,GAAAtkB,GAAA4oD,qBACAhoB,EAAA9b,OACA8b,EAAA8mB,cACA9mB,EAAA+mB,eACA/mB,EAAA8nB,SACA9nB,EAAA+nB,UACA/nB,EAAAqnB,WACArnB,EAAAsnB,YAGA,MAEA,KAAA,uBAEA5jC,EAAA,GAAAtkB,GAAA6oD,qBACAjoB,EAAA9b,OACA8b,EAAAkoB,OAGA,MAEA,KAAA,sBAEAxkC,EAAA,GAAAtkB,GAAA+oD,oBACAnoB,EAAA9b,OACA8b,EAAAkoB,OAGA,MAEA,KAAA,qBAEAxkC,EAAA,GAAAtkB,GAAAgpD,mBACApoB,EAAA9b,OACA8b,EAAAkoB,OAGA,MAEA,KAAA,sBAEAxkC,EAAA,GAAAtkB,GAAAipD,oBACAroB,EAAA9b,OACA8b,EAAAkoB,OAGA,MAEA,KAAA,eAEAxkC,EAAA,GAAAtkB,GAAAkpD,aACAtoB,EAAAuoB,YACAvoB,EAAAwoB,YACAxoB,EAAAyoB,cACAzoB,EAAA0oB,YACA1oB,EAAAqnB,WACArnB,EAAAsnB,YAGA,MAEA,KAAA,gBAEA5jC,EAAA,GAAAtkB,GAAAupD,cACA3oB,EAAA9b,OACA8b,EAAA4oB,KACA5oB,EAAA2nB,eACA3nB,EAAA6oB,gBACA7oB,EAAA8oB,IAGA,MAEA,KAAA,oBAEAplC,EAAA,GAAAtkB,GAAA2pD,kBACA/oB,EAAA9b,OACA8b,EAAA4oB,KACA5oB,EAAA2nB,eACA3nB,EAAA6oB,gBACA7oB,EAAA9oC,EACA8oC,EAAAr3B,EACAq3B,EAAAgpB,YAGA,MAEA,KAAA,iBAEAtlC,EAAAmjC,EAAAhmB,MAAAb,EAEA,MAEA,KAAA,WAEAtc,EAAAkjC,EAAA/lB,MAAAb,EAAAA,KAAAxpC,KAAA+mD,aAAA75B,QAEA,MAEA,SAEAhlB,QAAAuI,KAAA,kDAAA+4B,EAAAlF,KAAA,IAEA,UAIApX,EAAAmR,KAAAmL,EAAAnL,KAEA16B,SAAA6lC,EAAAv/B,OAAAijB,EAAAjjB,KAAAu/B,EAAAv/B,MAEA2/B,EAAAJ,EAAAnL,MAAAnR,EAMA,MAAA0c,IAIAsmB,eAAA,SAAA/V,EAAArQ,GAEA,GAAAD,KAEA,IAAAlmC,SAAAw2C,EAAA,CAEA,GAAAsN,GAAA,GAAA7+C,GAAAo/C,cACAP,GAAAmD,YAAA9gB,EAEA,KAAA,GAAApnC,GAAA,EAAAuD,EAAAk0C,EAAAx3C,OAAoCsD,EAAAvD,EAAOA,IAAA,CAE3C,GAAAynC,GAAAsd,EAAApd,MAAA8P,EAAAz3C,GACAmnC,GAAAM,EAAA9L,MAAA8L,GAMA,MAAAN,IAIAgkB,gBAAA,SAAA1T,GAIA,IAAA,GAFA4T,MAEArrD,EAAA,EAAkBA,EAAAy3C,EAAAx3C,OAAiBD,IAAA,CAEnC,GAAAy0C,GAAAvuC,EAAAiwC,cAAAxO,MAAA8P,EAAAz3C,GAEAqrD,GAAA9mD,KAAAkwC,GAIA,MAAA4W,IAIAiC,YAAA,SAAA7V,EAAAgR,GAKA,QAAAsH,GAAA7L,GAIA,MAFA95B,GAAAm+B,QAAAe,UAAApF,GAEAa,EAAAE,KAAAf,EAAA,WAEA95B,EAAAm+B,QAAAU,QAAA/E,KATA,GAAA95B,GAAA9sB,KACA+pC,IAcA,IAAApmC,SAAAw2C,GAAAA,EAAAx3C,OAAA,EAAA,CAEA,GAAAsoD,GAAA,GAAAriD,GAAAslD,eAAA/C,GAEA1D,EAAA,GAAA7+C,GAAAujD,YAAAlB,EACAxD,GAAAG,eAAA5nD,KAAA0mD,YAEA,KAAA,GAAAhkD,GAAA,EAAAuD,EAAAk0C,EAAAx3C,OAAoCsD,EAAAvD,EAAOA,IAAA,CAE3C,GAAA0pD,GAAAjS,EAAAz3C,GACA0kD,EAAA,4BAAA2D,KAAAqB,EAAAxF,KAAAwF,EAAAxF,IAAA95B,EAAAi6B,YAAAqF,EAAAxF,GAEA7c,GAAAqiB,EAAA/tB,MAAAo0B,EAAArL,IAMA,MAAArd,IAIAkmB,cAAA,SAAA9V,EAAApQ,GAEA,QAAA2oB,GAAAzxD,GAEA,MAAA,gBAAA,GAAAA,GAEAiH,QAAAuI,KAAA,uEAAAxP,GAEA2H,EAAA3H,IAIA,GAAA6oC,KAEA,IAAAnmC,SAAAw2C,EAEA,IAAA,GAAAz3C,GAAA,EAAAuD,EAAAk0C,EAAAx3C,OAAoCsD,EAAAvD,EAAOA,IAAA,CAE3C,GAAA8mC,GAAA2Q,EAAAz3C,EAEAiB,UAAA6lC,EAAA4iB,OAEAlkD,QAAAuI,KAAA,+CAAA+4B,EAAAnL,MAIA16B,SAAAomC,EAAAP,EAAA4iB,QAEAlkD,QAAAuI,KAAA,sCAAA+4B,EAAA4iB,MAIA,IAAA7I,GAAA,GAAA36C,GAAA+pD,QAAA5oB,EAAAP,EAAA4iB,OACA7I,GAAAxY,aAAA,EAEAwY,EAAAllB,KAAAmL,EAAAnL,KAEA16B,SAAA6lC,EAAAv/B,OAAAs5C,EAAAt5C,KAAAu/B,EAAAv/B,MACAtG,SAAA6lC,EAAAopB,UAAArP,EAAAqP,QAAAF,EAAAlpB,EAAAopB,UACAjvD,SAAA6lC,EAAAt0B,SAAAquC,EAAAruC,OAAA,GAAAtM,GAAAwa,QAAAomB,EAAAt0B,OAAA,GAAAs0B,EAAAt0B,OAAA,KACAvR,SAAA6lC,EAAA6d,SAAA9D,EAAA8D,OAAA,GAAAz+C,GAAAwa,QAAAomB,EAAA6d,OAAA,GAAA7d,EAAA6d,OAAA,KACA1jD,SAAA6lC,EAAA4Z,YAAAG,EAAAH,UAAAsP,EAAAlpB,EAAA4Z,YACAz/C,SAAA6lC,EAAA2Z,YAAAI,EAAAJ,UAAAuP,EAAAlpB,EAAA2Z,YACAx/C,SAAA6lC,EAAA+d,aAAAhE,EAAAgE,WAAA/d,EAAA+d,YACAphD,MAAAggC,QAAAqD,EAAA8d,QAEA/D,EAAAsE,MAAA6K,EAAAlpB,EAAA8d,KAAA,IACA/D,EAAAuE,MAAA4K,EAAAlpB,EAAA8d,KAAA,KAIAxd,EAAAN,EAAAnL,MAAAklB,EAMA,MAAAzZ,IAIAqmB,YAAA,WAEA,GAAAxpC,GAAA,GAAA/d,GAAAge,OAEA,OAAA,UAAA4iB,EAAAI,EAAAC,GAIA,QAAAgpB,GAAA5oD,GAQA,MANAtG,UAAAimC,EAAA3/B,IAEA/B,QAAAuI,KAAA,yCAAAxG,GAIA2/B,EAAA3/B,GAIA,QAAA6oD,GAAA7oD,GAEA,MAAAtG,UAAAsG,GAEAtG,SAAAkmC,EAAA5/B,IAEA/B,QAAAuI,KAAA,yCAAAxG,GAIA4/B,EAAA5/B,IARA,OAhBA,GAAA5G,EA4BA,QAAAmmC,EAAAlF,MAEA,IAAA,QAEAjhC,EAAA,GAAAuF,GAAAmqD,KAEA,MAEA,KAAA,oBAEA1vD,EAAA,GAAAuF,GAAAk9B,kBAAA0D,EAAAhT,IAAAgT,EAAA/S,OAAA+S,EAAAnT,KAAAmT,EAAAlT,IAEA,MAEA,KAAA,qBAEAjzB,EAAA,GAAAuF,GAAAm9B,mBAAAyD,EAAAvT,KAAAuT,EAAAtT,MAAAsT,EAAApT,IAAAoT,EAAArT,OAAAqT,EAAAnT,KAAAmT,EAAAlT,IAEA,MAEA,KAAA,eAEAjzB,EAAA,GAAAuF,GAAAi9C,aAAArc,EAAAn4B,MAEA,MAEA,KAAA,mBAEAhO,EAAA,GAAAuF,GAAAk9C,iBAAAtc,EAAAn4B,MAAAm4B,EAAAgc,UAEA,MAEA,KAAA,aAEAniD,EAAA,GAAAuF,GAAAq9C,WAAAzc,EAAAn4B,MAAAm4B,EAAAgc,UAAAhc,EAAA7e,SAAA6e,EAAAic,MAEA,MAEA,KAAA,YAEApiD,EAAA,GAAAuF,GAAAs9C,UAAA1c,EAAAn4B,MAAAm4B,EAAAgc,UAAAhc,EAAA7e,SAAA6e,EAAAxpB,MAAAwpB,EAAAkc,SAAAlc,EAAAic,MAEA,MAEA,KAAA,kBAEApiD,EAAA,GAAAuF,GAAAm9C,gBAAAvc,EAAAn4B,MAAAm4B,EAAA+b,YAAA/b,EAAAgc,UAEA,MAEA,KAAA,OAEAniD,EAAA,GAAAuF,GAAAy8B,KAAAwtB,EAAArpB,EAAAtc,UAAA4lC,EAAAtpB,EAAAW,UAEA,MAEA,KAAA,MAEA9mC,EAAA,GAAAuF,GAAA28B,GAEA,MAEA,KAAA,OAEAliC,EAAA,GAAAuF,GAAA08B,KAAAutB,EAAArpB,EAAAtc,UAAA4lC,EAAAtpB,EAAAW,UAAAX,EAAAwpB,KAEA,MAEA,KAAA,aACA,IAAA,SAEA3vD,EAAA,GAAAuF,GAAA48B,OAAAqtB,EAAArpB,EAAAtc,UAAA4lC,EAAAtpB,EAAAW,UAEA,MAEA,KAAA,SAEA9mC,EAAA,GAAAuF,GAAA88B,OAAAotB,EAAAtpB,EAAAW,UAEA,MAEA,KAAA,QAEA9mC,EAAA,GAAAuF,GAAAqqD,KAEA,MAEA,SAEA5vD,EAAA,GAAAuF,GAAAw9B,SA0BA,GAtBA/iC,EAAAg7B,KAAAmL,EAAAnL,KAEA16B,SAAA6lC,EAAAv/B,OAAA5G,EAAA4G,KAAAu/B,EAAAv/B,MACAtG,SAAA6lC,EAAA7iB,QAEAA,EAAArV,UAAAk4B,EAAA7iB,QACAA,EAAAiP,UAAAvyB,EAAAsyB,SAAAtyB,EAAA0b,WAAA1b,EAAAwxB,SAIAlxB,SAAA6lC,EAAA7T,UAAAtyB,EAAAsyB,SAAArkB,UAAAk4B,EAAA7T,UACAhyB,SAAA6lC,EAAAlD,UAAAjjC,EAAAijC,SAAAh1B,UAAAk4B,EAAAlD,UACA3iC,SAAA6lC,EAAA3U,OAAAxxB,EAAAwxB,MAAAvjB,UAAAk4B,EAAA3U,QAIAlxB,SAAA6lC,EAAAxC,aAAA3jC,EAAA2jC,WAAAwC,EAAAxC,YACArjC,SAAA6lC,EAAAvC,gBAAA5jC,EAAA4jC,cAAAuC,EAAAvC,eAEAtjC,SAAA6lC,EAAAxE,UAAA3hC,EAAA2hC,QAAAwE,EAAAxE,SACArhC,SAAA6lC,EAAApC,WAAA/jC,EAAA+jC,SAAAoC,EAAApC,UAEAzjC,SAAA6lC,EAAAtE,SAEA,IAAA,GAAAuD,KAAAe,GAAAtE,SAEA7hC,EAAAkR,IAAAvU,KAAAmwD,YAAA3mB,EAAAtE,SAAAuD,GAAAmB,EAAAC,GAMA,IAAA,QAAAL,EAAAlF,KAIA,IAAA,GAFA4uB,GAAA1pB,EAAA0pB,OAEAjtD,EAAA,EAAoBA,EAAAitD,EAAAvwD,OAAmBsD,IAAA,CAEvC,GAAAktD,GAAAD,EAAAjtD,GACAwiC,EAAAplC,EAAAmlC,oBAAA,OAAA2qB,EAAA9vD,OAEAM,UAAA8kC,GAEAplC,EAAA+vD,SAAA3qB,EAAA0qB,EAAAxoC,UAQA,MAAAtnB,QAcAuF,EAAAm/C,cAAA,SAAAkD,GAEAjrD,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,uBAIAtiD,EAAAm/C,cAAAjmD,WAEAE,YAAA4G,EAAAm/C,cAEAJ,KAAA,SAAAf,EAAAuE,EAAAC,EAAAC,GAEA,GAAA9H,GAAA,GAAA36C,GAAA+pD,QAEAlL,EAAA,GAAA7+C,GAAAujD,YAAAnsD,KAAAirD,QAeA,OAdAxD,GAAAG,eAAA5nD,KAAA0mD,aACAe,EAAAE,KAAAf,EAAA,SAAAwF,GAEA7I,EAAA6I,MAAAA,EACA7I,EAAAxY,aAAA,EAEApnC,SAAAwnD,GAEAA,EAAA5H,IAIG6H,EAAAC,GAEH9H,GAIAqE,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,IAYA2H,EAAAyqD,kBAAA,SAAApI,GAEAjrD,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,uBAIAtiD,EAAAyqD,kBAAAvxD,WAEAE,YAAA4G,EAAAyqD,kBAEA1L,KAAA,SAAA2L,EAAAnI,EAAAC,EAAAC,GASA,QAAAlE,GAAAzkD,GAEA+kD,EAAAE,KAAA2L,EAAA5wD,GAAA,SAAA0pD,GAEA7I,EAAAxZ,OAAArnC,GAAA0pD,EAEA9rD,IAEA,IAAAA,IAEAijD,EAAAxY,aAAA,EAEAogB,GAAAA,EAAA5H,KAII5/C,OAAA0nD,GAvBJ,GAAA9H,GAAA,GAAA36C,GAAA2qD,gBAEA9L,EAAA,GAAA7+C,GAAAujD,WACA1E,GAAAG,eAAA5nD,KAAA0mD,YAwBA,KAAA,GAtBApmD,GAAA,EAsBAoC,EAAA,EAAkBA,EAAA4wD,EAAA3wD,SAAiBD,EAEnCykD,EAAAzkD,EAIA,OAAA6gD,IAIAqE,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,IAcA2H,EAAA4qD,kBAAA5qD,EAAA6qD,oBAAA,SAAAxI,GAEAjrD,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,sBAGAlrD,KAAA0zD,QAAA,MAIA9qD,EAAA6qD,oBAAA3xD,WAEAE,YAAA4G,EAAA6qD,oBAEA9L,KAAA,SAAAf,EAAAuE,EAAAC,EAAAC,GAEA,GAAAv+B,GAAA9sB,KAEAujD,EAAA,GAAA36C,GAAA+qD,YAEAlM,EAAA,GAAA7+C,GAAAoiD,UAAAhrD,KAAAirD,QA4DA,OA3DAxD,GAAAG,eAAA5nD,KAAA0mD,aACAe,EAAAwE,gBAAA,eAEAxE,EAAAE,KAAAf,EAAA,SAAAl4B,GAEA,GAAAklC,GAAA9mC,EAAA4mC,QAAAhlC,EAEAklC,KAEAjwD,SAAAiwD,EAAAxH,MAEA7I,EAAA6I,MAAAwH,EAAAxH,MAEIzoD,SAAAiwD,EAAApqB,OAEJ+Z,EAAA6I,MAAA/oC,MAAAuwC,EAAAvwC,MACAkgC,EAAA6I,MAAA9oC,OAAAswC,EAAAtwC,OACAigC,EAAA6I,MAAA5iB,KAAAoqB,EAAApqB,MAIA+Z,EAAAsE,MAAAlkD,SAAAiwD,EAAA/L,MAAA+L,EAAA/L,MAAAj/C,EAAAqF,oBACAs1C,EAAAuE,MAAAnkD,SAAAiwD,EAAA9L,MAAA8L,EAAA9L,MAAAl/C,EAAAqF,oBAEAs1C,EAAAJ,UAAAx/C,SAAAiwD,EAAAzQ,UAAAyQ,EAAAzQ,UAAAv6C,EAAA0F,aACAi1C,EAAAH,UAAAz/C,SAAAiwD,EAAAxQ,UAAAwQ,EAAAxQ,UAAAx6C,EAAA4F,yBAEA+0C,EAAAgE,WAAA5jD,SAAAiwD,EAAArM,WAAAqM,EAAArM,WAAA,EAEA5jD,SAAAiwD,EAAA1Q,SAEAK,EAAAL,OAAA0Q,EAAA1Q,QAGAv/C,SAAAiwD,EAAAtvB,OAEAif,EAAAjf,KAAAsvB,EAAAtvB,MAIA3gC,SAAAiwD,EAAAC,UAEAtQ,EAAAsQ,QAAAD,EAAAC,SAIA,IAAAD,EAAAE,cAEAvQ,EAAAH,UAAAx6C,EAAA0F,cAIAi1C,EAAAxY,aAAA,EAEAogB,GAAAA,EAAA5H,EAAAqQ,KAEGxI,EAAAC,GAGH9H,GAIAqE,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,IAcA2H,EAAAmrD,wBAAA,SAAA9I,GAEAjrD,KAAAirD,QAAAtnD,SAAAsnD,EAAAA,EAAAriD,EAAAsiD,sBAGAlrD,KAAA0zD,QAAA,MAKA9qD,EAAAmrD,wBAAAjyD,WAEAE,YAAA4G,EAAAmrD,wBAEApM,KAAA,SAAAf,EAAAuE,EAAAC,EAAAC,GAEA,GAAAv+B,GAAA9sB,KAEA+pC,KAEAwZ,EAAA,GAAA36C,GAAAorD,iBACAzQ,GAAA6I,MAAAriB,CAEA,IAAA0d,GAAA,GAAA7+C,GAAAoiD,UAAAhrD,KAAAirD,QAIA,IAHAxD,EAAAG,eAAA5nD,KAAA0mD,aACAe,EAAAwE,gBAAA,eAEA9lD,MAAAggC,QAAAygB,GAmCA,IAAA,GAjCAtmD,GAAA,EAEA6mD,EAAA,SAAAzkD,GAEA+kD,EAAAE,KAAAf,EAAAlkD,GAAA,SAAAgsB,GAEA,GAAAulC,GAAAnnC,EAAA4mC,QAAAhlC,GAAA,EAEAqb,GAAArnC,IACA2gB,MAAA4wC,EAAA5wC,MACAC,OAAA2wC,EAAA3wC,OACA4/B,OAAA+Q,EAAA/Q,OACA2Q,QAAAI,EAAAJ,SAGAvzD,GAAA,EAEA,IAAAA,IAEA,IAAA2zD,EAAAH,cACAvQ,EAAAH,UAAAx6C,EAAA0F,cAEAi1C,EAAAL,OAAA+Q,EAAA/Q,OACAK,EAAAxY,aAAA,EAEAogB,GAAAA,EAAA5H,KAIK6H,EAAAC,IAIL3oD,EAAA,EAAAgpB,EAAAk7B,EAAAjkD,OAAoC+oB,EAAAhpB,IAAQA,EAE5CykD,EAAAzkD,OAQA+kD,GAAAE,KAAAf,EAAA,SAAAl4B,GAEA,GAAAulC,GAAAnnC,EAAA4mC,QAAAhlC,GAAA,EAEA,IAAAulC,EAAAC,UAIA,IAAA,GAFAxmB,GAAAumB,EAAAJ,QAAAlxD,OAAAsxD,EAAAH,YAEA9kC,EAAA,EAAqB0e,EAAA1e,EAAWA,IAAA,CAEhC+a,EAAA/a,IAAqB6kC,WAErB,KAAA,GAAAnxD,GAAA,EAAsBA,EAAAuxD,EAAAH,YAA0BpxD,IAEhDqnC,EAAA/a,GAAA6kC,QAAA5sD,KAAAgtD,EAAAJ,QAAA7kC,EAAAilC,EAAAH,YAAApxD,IACAqnC,EAAA/a,GAAAk0B,OAAA+Q,EAAA/Q,OACAnZ,EAAA/a,GAAA3L,MAAA4wC,EAAA5wC,MACA0mB,EAAA/a,GAAA1L,OAAA2wC,EAAA3wC,WAQAigC,GAAA6I,MAAA/oC,MAAA4wC,EAAA5wC,MACAkgC,EAAA6I,MAAA9oC,OAAA2wC,EAAA3wC,OACAigC,EAAAsQ,QAAAI,EAAAJ,OAIA,KAAAI,EAAAH,cAEAvQ,EAAAH,UAAAx6C,EAAA0F,cAIAi1C,EAAAL,OAAA+Q,EAAA/Q,OACAK,EAAAxY,aAAA,EAEAogB,GAAAA,EAAA5H,IAEI6H,EAAAC,EAIJ,OAAA9H,IAIAqE,eAAA,SAAA3mD,GAEAjB,KAAA0mD,YAAAzlD,IAaA2H,EAAAurD,SAAA,WAEApzD,OAAAC,eAAAhB,KAAA,MAAqCiB,MAAA2H,EAAAwrD,oBAErCp0D,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAiK,KAAA,GACAjK,KAAAskC,KAAA,WAEAtkC,KAAAyqD,KAAA7hD,EAAAqC,UAEAjL,KAAA0qD,QAAA,EACA1qD,KAAA2qD,aAAA,EAEA3qD,KAAAioD,SAAAr/C,EAAA8C,eAEA1L,KAAAq0D,SAAAzrD,EAAA4D,eACAxM,KAAAs0D,SAAA1rD,EAAA6D,uBACAzM,KAAAu0D,cAAA3rD,EAAAmD,YACA/L,KAAAw0D,cAAA,KACAx0D,KAAAy0D,cAAA,KACAz0D,KAAA00D,mBAAA,KAEA10D,KAAA20D,UAAA/rD,EAAAsE,eACAlN,KAAA+uD,WAAA,EACA/uD,KAAAgvD,YAAA,EAEAhvD,KAAA40D,YAAA,EAEA50D,KAAAiyC,UAAA,KAEAjyC,KAAA60D,eAAA,EACA70D,KAAA80D,oBAAA,EACA90D,KAAA+0D,mBAAA,EAEA/0D,KAAA8uD,UAAA,EAEA9uD,KAAAg1D,SAAA,EAEAh1D,KAAAglC,SAAA,EAEAhlC,KAAAi1D,cAAA,GAIArsD,EAAAurD,SAAAryD,WAEAE,YAAA4G,EAAAurD,SAEAppB,GAAAA,eAEA,MAAA/qC,MAAAi1D,cAIAlqB,GAAAA,aAAA9pC,GAEAA,KAAA,GAAAjB,KAAAkf,SAEAlf,KAAAi1D,aAAAh0D,GAIAi0D,UAAA,SAAA3rB,GAEA,GAAA5lC,SAAA4lC,EAEA,IAAA,GAAA1mC,KAAA0mC,GAAA,CAEA,GAAA4rB,GAAA5rB,EAAA1mC,EAEA,IAAAc,SAAAwxD,EAAA,CAOA,GAAAC,GAAAp1D,KAAA6C,EAEAc,UAAAyxD,EAOAA,YAAAxsD,GAAAwI,MAEAgkD,EAAA7jD,IAAA4jD,GAEIC,YAAAxsD,GAAAwY,SAAA+zC,YAAAvsD,GAAAwY,QAEJg0C,EAAAzjD,KAAAwjD,GAEI,aAAAtyD,EAGJ7C,KAAA6C,GAAAgH,OAAAsrD,GAIAn1D,KAAA6C,GAAAsyD,EApBAjtD,QAAAuI,KAAA,SAAAzQ,KAAAskC,KAAA,MAAAzhC,EAAA,6CATAqF,SAAAuI,KAAA,oBAAA5N,EAAA,+BAqCAsmC,OAAA,SAAAC,GAEA,GAAAI,IACAC,UACApoC,QAAA,IACAijC,KAAA,WACA0F,UAAA,mBA0DA,OArDAR,GAAAnL,KAAAr+B,KAAAq+B,KACAmL,EAAAlF,KAAAtkC,KAAAskC,KACA,KAAAtkC,KAAAiK,OAAAu/B,EAAAv/B,KAAAjK,KAAAiK,MAEAjK,KAAAqR,gBAAAzI,GAAAwI,QAAAo4B,EAAAn4B,MAAArR,KAAAqR,MAAAuC,UACA5T,KAAAmoD,mBAAAv/C,GAAAwI,QAAAo4B,EAAA2e,SAAAnoD,KAAAmoD,SAAAv0C,UACA5T,KAAAkoD,mBAAAt/C,GAAAwI,QAAAo4B,EAAA0e,SAAAloD,KAAAkoD,SAAAt0C,UACAjQ,SAAA3D,KAAAooD,YAAA5e,EAAA4e,UAAApoD,KAAAooD,WAEApoD,KAAA4lD,cAAAh9C,GAAA+pD,UAAAnpB,EAAAoc,IAAA5lD,KAAA4lD,IAAAzc,OAAAC,GAAA/K,MACAr+B,KAAAoqD,mBAAAxhD,GAAA+pD,UAAAnpB,EAAA4gB,SAAApqD,KAAAoqD,SAAAjhB,OAAAC,GAAA/K,MACAr+B,KAAAyoD,mBAAA7/C,GAAA+pD,UAAAnpB,EAAAif,SAAAzoD,KAAAyoD,SAAAtf,OAAAC,GAAA/K,MACAr+B,KAAAmpD,kBAAAvgD,GAAA+pD,UAEAnpB,EAAA2f,QAAAnpD,KAAAmpD,QAAAhgB,OAAAC,GAAA/K,KACAmL,EAAAggB,UAAAxpD,KAAAwpD,WAGAxpD,KAAAypD,oBAAA7gD,GAAA+pD,UAEAnpB,EAAAigB,UAAAzpD,KAAAypD,UAAAtgB,OAAAC,GAAA/K,KACAmL,EAAAsgB,YAAA9pD,KAAA8pD,aAGA9pD,KAAAovD,0BAAAxmD,GAAA+pD,UAEAnpB,EAAA4lB,gBAAApvD,KAAAovD,gBAAAjmB,OAAAC,GAAA/K,KACAmL,EAAA6lB,kBAAArvD,KAAAqvD,kBACA7lB,EAAA8lB,iBAAAtvD,KAAAsvD,kBAGAtvD,KAAA+pD,sBAAAnhD,GAAA+pD,UAAAnpB,EAAAugB,YAAA/pD,KAAA+pD,YAAA5gB,OAAAC,GAAA/K,MACAr+B,KAAAuvD,iBAAA3mD,GAAA+pD,UAEAnpB,EAAA+lB,OAAAvvD,KAAAuvD,OAAApmB,OAAAC,GAAA/K,KACAmL,EAAAimB,aAAAzvD,KAAAyvD,cAIA9rD,SAAA3D,KAAAiT,OAAAu2B,EAAAv2B,KAAAjT,KAAAiT,MACAtP,SAAA3D,KAAAmvD,kBAAA3lB,EAAA2lB,gBAAAnvD,KAAAmvD,iBAEAxrD,SAAA3D,KAAAyqC,cAAAzqC,KAAAyqC,eAAA7hC,EAAA0C,WAAAk+B,EAAAiB,aAAAzqC,KAAAyqC,cACA9mC,SAAA3D,KAAA6uD,SAAA7uD,KAAA6uD,UAAAjmD,EAAAyC,gBAAAm+B,EAAAqlB,QAAA7uD,KAAA6uD,SACAlrD,SAAA3D,KAAAioD,UAAAjoD,KAAAioD,WAAAr/C,EAAA8C,iBAAA89B,EAAAye,SAAAjoD,KAAAioD,UACAtkD,SAAA3D,KAAAyqD,MAAAzqD,KAAAyqD,OAAA7hD,EAAAqC,YAAAu+B,EAAAihB,KAAAzqD,KAAAyqD,MAEAzqD,KAAA0qD,QAAA,IAAAlhB,EAAAkhB,QAAA1qD,KAAA0qD,SACA1qD,KAAA2qD,eAAA,IAAAnhB,EAAAmhB,YAAA3qD,KAAA2qD,aACA3qD,KAAA8uD,UAAA,IAAAtlB,EAAAslB,UAAA9uD,KAAA8uD,WACA9uD,KAAAivD,aAAA,IAAAzlB,EAAAylB,UAAAjvD,KAAAivD,WACAjvD,KAAAkvD,mBAAA,IAAA1lB,EAAA0lB,mBAAAlvD,KAAAkvD,oBAEA1lB,GAIAp2B,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAy4B,GAkCA,MAhCApqC,MAAAiK,KAAAmgC,EAAAngC,KAEAjK,KAAAyqD,KAAArgB,EAAAqgB,KAEAzqD,KAAA0qD,QAAAtgB,EAAAsgB,QACA1qD,KAAA2qD,YAAAvgB,EAAAugB,YAEA3qD,KAAAioD,SAAA7d,EAAA6d,SAEAjoD,KAAAq0D,SAAAjqB,EAAAiqB,SACAr0D,KAAAs0D,SAAAlqB,EAAAkqB,SACAt0D,KAAAu0D,cAAAnqB,EAAAmqB,cACAv0D,KAAAw0D,cAAApqB,EAAAoqB,cACAx0D,KAAAy0D,cAAArqB,EAAAqqB,cACAz0D,KAAA00D,mBAAAtqB,EAAAsqB,mBAEA10D,KAAA20D,UAAAvqB,EAAAuqB,UACA30D,KAAA+uD,UAAA3kB,EAAA2kB,UACA/uD,KAAAgvD,WAAA5kB,EAAA4kB,WAEAhvD,KAAAiyC,UAAA7H,EAAA6H,UAEAjyC,KAAA60D,cAAAzqB,EAAAyqB,cACA70D,KAAA80D,oBAAA1qB,EAAA0qB,oBACA90D,KAAA+0D,mBAAA3qB,EAAA2qB,mBAEA/0D,KAAA8uD,UAAA1kB,EAAA0kB,UAEA9uD,KAAAg1D,SAAA5qB,EAAA4qB,SAEAh1D,KAAAglC,QAAAoF,EAAApF,QAEAhlC,MAIAkf,OAAA,WAEAlf,KAAAqkC,eAAuBC,KAAA,YAIvBwP,QAAA,WAEA9zC,KAAAqkC,eAAuBC,KAAA,aAMvB+wB,GAAAA,cAEAntD,QAAAuI,KAAA,SAAAzQ,KAAAskC,KAAA,oCAIA+wB,GAAAA,YAAAC,GAEAptD,QAAAuI,KAAA,SAAAzQ,KAAAskC,KAAA,oCAIAixB,GAAAA,WAGA,MADArtD,SAAAuI,KAAA,SAAAzQ,KAAAskC,KAAA,gCACA,GAAA17B,GAAAwI,QAMAxI,EAAAq7B,gBAAAniC,UAAA+E,MAAA+B,EAAAurD,SAAAryD,WAEA8G,EAAAwrD,gBAAA,EA0BAxrD,EAAA4sD,kBAAA,SAAAriB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP,MAEAA,KAAAskC,KAAA,oBAEAtkC,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAA,UAEApR,KAAAy1D,UAAA,EACAz1D,KAAA01D,QAAA,QACA11D,KAAA21D,SAAA,QAEA31D,KAAAyqC,aAAA7hC,EAAA0C,SAEAtL,KAAA41D,KAAA,EAEA51D,KAAAk1D,UAAA/hB,IAIAvqC,EAAA4sD,kBAAA1zD,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAA4sD,kBAAA1zD,UAAAE,YAAA4G,EAAA4sD,kBAEA5sD,EAAA4sD,kBAAA1zD,UAAA6P,KAAA,SAAAy4B,GAcA,MAZAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAqR,MAAAM,KAAAy4B,EAAA/4B,OAEArR,KAAAy1D,UAAArrB,EAAAqrB,UACAz1D,KAAA01D,QAAAtrB,EAAAsrB,QACA11D,KAAA21D,SAAAvrB,EAAAurB,SAEA31D,KAAAyqC,aAAAL,EAAAK,aAEAzqC,KAAA41D,IAAAxrB,EAAAwrB,IAEA51D,MA6BA4I,EAAAitD,mBAAA,SAAA1iB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP,MAEAA,KAAAskC,KAAA,qBAEAtkC,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAA,UAEApR,KAAAy1D,UAAA,EAEAz1D,KAAA60B,MAAA,EACA70B,KAAA81D,SAAA,EACA91D,KAAA+1D,QAAA,EAEA/1D,KAAAyqC,cAAA,EAEAzqC,KAAA41D,KAAA,EAEA51D,KAAAk1D,UAAA/hB,IAIAvqC,EAAAitD,mBAAA/zD,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAAitD,mBAAA/zD,UAAAE,YAAA4G,EAAAitD,mBAEAjtD,EAAAitD,mBAAA/zD,UAAA6P,KAAA,SAAAy4B,GAgBA,MAdAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAqR,MAAAM,KAAAy4B,EAAA/4B,OAEArR,KAAAy1D,UAAArrB,EAAAqrB,UAEAz1D,KAAA60B,MAAAuV,EAAAvV,MACA70B,KAAA81D,SAAA1rB,EAAA0rB,SACA91D,KAAA+1D,QAAA3rB,EAAA2rB,QAEA/1D,KAAAyqC,aAAAL,EAAAK,aAEAzqC,KAAA41D,IAAAxrB,EAAAwrB,IAEA51D,MA4CA4I,EAAAotD,kBAAA,SAAA7iB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP,MAEAA,KAAAskC,KAAA,oBAEAtkC,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAA,UAEApR,KAAA4lD,IAAA,KAEA5lD,KAAA8oD,MAAA,KACA9oD,KAAA2vD,eAAA,EAEA3vD,KAAA+pD,YAAA,KAEA/pD,KAAAoqD,SAAA,KAEApqD,KAAAuvD,OAAA,KACAvvD,KAAAwvD,QAAA5mD,EAAA2E,kBACAvN,KAAAyvD,aAAA,EACAzvD,KAAAi2D,gBAAA,IAEAj2D,KAAA41D,KAAA,EAEA51D,KAAA6uD,QAAAjmD,EAAAyC,cAEArL,KAAAivD,WAAA,EACAjvD,KAAAkvD,mBAAA,EACAlvD,KAAAk2D,iBAAA,QACAl2D,KAAAm2D,kBAAA,QAEAn2D,KAAAyqC,aAAA7hC,EAAA0C,SAEAtL,KAAAo2D,UAAA,EACAp2D,KAAA4tC,cAAA,EAEA5tC,KAAAk1D,UAAA/hB,IAIAvqC,EAAAotD,kBAAAl0D,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAAotD,kBAAAl0D,UAAAE,YAAA4G,EAAAotD,kBAEAptD,EAAAotD,kBAAAl0D,UAAA6P,KAAA,SAAAy4B,GAkCA,MAhCAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAqR,MAAAM,KAAAy4B,EAAA/4B,OAEArR,KAAA4lD,IAAAxb,EAAAwb,IAEA5lD,KAAA8oD,MAAA1e,EAAA0e,MACA9oD,KAAA2vD,eAAAvlB,EAAAulB,eAEA3vD,KAAA+pD,YAAA3f,EAAA2f,YAEA/pD,KAAAoqD,SAAAhgB,EAAAggB,SAEApqD,KAAAuvD,OAAAnlB,EAAAmlB,OACAvvD,KAAAwvD,QAAAplB,EAAAolB,QACAxvD,KAAAyvD,aAAArlB,EAAAqlB,aACAzvD,KAAAi2D,gBAAA7rB,EAAA6rB,gBAEAj2D,KAAA41D,IAAAxrB,EAAAwrB,IAEA51D,KAAA6uD,QAAAzkB,EAAAykB,QAEA7uD,KAAAivD,UAAA7kB,EAAA6kB,UACAjvD,KAAAkvD,mBAAA9kB,EAAA8kB,mBACAlvD,KAAAk2D,iBAAA9rB,EAAA8rB,iBACAl2D,KAAAm2D,kBAAA/rB,EAAA+rB,kBAEAn2D,KAAAyqC,aAAAL,EAAAK,aAEAzqC,KAAAo2D,SAAAhsB,EAAAgsB,SACAp2D,KAAA4tC,aAAAxD,EAAAwD,aAEA5tC,MA2CA4I,EAAAytD,oBAAA,SAAAljB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP,MAEAA,KAAAskC,KAAA,sBAEAtkC,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAA,UACApR,KAAAmoD,SAAA,GAAAv/C,GAAAwI,MAAA,GAEApR,KAAA4lD,IAAA,KAEA5lD,KAAA+pD,YAAA,KAEA/pD,KAAAoqD,SAAA,KAEApqD,KAAAuvD,OAAA,KACAvvD,KAAAwvD,QAAA5mD,EAAA2E,kBACAvN,KAAAyvD,aAAA,EACAzvD,KAAAi2D,gBAAA,IAEAj2D,KAAA41D,KAAA,EAEA51D,KAAAivD,WAAA,EACAjvD,KAAAkvD,mBAAA,EACAlvD,KAAAk2D,iBAAA,QACAl2D,KAAAm2D,kBAAA,QAEAn2D,KAAAyqC,aAAA7hC,EAAA0C,SAEAtL,KAAAo2D,UAAA,EACAp2D,KAAA4tC,cAAA,EACA5tC,KAAA6tC,cAAA,EAEA7tC,KAAAk1D,UAAA/hB,IAIAvqC,EAAAytD,oBAAAv0D,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAAytD,oBAAAv0D,UAAAE,YAAA4G,EAAAytD,oBAEAztD,EAAAytD,oBAAAv0D,UAAA6P,KAAA,SAAAy4B,GA+BA,MA7BAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAqR,MAAAM,KAAAy4B,EAAA/4B,OACArR,KAAAmoD,SAAAx2C,KAAAy4B,EAAA+d,UAEAnoD,KAAA4lD,IAAAxb,EAAAwb,IAEA5lD,KAAA+pD,YAAA3f,EAAA2f,YAEA/pD,KAAAoqD,SAAAhgB,EAAAggB,SAEApqD,KAAAuvD,OAAAnlB,EAAAmlB,OACAvvD,KAAAwvD,QAAAplB,EAAAolB,QACAxvD,KAAAyvD,aAAArlB,EAAAqlB,aACAzvD,KAAAi2D,gBAAA7rB,EAAA6rB,gBAEAj2D,KAAA41D,IAAAxrB,EAAAwrB,IAEA51D,KAAAivD,UAAA7kB,EAAA6kB,UACAjvD,KAAAkvD,mBAAA9kB,EAAA8kB,mBACAlvD,KAAAk2D,iBAAA9rB,EAAA8rB,iBACAl2D,KAAAm2D,kBAAA/rB,EAAA+rB,kBAEAn2D,KAAAyqC,aAAAL,EAAAK,aAEAzqC,KAAAo2D,SAAAhsB,EAAAgsB,SACAp2D,KAAA4tC,aAAAxD,EAAAwD,aACA5tC,KAAA6tC,aAAAzD,EAAAyD,aAEA7tC,MAgEA4I,EAAA0tD,kBAAA,SAAAnjB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP,MAEAA,KAAAskC,KAAA,oBAEAtkC,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAA,UACApR,KAAAmoD,SAAA,GAAAv/C,GAAAwI,MAAA,GACApR,KAAAkoD,SAAA,GAAAt/C,GAAAwI,MAAA,SACApR,KAAAooD,UAAA,GAEApoD,KAAAu2D,OAAA,EAEAv2D,KAAA4lD,IAAA,KAEA5lD,KAAAyoD,SAAA,KACAzoD,KAAA0vD,kBAAA,EAEA1vD,KAAA8oD,MAAA,KACA9oD,KAAA2vD,eAAA,EAEA3vD,KAAAw2D,YAAA,KAEAx2D,KAAAmpD,QAAA,KACAnpD,KAAAwpD,UAAA,EAEAxpD,KAAAypD,UAAA,KACAzpD,KAAA8pD,YAAA,GAAAlhD,GAAAwa,QAAA,EAAA,GAEApjB,KAAAovD,gBAAA,KACApvD,KAAAqvD,kBAAA,EACArvD,KAAAsvD,iBAAA,EAEAtvD,KAAA+pD,YAAA,KAEA/pD,KAAAoqD,SAAA,KAEApqD,KAAAuvD,OAAA,KACAvvD,KAAAwvD,QAAA5mD,EAAA2E,kBACAvN,KAAAyvD,aAAA,EACAzvD,KAAAi2D,gBAAA,IAEAj2D,KAAA41D,KAAA,EAEA51D,KAAA6uD,QAAAjmD,EAAAyC,cAEArL,KAAAivD,WAAA,EACAjvD,KAAAkvD,mBAAA,EACAlvD,KAAAk2D,iBAAA,QACAl2D,KAAAm2D,kBAAA,QAEAn2D,KAAAyqC,aAAA7hC,EAAA0C,SAEAtL,KAAAo2D,UAAA,EACAp2D,KAAA4tC,cAAA,EACA5tC,KAAA6tC,cAAA,EAEA7tC,KAAAk1D,UAAA/hB,IAIAvqC,EAAA0tD,kBAAAx0D,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAA0tD,kBAAAx0D,UAAAE,YAAA4G,EAAA0tD,kBAEA1tD,EAAA0tD,kBAAAx0D,UAAA6P,KAAA,SAAAy4B,GAuDA,MArDAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAqR,MAAAM,KAAAy4B,EAAA/4B,OACArR,KAAAmoD,SAAAx2C,KAAAy4B,EAAA+d,UACAnoD,KAAAkoD,SAAAv2C,KAAAy4B,EAAA8d,UACAloD,KAAAooD,UAAAhe,EAAAge,UAEApoD,KAAAu2D,MAAAnsB,EAAAmsB,MAEAv2D,KAAA4lD,IAAAxb,EAAAwb,IAEA5lD,KAAAyoD,SAAAre,EAAAqe,SACAzoD,KAAA0vD,kBAAAtlB,EAAAslB,kBAEA1vD,KAAA8oD,MAAA1e,EAAA0e,MACA9oD,KAAA2vD,eAAAvlB,EAAAulB,eAEA3vD,KAAAw2D,YAAApsB,EAAAosB,YAEAx2D,KAAAmpD,QAAA/e,EAAA+e,QACAnpD,KAAAwpD,UAAApf,EAAAof,UAEAxpD,KAAAypD,UAAArf,EAAAqf,UACAzpD,KAAA8pD,YAAAn4C,KAAAy4B,EAAA0f,aAEA9pD,KAAAovD,gBAAAhlB,EAAAglB,gBACApvD,KAAAqvD,kBAAAjlB,EAAAilB,kBACArvD,KAAAsvD,iBAAAllB,EAAAklB,iBAEAtvD,KAAA+pD,YAAA3f,EAAA2f,YAEA/pD,KAAAoqD,SAAAhgB,EAAAggB,SAEApqD,KAAAuvD,OAAAnlB,EAAAmlB,OACAvvD,KAAAwvD,QAAAplB,EAAAolB,QACAxvD,KAAAyvD,aAAArlB,EAAAqlB,aACAzvD,KAAAi2D,gBAAA7rB,EAAA6rB,gBAEAj2D,KAAA41D,IAAAxrB,EAAAwrB,IAEA51D,KAAA6uD,QAAAzkB,EAAAykB,QAEA7uD,KAAAivD,UAAA7kB,EAAA6kB,UACAjvD,KAAAkvD,mBAAA9kB,EAAA8kB,mBACAlvD,KAAAk2D,iBAAA9rB,EAAA8rB,iBACAl2D,KAAAm2D,kBAAA/rB,EAAA+rB,kBAEAn2D,KAAAyqC,aAAAL,EAAAK,aAEAzqC,KAAAo2D,SAAAhsB,EAAAgsB,SACAp2D,KAAA4tC,aAAAxD,EAAAwD,aACA5tC,KAAA6tC,aAAAzD,EAAAyD,aAEA7tC,MAsBA4I,EAAA6tD,kBAAA,SAAAtjB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP,MAEAA,KAAAskC,KAAA,oBAEAtkC,KAAA4tC,cAAA,EACA5tC,KAAAivD,WAAA,EACAjvD,KAAAkvD,mBAAA,EAEAlvD,KAAAk1D,UAAA/hB,IAIAvqC,EAAA6tD,kBAAA30D,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAA6tD,kBAAA30D,UAAAE,YAAA4G,EAAA6tD,kBAEA7tD,EAAA6tD,kBAAA30D,UAAA6P,KAAA,SAAAy4B,GAOA,MALAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAivD,UAAA7kB,EAAA6kB,UACAjvD,KAAAkvD,mBAAA9kB,EAAA8kB,mBAEAlvD,MAsBA4I,EAAA8tD,mBAAA,SAAAvjB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP,KAAAmzC,GAEAnzC,KAAAskC,KAAA,qBAEAtkC,KAAAivD,WAAA,EACAjvD,KAAAkvD,mBAAA,EAEAlvD,KAAA4tC,cAAA,EAEA5tC,KAAAk1D,UAAA/hB,IAIAvqC,EAAA8tD,mBAAA50D,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAA8tD,mBAAA50D,UAAAE,YAAA4G,EAAA8tD,mBAEA9tD,EAAA8tD,mBAAA50D,UAAA6P,KAAA,SAAAy4B,GAOA,MALAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAivD,UAAA7kB,EAAA6kB,UACAjvD,KAAAkvD,mBAAA9kB,EAAA8kB,mBAEAlvD,MAUA4I,EAAA+tD,cAAA,SAAA9sB,GAEA7pC,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAskC,KAAA,gBAEAtkC,KAAA6pC,UAAAA,YAAA1jC,OAAA0jC,KAEA7pC,KAAAglC,SAAA,GAIAp8B,EAAA+tD,cAAA70D,WAEAE,YAAA4G,EAAA+tD,cAEAxtB,OAAA,WAaA,IAAA,GAXAQ,IACAF,UACApoC,QAAA,IACAijC,KAAA,WACA0F,UAAA,oBAEA3L,KAAAr+B,KAAAq+B,KACAiG,KAAAtkC,KAAAskC,KACAuF,cAGAnnC,EAAA,EAAAuD,EAAAjG,KAAA6pC,UAAAlnC,OAA6CsD,EAAAvD,EAAOA,IAEpDinC,EAAAE,UAAA5iC,KAAAjH,KAAA6pC,UAAAnnC,GAAAymC,SAMA,OAFAQ,GAAA3E,QAAAhlC,KAAAglC,QAEA2E,GAIAv2B,MAAA,WAIA,IAAA,GAFA+2B,GAAA,GAAAnqC,MAAAgC,YAEAU,EAAA,EAAkBA,EAAA1C,KAAA6pC,UAAAlnC,OAA2BD,IAE7CynC,EAAAN,UAAA5iC,KAAAjH,KAAA6pC,UAAAnnC,GAAA0Q,QAMA,OAFA+2B,GAAAnF,QAAAhlC,KAAAglC,QAEAmF,IAQAvhC,EAAAguD,iBAAAhuD,EAAA+tD,cA0BA/tD,EAAAiuD,eAAA,SAAA1jB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP,MAEAA,KAAAskC,KAAA,iBAEAtkC,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAA,UAEApR,KAAA4lD,IAAA,KAEA5lD,KAAAiT,KAAA,EACAjT,KAAAmvD,iBAAA,EAEAnvD,KAAAyqC,aAAA7hC,EAAA0C,SAEAtL,KAAA41D,KAAA,EAEA51D,KAAAk1D,UAAA/hB,IAIAvqC,EAAAiuD,eAAA/0D,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAAiuD,eAAA/0D,UAAAE,YAAA4G,EAAAiuD,eAEAjuD,EAAAiuD,eAAA/0D,UAAA6P,KAAA,SAAAy4B,GAeA,MAbAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAqR,MAAAM,KAAAy4B,EAAA/4B,OAEArR,KAAA4lD,IAAAxb,EAAAwb,IAEA5lD,KAAAiT,KAAAm3B,EAAAn3B,KACAjT,KAAAmvD,gBAAA/kB,EAAA+kB,gBAEAnvD,KAAAyqC,aAAAL,EAAAK,aAEAzqC,KAAA41D,IAAAxrB,EAAAwrB,IAEA51D,MAMA4I,EAAAkuD,mBAAA,SAAA3jB,GAGA,MADAjrC,SAAAuI,KAAA,sEACA,GAAA7H,GAAAiuD,eAAA1jB,IAIAvqC,EAAAmuD,sBAAA,SAAA5jB,GAGA,MADAjrC,SAAAuI,KAAA,yEACA,GAAA7H,GAAAiuD,eAAA1jB,IAIAvqC,EAAAouD,uBAAA,SAAA7jB,GAGA,MADAjrC,SAAAuI,KAAA,0EACA,GAAA7H,GAAAiuD,eAAA1jB,IAoCAvqC,EAAAquD,eAAA,SAAA9jB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP;AAEAA,KAAAskC,KAAA,iBAEAtkC,KAAAk3D,WACAl3D,KAAA0uD,YAEA1uD,KAAA2uD,aAAA,+FACA3uD,KAAA4uD,eAAA,gEAEA5uD,KAAA6uD,QAAAjmD,EAAAyC,cAEArL,KAAAy1D,UAAA,EAEAz1D,KAAAivD,WAAA,EACAjvD,KAAAkvD,mBAAA,EAEAlvD,KAAA41D,KAAA,EAEA51D,KAAAm3D,QAAA,EAEAn3D,KAAAyqC,aAAA7hC,EAAA0C,SAEAtL,KAAAo2D,UAAA,EAEAp2D,KAAA4tC,cAAA,EACA5tC,KAAA6tC,cAAA,EAEA7tC,KAAAo3D,aAAA,EAIAp3D,KAAAq3D,wBACAhmD,OAAA,EAAA,EAAA,GACAg+B,IAAA,EAAA,GACAC,KAAA,EAAA,IAGAtvC,KAAAs3D,oBAAA3zD,OAEAA,SAAAwvC,IAEAxvC,SAAAwvC,EAAA7lB,YAEAplB,QAAAoI,MAAA,2FAIAtQ,KAAAk1D,UAAA/hB,KAMAvqC,EAAAquD,eAAAn1D,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAAquD,eAAAn1D,UAAAE,YAAA4G,EAAAquD,eAEAruD,EAAAquD,eAAAn1D,UAAA6P,KAAA,SAAAy4B,GA8BA,MA5BAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAA4uD,eAAAxkB,EAAAwkB,eACA5uD,KAAA2uD,aAAAvkB,EAAAukB,aAEA3uD,KAAA0uD,SAAA9lD,EAAA2uD,cAAAnkD,MAAAg3B,EAAAskB,UAEA1uD,KAAAstB,WAAA8c,EAAA9c,WACAttB,KAAAk3D,QAAA9sB,EAAA8sB,QAEAl3D,KAAA6uD,QAAAzkB,EAAAykB,QAEA7uD,KAAAivD,UAAA7kB,EAAA6kB,UACAjvD,KAAAkvD,mBAAA9kB,EAAA8kB,mBAEAlvD,KAAA41D,IAAAxrB,EAAAwrB,IAEA51D,KAAAm3D,OAAA/sB,EAAA+sB,OAEAn3D,KAAAyqC,aAAAL,EAAAK,aAEAzqC,KAAAo2D,SAAAhsB,EAAAgsB,SAEAp2D,KAAA4tC,aAAAxD,EAAAwD,aACA5tC,KAAA6tC,aAAAzD,EAAAyD,aAEA7tC,KAAAo3D,YAAAhtB,EAAAgtB,YAEAp3D,MAIA4I,EAAAquD,eAAAn1D,UAAAqnC,OAAA,SAAAC,GAEA,GAAAI,GAAA5gC,EAAAurD,SAAAryD,UAAAqnC,OAAA5oC,KAAAP,KAAAopC,EAOA,OALAI,GAAAklB,SAAA1uD,KAAA0uD,SACAllB,EAAAlc,WAAAttB,KAAAstB,WACAkc,EAAAmlB,aAAA3uD,KAAA2uD,aACAnlB,EAAAolB,eAAA5uD,KAAA4uD,eAEAplB,GAUA5gC,EAAA4uD,kBAAA,SAAArkB,GAEAvqC,EAAAquD,eAAA12D,KAAAP,KAAAmzC,GAEAnzC,KAAAskC,KAAA,qBAIA17B,EAAA4uD,kBAAA11D,UAAAf,OAAAgB,OAAA6G,EAAAquD,eAAAn1D,WACA8G,EAAA4uD,kBAAA11D,UAAAE,YAAA4G,EAAA4uD,kBAsBA5uD,EAAA6uD,eAAA,SAAAtkB,GAEAvqC,EAAAurD,SAAA5zD,KAAAP,MAEAA,KAAAskC,KAAA,iBAEAtkC,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAA,UACApR,KAAA4lD,IAAA,KAEA5lD,KAAAsmC,SAAA,EAEAtmC,KAAA41D,KAAA,EAIA51D,KAAAk1D,UAAA/hB,IAIAvqC,EAAA6uD,eAAA31D,UAAAf,OAAAgB,OAAA6G,EAAAurD,SAAAryD,WACA8G,EAAA6uD,eAAA31D,UAAAE,YAAA4G,EAAA6uD,eAEA7uD,EAAA6uD,eAAA31D,UAAA6P,KAAA,SAAAy4B,GAWA,MATAxhC,GAAAurD,SAAAryD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAqR,MAAAM,KAAAy4B,EAAA/4B,OACArR,KAAA4lD,IAAAxb,EAAAwb,IAEA5lD,KAAAsmC,SAAA8D,EAAA9D,SAEAtmC,KAAA41D,IAAAxrB,EAAAwrB,IAEA51D,MAYA4I,EAAA+pD,QAAA,SAAAvG,EAAAwG,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAF,EAAA5e,EAAAijB,GAEAxmD,OAAAC,eAAAhB,KAAA,MAAqCiB,MAAA2H,EAAA8uD,mBAErC13D,KAAAq+B,KAAAz1B,EAAAY,KAAA00B,eAEAl+B,KAAAiK,KAAA,GACAjK,KAAA23D,WAAA,GAEA33D,KAAAosD,MAAAzoD,SAAAyoD,EAAAA,EAAAxjD,EAAA+pD,QAAAiF,cACA53D,KAAA6zD,WAEA7zD,KAAA4yD,QAAAjvD,SAAAivD,EAAAA,EAAAhqD,EAAA+pD,QAAAkF,gBAEA73D,KAAA6nD,MAAAlkD,SAAAkkD,EAAAA,EAAAj/C,EAAAqF,oBACAjO,KAAA8nD,MAAAnkD,SAAAmkD,EAAAA,EAAAl/C,EAAAqF,oBAEAjO,KAAAmjD,UAAAx/C,SAAAw/C,EAAAA,EAAAv6C,EAAA0F,aACAtO,KAAAojD,UAAAz/C,SAAAy/C,EAAAA,EAAAx6C,EAAA4F,yBAEAxO,KAAAunD,WAAA5jD,SAAA4jD,EAAAA,EAAA,EAEAvnD,KAAAkjD,OAAAv/C,SAAAu/C,EAAAA,EAAAt6C,EAAA0G,WACAtP,KAAAskC,KAAA3gC,SAAA2gC,EAAAA,EAAA17B,EAAA6F,iBAEAzO,KAAAkV,OAAA,GAAAtM,GAAAwa,QAAA,EAAA,GACApjB,KAAAqnD,OAAA,GAAAz+C,GAAAwa,QAAA,EAAA,GAEApjB,KAAAsjD,iBAAA,EACAtjD,KAAA83D,kBAAA,EACA93D,KAAA+3D,OAAA,EACA/3D,KAAAg4D,gBAAA,EAEAh4D,KAAAqB,QAAA,EACArB,KAAAi4D,SAAA,MAIArvD,EAAA+pD,QAAAiF,cAAAj0D,OACAiF,EAAA+pD,QAAAkF,gBAAAjvD,EAAA8E,UAEA9E,EAAA+pD,QAAA7wD,WAEAE,YAAA4G,EAAA+pD,QAEA5nB,GAAAA,aAAA9pC,GAEAA,KAAA,GAAAjB,KAAAqB,WAIA+R,MAAA,WAEA,OAAA,GAAApT,MAAAgC,aAAA2P,KAAA3R,OAIA2R,KAAA,SAAAy4B,GA0BA,MAxBApqC,MAAAosD,MAAAhiB,EAAAgiB,MACApsD,KAAA6zD,QAAAzpB,EAAAypB,QAAA//C,MAAA,GAEA9T,KAAA4yD,QAAAxoB,EAAAwoB,QAEA5yD,KAAA6nD,MAAAzd,EAAAyd,MACA7nD,KAAA8nD,MAAA1d,EAAA0d,MAEA9nD,KAAAmjD,UAAA/Y,EAAA+Y,UACAnjD,KAAAojD,UAAAhZ,EAAAgZ,UAEApjD,KAAAunD,WAAAnd,EAAAmd,WAEAvnD,KAAAkjD,OAAA9Y,EAAA8Y,OACAljD,KAAAskC,KAAA8F,EAAA9F,KAEAtkC,KAAAkV,OAAAvD,KAAAy4B,EAAAl1B,QACAlV,KAAAqnD,OAAA11C,KAAAy4B,EAAAid,QAEArnD,KAAAsjD,gBAAAlZ,EAAAkZ,gBACAtjD,KAAA83D,iBAAA1tB,EAAA0tB,iBACA93D,KAAA+3D,MAAA3tB,EAAA2tB,MACA/3D,KAAAg4D,gBAAA5tB,EAAA4tB,gBAEAh4D,MAIAmpC,OAAA,SAAAC,GAQA,QAAA8uB,GAAA9L,GAEA,GAAA+L,EAgBA,OAdAx0D,UAAAyoD,EAAAgM,UAEAD,EAAA/L,GAIA+L,EAAAzzD,SAAAsM,cAAA,UACAmnD,EAAA90C,MAAA+oC,EAAA/oC,MACA80C,EAAA70C,OAAA8oC,EAAA9oC,OAEA60C,EAAAE,WAAA,MAAAC,UAAAlM,EAAA,EAAA,EAAAA,EAAA/oC,MAAA+oC,EAAA9oC,SAIA60C,EAAA90C,MAAA,MAAA80C,EAAA70C,OAAA,KAEA60C,EAAAC,UAAA,aAAA,IAIAD,EAAAC,UAAA,aA9BA,GAAAz0D,SAAAylC,EAAAU,SAAA9pC,KAAAq+B,MAEA,MAAA+K,GAAAU,SAAA9pC,KAAAq+B,KAkCA,IAAAsL,IACAF,UACApoC,QAAA,IACAijC,KAAA,UACA0F,UAAA,kBAGA3L,KAAAr+B,KAAAq+B,KACAp0B,KAAAjK,KAAAiK,KAEA2oD,QAAA5yD,KAAA4yD,QAEAvL,QAAArnD,KAAAqnD,OAAAp+C,EAAAjJ,KAAAqnD,OAAA7oC,GACAtJ,QAAAlV,KAAAkV,OAAAjM,EAAAjJ,KAAAkV,OAAAsJ,GACA8oC,MAAAtnD,KAAA6nD,MAAA7nD,KAAA8nD,OAEA1E,UAAApjD,KAAAojD,UACAD,UAAAnjD,KAAAmjD,UACAoE,WAAAvnD,KAAAunD,WAGA,IAAA5jD,SAAA3D,KAAAosD,MAAA,CAIA,GAAAA,GAAApsD,KAAAosD,KAEAzoD,UAAAyoD,EAAA/tB,OAEA+tB,EAAA/tB,KAAAz1B,EAAAY,KAAA00B,gBAIAv6B,SAAAylC,EAAAW,OAAAqiB,EAAA/tB,QAEA+K,EAAAW,OAAAqiB,EAAA/tB,OACAA,KAAA+tB,EAAA/tB,KACAuoB,IAAAsR,EAAA9L,KAKAziB,EAAAyiB,MAAAA,EAAA/tB,KAMA,MAFA+K,GAAAU,SAAA9pC,KAAAq+B,MAAAsL,EAEAA,GAIAmK,QAAA,WAEA9zC,KAAAqkC,eAAuBC,KAAA,aAIvBi0B,YAAA,SAAAlpB,GAEA,GAAArvC,KAAA4yD,UAAAhqD,EAAA8E,UAAA,CAKA,GAHA2hC,EAAAz6B,SAAA5U,KAAAqnD,QACAhY,EAAA96B,IAAAvU,KAAAkV,QAEAm6B,EAAApmC,EAAA,GAAAomC,EAAApmC,EAAA,EAEA,OAAAjJ,KAAA6nD,OAEA,IAAAj/C,GAAAoF,eAEAqhC,EAAApmC,EAAAomC,EAAApmC,EAAAO,KAAAuI,MAAAs9B,EAAApmC,EACA,MAEA,KAAAL,GAAAqF,oBAEAohC,EAAApmC,EAAAomC,EAAApmC,EAAA,EAAA,EAAA,CACA,MAEA,KAAAL,GAAAsF,uBAEA,IAAA1E,KAAA8X,IAAA9X,KAAAuI,MAAAs9B,EAAApmC,GAAA,GAEAomC,EAAApmC,EAAAO,KAAAib,KAAA4qB,EAAApmC,GAAAomC,EAAApmC,EAIAomC,EAAApmC,EAAAomC,EAAApmC,EAAAO,KAAAuI,MAAAs9B,EAAApmC,GASA,GAAAomC,EAAA7wB,EAAA,GAAA6wB,EAAA7wB,EAAA,EAEA,OAAAxe,KAAA8nD,OAEA,IAAAl/C,GAAAoF,eAEAqhC,EAAA7wB,EAAA6wB,EAAA7wB,EAAAhV,KAAAuI,MAAAs9B,EAAA7wB,EACA,MAEA,KAAA5V,GAAAqF,oBAEAohC,EAAA7wB,EAAA6wB,EAAA7wB,EAAA,EAAA,EAAA,CACA,MAEA,KAAA5V,GAAAsF,uBAEA,IAAA1E,KAAA8X,IAAA9X,KAAAuI,MAAAs9B,EAAA7wB,GAAA,GAEA6wB,EAAA7wB,EAAAhV,KAAAib,KAAA4qB,EAAA7wB,GAAA6wB,EAAA7wB,EAIA6wB,EAAA7wB,EAAA6wB,EAAA7wB,EAAAhV,KAAAuI,MAAAs9B,EAAA7wB,GASAxe,KAAA+3D,QAEA1oB,EAAA7wB,EAAA,EAAA6wB,EAAA7wB,MAQA5V,EAAAq7B,gBAAAniC,UAAA+E,MAAA+B,EAAA+pD,QAAA7wD,WAEA8G,EAAA8uD,eAAA,EAQA9uD,EAAA4vD,cAAA,SAAAL,EAAAvF,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAF,EAAA5e,EAAAijB,GAEA3+C,EAAA+pD,QAAApyD,KAAAP,KAAAm4D,EAAAvF,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAF,EAAA5e,EAAAijB,GAEAvnD,KAAA+qC,aAAA,GAIAniC,EAAA4vD,cAAA12D,UAAAf,OAAAgB,OAAA6G,EAAA+pD,QAAA7wD,WACA8G,EAAA4vD,cAAA12D,UAAAE,YAAA4G,EAAA4vD,cAQA5vD,EAAA2qD,YAAA,SAAAxpB,EAAA6oB,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAF,EAAA5e,EAAAijB,GAEAqL,EAAAjvD,SAAAivD,EAAAA,EAAAhqD,EAAA+E,sBAEA/E,EAAA+pD,QAAApyD,KAAAP,KAAA+pC,EAAA6oB,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAF,EAAA5e,EAAAijB,GAEAvnD,KAAA+pC,OAAAA,EACA/pC,KAAA+3D,OAAA,GAIAnvD,EAAA2qD,YAAAzxD,UAAAf,OAAAgB,OAAA6G,EAAA+pD,QAAA7wD,WACA8G,EAAA2qD,YAAAzxD,UAAAE,YAAA4G,EAAA2qD,YAEA3qD,EAAA2qD,YAAAzxD,UAAA6P,KAAA,SAAAy4B,GAMA,MAJAxhC,GAAA+pD,QAAA7wD,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAA+pC,OAAAK,EAAAL,OAEA/pC,MASA4I,EAAAorD,kBAAA,SAAAH,EAAAxwC,EAAAC,EAAA4/B,EAAA5e,EAAAsuB,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAmE,GAEA3+C,EAAA+pD,QAAApyD,KAAAP,KAAA,KAAA4yD,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAF,EAAA5e,EAAAijB,GAEAvnD,KAAAosD,OAAe/oC,MAAAA,EAAAC,OAAAA,GACftjB,KAAA6zD,QAAAA,EAKA7zD,KAAA+3D,OAAA,EAKA/3D,KAAAsjD,iBAAA,GAIA16C,EAAAorD,kBAAAlyD,UAAAf,OAAAgB,OAAA6G,EAAA+pD,QAAA7wD,WACA8G,EAAAorD,kBAAAlyD,UAAAE,YAAA4G,EAAAorD,kBAQAprD,EAAA+qD,YAAA,SAAAnqB,EAAAnmB,EAAAC,EAAA4/B,EAAA5e,EAAAsuB,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAmE,GAEA3+C,EAAA+pD,QAAApyD,KAAAP,KAAA,KAAA4yD,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAF,EAAA5e,EAAAijB,GAEAvnD,KAAAosD,OAAe5iB,KAAAA,EAAAnmB,MAAAA,EAAAC,OAAAA,GAEftjB,KAAAmjD,UAAAx/C,SAAAw/C,EAAAA,EAAAv6C,EAAAuF,cACAnO,KAAAojD,UAAAz/C,SAAAy/C,EAAAA,EAAAx6C,EAAAuF,cAEAnO,KAAA+3D,OAAA,EACA/3D,KAAAsjD,iBAAA,GAIA16C,EAAA+qD,YAAA7xD,UAAAf,OAAAgB,OAAA6G,EAAA+pD,QAAA7wD,WACA8G,EAAA+qD,YAAA7xD,UAAAE,YAAA4G,EAAA+qD,YAQA/qD,EAAA6vD,aAAA,SAAAC,EAAA9F,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAF,EAAA5e,EAAAijB,GAQA,QAAAroC,KAEAja,sBAAAia,GAEAw5C,EAAAC,aAAAD,EAAAE,mBAEA9rC,EAAAie,aAAA,GAZAniC,EAAA+pD,QAAApyD,KAAAP,KAAA04D,EAAA9F,EAAA/K,EAAAC,EAAA3E,EAAAC,EAAAF,EAAA5e,EAAAijB,GAEAvnD,KAAAsjD,iBAAA,CAEA,IAAAx2B,GAAA9sB,IAcAkf,MAIAtW,EAAA6vD,aAAA32D,UAAAf,OAAAgB,OAAA6G,EAAA+pD,QAAA7wD,WACA8G,EAAA6vD,aAAA32D,UAAAE,YAAA4G,EAAA6vD,aAQA7vD,EAAAqqD,MAAA,WAEArqD,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,SAIA17B,EAAAqqD,MAAAnxD,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAAqqD,MAAAnxD,UAAAE,YAAA4G,EAAAqqD,MAOArqD,EAAA48B,OAAA,SAAAtY,EAAAid,GAEAvhC,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,SAEAtkC,KAAAktB,SAAAvpB,SAAAupB,EAAAA,EAAA,GAAAtkB,GAAAukB,SACAntB,KAAAmqC,SAAAxmC,SAAAwmC,EAAAA,EAAA,GAAAvhC,GAAAiuD,gBAAgFxlD,MAAA,SAAA7H,KAAA+0B,YAIhF31B,EAAA48B,OAAA1jC,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAA48B,OAAA1jC,UAAAE,YAAA4G,EAAA48B,OAEA58B,EAAA48B,OAAA1jC,UAAAmjC,QAAA,WAEA,GAAA4zB,GAAA,GAAAjwD,GAAAge,QACAuQ,EAAA,GAAAvuB,GAAAouB,GAEA,OAAA,UAAA6N,EAAAC,GAuBA,QAAAg0B,GAAA9tC,EAAAtH,GAEA,GAAAq1C,GAAA5hC,EAAAG,kBAAAtM,EAEA,IAAAguC,EAAAD,EAAA,CAEA,GAAAE,GAAA9hC,EAAA/L,oBAAAJ,EACAiuC,GAAAjzC,aAAA3iB,EAAA2jB,YAEA,IAAA2D,GAAAka,EAAA1N,IAAAF,OAAAnS,WAAAm0C,EAEA,IAAAtuC,EAAAka,EAAAxO,MAAA1L,EAAAka,EAAAvO,IAAA,MAEAwO,GAAA79B,MAEA0jB,SAAAA,EACAuuC,cAAA1vD,KAAAmK,KAAAolD,GACA/tC,MAAAiuC,EAAA7lD,QACAsQ,MAAAA,EACAgrB,KAAA,KACArrC,OAAAA,KAzCA,GAAAA,GAAArD,KACAktB,EAAA7pB,EAAA6pB,SACAuY,EAAAZ,EAAAO,OAAAI,OAAAC,SAKA,IAHAozB,EAAA9xC,WAAA/mB,KAAAgnB,aACAmQ,EAAAxlB,KAAAkzB,EAAA1N,KAAAnR,aAAA6yC,GAEA,OAAA3rC,EAAA+gB,aAEA9W,EAAA9K,kBAAAa,EAAA+gB,gBAAA,EAFA,CAUA,GAAAkrB,GAAA1zB,IAAAzlC,KAAA60B,MAAA5rB,EAAAjJ,KAAA60B,MAAArW,EAAAxe,KAAA60B,MAAApW,GAAA,GACAu6C,EAAAG,EAAAA,EACAxjC,EAAA,GAAA/sB,GAAAwY,OA8BA,IAAA8L,YAAAtkB,GAAAykB,eAAA,CAEA,GAAA3J,GAAAwJ,EAAAxJ,MACA4J,EAAAJ,EAAAI,WACAC,EAAAD,EAAAqI,SAAA1gB,KAEA,IAAA,OAAAyO,EAIA,IAAA,GAFA8nB,GAAA9nB,EAAAzO,MAEAvS,EAAA,EAAAgpB,EAAA8f,EAAA7oC,OAAyC+oB,EAAAhpB,EAAQA,IAAA,CAEjD,GAAAof,GAAA0pB,EAAA9oC,EAEAizB,GAAArkB,UAAAic,EAAA,EAAAzL,GAEAg3C,EAAAnjC,EAAA7T,OAMA,KAAA,GAAApf,GAAA,EAAAuD,EAAAsnB,EAAA5qB,OAAA,EAA8CsD,EAAAvD,EAAOA,IAErDizB,EAAArkB,UAAAic,EAAA,EAAA7qB,GAEAo2D,EAAAnjC,EAAAjzB,OAUA,KAAA,GAFA0qB,GAAAF,EAAAE,SAEA1qB,EAAA,EAAAuD,EAAAmnB,EAAAzqB,OAAwCsD,EAAAvD,EAAOA,IAE/Co2D,EAAA1rC,EAAA1qB,GAAAA,QAUAkG,EAAA48B,OAAA1jC,UAAAsR,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAktB,SAAAltB,KAAAmqC,UAAAx4B,KAAA3R,OAMA4I,EAAA+8B,WAAA,SAAAzY,EAAAid,GAGA,MADAjiC,SAAAuI,KAAA,sDACA,GAAA7H,GAAA48B,OAAAtY,EAAAid,IAIAvhC,EAAAwwD,eAAA,SAAAlsC,EAAAid,GAGA,MADAjiC,SAAAuI,KAAA,0DACA,GAAA7H,GAAA48B,OAAAtY,EAAAid,IAUAvhC,EAAA08B,KAAA,SAAApY,EAAAid,EAAA6oB,GAEA,MAAA,KAAAA,GAEA9qD,QAAAuI,KAAA,mGACA,GAAA7H,GAAAywD,aAAAnsC,EAAAid,KAIAvhC,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,OAEAtkC,KAAAktB,SAAAvpB,SAAAupB,EAAAA,EAAA,GAAAtkB,GAAAukB,cACAntB,KAAAmqC,SAAAxmC,SAAAwmC,EAAAA,EAAA,GAAAvhC,GAAA4sD,mBAAmFnkD,MAAA,SAAA7H,KAAA+0B,cAInF31B,EAAA08B,KAAAxjC,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAA08B,KAAAxjC,UAAAE,YAAA4G,EAAA08B,KAEA18B,EAAA08B,KAAAxjC,UAAAmjC,QAAA,WAEA,GAAA4zB,GAAA,GAAAjwD,GAAAge,QACAuQ,EAAA,GAAAvuB,GAAAouB,IACAuB,EAAA,GAAA3vB,GAAA6kB,MAEA,OAAA,UAAAoX,EAAAC,GAEA,GAAAmN,GAAApN,EAAAe,cACA0zB,EAAArnB,EAAAA,EAEA/kB,EAAAltB,KAAAktB,QASA,IAPA,OAAAA,EAAA0P,gBAAA1P,EAAA2P,wBAIAtE,EAAA5mB,KAAAub,EAAA0P,gBACArE,EAAAvS,aAAAhmB,KAAAgnB,aAEA6d,EAAA1N,IAAAmB,qBAAAC,MAAA,EAAA,CAMAsgC,EAAA9xC,WAAA/mB,KAAAgnB,aACAmQ,EAAAxlB,KAAAkzB,EAAA1N,KAAAnR,aAAA6yC,EAEA,IAAAU,GAAA,GAAA3wD,GAAAwY,QACAo4C,EAAA,GAAA5wD,GAAAwY,QACAq4C,EAAA,GAAA7wD,GAAAwY,QACAs4C,EAAA,GAAA9wD,GAAAwY,QACAu4C,EAAA35D,eAAA4I,GAAAywD,aAAA,EAAA,CAEA,IAAAnsC,YAAAtkB,GAAAykB,eAAA,CAEA,GAAA3J,GAAAwJ,EAAAxJ,MACA4J,EAAAJ,EAAAI,UAEA,IAAA,OAAA5J,EAKA,IAAA,GAHA8nB,GAAA9nB,EAAAzO,MACAsY,EAAAD,EAAAqI,SAAA1gB,MAEAvS,EAAA,EAAAuD,EAAAulC,EAAA7oC,OAAA,EAA4CsD,EAAAvD,EAAOA,GAAAi3D,EAAA,CAEnD,GAAA73C,GAAA0pB,EAAA9oC,GACAgP,EAAA85B,EAAA9oC,EAAA,EAEA62D,GAAAjoD,UAAAic,EAAA,EAAAzL,GACA03C,EAAAloD,UAAAic,EAAA,EAAA7b,EAEA,IAAAkoD,GAAAziC,EAAAI,oBAAAgiC,EAAAC,EAAAE,EAAAD,EAEA,MAAAG,EAAAN,GAAA,CAEAI,EAAA1zC,aAAAhmB,KAAAgnB,YAEA,IAAA2D,GAAAka,EAAA1N,IAAAF,OAAAnS,WAAA40C,EAEA/uC,GAAAka,EAAAxO,MAAA1L,EAAAka,EAAAvO,KAEAwO,EAAA79B,MAEA0jB,SAAAA,EAGAK,MAAAyuC,EAAArmD,QAAA4S,aAAAhmB,KAAAgnB,aACAtD,MAAAhhB,EACAgsC,KAAA,KACAmrB,UAAA,KACAx2D,OAAArD,YAUA,KAAA,GAFAutB,GAAAD,EAAAqI,SAAA1gB,MAEAvS,EAAA,EAAAuD,EAAAsnB,EAAA5qB,OAAA,EAAA,EAAkDsD,EAAAvD,EAAOA,GAAAi3D,EAAA,CAEzDJ,EAAAjoD,UAAAic,EAAA,EAAA7qB,GACA82D,EAAAloD,UAAAic,EAAA,EAAA7qB,EAAA,EAEA,IAAAk3D,GAAAziC,EAAAI,oBAAAgiC,EAAAC,EAAAE,EAAAD,EAEA,MAAAG,EAAAN,GAAA,CAEAI,EAAA1zC,aAAAhmB,KAAAgnB,YAEA,IAAA2D,GAAAka,EAAA1N,IAAAF,OAAAnS,WAAA40C,EAEA/uC,GAAAka,EAAAxO,MAAA1L,EAAAka,EAAAvO,KAEAwO,EAAA79B,MAEA0jB,SAAAA,EAGAK,MAAAyuC,EAAArmD,QAAA4S,aAAAhmB,KAAAgnB,aACAtD,MAAAhhB,EACAgsC,KAAA,KACAmrB,UAAA,KACAx2D,OAAArD,aAQG,IAAAktB,YAAAtkB,GAAAukB,SAKH,IAAA,GAHAC,GAAAF,EAAAE,SACA0sC,EAAA1sC,EAAAzqB,OAEAD,EAAA,EAAmBo3D,EAAA,EAAAp3D,EAAoBA,GAAAi3D,EAAA,CAEvC,GAAAC,GAAAziC,EAAAI,oBAAAnK,EAAA1qB,GAAA0qB,EAAA1qB,EAAA,GAAAg3D,EAAAD,EAEA,MAAAG,EAAAN,GAAA,CAEAI,EAAA1zC,aAAAhmB,KAAAgnB,YAEA,IAAA2D,GAAAka,EAAA1N,IAAAF,OAAAnS,WAAA40C,EAEA/uC,GAAAka,EAAAxO,MAAA1L,EAAAka,EAAAvO,KAEAwO,EAAA79B,MAEA0jB,SAAAA,EAGAK,MAAAyuC,EAAArmD,QAAA4S,aAAAhmB,KAAAgnB,aACAtD,MAAAhhB,EACAgsC,KAAA,KACAmrB,UAAA,KACAx2D,OAAArD,cAYA4I,EAAA08B,KAAAxjC,UAAAsR,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAktB,SAAAltB,KAAAmqC,UAAAx4B,KAAA3R,OAMA4I,EAAAmxD,UAAA,EACAnxD,EAAAoxD,WAAA,EAQApxD,EAAAywD,aAAA,SAAAnsC,EAAAid,GAEAvhC,EAAA08B,KAAA/kC,KAAAP,KAAAktB,EAAAid,GAEAnqC,KAAAskC,KAAA,gBAIA17B,EAAAywD,aAAAv3D,UAAAf,OAAAgB,OAAA6G,EAAA08B,KAAAxjC,WACA8G,EAAAywD,aAAAv3D,UAAAE,YAAA4G,EAAAywD,aAWAzwD,EAAAy8B,KAAA,SAAAnY,EAAAid,GAEAvhC,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,OAEAtkC,KAAAktB,SAAAvpB,SAAAupB,EAAAA,EAAA,GAAAtkB,GAAAukB,SACAntB,KAAAmqC,SAAAxmC,SAAAwmC,EAAAA,EAAA,GAAAvhC,GAAAotD,mBAAmF3kD,MAAA,SAAA7H,KAAA+0B,WAEnFv+B,KAAAi6D,sBAIArxD,EAAAy8B,KAAAvjC,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAAy8B,KAAAvjC,UAAAE,YAAA4G,EAAAy8B,KAEAz8B,EAAAy8B,KAAAvjC,UAAAm4D,mBAAA,WAEA,GAAAt2D,SAAA3D,KAAAktB,SAAA0gB,cAAA5tC,KAAAktB,SAAA0gB,aAAAjrC,OAAA,EAAA,CAEA3C,KAAAk6D,gBAAA,GACAl6D,KAAAm6D,yBACAn6D,KAAAo6D,wBAEA,KAAA,GAAA55D,GAAA,EAAA65D,EAAAr6D,KAAAktB,SAAA0gB,aAAAjrC,OAA0D03D,EAAA75D,EAAQA,IAElER,KAAAm6D,sBAAAlzD,KAAA,GACAjH,KAAAo6D,sBAAAp6D,KAAAktB,SAAA0gB,aAAAptC,GAAAyJ,MAAAzJ,IAQAoI,EAAAy8B,KAAAvjC,UAAAw4D,0BAAA,SAAArwD,GAEA,MAAAtG,UAAA3D,KAAAo6D,sBAAAnwD,GAEAjK,KAAAo6D,sBAAAnwD,IAIA/B,QAAAuI,KAAA,sDAAAxG,EAAA,iCAEA,IAKArB,EAAAy8B,KAAAvjC,UAAAmjC,QAAA,WAuBA,QAAAs1B,GAAAvvC,EAAAiQ,EAAAC,EAAAC,EAAAq/B,EAAAlrB,EAAAmrB,GAUA,MARA7xD,GAAAq5B,SAAAE,mBAAAnX,EAAAiQ,EAAAC,EAAAC,EAAAu/B,GAEAF,EAAA3lD,eAAA6lD,EAAAzxD,GACAqmC,EAAAz6B,eAAA6lD,EAAAl8C,GACAi8C,EAAA5lD,eAAA6lD,EAAAj8C,GAEA+7C,EAAAjmD,IAAA+6B,GAAA/6B,IAAAkmD,GAEAD,EAAApnD,QAIA,QAAAunD,GAAAt3D,EAAAwhC,EAAA1N,EAAAif,EAAAC,EAAAC,EAAAtrB,GAEA,GAAAyB,GACA0d,EAAA9mC,EAAA8mC,QAYA,IARA1d,EAFA0d,EAAAsgB,OAAA7hD,EAAAsC,SAEAisB,EAAA6C,kBAAAsc,EAAAD,EAAAD,GAAA,EAAAprB,GAIAmM,EAAA6C,kBAAAoc,EAAAC,EAAAC,EAAAnM,EAAAsgB,OAAA7hD,EAAAuC,WAAA6f,GAIA,OAAAyB,EAAA,MAAA,KAEAmuC,GAAAjpD,KAAAqZ,GACA4vC,EAAA50C,aAAA3iB,EAAA2jB,YAEA,IAAA2D,GAAAka,EAAA1N,IAAAF,OAAAnS,WAAA81C,EAEA,OAAAjwC,GAAAka,EAAAxO,MAAA1L,EAAAka,EAAAvO,IAAA,MAGA3L,SAAAA,EACAK,MAAA4vC,EAAAxnD,QACA/P,OAAAA,GAKA,QAAAw3D,GAAAx3D,EAAAwhC,EAAA1N,EAAA5J,EAAA0hB,EAAAntB,EAAApQ,EAAAjR,GAEAovC,EAAAv+B,UAAAic,EAAA,EAAAzL,GACAguB,EAAAx+B,UAAAic,EAAA,EAAA7b,GACAq+B,EAAAz+B,UAAAic,EAAA,EAAA9sB,EAEA,IAAAq6D,GAAAH,EAAAt3D,EAAAwhC,EAAA1N,EAAA0Y,EAAAC,EAAAC,EAAAgrB,EAmBA,OAjBAD,KAEA7rB,IAEA+rB,EAAA1pD,UAAA29B,EAAA,EAAAntB,GACAm5C,EAAA3pD,UAAA29B,EAAA,EAAAv9B,GACAwpD,EAAA5pD,UAAA29B,EAAA,EAAAxuC,GAEAq6D,EAAAzrB,GAAAkrB,EAAAQ,EAAAlrB,EAAAC,EAAAC,EAAAirB,EAAAC,EAAAC,IAIAJ,EAAApsB,KAAA,GAAA9lC,GAAA0hC,MAAAxoB,EAAApQ,EAAAjR,EAAAmI,EAAAq5B,SAAApa,OAAAgoB,EAAAC,EAAAC,IACA+qB,EAAAjB,UAAA/3C,GAIAg5C,EA5FA,GAAAjC,GAAA,GAAAjwD,GAAAge,QACAuQ,EAAA,GAAAvuB,GAAAouB,IACAuB,EAAA,GAAA3vB,GAAA6kB,OAEAoiB,EAAA,GAAAjnC,GAAAwY,QACA0uB,EAAA,GAAAlnC,GAAAwY,QACA2uB,EAAA,GAAAnnC,GAAAwY,QAEA+5C,EAAA,GAAAvyD,GAAAwY,QACAg6C,EAAA,GAAAxyD,GAAAwY,QACAi6C,EAAA,GAAAzyD,GAAAwY,QAEA45C,EAAA,GAAApyD,GAAAwa,QACA63C,EAAA,GAAAryD,GAAAwa,QACA83C,EAAA,GAAAtyD,GAAAwa,QAEAs3C,EAAA,GAAA9xD,GAAAwY,QAEA25C,EAAA,GAAAnyD,GAAAwY,QACAw5C,EAAA,GAAAhyD,GAAAwY,OA6EA,OAAA,UAAAyjB,EAAAC,GAEA,GAAA5X,GAAAltB,KAAAktB,SACAid,EAAAnqC,KAAAmqC,QAEA,IAAAxmC,SAAAwmC,EAAA,CAIA,OAAAjd,EAAA0P,gBAAA1P,EAAA2P,uBAEA,IAAA7V,GAAAhnB,KAAAgnB,WAKA,IAHAuR,EAAA5mB,KAAAub,EAAA0P,gBACArE,EAAAvS,aAAAgB,GAEA6d,EAAA1N,IAAAmB,qBAAAC,MAAA,IAIAsgC,EAAA9xC,WAAAC,GACAmQ,EAAAxlB,KAAAkzB,EAAA1N,KAAAnR,aAAA6yC,GAEA,OAAA3rC,EAAA+gB,aAEA9W,EAAA9K,kBAAAa,EAAA+gB,gBAAA,GAFA,CAMA,GAAAgB,GAAA6rB,CAEA,IAAA5tC,YAAAtkB,GAAAykB,eAAA,CAEA,GAAAvL,GAAApQ,EAAAjR,EACAijB,EAAAwJ,EAAAxJ,MACA4J,EAAAJ,EAAAI,WACAC,EAAAD,EAAAqI,SAAA1gB,KAQA,IANAtR,SAAA2pB,EAAA+hB,KAEAJ,EAAA3hB,EAAA+hB,GAAAp6B,OAIA,OAAAyO,EAIA,IAAA,GAFA8nB,GAAA9nB,EAAAzO,MAEAvS,EAAA,EAAAuD,EAAAulC,EAAA7oC,OAAwCsD,EAAAvD,EAAOA,GAAA,EAE/Cof,EAAA0pB,EAAA9oC,GACAgP,EAAA85B,EAAA9oC,EAAA,GACAjC,EAAA+qC,EAAA9oC,EAAA,GAEAo4D,EAAAD,EAAA76D,KAAA6kC,EAAA1N,EAAA5J,EAAA0hB,EAAAntB,EAAApQ,EAAAjR,GAEAq6D,IAEAA,EAAAjB,UAAArwD,KAAAuI,MAAArP,EAAA,GACAoiC,EAAA79B,KAAA6zD,QASA,KAAA,GAAAp4D,GAAA,EAAAuD,EAAAsnB,EAAA5qB,OAA0CsD,EAAAvD,EAAOA,GAAA,EAEjDof,EAAApf,EAAA,EACAgP,EAAAoQ,EAAA,EACArhB,EAAAqhB,EAAA,EAEAg5C,EAAAD,EAAA76D,KAAA6kC,EAAA1N,EAAA5J,EAAA0hB,EAAAntB,EAAApQ,EAAAjR,GAEAq6D,IAEAA,EAAAp3C,MAAA5B,EACAgjB,EAAA79B,KAAA6zD,QAQG,IAAA5tC,YAAAtkB,GAAAukB,SAAA,CAEH,GAAAmuC,GAAAC,EAAAC,EACAC,EAAAtxB,YAAAvhC,GAAAguD,iBACA/sB,EAAA4xB,KAAA,EAAAtxB,EAAAN,UAAA,KAEAzc,EAAAF,EAAAE,SACAsgB,EAAAxgB,EAAAwgB,MACAC,EAAAzgB,EAAAygB,cAAA,EACAA,GAAAhrC,OAAA,IAAAssC,EAAAtB,EAEA,KAAA,GAAA3e,GAAA,EAAA4gB,EAAAlC,EAAA/qC,OAAsCitC,EAAA5gB,EAAQA,IAAA,CAE9C,GAAA0f,GAAAhB,EAAA1e,GACA0sC,EAAAD,KAAA,EAAA5xB,EAAA6E,EAAAnE,eAAAJ,CAEA,IAAAxmC,SAAA+3D,EAAA,CAMA,GAJAJ,EAAAluC,EAAAshB,EAAA5sB,GACAy5C,EAAAnuC,EAAAshB,EAAAh9B,GACA8pD,EAAApuC,EAAAshB,EAAAjuC,GAEAi7D,EAAA9tB,gBAAA,EAAA,CAEA,GAAAA,GAAA1gB,EAAA0gB,aACA+tB,EAAA37D,KAAAm6D,qBAEAtqB,GAAAt+B,IAAA,EAAA,EAAA,GACAu+B,EAAAv+B,IAAA,EAAA,EAAA,GACAw+B,EAAAx+B,IAAA,EAAA,EAAA,EAEA,KAAA,GAAAa,GAAA,EAAAwpD,EAAAhuB,EAAAjrC,OAA+Ci5D,EAAAxpD,EAAQA,IAAA,CAEvD,GAAAypD,GAAAF,EAAAvpD,EAEA,IAAA,IAAAypD,EAAA,CAEA,GAAAC,GAAAluB,EAAAx7B,GAAAgb,QAEAyiB,GAAAhsB,gBAAAs3C,EAAAp3C,WAAA+3C,EAAAptB,EAAA5sB,GAAAw5C,GAAAO,GACA/rB,EAAAjsB,gBAAAu3C,EAAAr3C,WAAA+3C,EAAAptB,EAAAh9B,GAAA6pD,GAAAM,GACA9rB,EAAAlsB,gBAAAw3C,EAAAt3C,WAAA+3C,EAAAptB,EAAAjuC,GAAA+6D,GAAAK,IAIAhsB,EAAAt7B,IAAA+mD,GACAxrB,EAAAv7B,IAAAgnD,GACAxrB,EAAAx7B,IAAAinD,GAEAF,EAAAzrB,EACA0rB,EAAAzrB,EACA0rB,EAAAzrB,EAMA,GAFA+qB,EAAAH,EAAA36D,KAAA6kC,EAAA1N,EAAAmkC,EAAAC,EAAAC,EAAAT,GAEA,CAEA,GAAA9rB,EAAA,CAEA,GAAA8sB,GAAA9sB,EAAAjgB,EACAgsC,GAAArpD,KAAAoqD,EAAA,IACAd,EAAAtpD,KAAAoqD,EAAA,IACAb,EAAAvpD,KAAAoqD,EAAA,IAEAjB,EAAAzrB,GAAAkrB,EAAAQ,EAAAO,EAAAC,EAAAC,EAAAR,EAAAC,EAAAC,GAIAJ,EAAApsB,KAAAA,EACAosB,EAAAjB,UAAA7qC,EACA8V,EAAA79B,KAAA6zD,aAYAlyD,EAAAy8B,KAAAvjC,UAAAsR,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAktB,SAAAltB,KAAAmqC,UAAAx4B,KAAA3R,OAYA4I,EAAAozD,KAAA,SAAAC,GAEArzD,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,OAEAtkC,KAAAi8D,KAAAA,GAIArzD,EAAAozD,KAAAl6D,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAAozD,KAAAl6D,UAAAE,YAAA4G,EAAAozD,KAEApzD,EAAAozD,KAAAl6D,UAAA6P,KAAA,SAAAy4B,GAMA,MAJAxhC,GAAAw9B,SAAAtkC,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAAi8D,KAAA7xB,EAAA6xB,KAEAj8D,MAaA4I,EAAAszD,SAAA,SAAA5hB,EAAA6hB,EAAAC,GAcA,GAZAp8D,KAAAo8D,iBAAAz4D,SAAAy4D,EAAAA,GAAA,EAEAp8D,KAAAq8D,eAAA,GAAAzzD,GAAAge,QAIA0zB,EAAAA,MAEAt6C,KAAAs6C,MAAAA,EAAAxmC,MAAA,GAIA9T,KAAAo8D,iBAAA,CAUA,GAAAnpD,GAAAzJ,KAAAmK,KAAA,EAAA3T,KAAAs6C,MAAA33C,OACAsQ,GAAArK,EAAAY,KAAAo2B,eAAAp2B,KAAAib,KAAAxR,IACAA,EAAAzJ,KAAAC,IAAAwJ,EAAA,GAEAjT,KAAAs8D,iBAAArpD,EACAjT,KAAAu8D,kBAAAtpD,EAEAjT,KAAAw8D,aAAA,GAAA5uC,cAAA5tB,KAAAs8D,iBAAAt8D,KAAAu8D,kBAAA,GACAv8D,KAAAy8D,YAAA,GAAA7zD,GAAA+qD,YAAA3zD,KAAAw8D,aAAAx8D,KAAAs8D,iBAAAt8D,KAAAu8D,kBAAA3zD,EAAA0G,WAAA1G,EAAAmG,eAIA/O,MAAAw8D,aAAA,GAAA5uC,cAAA,GAAA5tB,KAAAs6C,MAAA33C,OAMA,IAAAgB,SAAAw4D,EAEAn8D,KAAA08D,wBAIA,IAAA18D,KAAAs6C,MAAA33C,SAAAw5D,EAAAx5D,OAEA3C,KAAAm8D,aAAAA,EAAAroD,MAAA,OAEG,CAEH5L,QAAAuI,KAAA,mDAEAzQ,KAAAm8D,eAEA,KAAA,GAAAzqD,GAAA,EAAAirD,EAAA38D,KAAAs6C,MAAA33C,OAA2Cg6D,EAAAjrD,EAAQA,IAEnD1R,KAAAm8D,aAAAl1D,KAAA,GAAA2B,GAAAge,WAUAhe,EAAAszD,SAAAp6D,UAAA46D,kBAAA,WAEA18D,KAAAm8D,eAEA,KAAA,GAAAzqD,GAAA,EAAAirD,EAAA38D,KAAAs6C,MAAA33C,OAAyCg6D,EAAAjrD,EAAQA,IAAA,CAEjD,GAAA+P,GAAA,GAAA7Y,GAAAge,OAEA5mB,MAAAs6C,MAAA5oC,IAEA+P,EAAAsF,WAAA/mB,KAAAs6C,MAAA5oC,GAAAsV,aAIAhnB,KAAAm8D,aAAAl1D,KAAAwa,KAMA7Y,EAAAszD,SAAAp6D,UAAA86D,KAAA,WAMA,IAAA,GAJAjb,GAIAjwC,EAAA,EAAAirD,EAAA38D,KAAAs6C,MAAA33C,OAAyCg6D,EAAAjrD,EAAQA,IAEjDiwC,EAAA3hD,KAAAs6C,MAAA5oC,GAEAiwC,GAEAA,EAAA36B,YAAAD,WAAA/mB,KAAAm8D,aAAAzqD,GAQA,KAAA,GAAAA,GAAA,EAAAirD,EAAA38D,KAAAs6C,MAAA33C,OAAyCg6D,EAAAjrD,EAAQA,IAEjDiwC,EAAA3hD,KAAAs6C,MAAA5oC,GAEAiwC,IAEAA,EAAA79C,QAEA69C,EAAAh7B,OAAAI,WAAA46B,EAAA79C,OAAAkjB,aACA26B,EAAAh7B,OAAA/R,SAAA+sC,EAAA36B,cAIA26B,EAAAh7B,OAAAhV,KAAAgwC,EAAA36B,aAIA26B,EAAAh7B,OAAAiP,UAAA+rB,EAAAhsB,SAAAgsB,EAAA5iC,WAAA4iC,EAAA9sB,SAQAjsB,EAAAszD,SAAAp6D,UAAAod,OAAA,WAEA,GAAA29C,GAAA,GAAAj0D,GAAAge,OAEA,OAAA,YAIA,IAAA,GAAAlV,GAAA,EAAAirD,EAAA38D,KAAAs6C,MAAA33C,OAA0Cg6D,EAAAjrD,EAAQA,IAAA,CAIlD,GAAAiV,GAAA3mB,KAAAs6C,MAAA5oC,GAAA1R,KAAAs6C,MAAA5oC,GAAAsV,YAAAhnB,KAAAq8D,cAEAQ,GAAAh2C,iBAAAF,EAAA3mB,KAAAm8D,aAAAzqD,IACAmrD,EAAAvtC,qBAAAtvB,KAAAw8D,aAAA,GAAA9qD,GAIA1R,KAAAo8D,mBAEAp8D,KAAAy8D,YAAA1xB,aAAA,OAQAniC,EAAAszD,SAAAp6D,UAAAsR,MAAA,WAEA,MAAA,IAAAxK,GAAAszD,SAAAl8D,KAAAs6C,MAAAt6C,KAAAm8D,aAAAn8D,KAAAo8D,mBAYAxzD,EAAAk0D,YAAA,SAAA5vC,EAAAid,EAAAiyB,GAEAxzD,EAAAy8B,KAAA9kC,KAAAP,KAAAktB,EAAAid,GAEAnqC,KAAAskC,KAAA,cAEAtkC,KAAA+8D,SAAA,WACA/8D,KAAAg9D,WAAA,GAAAp0D,GAAAge,QACA5mB,KAAAi9D,kBAAA,GAAAr0D,GAAAge,OAOA,IAAA0zB,KAEA,IAAAt6C,KAAAktB,UAAAvpB,SAAA3D,KAAAktB,SAAAotB,MAAA,CAIA,IAAA,GAFAqH,GAAAub,EAEAxrD,EAAA,EAAAirD,EAAA38D,KAAAktB,SAAAotB,MAAA33C,OAAmDg6D,EAAAjrD,IAAQA,EAE3DwrD,EAAAl9D,KAAAktB,SAAAotB,MAAA5oC,GAEAiwC,EAAA,GAAA/4C,GAAAozD,KAAAh8D,MACAs6C,EAAArzC,KAAA06C,GAEAA,EAAA13C,KAAAizD,EAAAjzD,KACA03C,EAAAhsB,SAAArkB,UAAA4rD,EAAA3hB,KACAoG,EAAA5iC,WAAAzN,UAAA4rD,EAAAC,MACAx5D,SAAAu5D,EAAAthB,KAAA+F,EAAA9sB,MAAAvjB,UAAA4rD,EAAAthB,IAIA,KAAA,GAAAlqC,GAAA,EAAAirD,EAAA38D,KAAAktB,SAAAotB,MAAA33C,OAAmDg6D,EAAAjrD,IAAQA,EAE3DwrD,EAAAl9D,KAAAktB,SAAAotB,MAAA5oC,GAEA,KAAAwrD,EAAAp5D,QAAA,OAAAo5D,EAAAp5D,OAEAw2C,EAAA4iB,EAAAp5D,QAAAyQ,IAAA+lC,EAAA5oC,IAIA1R,KAAAuU,IAAA+lC,EAAA5oC,IAQA1R,KAAAo9D,uBAEAp9D,KAAA+sB,mBAAA,GACA/sB,KAAAkF,KAAA,GAAA0D,GAAAszD,SAAA5hB,EAAA32C,OAAAy4D,GAAAp8D,KAAAgnB,cAKApe,EAAAk0D,YAAAh7D,UAAAf,OAAAgB,OAAA6G,EAAAy8B,KAAAvjC,WACA8G,EAAAk0D,YAAAh7D,UAAAE,YAAA4G,EAAAk0D,YAEAl0D,EAAAk0D,YAAAh7D,UAAAoD,KAAA,SAAAk8C,EAAA4b,GAEAh9D,KAAAohD,SAAAA,EAEAz9C,SAAAq5D,IAEAh9D,KAAA+sB,mBAAA,GAEA/sB,KAAAohD,SAAAsb,oBAEAM,EAAAh9D,KAAAgnB,aAIAhnB,KAAAg9D,WAAArrD,KAAAqrD,GACAh9D,KAAAi9D,kBAAAl2C,WAAAi2C,IAIAp0D,EAAAk0D,YAAAh7D,UAAA86D,KAAA,WAEA58D,KAAAohD,SAAAwb,QAIAh0D,EAAAk0D,YAAAh7D,UAAAs7D,qBAAA,WAEA,GAAAp9D,KAAAktB,mBAAAtkB,GAAAukB,SAEA,IAAA,GAAAzqB,GAAA,EAAkBA,EAAA1C,KAAAktB,SAAA6gB,YAAAprC,OAAsCD,IAAA,CAExD,GAAA26D,GAAAr9D,KAAAktB,SAAA4gB,YAAAprC,GAEAmyB,EAAA,EAAAwoC,EAAAx4C,iBAEAgQ,KAAAvJ,EAAAA,EAEA+xC,EAAAxoD,eAAAggB,GAIAwoC,EAAA9rD,IAAA,KAcA3I,EAAAk0D,YAAAh7D,UAAAirB,kBAAA,SAAAmc,GAEAtgC,EAAAy8B,KAAAvjC,UAAAirB,kBAAAxsB,KAAAP,MAAA,GAEA,aAAAA,KAAA+8D,SAEA/8D,KAAAi9D,kBAAAl2C,WAAA/mB,KAAAgnB,aAEE,aAAAhnB,KAAA+8D,SAEF/8D,KAAAi9D,kBAAAl2C,WAAA/mB,KAAAg9D,YAIA90D,QAAAuI,KAAA,4CAAAzQ,KAAA+8D,WAMAn0D,EAAAk0D,YAAAh7D,UAAAsR,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAktB,SAAAltB,KAAAmqC,SAAAnqC,KAAAo8D,kBAAAzqD,KAAA3R,OAYA4I,EAAA28B,IAAA,WAEA38B,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,MAEAvjC,OAAAwB,iBAAAvC,MACAkzD,QACAjxD,YAAA,EACAhB,UAEAilC,SACAriC,IAAA,WAGA,MADAqE,SAAAuI,KAAA,oDACAzQ,KAAAkzD,YASAtqD,EAAA28B,IAAAzjC,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAA28B,IAAAzjC,UAAAE,YAAA4G,EAAA28B,IAEA38B,EAAA28B,IAAAzjC,UAAAsxD,SAAA,SAAA/vD,EAAAsnB,GAEAhnB,SAAAgnB,IAAAA,EAAA,GAEAA,EAAAnhB,KAAA8X,IAAAqJ,EAIA,KAAA,GAFAuoC,GAAAlzD,KAAAkzD,OAEAjtD,EAAA,EAAiBA,EAAAitD,EAAAvwD,UAEjBgoB,EAAAuoC,EAAAjtD,GAAA0kB,UAFoC1kB,KAUpCitD,EAAAxuB,OAAAz+B,EAAA,GAAuB0kB,SAAAA,EAAAtnB,OAAAA,IAEvBrD,KAAAuU,IAAAlR,IAIAuF,EAAA28B,IAAAzjC,UAAAw7D,qBAAA,SAAA3yC,GAIA,IAAA,GAFAuoC,GAAAlzD,KAAAkzD,OAEAxwD,EAAA,EAAAuD,EAAAitD,EAAAvwD,OAAoCsD,EAAAvD,KAEpCioB,EAAAuoC,EAAAxwD,GAAAioB,UAF2CjoB,KAU3C,MAAAwwD,GAAAxwD,EAAA,GAAAW,QAIAuF,EAAA28B,IAAAzjC,UAAAmjC,QAAA,WAEA,GAAAs4B,GAAA,GAAA30D,GAAAwY,OAEA,OAAA,UAAAyjB,EAAAC,GAEAy4B,EAAAn1C,sBAAApoB,KAAAgnB,YAEA,IAAA2D,GAAAka,EAAA1N,IAAAF,OAAAnS,WAAAy4C,EAEAv9D,MAAAs9D,qBAAA3yC,GAAAsa,QAAAJ,EAAAC,OAMAl8B,EAAA28B,IAAAzjC,UAAAod,OAAA,WAEA,GAAA8B,GAAA,GAAApY,GAAAwY,QACAgE,EAAA,GAAAxc,GAAAwY,OAEA,OAAA,UAAA9Y,GAEA,GAAA4qD,GAAAlzD,KAAAkzD,MAEA,IAAAA,EAAAvwD,OAAA,EAAA,CAEAqe,EAAAoH,sBAAA9f,EAAA0e,aACA5B,EAAAgD,sBAAApoB,KAAAgnB,YAEA,IAAA2D,GAAA3J,EAAA8D,WAAAM,EAEA8tC,GAAA,GAAA7vD,OAAA2hC,SAAA,CAEA,KAAA,GAAAtiC,GAAA,EAAAuD,EAAAitD,EAAAvwD,OAAsCsD,EAAAvD,GAEtCioB,GAAAuoC,EAAAxwD,GAAAioB,SAF6CjoB,IAI7CwwD,EAAAxwD,EAAA,GAAAW,OAAA2hC,SAAA,EACAkuB,EAAAxwD,GAAAW,OAAA2hC,SAAA,CAUA,MAAU/+B,EAAAvD,EAAOA,IAEjBwwD,EAAAxwD,GAAAW,OAAA2hC,SAAA,OAUAp8B,EAAA28B,IAAAzjC,UAAA6P,KAAA,SAAAy4B,GAEAxhC,EAAAw9B,SAAAtkC,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAAA,EAIA,KAAA,GAFA8oB,GAAA9oB,EAAA8oB,OAEAxwD,EAAA,EAAAuD,EAAAitD,EAAAvwD,OAAoCsD,EAAAvD,EAAOA,IAAA,CAE3C,GAAAywD,GAAAD,EAAAxwD,EAEA1C,MAAAozD,SAAAD,EAAA9vD,OAAA+P,QAAA+/C,EAAAxoC,UAIA,MAAA3qB,OAIA4I,EAAA28B,IAAAzjC,UAAAqnC,OAAA,SAAAC,GAEA,GAAAI,GAAA5gC,EAAAw9B,SAAAtkC,UAAAqnC,OAAA5oC,KAAAP,KAAAopC,EAEAI,GAAAnmC,OAAA6vD,SAIA,KAAA,GAFAA,GAAAlzD,KAAAkzD,OAEAxwD,EAAA,EAAAuD,EAAAitD,EAAAvwD,OAAoCsD,EAAAvD,EAAOA,IAAA,CAE3C,GAAAywD,GAAAD,EAAAxwD,EAEA8mC,GAAAnmC,OAAA6vD,OAAAjsD,MACA5D,OAAA8vD,EAAA9vD,OAAAg7B,KACA1T,SAAAwoC,EAAAxoC,WAKA,MAAA6e,IAWA5gC,EAAA88B,OAAA,WAEA,GAAA8F,GAAA,GAAAiB,cAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACArf,EAAA,GAAAQ,gBAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACAqhB,EAAA,GAAArhB,eAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEAV,EAAA,GAAAtkB,GAAAykB,cAKA,OAJAH,GAAA6nB,SAAA,GAAAnsC,GAAA+hC,gBAAAa,EAAA,IACAte,EAAA+nB,aAAA,WAAA,GAAArsC,GAAA+hC,gBAAAvd,EAAA,IACAF,EAAA+nB,aAAA,KAAA,GAAArsC,GAAA+hC,gBAAAsE,EAAA,IAEA,SAAA9E,GAEAvhC,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,SAEAtkC,KAAAktB,SAAAA,EACAltB,KAAAmqC,SAAAxmC,SAAAwmC,EAAAA,EAAA,GAAAvhC,GAAA6uD,mBAMA7uD,EAAA88B,OAAA5jC,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAA88B,OAAA5jC,UAAAE,YAAA4G,EAAA88B,OAEA98B,EAAA88B,OAAA5jC,UAAAmjC,QAAA,WAEA,GAAAs4B,GAAA,GAAA30D,GAAAwY,OAEA,OAAA,UAAAyjB,EAAAC,GAEAy4B,EAAAn1C,sBAAApoB,KAAAgnB,YAEA,IAAA0D,GAAAma,EAAA1N,IAAAG,kBAAAimC,GACAC,EAAAx9D,KAAA60B,MAAA5rB,EAAAjJ,KAAA60B,MAAArW,CAEAkM,GAAA8yC,GAMA14B,EAAA79B,MAEA0jB,SAAAnhB,KAAAmK,KAAA+W,GACAM,MAAAhrB,KAAA21B,SACA+Y,KAAA,KACArrC,OAAArD,WAQA4I,EAAA88B,OAAA5jC,UAAAsR,MAAA,WAEA,MAAA,IAAApT,MAAAgC,YAAAhC,KAAAmqC,UAAAx4B,KAAA3R,OAMA4I,EAAA60D,SAAA70D,EAAA88B,OASA98B,EAAA80D,UAAA,SAAAna,EAAAtwC,EAAA0X,EAAAs9B,EAAA52C,GAEAzI,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAA29D,cAEA39D,KAAA49D,eAAA,GAAAh1D,GAAAwY,QACAphB,KAAA69D,qBAAAl6D,OAEAA,SAAA4/C,GAEAvjD,KAAAuU,IAAAgvC,EAAAtwC,EAAA0X,EAAAs9B,EAAA52C,IAMAzI,EAAA80D,UAAA57D,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAA80D,UAAA57D,UAAAE,YAAA4G,EAAA80D,UAOA90D,EAAA80D,UAAA57D,UAAAyS,IAAA,SAAAgvC,EAAAtwC,EAAA0X,EAAAs9B,EAAA52C,EAAAq5C,GAEA/mD,SAAAsP,IAAAA,EAAA,IACAtP,SAAAgnB,IAAAA,EAAA,GACAhnB,SAAA+mD,IAAAA,EAAA,GACA/mD,SAAA0N,IAAAA,EAAA,GAAAzI,GAAAwI,MAAA,WACAzN,SAAAskD,IAAAA,EAAAr/C,EAAA8C,gBAEAif,EAAAnhB,KAAAuJ,IAAA4X,EAAAnhB,KAAAC,IAAA,EAAAkhB,IAEA3qB,KAAA29D,WAAA12D,MACAs8C,QAAAA,EACAtwC,KAAAA,EACA0X,SAAAA,EACA1hB,EAAA,EAAAuV,EAAA,EAAAC,EAAA,EACAoW,MAAA,EACAyR,SAAA,EACAokB,QAAAA,EACAr5C,MAAAA,EACA42C,SAAAA,KAUAr/C,EAAA80D,UAAA57D,UAAAg8D,iBAAA,WAEA,GAAA9uC,GACA+uC,EADAnuB,EAAA5vC,KAAA29D,WAAAh7D,OAEAq7D,EAAA,GAAAh+D,KAAA49D,eAAA30D,EACAg1D,EAAA,GAAAj+D,KAAA49D,eAAAp/C,CAEA,KAAAwQ,EAAA,EAAa4gB,EAAA5gB,EAAQA,IAErB+uC,EAAA/9D,KAAA29D,WAAA3uC,GAEA+uC,EAAA90D,EAAAjJ,KAAA49D,eAAA30D,EAAA+0D,EAAAD,EAAApzC,SACAozC,EAAAv/C,EAAAxe,KAAA49D,eAAAp/C,EAAAy/C,EAAAF,EAAApzC,SAEAozC,EAAAG,eAAAH,EAAA90D,EAAAO,KAAA2f,GAAA,IACA40C,EAAAz3B,UAAA,KAAAy3B,EAAAG,eAAAH,EAAAz3B,WAMA19B,EAAA80D,UAAA57D,UAAA6P,KAAA,SAAAy4B,GAEAxhC,EAAAw9B,SAAAtkC,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEApqC,KAAA49D,eAAAjsD,KAAAy4B,EAAAwzB,gBACA59D,KAAA69D,qBAAAzzB,EAAAyzB,oBAEA,KAAA,GAAAn7D,GAAA,EAAAuD,EAAAmkC,EAAAuzB,WAAAh7D,OAA+CsD,EAAAvD,EAAOA,IAEtD1C,KAAA29D,WAAA12D,KAAAmjC,EAAAuzB,WAAAj7D,GAIA,OAAA1C,OAUA4I,EAAAmqD,MAAA,WAEAnqD,EAAAw9B,SAAA7lC,KAAAP,MAEAA,KAAAskC,KAAA,QAEAtkC,KAAA41D,IAAA,KACA51D,KAAAm+D,iBAAA,KAEAn+D,KAAAo+D,YAAA,GAIAx1D,EAAAmqD,MAAAjxD,UAAAf,OAAAgB,OAAA6G,EAAAw9B,SAAAtkC,WACA8G,EAAAmqD,MAAAjxD,UAAAE,YAAA4G,EAAAmqD,MAEAnqD,EAAAmqD,MAAAjxD,UAAA6P,KAAA,SAAAy4B,GAUA,MARAxhC,GAAAw9B,SAAAtkC,UAAA6P,KAAApR,KAAAP,KAAAoqC,GAEA,OAAAA,EAAAwrB,MAAA51D,KAAA41D,IAAAxrB,EAAAwrB,IAAAxiD,SACA,OAAAg3B,EAAA+zB,mBAAAn+D,KAAAm+D,iBAAA/zB,EAAA+zB,iBAAA/qD,SAEApT,KAAAo+D,WAAAh0B,EAAAg0B,WACAp+D,KAAA6mC,iBAAAuD,EAAAvD,iBAEA7mC,MAWA4I,EAAAy1D,IAAA,SAAAhtD,EAAAglB,EAAAC,GAEAt2B,KAAAiK,KAAA,GAEAjK,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAAC,GAEArR,KAAAq2B,KAAA1yB,SAAA0yB,EAAAA,EAAA,EACAr2B,KAAAs2B,IAAA3yB,SAAA2yB,EAAAA,EAAA,KAIA1tB,EAAAy1D,IAAAv8D,UAAAsR,MAAA,WAEA,MAAA,IAAAxK,GAAAy1D,IAAAr+D,KAAAqR,MAAAuC,SAAA5T,KAAAq2B,KAAAr2B,KAAAs2B,MAWA1tB,EAAA01D,QAAA,SAAAjtD,EAAAktD,GAEAv+D,KAAAiK,KAAA,GAEAjK,KAAAqR,MAAA,GAAAzI,GAAAwI,MAAAC,GACArR,KAAAu+D,QAAA56D,SAAA46D,EAAAA,EAAA,OAIA31D,EAAA01D,QAAAx8D,UAAAsR,MAAA,WAEA,MAAA,IAAAxK,GAAA01D,QAAAt+D,KAAAqR,MAAAuC,SAAA5T,KAAAu+D,UAMA31D,EAAA41D,eAIA51D,EAAA41D,YAAA,kBAAA,sFAIA51D,EAAA41D,YAAA,uBAAA,kEAIA51D,EAAA41D,YAAA,mBAAA,8EAIA51D,EAAA41D,YAAA,eAAA,qHAIA51D,EAAA41D,YAAA,oBAAA,0FAIA51D,EAAA41D,YAAA,aAAA,2CAIA51D,EAAA41D,YAAA,mBAAA,0CAIA51D,EAAA41D,YAAA,sBAAA,mzBAIA51D,EAAA41D,YAAA,eAAA,6DAIA51D,EAAA41D,YAAA,oBAAA,wDAIA51D,EAAA41D,YAAA,kBAAA,sDAIA51D,EAAA41D,YAAA,aAAA,yDAIA51D,EAAA41D,YAAA,OAAA,y+EAIA51D,EAAA41D,YAAA,qBAAA,2HAIA51D,EAAA41D,YAAA,uBAAA,oJAIA51D,EAAA41D,YAAA,4BAAA,qJAIA51D,EAAA41D,YAAA,qBAAA,sMAIA51D,EAAA41D,YAAA,0BAAA,wEAIA51D,EAAA41D,YAAA,gBAAA,+rDAIA51D,EAAA41D,YAAA,qBAAA,uWAIA51D,EAAA41D,YAAA,mBAAA,sLAIA51D,EAAA41D,YAAA,cAAA,8cAIA51D,EAAA41D,YAAA,aAAA,kcAIA51D,EAAA41D,YAAA,kBAAA;AAIA51D,EAAA41D,YAAA,mBAAA,mZAIA51D,EAAA41D,YAAA,kBAAA,gHAIA51D,EAAA41D,YAAA,uBAAA,mGAIA51D,EAAA41D,YAAA,2BAAA,ghCAIA51D,EAAA41D,YAAA,sBAAA,uhFAIA51D,EAAA41D,YAAA,sBAAA,utEAIA51D,EAAA41D,YAAA,2BAAA,8uCAIA51D,EAAA41D,YAAA,yBAAA,+LAIA51D,EAAA41D,YAAA,oBAAA,uGAIA51D,EAAA41D,YAAA,yBAAA,wDAIA51D,EAAA41D,YAAA,qBAAA,uIAIA51D,EAAA41D,YAAA,0BAAA,+IAIA51D,EAAA41D,YAAA,wBAAA,6IAIA51D,EAAA41D,YAAA,mBAAA,wQAIA51D,EAAA41D,YAAA,aAAA,gKAIA51D,EAAA41D,YAAA,kBAAA,sDAIA51D,EAAA41D,YAAA,sBAAA,uJAIA51D,EAAA41D,YAAA,2BAAA,qFAIA51D,EAAA41D,YAAA,mBAAA,gVAIA51D,EAAA41D,YAAA,wBAAA,kLAIA51D,EAAA41D,YAAA,mBAAA,0qBAIA51D,EAAA41D,YAAA,sBAAA,qfAIA51D,EAAA41D,YAAA,wBAAA,slBAIA51D,EAAA41D,YAAA,eAAA,8MAIA51D,EAAA41D,YAAA,mBAAA,y0SAIA51D,EAAA41D,YAAA,wBAAA,uoDAIA51D,EAAA41D,YAAA,sBAAA,0KAIA51D,EAAA41D,YAAA,iBAAA,mJAIA51D,EAAA41D,YAAA,gBAAA,kOAIA51D,EAAA41D,YAAA,qBAAA,uiCAIA51D,EAAA41D,YAAA,gBAAA,qXAIA51D,EAAA41D,YAAA,kBAAA,6WAIA51D,EAAA41D,YAAA,qBAAA,iMAIA51D,EAAA41D,YAAA,0BAAA,sEAIA51D,EAAA41D,YAAA,kBAAA,uFAIA51D,EAAA41D,YAAA,gBAAA,6GAIA51D,EAAA41D,YAAA,WAAA,gFAIA51D,EAAA41D,YAAA,iBAAA,sMAIA51D,EAAA41D,YAAA,eAAA,qOAIA51D,EAAA41D,YAAA,UAAA,kOAIA51D,EAAA41D,YAAA,gBAAA,+QAQA51D,EAAA2uD,eAEA1mB,MAAA,SAAA6d,GAIA,IAAA,GAFA+P,MAEA97B,EAAA,EAAkBA,EAAA+rB,EAAA/rD,OAAqBggC,IAAA,CAEvC,GAAAtT,GAAArvB,KAAAoT,MAAAs7C,EAAA/rB,GAEA,KAAA,GAAAjiC,KAAA2uB,GAEAovC,EAAA/9D,GAAA2uB,EAAA3uB,GAMA,MAAA+9D,IAIArrD,MAAA,SAAAsrD,GAEA,GAAAC,KAEA,KAAA,GAAAh8B,KAAA+7B,GAAA,CAEAC,EAAAh8B,KAEA,KAAA,GAAAjiC,KAAAg+D,GAAA/7B,GAAA,CAEA,GAAAi8B,GAAAF,EAAA/7B,GAAAjiC,EAEAk+D,aAAAh2D,GAAAwI,OACAwtD,YAAAh2D,GAAAwa,SACAw7C,YAAAh2D,GAAAwY,SACAw9C,YAAAh2D,GAAAigB,SACA+1C,YAAAh2D,GAAA+kB,SACAixC,YAAAh2D,GAAAge,SACAg4C,YAAAh2D,GAAA+pD,QAEAgM,EAAAh8B,GAAAjiC,GAAAk+D,EAAAxrD,QAEKjN,MAAAggC,QAAAy4B,GAELD,EAAAh8B,GAAAjiC,GAAAk+D,EAAA9qD,QAIA6qD,EAAAh8B,GAAAjiC,GAAAk+D,GAQA,MAAAD,KAYA/1D,EAAAi2D,aAEAC,QAEAC,SAAez6B,KAAA,IAAArjC,MAAA,GAAA2H,GAAAwI,MAAA,WACfs5C,SAAepmB,KAAA,IAAArjC,MAAA,GAEf2kD,KAAWthB,KAAA,IAAArjC,MAAA,MACX+9D,cAAoB16B,KAAA,KAAArjC,MAAA,GAAA2H,GAAAigB,QAAA,EAAA,EAAA,EAAA,IAEpBkhC,aAAmBzlB,KAAA,IAAArjC,MAAA,MACnBmpD,UAAgB9lB,KAAA,IAAArjC,MAAA,MAEhBsuD,QAAcjrB,KAAA,IAAArjC,MAAA,MACdg+D,YAAkB36B,KAAA,IAAArjC,MAAA,IAClBwuD,cAAoBnrB,KAAA,IAAArjC,MAAA,GACpBg1D,iBAAuB3xB,KAAA,IAAArjC,MAAA,MAIvBi+D,OAEApW,OAAaxkB,KAAA,IAAArjC,MAAA,MACb0uD,gBAAsBrrB,KAAA,IAAArjC,MAAA,IAItBk+D,UAEA1W,UAAgBnkB,KAAA,IAAArjC,MAAA,MAChByuD,mBAAyBprB,KAAA,IAAArjC,MAAA,IAIzBm+D,aAEA5I,aAAmBlyB,KAAA,IAAArjC,MAAA,OAInBo+D,SAEAlW,SAAe7kB,KAAA,IAAArjC,MAAA,MACfuoD,WAAiBllB,KAAA,IAAArjC,MAAA,IAIjBq+D,WAEA7V,WAAiBnlB,KAAA,IAAArjC,MAAA,MACjB6oD,aAAmBxlB,KAAA,KAAArjC,MAAA,GAAA2H,GAAAwa,QAAA,EAAA,KAInBm8C,iBAEAnQ,iBAAuB9qB,KAAA,IAAArjC,MAAA,MACvBouD,mBAAyB/qB,KAAA,IAAArjC,MAAA,GACzBquD,kBAAwBhrB,KAAA,IAAArjC,MAAA,IAIxB20D,KAEA4J,YAAkBl7B,KAAA,IAAArjC,MAAA,OAClBw+D,SAAen7B,KAAA,IAAArjC,MAAA,GACfy+D,QAAcp7B,KAAA,IAAArjC,MAAA,KACd0+D,UAAgBr7B,KAAA,IAAArjC,MAAA,GAAA2H,GAAAwI,MAAA,YAIhB+lD,QAEAyI,mBAAyBt7B,KAAA,KAAArjC,UAEzB4+D,2BAAiCv7B,KAAA,KAAArjC,UACjC6+D,uBAA6Bx7B,KAAA,KAAArjC,UAE7B8+D,0BAAgCz7B,KAAA,KAAArjC,UAChC++D,yBAA+B17B,KAAA,KAAArjC,UAC/Bg/D,4BAAkC37B,KAAA,KAAArjC,UAElCi/D,iBAAuB57B,KAAA,KAAArjC,UACvBk/D,oBAA0B77B,KAAA,KAAArjC,UAC1Bm/D,oBAA0B97B,KAAA,MAAArjC,UAC1Bo/D,iBAAuB/7B,KAAA,MAAArjC,UAEvBq/D,gBAAsBh8B,KAAA,KAAArjC,UACtBs/D,mBAAyBj8B,KAAA,KAAArjC,UACzBu/D,oBAA0Bl8B,KAAA,KAAArjC,UAC1Bw/D,mBAAyBn8B,KAAA,MAAArjC,UACzBy/D,mBAAyBp8B,KAAA,MAAArjC,UACzB0/D,mBAAyBr8B,KAAA,MAAArjC,UACzB2/D,gBAAsBt8B,KAAA,MAAArjC,WAItBuqB,QAEAq1C,SAAev8B,KAAA,IAAArjC,MAAA,GAAA2H,GAAAwI,MAAA,WACfs5C,SAAepmB,KAAA,IAAArjC,MAAA,GACfgS,MAAYqxB,KAAA,IAAArjC,MAAA,GACZ4zB,OAAayP,KAAA,IAAArjC,MAAA,GACb2kD,KAAWthB,KAAA,IAAArjC,MAAA,MACX+9D,cAAoB16B,KAAA,KAAArjC,MAAA,GAAA2H,GAAAigB,QAAA,EAAA,EAAA,EAAA,IAEpB22C,YAAkBl7B,KAAA,IAAArjC,MAAA,OAClBw+D,SAAen7B,KAAA,IAAArjC,MAAA,GACfy+D,QAAcp7B,KAAA,IAAArjC,MAAA,KACd0+D,UAAgBr7B,KAAA,IAAArjC,MAAA,GAAA2H,GAAAwI,MAAA,YAIhB0vD,WAEAC,WAAgBz8B,KAAA,KAAArjC,UAChB+/D,eAAoB18B,KAAA,MAAArjC,UAEpB+jD,YAAkB1gB,KAAA,MAAArjC,UAClBikD,gBAAqB5gB,KAAA,MAAArjC,UAErBggE,cAAoB38B,KAAA,MAAArjC,YAiBpB2H,EAAAs4D,WAEAC,OAEAzS,SAAA9lD,EAAA2uD,cAAA1mB,OAEAjoC,EAAAi2D,YAAA,OACAj2D,EAAAi2D,YAAA,MACAj2D,EAAAi2D,YAAA,IACAj2D,EAAAi2D,YAAA,YAIAlQ,cAEA/lD,EAAA41D,YAAA,OACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,wBACA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,sBACA51D,EAAA41D,YAAA,wBAEA,gBAEA51D,EAAA41D,YAAA,UACA51D,EAAA41D,YAAA,WACA51D,EAAA41D,YAAA,aACA51D,EAAA41D,YAAA,gBAEA,qBAEA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,qBAEA,UAEA51D,EAAA41D,YAAA,aACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,mBAEA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,cACA51D,EAAA41D,YAAA,iBAEA,KAEAhgC,KAAA,MAEAowB,gBAEA,wBACA,yBAEAhmD,EAAA41D,YAAA,OACA51D,EAAA41D,YAAA,oBACA51D,EAAA41D,YAAA,iBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,uBACA51D,EAAA41D,YAAA,oBACA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,wBACA51D,EAAA41D,YAAA,0BACA51D,EAAA41D,YAAA,0BAEA,gBAEA,qCACA,iDACA,yCACA,kCAEA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,aACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,mBAEA,sEAEA51D,EAAA41D,YAAA,gBAEA51D,EAAA41D,YAAA,yBAEA51D,EAAA41D,YAAA,aAEA,yDAEA,KAEAhgC,KAAA;EAIA4iC,SAEA1S,SAAA9lD,EAAA2uD,cAAA1mB,OAEAjoC,EAAAi2D,YAAA,OACAj2D,EAAAi2D,YAAA,IACAj2D,EAAAi2D,YAAA,OACAj2D,EAAAi2D,YAAA,WAGA1W,UAAkB7jB,KAAA,IAAArjC,MAAA,GAAA2H,GAAAwI,MAAA,OAKlBu9C,cAEA,kBAEA,4BAEA,sBAEA,4BAEA,SAEA/lD,EAAA41D,YAAA,OACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,2BACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,wBACA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,sBACA51D,EAAA41D,YAAA,wBAEA,gBAEA51D,EAAA41D,YAAA,UACA51D,EAAA41D,YAAA,WACA51D,EAAA41D,YAAA,aAEA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,qBAEA51D,EAAA41D,YAAA,aACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,mBAEA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,cACA51D,EAAA41D,YAAA,sBACA51D,EAAA41D,YAAA,iBAEA,KAEAhgC,KAAA,MAEAowB,gBAEA,wBACA,yBACA,yBAEA,kCAEA,4BAEA,sBAEA,4BAEA,SAEAhmD,EAAA41D,YAAA,OACA51D,EAAA41D,YAAA,oBACA51D,EAAA41D,YAAA,iBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,uBACA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,wBACA51D,EAAA41D,YAAA,0BACA51D,EAAA41D,YAAA,0BAEA,gBAEA,qCACA,iDACA,+CACA,kCAEA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,aACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,mBAEA,uBAEA,0BACA,sGACA,SACA,qGAEA,SAEA,qGAEA,UAEA51D,EAAA41D,YAAA,gBAEA51D,EAAA41D,YAAA,yBAEA51D,EAAA41D,YAAA,aAEA,yDAEA,KAEAhgC,KAAA,OAIA6iC,OAEA3S,SAAA9lD,EAAA2uD,cAAA1mB,OAEAjoC,EAAAi2D,YAAA,OACAj2D,EAAAi2D,YAAA,MACAj2D,EAAAi2D,YAAA,SACAj2D,EAAAi2D,YAAA,YACAj2D,EAAAi2D,YAAA,QACAj2D,EAAAi2D,YAAA,UACAj2D,EAAAi2D,YAAA,gBACAj2D,EAAAi2D,YAAA,IACAj2D,EAAAi2D,YAAA,OACAj2D,EAAAi2D,YAAA,WAGA1W,UAAkB7jB,KAAA,IAAArjC,MAAA,GAAA2H,GAAAwI,MAAA,IAClB82C,UAAkB5jB,KAAA,IAAArjC,MAAA,GAAA2H,GAAAwI,MAAA,UAClBg3C,WAAkB9jB,KAAA,IAAArjC,MAAA,OAKlB0tD,cAEA,gBAEA,8BAEA,sBAEA,yBAEA,SAEA/lD,EAAA41D,YAAA,OACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,4BACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,yBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,wBACA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,sBACA51D,EAAA41D,YAAA,wBAEA,gBAEA51D,EAAA41D,YAAA,UACA51D,EAAA41D,YAAA,WACA51D,EAAA41D,YAAA,aAEA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,qBAEA,sBAEA,6CAEA,SAEA51D,EAAA41D,YAAA,aACA51D,EAAA41D,YAAA,uBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,mBAEA,qCAEA51D,EAAA41D,YAAA,gBACA51D,EAAA41D,YAAA,cACA51D,EAAA41D,YAAA,oBACA51D,EAAA41D,YAAA,iBAEA,KAEAhgC,KAAA,MAEAowB,gBAEA,gBAEA,wBACA,yBACA,yBACA,2BACA,yBAEAhmD,EAAA41D,YAAA,OACA51D,EAAA41D,YAAA,oBACA51D,EAAA41D,YAAA,iBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,uBACA51D,EAAA41D,YAAA,oBACA51D,EAAA41D,YAAA,uBACA51D,EAAA41D,YAAA,0BACA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,2BACA51D,EAAA41D,YAAA,wBACA51D,EAAA41D,YAAA,sBACA51D,EAAA41D,YAAA,wBACA51D,EAAA41D,YAAA,0BACA51D,EAAA41D,YAAA,0BAEA,gBAEA,qCACA,iDACA,+CACA,uCACA,kCAEA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,aACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,qBACA51D,EAAA41D,YAAA,sBACA51D,EAAA41D,YAAA,kBACA51D,EAAA41D,YAAA,mBACA51D,EAAA41D,YAAA,eACA51D,EAAA41D,YAAA,qBAEA51D,EAAA41D,YAAA,sBACA51D,EAAA41D,YAAA,mBAEA,mCACA,oCAEA,eAEA,uIAEA,QAEA,4HAEA,SAEA51D,EAAA41D,YAAA,gBAEA51D,EAAA41D,YAAA,yBAEA51D,EAAA41D,YAAA,aAEA,yDAEA,KAEAhgC,KAAA,OAIAhT,QAEAkjC,SAAA9lD,EAAA2uD,cAAA1mB,OAEAjoC,EAAAi2D,YAAA,OACAj2D,EAAAi2D,YAAA,YAIAlQ,cAEA,sBACA,uBAEA/lD,EAAA41D,YAAA,OACA51D,EAAA41D,YAAA,kBACA51D,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","file":"vizicities.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VIZI\"] = factory();\n\telse\n\t\troot[\"VIZI\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VIZI\"] = factory();\n\telse\n\t\troot[\"VIZI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _World = __webpack_require__(1);\n\t\n\tvar _World2 = _interopRequireDefault(_World);\n\t\n\tvar VIZI = {\n\t  version: '0.3',\n\t\n\t  // Public API\n\t  World: _World2['default']\n\t};\n\t\n\texports['default'] = VIZI;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _eventemitter3 = __webpack_require__(2);\n\t\n\tvar _eventemitter32 = _interopRequireDefault(_eventemitter3);\n\t\n\tvar _EngineEngine = __webpack_require__(3);\n\t\n\tvar _EngineEngine2 = _interopRequireDefault(_EngineEngine);\n\t\n\t// Pretty much any event someone using ViziCities would need will be emitted or\n\t// proxied by World (eg. render events, etc)\n\t\n\tvar World = (function (_EventEmitter) {\n\t  _inherits(World, _EventEmitter);\n\t\n\t  function World(domId) {\n\t    _classCallCheck(this, World);\n\t\n\t    _get(Object.getPrototypeOf(World.prototype), 'constructor', this).call(this);\n\t\n\t    this._initContainer(domId);\n\t    this._initEngine();\n\t\n\t    // Kick off the update and render loop\n\t    this._update();\n\t  }\n\t\n\t  // Initialise without requiring new keyword\n\t\n\t  _createClass(World, [{\n\t    key: '_initContainer',\n\t    value: function _initContainer(domId) {\n\t      this._container = document.getElementById(domId);\n\t    }\n\t  }, {\n\t    key: '_initEngine',\n\t    value: function _initEngine() {\n\t      this._engine = (0, _EngineEngine2['default'])(this._container);\n\t\n\t      // Engine events\n\t      //\n\t      // Consider proxying these through events on World for public access\n\t      // this._engine.on('preRender', () => {});\n\t      // this._engine.on('postRender', () => {});\n\t    }\n\t  }, {\n\t    key: '_update',\n\t    value: function _update() {\n\t      var delta = this._engine.clock.getDelta();\n\t\n\t      // Once _update is called it will run forever, for now\n\t      window.requestAnimationFrame(this._update.bind(this));\n\t\n\t      this.emit('preUpdate');\n\t      this._engine._update(delta);\n\t      this.emit('postUpdate');\n\t    }\n\t  }, {\n\t    key: 'addLayer',\n\t    value: function addLayer(layer) {}\n\t  }, {\n\t    key: 'removeLayer',\n\t    value: function removeLayer(layer) {}\n\t  }]);\n\t\n\t  return World;\n\t})(_eventemitter32['default']);\n\t\n\texports['default'] = function (domId) {\n\t  return new World(domId);\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t//\n\t// We store our EE objects in a plain object whose properties are event names.\n\t// If `Object.create(null)` is not supported we prefix the event names with a\n\t// `~` to make sure that the built-in object properties are not overridden or\n\t// used as an attack vector.\n\t// We also assume that `Object.create(null)` is available when the event name\n\t// is an ES6 Symbol.\n\t//\n\tvar prefix = typeof Object.create !== 'function' ? '~' : false;\n\t\n\t/**\n\t * Representation of a single EventEmitter function.\n\t *\n\t * @param {Function} fn Event handler to be called.\n\t * @param {Mixed} context Context for function execution.\n\t * @param {Boolean} once Only emit once\n\t * @api private\n\t */\n\tfunction EE(fn, context, once) {\n\t  this.fn = fn;\n\t  this.context = context;\n\t  this.once = once || false;\n\t}\n\t\n\t/**\n\t * Minimal EventEmitter interface that is molded against the Node.js\n\t * EventEmitter interface.\n\t *\n\t * @constructor\n\t * @api public\n\t */\n\tfunction EventEmitter() { /* Nothing to set */ }\n\t\n\t/**\n\t * Holds the assigned EventEmitters by name.\n\t *\n\t * @type {Object}\n\t * @private\n\t */\n\tEventEmitter.prototype._events = undefined;\n\t\n\t/**\n\t * Return a list of assigned event listeners.\n\t *\n\t * @param {String} event The events that should be listed.\n\t * @param {Boolean} exists We only need to know if there are listeners.\n\t * @returns {Array|Boolean}\n\t * @api public\n\t */\n\tEventEmitter.prototype.listeners = function listeners(event, exists) {\n\t  var evt = prefix ? prefix + event : event\n\t    , available = this._events && this._events[evt];\n\t\n\t  if (exists) return !!available;\n\t  if (!available) return [];\n\t  if (available.fn) return [available.fn];\n\t\n\t  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n\t    ee[i] = available[i].fn;\n\t  }\n\t\n\t  return ee;\n\t};\n\t\n\t/**\n\t * Emit an event to all registered event listeners.\n\t *\n\t * @param {String} event The name of the event.\n\t * @returns {Boolean} Indication if we've emitted an event.\n\t * @api public\n\t */\n\tEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n\t  var evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events || !this._events[evt]) return false;\n\t\n\t  var listeners = this._events[evt]\n\t    , len = arguments.length\n\t    , args\n\t    , i;\n\t\n\t  if ('function' === typeof listeners.fn) {\n\t    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\t\n\t    switch (len) {\n\t      case 1: return listeners.fn.call(listeners.context), true;\n\t      case 2: return listeners.fn.call(listeners.context, a1), true;\n\t      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n\t      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n\t      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n\t      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n\t    }\n\t\n\t    for (i = 1, args = new Array(len -1); i < len; i++) {\n\t      args[i - 1] = arguments[i];\n\t    }\n\t\n\t    listeners.fn.apply(listeners.context, args);\n\t  } else {\n\t    var length = listeners.length\n\t      , j;\n\t\n\t    for (i = 0; i < length; i++) {\n\t      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\t\n\t      switch (len) {\n\t        case 1: listeners[i].fn.call(listeners[i].context); break;\n\t        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n\t        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n\t        default:\n\t          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n\t            args[j - 1] = arguments[j];\n\t          }\n\t\n\t          listeners[i].fn.apply(listeners[i].context, args);\n\t      }\n\t    }\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\t/**\n\t * Register a new EventListener for the given event.\n\t *\n\t * @param {String} event Name of the event.\n\t * @param {Functon} fn Callback function.\n\t * @param {Mixed} context The context of the function.\n\t * @api public\n\t */\n\tEventEmitter.prototype.on = function on(event, fn, context) {\n\t  var listener = new EE(fn, context || this)\n\t    , evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events) this._events = prefix ? {} : Object.create(null);\n\t  if (!this._events[evt]) this._events[evt] = listener;\n\t  else {\n\t    if (!this._events[evt].fn) this._events[evt].push(listener);\n\t    else this._events[evt] = [\n\t      this._events[evt], listener\n\t    ];\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Add an EventListener that's only called once.\n\t *\n\t * @param {String} event Name of the event.\n\t * @param {Function} fn Callback function.\n\t * @param {Mixed} context The context of the function.\n\t * @api public\n\t */\n\tEventEmitter.prototype.once = function once(event, fn, context) {\n\t  var listener = new EE(fn, context || this, true)\n\t    , evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events) this._events = prefix ? {} : Object.create(null);\n\t  if (!this._events[evt]) this._events[evt] = listener;\n\t  else {\n\t    if (!this._events[evt].fn) this._events[evt].push(listener);\n\t    else this._events[evt] = [\n\t      this._events[evt], listener\n\t    ];\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Remove event listeners.\n\t *\n\t * @param {String} event The event we want to remove.\n\t * @param {Function} fn The listener that we need to find.\n\t * @param {Mixed} context Only remove listeners matching this context.\n\t * @param {Boolean} once Only remove once listeners.\n\t * @api public\n\t */\n\tEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n\t  var evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events || !this._events[evt]) return this;\n\t\n\t  var listeners = this._events[evt]\n\t    , events = [];\n\t\n\t  if (fn) {\n\t    if (listeners.fn) {\n\t      if (\n\t           listeners.fn !== fn\n\t        || (once && !listeners.once)\n\t        || (context && listeners.context !== context)\n\t      ) {\n\t        events.push(listeners);\n\t      }\n\t    } else {\n\t      for (var i = 0, length = listeners.length; i < length; i++) {\n\t        if (\n\t             listeners[i].fn !== fn\n\t          || (once && !listeners[i].once)\n\t          || (context && listeners[i].context !== context)\n\t        ) {\n\t          events.push(listeners[i]);\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  //\n\t  // Reset the array, or remove it completely if we have no more listeners.\n\t  //\n\t  if (events.length) {\n\t    this._events[evt] = events.length === 1 ? events[0] : events;\n\t  } else {\n\t    delete this._events[evt];\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Remove all listeners or only the listeners for the specified event.\n\t *\n\t * @param {String} event The event want to remove all listeners for.\n\t * @api public\n\t */\n\tEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n\t  if (!this._events) return this;\n\t\n\t  if (event) delete this._events[prefix ? prefix + event : event];\n\t  else this._events = prefix ? {} : Object.create(null);\n\t\n\t  return this;\n\t};\n\t\n\t//\n\t// Alias methods names because people roll like that.\n\t//\n\tEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\tEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t//\n\t// This function doesn't apply anymore.\n\t//\n\tEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n\t  return this;\n\t};\n\t\n\t//\n\t// Expose the prefix.\n\t//\n\tEventEmitter.prefixed = prefix;\n\t\n\t//\n\t// Expose the module.\n\t//\n\tif (true) {\n\t  module.exports = EventEmitter;\n\t}\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _eventemitter3 = __webpack_require__(2);\n\t\n\tvar _eventemitter32 = _interopRequireDefault(_eventemitter3);\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _Scene = __webpack_require__(5);\n\t\n\tvar _Scene2 = _interopRequireDefault(_Scene);\n\t\n\tvar _Renderer = __webpack_require__(6);\n\t\n\tvar _Renderer2 = _interopRequireDefault(_Renderer);\n\t\n\tvar _Camera = __webpack_require__(7);\n\t\n\tvar _Camera2 = _interopRequireDefault(_Camera);\n\t\n\tvar Engine = (function (_EventEmitter) {\n\t  _inherits(Engine, _EventEmitter);\n\t\n\t  function Engine(container) {\n\t    _classCallCheck(this, Engine);\n\t\n\t    console.log('Init Engine');\n\t\n\t    _get(Object.getPrototypeOf(Engine.prototype), 'constructor', this).call(this);\n\t\n\t    this.scene = _Scene2['default'];\n\t    this.renderer = (0, _Renderer2['default'])(container);\n\t    this.camera = (0, _Camera2['default'])(container);\n\t    this.clock = new _three2['default'].Clock();\n\t  }\n\t\n\t  // Initialise without requiring new keyword\n\t\n\t  _createClass(Engine, [{\n\t    key: '_update',\n\t    value: function _update(delta) {\n\t      this.emit('preRender');\n\t      this.renderer.render(this.scene, this.camera);\n\t      this.emit('postRender');\n\t    }\n\t  }]);\n\t\n\t  return Engine;\n\t})(_eventemitter32['default']);\n\t\n\texports['default'] = function (container) {\n\t  return new Engine(container);\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var self = self || {};// File:src/Three.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tvar THREE = { REVISION: '73' };\r\n\t\r\n\t//\r\n\t\r\n\tif ( true ) {\r\n\t\r\n\t\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (THREE), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t\r\n\t} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\r\n\t\r\n\t\t\tmodule.exports = THREE;\r\n\t\r\n\t}\r\n\t\r\n\t\r\n\t// polyfills\r\n\t\r\n\tif ( self.requestAnimationFrame === undefined || self.cancelAnimationFrame === undefined ) {\r\n\t\r\n\t\t// Missing in Android stock browser.\r\n\t\r\n\t\t( function () {\r\n\t\r\n\t\t\tvar lastTime = 0;\r\n\t\t\tvar vendors = [ 'ms', 'moz', 'webkit', 'o' ];\r\n\t\r\n\t\t\tfor ( var x = 0; x < vendors.length && ! self.requestAnimationFrame; ++ x ) {\r\n\t\r\n\t\t\t\tself.requestAnimationFrame = self[ vendors[ x ] + 'RequestAnimationFrame' ];\r\n\t\t\t\tself.cancelAnimationFrame = self[ vendors[ x ] + 'CancelAnimationFrame' ] || self[ vendors[ x ] + 'CancelRequestAnimationFrame' ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( self.requestAnimationFrame === undefined && self.setTimeout !== undefined ) {\r\n\t\r\n\t\t\t\tself.requestAnimationFrame = function ( callback ) {\r\n\t\r\n\t\t\t\t\tvar currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );\r\n\t\t\t\t\tvar id = self.setTimeout( function () {\r\n\t\r\n\t\t\t\t\t\tcallback( currTime + timeToCall );\r\n\t\r\n\t\t\t\t\t}, timeToCall );\r\n\t\t\t\t\tlastTime = currTime + timeToCall;\r\n\t\t\t\t\treturn id;\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( self.cancelAnimationFrame === undefined && self.clearTimeout !== undefined ) {\r\n\t\r\n\t\t\t\tself.cancelAnimationFrame = function ( id ) {\r\n\t\r\n\t\t\t\t\tself.clearTimeout( id );\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} )();\r\n\t\r\n\t}\r\n\t\r\n\t//\r\n\t\r\n\tif ( self.performance === undefined ) {\r\n\t\r\n\t\tself.performance = {};\r\n\t\r\n\t}\r\n\t\r\n\tif ( self.performance.now === undefined ) {\r\n\t\r\n\t\t( function () {\r\n\t\r\n\t\t\tvar start = Date.now();\r\n\t\r\n\t\t\tself.performance.now = function () {\r\n\t\r\n\t\t\t\treturn Date.now() - start;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} )();\r\n\t\r\n\t}\r\n\t\r\n\t//\r\n\t\r\n\tif ( Number.EPSILON === undefined ) {\r\n\t\r\n\t\tNumber.EPSILON = Math.pow( 2, -52 );\r\n\t\r\n\t}\r\n\t\r\n\t//\r\n\t\r\n\tif ( Math.sign === undefined ) {\r\n\t\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\t\r\n\t\tMath.sign = function ( x ) {\r\n\t\r\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\t\r\n\t\t};\r\n\t\r\n\t}\r\n\t\r\n\tif ( Function.prototype.name === undefined && Object.defineProperty !== undefined ) {\r\n\t\r\n\t\t// Missing in IE9-11.\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\t\r\n\t\tObject.defineProperty( Function.prototype, 'name', {\r\n\t\r\n\t\t\tget: function () {\r\n\t\r\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} );\r\n\t\r\n\t}\r\n\t\r\n\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\r\n\t\r\n\tTHREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\r\n\t\r\n\t// GL STATE CONSTANTS\r\n\t\r\n\tTHREE.CullFaceNone = 0;\r\n\tTHREE.CullFaceBack = 1;\r\n\tTHREE.CullFaceFront = 2;\r\n\tTHREE.CullFaceFrontBack = 3;\r\n\t\r\n\tTHREE.FrontFaceDirectionCW = 0;\r\n\tTHREE.FrontFaceDirectionCCW = 1;\r\n\t\r\n\t// SHADOWING TYPES\r\n\t\r\n\tTHREE.BasicShadowMap = 0;\r\n\tTHREE.PCFShadowMap = 1;\r\n\tTHREE.PCFSoftShadowMap = 2;\r\n\t\r\n\t// MATERIAL CONSTANTS\r\n\t\r\n\t// side\r\n\t\r\n\tTHREE.FrontSide = 0;\r\n\tTHREE.BackSide = 1;\r\n\tTHREE.DoubleSide = 2;\r\n\t\r\n\t// shading\r\n\t\r\n\tTHREE.FlatShading = 1;\r\n\tTHREE.SmoothShading = 2;\r\n\t\r\n\t// colors\r\n\t\r\n\tTHREE.NoColors = 0;\r\n\tTHREE.FaceColors = 1;\r\n\tTHREE.VertexColors = 2;\r\n\t\r\n\t// blending modes\r\n\t\r\n\tTHREE.NoBlending = 0;\r\n\tTHREE.NormalBlending = 1;\r\n\tTHREE.AdditiveBlending = 2;\r\n\tTHREE.SubtractiveBlending = 3;\r\n\tTHREE.MultiplyBlending = 4;\r\n\tTHREE.CustomBlending = 5;\r\n\t\r\n\t// custom blending equations\r\n\t// (numbers start from 100 not to clash with other\r\n\t// mappings to OpenGL constants defined in Texture.js)\r\n\t\r\n\tTHREE.AddEquation = 100;\r\n\tTHREE.SubtractEquation = 101;\r\n\tTHREE.ReverseSubtractEquation = 102;\r\n\tTHREE.MinEquation = 103;\r\n\tTHREE.MaxEquation = 104;\r\n\t\r\n\t// custom blending destination factors\r\n\t\r\n\tTHREE.ZeroFactor = 200;\r\n\tTHREE.OneFactor = 201;\r\n\tTHREE.SrcColorFactor = 202;\r\n\tTHREE.OneMinusSrcColorFactor = 203;\r\n\tTHREE.SrcAlphaFactor = 204;\r\n\tTHREE.OneMinusSrcAlphaFactor = 205;\r\n\tTHREE.DstAlphaFactor = 206;\r\n\tTHREE.OneMinusDstAlphaFactor = 207;\r\n\t\r\n\t// custom blending source factors\r\n\t\r\n\t//THREE.ZeroFactor = 200;\r\n\t//THREE.OneFactor = 201;\r\n\t//THREE.SrcAlphaFactor = 204;\r\n\t//THREE.OneMinusSrcAlphaFactor = 205;\r\n\t//THREE.DstAlphaFactor = 206;\r\n\t//THREE.OneMinusDstAlphaFactor = 207;\r\n\tTHREE.DstColorFactor = 208;\r\n\tTHREE.OneMinusDstColorFactor = 209;\r\n\tTHREE.SrcAlphaSaturateFactor = 210;\r\n\t\r\n\t// depth modes\r\n\t\r\n\tTHREE.NeverDepth = 0;\r\n\tTHREE.AlwaysDepth = 1;\r\n\tTHREE.LessDepth = 2;\r\n\tTHREE.LessEqualDepth = 3;\r\n\tTHREE.EqualDepth = 4;\r\n\tTHREE.GreaterEqualDepth = 5;\r\n\tTHREE.GreaterDepth = 6;\r\n\tTHREE.NotEqualDepth = 7;\r\n\t\r\n\t\r\n\t// TEXTURE CONSTANTS\r\n\t\r\n\tTHREE.MultiplyOperation = 0;\r\n\tTHREE.MixOperation = 1;\r\n\tTHREE.AddOperation = 2;\r\n\t\r\n\t// Mapping modes\r\n\t\r\n\tTHREE.UVMapping = 300;\r\n\t\r\n\tTHREE.CubeReflectionMapping = 301;\r\n\tTHREE.CubeRefractionMapping = 302;\r\n\t\r\n\tTHREE.EquirectangularReflectionMapping = 303;\r\n\tTHREE.EquirectangularRefractionMapping = 304;\r\n\t\r\n\tTHREE.SphericalReflectionMapping = 305;\r\n\t\r\n\t// Wrapping modes\r\n\t\r\n\tTHREE.RepeatWrapping = 1000;\r\n\tTHREE.ClampToEdgeWrapping = 1001;\r\n\tTHREE.MirroredRepeatWrapping = 1002;\r\n\t\r\n\t// Filters\r\n\t\r\n\tTHREE.NearestFilter = 1003;\r\n\tTHREE.NearestMipMapNearestFilter = 1004;\r\n\tTHREE.NearestMipMapLinearFilter = 1005;\r\n\tTHREE.LinearFilter = 1006;\r\n\tTHREE.LinearMipMapNearestFilter = 1007;\r\n\tTHREE.LinearMipMapLinearFilter = 1008;\r\n\t\r\n\t// Data types\r\n\t\r\n\tTHREE.UnsignedByteType = 1009;\r\n\tTHREE.ByteType = 1010;\r\n\tTHREE.ShortType = 1011;\r\n\tTHREE.UnsignedShortType = 1012;\r\n\tTHREE.IntType = 1013;\r\n\tTHREE.UnsignedIntType = 1014;\r\n\tTHREE.FloatType = 1015;\r\n\tTHREE.HalfFloatType = 1025;\r\n\t\r\n\t// Pixel types\r\n\t\r\n\t//THREE.UnsignedByteType = 1009;\r\n\tTHREE.UnsignedShort4444Type = 1016;\r\n\tTHREE.UnsignedShort5551Type = 1017;\r\n\tTHREE.UnsignedShort565Type = 1018;\r\n\t\r\n\t// Pixel formats\r\n\t\r\n\tTHREE.AlphaFormat = 1019;\r\n\tTHREE.RGBFormat = 1020;\r\n\tTHREE.RGBAFormat = 1021;\r\n\tTHREE.LuminanceFormat = 1022;\r\n\tTHREE.LuminanceAlphaFormat = 1023;\r\n\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\r\n\tTHREE.RGBEFormat = THREE.RGBAFormat; //1024;\r\n\t\r\n\t// DDS / ST3C Compressed texture formats\r\n\t\r\n\tTHREE.RGB_S3TC_DXT1_Format = 2001;\r\n\tTHREE.RGBA_S3TC_DXT1_Format = 2002;\r\n\tTHREE.RGBA_S3TC_DXT3_Format = 2003;\r\n\tTHREE.RGBA_S3TC_DXT5_Format = 2004;\r\n\t\r\n\t\r\n\t// PVRTC compressed texture formats\r\n\t\r\n\tTHREE.RGB_PVRTC_4BPPV1_Format = 2100;\r\n\tTHREE.RGB_PVRTC_2BPPV1_Format = 2101;\r\n\tTHREE.RGBA_PVRTC_4BPPV1_Format = 2102;\r\n\tTHREE.RGBA_PVRTC_2BPPV1_Format = 2103;\r\n\t\r\n\t// Loop styles for AnimationAction\r\n\t\r\n\tTHREE.LoopOnce = 2200;\r\n\tTHREE.LoopRepeat = 2201;\r\n\tTHREE.LoopPingPong = 2202;\r\n\t\r\n\t// DEPRECATED\r\n\t\r\n\tTHREE.Projector = function () {\r\n\t\r\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\r\n\t\r\n\t\tthis.projectVector = function ( vector, camera ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\r\n\t\t\tvector.project( camera );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.unprojectVector = function ( vector, camera ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\r\n\t\t\tvector.unproject( camera );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.pickingRay = function ( vector, camera ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CanvasRenderer = function () {\r\n\t\r\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\r\n\t\r\n\t\tthis.domElement = document.createElement( 'canvas' );\r\n\t\tthis.clear = function () {};\r\n\t\tthis.render = function () {};\r\n\t\tthis.setClearColor = function () {};\r\n\t\tthis.setSize = function () {};\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Color.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Color = function ( color ) {\r\n\t\r\n\t\tif ( arguments.length === 3 ) {\r\n\t\r\n\t\t\treturn this.fromArray( arguments );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this.set( color );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Color.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Color,\r\n\t\r\n\t\tr: 1, g: 1, b: 1,\r\n\t\r\n\t\tset: function ( value ) {\r\n\t\r\n\t\t\tif ( value instanceof THREE.Color ) {\r\n\t\r\n\t\t\t\tthis.copy( value );\r\n\t\r\n\t\t\t} else if ( typeof value === 'number' ) {\r\n\t\r\n\t\t\t\tthis.setHex( value );\r\n\t\r\n\t\t\t} else if ( typeof value === 'string' ) {\r\n\t\r\n\t\t\t\tthis.setStyle( value );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetHex: function ( hex ) {\r\n\t\r\n\t\t\thex = Math.floor( hex );\r\n\t\r\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\t\tthis.b = ( hex & 255 ) / 255;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRGB: function ( r, g, b ) {\r\n\t\r\n\t\t\tthis.r = r;\r\n\t\t\tthis.g = g;\r\n\t\t\tthis.b = b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetHSL: function () {\r\n\t\r\n\t\t\tfunction hue2rgb( p, q, t ) {\r\n\t\r\n\t\t\t\tif ( t < 0 ) t += 1;\r\n\t\t\t\tif ( t > 1 ) t -= 1;\r\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\t\t\t\tif ( t < 1 / 2 ) return q;\r\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\t\t\t\treturn p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn function ( h, s, l ) {\r\n\t\r\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\t\th = THREE.Math.euclideanModulo( h, 1 );\r\n\t\t\t\ts = THREE.Math.clamp( s, 0, 1 );\r\n\t\t\t\tl = THREE.Math.clamp( l, 0, 1 );\r\n\t\r\n\t\t\t\tif ( s === 0 ) {\r\n\t\r\n\t\t\t\t\tthis.r = this.g = this.b = l;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\t\tvar q = ( 2 * l ) - p;\r\n\t\r\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tsetStyle: function ( style ) {\r\n\t\r\n\t\t\tfunction handleAlpha( string ) {\r\n\t\r\n\t\t\t\tif ( string === undefined ) return;\r\n\t\r\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\tvar m;\r\n\t\r\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\t\r\n\t\t\t\t// rgb / hsl\r\n\t\r\n\t\t\t\tvar color;\r\n\t\t\t\tvar name = m[ 1 ];\r\n\t\t\t\tvar components = m[ 2 ];\r\n\t\r\n\t\t\t\tswitch ( name ) {\r\n\t\r\n\t\t\t\t\tcase 'rgb':\r\n\t\t\t\t\tcase 'rgba':\r\n\t\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\t\r\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\t\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\t\r\n\t\t\t\t\t\t\treturn this;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\t\r\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\t\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\t\r\n\t\t\t\t\t\t\treturn this;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'hsl':\r\n\t\t\t\t\tcase 'hsla':\r\n\t\r\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\t\r\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\t\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\t\r\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\t\r\n\t\t\t\t// hex color\r\n\t\r\n\t\t\t\tvar hex = m[ 1 ];\r\n\t\t\t\tvar size = hex.length;\r\n\t\r\n\t\t\t\tif ( size === 3 ) {\r\n\t\r\n\t\t\t\t\t// #ff0\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\t\r\n\t\t\t\t\treturn this;\r\n\t\r\n\t\t\t\t} else if ( size === 6 ) {\r\n\t\r\n\t\t\t\t\t// #ff0000\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\t\r\n\t\t\t\t\treturn this;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( style && style.length > 0 ) {\r\n\t\r\n\t\t\t\t// color keywords\r\n\t\t\t\tvar hex = THREE.ColorKeywords[ style ];\r\n\t\r\n\t\t\t\tif ( hex !== undefined ) {\r\n\t\r\n\t\t\t\t\t// red\r\n\t\t\t\t\tthis.setHex( hex );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// unknown color\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( color ) {\r\n\t\r\n\t\t\tthis.r = color.r;\r\n\t\t\tthis.g = color.g;\r\n\t\t\tthis.b = color.b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\t\r\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\t\r\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\t\r\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\t\r\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\t\r\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tconvertGammaToLinear: function () {\r\n\t\r\n\t\t\tvar r = this.r, g = this.g, b = this.b;\r\n\t\r\n\t\t\tthis.r = r * r;\r\n\t\t\tthis.g = g * g;\r\n\t\t\tthis.b = b * b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tconvertLinearToGamma: function () {\r\n\t\r\n\t\t\tthis.r = Math.sqrt( this.r );\r\n\t\t\tthis.g = Math.sqrt( this.g );\r\n\t\t\tthis.b = Math.sqrt( this.b );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetHex: function () {\r\n\t\r\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetHexString: function () {\r\n\t\r\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetHSL: function ( optionalTarget ) {\r\n\t\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\r\n\t\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\r\n\t\r\n\t\t\tvar r = this.r, g = this.g, b = this.b;\r\n\t\r\n\t\t\tvar max = Math.max( r, g, b );\r\n\t\t\tvar min = Math.min( r, g, b );\r\n\t\r\n\t\t\tvar hue, saturation;\r\n\t\t\tvar lightness = ( min + max ) / 2.0;\r\n\t\r\n\t\t\tif ( min === max ) {\r\n\t\r\n\t\t\t\thue = 0;\r\n\t\t\t\tsaturation = 0;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar delta = max - min;\r\n\t\r\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\t\r\n\t\t\t\tswitch ( max ) {\r\n\t\r\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\thue /= 6;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\thsl.h = hue;\r\n\t\t\thsl.s = saturation;\r\n\t\t\thsl.l = lightness;\r\n\t\r\n\t\t\treturn hsl;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetStyle: function () {\r\n\t\r\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\t\r\n\t\t},\r\n\t\r\n\t\toffsetHSL: function ( h, s, l ) {\r\n\t\r\n\t\t\tvar hsl = this.getHSL();\r\n\t\r\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\r\n\t\r\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tadd: function ( color ) {\r\n\t\r\n\t\t\tthis.r += color.r;\r\n\t\t\tthis.g += color.g;\r\n\t\t\tthis.b += color.b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddColors: function ( color1, color2 ) {\r\n\t\r\n\t\t\tthis.r = color1.r + color2.r;\r\n\t\t\tthis.g = color1.g + color2.g;\r\n\t\t\tthis.b = color1.b + color2.b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.r += s;\r\n\t\t\tthis.g += s;\r\n\t\t\tthis.b += s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiply: function ( color ) {\r\n\t\r\n\t\t\tthis.r *= color.r;\r\n\t\t\tthis.g *= color.g;\r\n\t\t\tthis.b *= color.b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.r *= s;\r\n\t\t\tthis.g *= s;\r\n\t\t\tthis.b *= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp: function ( color, alpha ) {\r\n\t\r\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( c ) {\r\n\t\r\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.r = array[ offset ];\r\n\t\t\tthis.g = array[ offset + 1 ];\r\n\t\t\tthis.b = array[ offset + 2 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this.r;\r\n\t\t\tarray[ offset + 1 ] = this.g;\r\n\t\t\tarray[ offset + 2 ] = this.b;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\t\r\n\t// File:src/math/Quaternion.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Quaternion = function ( x, y, z, w ) {\r\n\t\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._w = ( w !== undefined ) ? w : 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Quaternion.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Quaternion,\r\n\t\r\n\t\tget x () {\r\n\t\r\n\t\t\treturn this._x;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset x ( value ) {\r\n\t\r\n\t\t\tthis._x = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget y () {\r\n\t\r\n\t\t\treturn this._y;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset y ( value ) {\r\n\t\r\n\t\t\tthis._y = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget z () {\r\n\t\r\n\t\t\treturn this._z;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset z ( value ) {\r\n\t\r\n\t\t\tthis._z = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget w () {\r\n\t\r\n\t\t\treturn this._w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset w ( value ) {\r\n\t\r\n\t\t\tthis._w = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( x, y, z, w ) {\r\n\t\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._w = w;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( quaternion ) {\r\n\t\r\n\t\t\tthis._x = quaternion.x;\r\n\t\t\tthis._y = quaternion.y;\r\n\t\t\tthis._z = quaternion.z;\r\n\t\t\tthis._w = quaternion.w;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromEuler: function ( euler, update ) {\r\n\t\r\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\t\r\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t\t//\tcontent/SpinCalc.m\r\n\t\r\n\t\t\tvar c1 = Math.cos( euler._x / 2 );\r\n\t\t\tvar c2 = Math.cos( euler._y / 2 );\r\n\t\t\tvar c3 = Math.cos( euler._z / 2 );\r\n\t\t\tvar s1 = Math.sin( euler._x / 2 );\r\n\t\t\tvar s2 = Math.sin( euler._y / 2 );\r\n\t\t\tvar s3 = Math.sin( euler._z / 2 );\r\n\t\r\n\t\t\tvar order = euler.order;\r\n\t\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( update !== false ) this.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromAxisAngle: function ( axis, angle ) {\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\t\r\n\t\t\t// assumes axis is normalized\r\n\t\r\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\t\r\n\t\t\tthis._x = axis.x * s;\r\n\t\t\tthis._y = axis.y * s;\r\n\t\t\tthis._z = axis.z * s;\r\n\t\t\tthis._w = Math.cos( halfAngle );\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromRotationMatrix: function ( m ) {\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\t\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\t\r\n\t\t\tvar te = m.elements,\r\n\t\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\t\r\n\t\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\t\ts;\r\n\t\r\n\t\t\tif ( trace > 0 ) {\r\n\t\r\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\t\r\n\t\t\t\tthis._w = 0.25 / s;\r\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\t\r\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\t\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\t\r\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\t\tthis._x = 0.25 * s;\r\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\t\r\n\t\t\t} else if ( m22 > m33 ) {\r\n\t\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\t\r\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._y = 0.25 * s;\r\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\t\r\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\t\tthis._z = 0.25 * s;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromUnitVectors: function () {\r\n\t\r\n\t\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\r\n\t\r\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\t\r\n\t\t\tvar v1, r;\r\n\t\r\n\t\t\tvar EPS = 0.000001;\r\n\t\r\n\t\t\treturn function ( vFrom, vTo ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\r\n\t\r\n\t\t\t\tif ( r < EPS ) {\r\n\t\r\n\t\t\t\t\tr = 0;\r\n\t\r\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\t\r\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis._x = v1.x;\r\n\t\t\t\tthis._y = v1.y;\r\n\t\t\t\tthis._z = v1.z;\r\n\t\t\t\tthis._w = r;\r\n\t\r\n\t\t\t\tthis.normalize();\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tinverse: function () {\r\n\t\r\n\t\t\tthis.conjugate().normalize();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tconjugate: function () {\r\n\t\r\n\t\t\tthis._x *= - 1;\r\n\t\t\tthis._y *= - 1;\r\n\t\t\tthis._z *= - 1;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdot: function ( v ) {\r\n\t\r\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthSq: function () {\r\n\t\r\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlength: function () {\r\n\t\r\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\tvar l = this.length();\r\n\t\r\n\t\t\tif ( l === 0 ) {\r\n\t\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = 1;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tl = 1 / l;\r\n\t\r\n\t\t\t\tthis._x = this._x * l;\r\n\t\t\t\tthis._y = this._y * l;\r\n\t\t\t\tthis._z = this._z * l;\r\n\t\t\t\tthis._w = this._w * l;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiply: function ( q, p ) {\r\n\t\r\n\t\t\tif ( p !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyQuaternions( q, p );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.multiplyQuaternions( this, q );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyQuaternions: function ( a, b ) {\r\n\t\r\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\t\r\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\t\r\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\t\treturn vector.applyQuaternion( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tslerp: function ( qb, t ) {\r\n\t\r\n\t\t\tif ( t === 0 ) return this;\r\n\t\t\tif ( t === 1 ) return this.copy( qb );\r\n\t\r\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\t\r\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\t\r\n\t\t\tif ( cosHalfTheta < 0 ) {\r\n\t\r\n\t\t\t\tthis._w = - qb._w;\r\n\t\t\t\tthis._x = - qb._x;\r\n\t\t\t\tthis._y = - qb._y;\r\n\t\t\t\tthis._z = - qb._z;\r\n\t\r\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.copy( qb );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\t\r\n\t\t\t\tthis._w = w;\r\n\t\t\t\tthis._x = x;\r\n\t\t\t\tthis._y = y;\r\n\t\t\t\tthis._z = z;\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar halfTheta = Math.acos( cosHalfTheta );\r\n\t\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\t\r\n\t\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\t\r\n\t\t\t\tthis._w = 0.5 * ( w + this._w );\r\n\t\t\t\tthis._x = 0.5 * ( x + this._x );\r\n\t\t\t\tthis._y = 0.5 * ( y + this._y );\r\n\t\t\t\tthis._z = 0.5 * ( z + this._z );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\t\r\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( quaternion ) {\r\n\t\r\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis._x = array[ offset ];\r\n\t\t\tthis._y = array[ offset + 1 ];\r\n\t\t\tthis._z = array[ offset + 2 ];\r\n\t\t\tthis._w = array[ offset + 3 ];\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._w;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tonChange: function ( callback ) {\r\n\t\r\n\t\t\tthis.onChangeCallback = callback;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tonChangeCallback: function () {}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Quaternion.slerp = function ( qa, qb, qm, t ) {\r\n\t\r\n\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Vector2.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\t\r\n\tTHREE.Vector2 = function ( x, y ) {\r\n\t\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Vector2.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Vector2,\r\n\t\r\n\t\tget width() { return this.x },\r\n\t\tset width( value ) { this.x = value },\r\n\t\r\n\t\tget height() { return this.y },\r\n\t\tset height( value ) { this.y = value },\r\n\t\r\n\t\t//\r\n\t\r\n\t\tset: function ( x, y ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( x ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( y ) {\r\n\t\r\n\t\t\tthis.y = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetComponent: function ( index, value ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetComponent: function ( index ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this.x, this.y );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( v ) {\r\n\t\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tadd: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScaledVector: function ( v, s ) {\r\n\t\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsub: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiply: function ( v ) {\r\n\t\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\t\r\n\t\t\tif ( isFinite( scalar ) ) {\r\n\t\t\t\tthis.x *= scalar;\r\n\t\t\t\tthis.y *= scalar;\r\n\t\t\t} else {\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivide: function ( v ) {\r\n\t\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivideScalar: function ( scalar ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmin: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmax: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclamp: function ( min, max ) {\r\n\t\r\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\t\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampScalar: function () {\r\n\t\r\n\t\t\tvar min, max;\r\n\t\r\n\t\t\treturn function clampScalar( minVal, maxVal ) {\r\n\t\r\n\t\t\t\tif ( min === undefined ) {\r\n\t\r\n\t\t\t\t\tmin = new THREE.Vector2();\r\n\t\t\t\t\tmax = new THREE.Vector2();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmin.set( minVal, minVal );\r\n\t\t\t\tmax.set( maxVal, maxVal );\r\n\t\r\n\t\t\t\treturn this.clamp( min, max );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclampLength: function ( min, max ) {\r\n\t\r\n\t\t\tvar length = this.length();\r\n\t\r\n\t\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfloor: function () {\r\n\t\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tceil: function () {\r\n\t\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tround: function () {\r\n\t\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\troundToZero: function () {\r\n\t\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnegate: function () {\r\n\t\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdot: function ( v ) {\r\n\t\r\n\t\t\treturn this.x * v.x + this.y * v.y;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthSq: function () {\r\n\t\r\n\t\t\treturn this.x * this.x + this.y * this.y;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlength: function () {\r\n\t\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthManhattan: function() {\r\n\t\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\treturn this.divideScalar( this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceTo: function ( v ) {\r\n\t\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToSquared: function ( v ) {\r\n\t\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\t\treturn dx * dx + dy * dy;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetLength: function ( length ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( length / this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp: function ( v, alpha ) {\r\n\t\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\t\r\n\t\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( v ) {\r\n\t\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tindex = index * attribute.itemSize + offset;\r\n\t\r\n\t\t\tthis.x = attribute.array[ index ];\r\n\t\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateAround: function ( center, angle ) {\r\n\t\r\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\t\r\n\t\t\tvar x = this.x - center.x;\r\n\t\t\tvar y = this.y - center.y;\r\n\t\r\n\t\t\tthis.x = x * c - y * s + center.x;\r\n\t\t\tthis.y = x * s + y * c + center.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Vector3.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author *kile / http://kile.stravaganza.org/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.Vector3 = function ( x, y, z ) {\r\n\t\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Vector3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Vector3,\r\n\t\r\n\t\tset: function ( x, y, z ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( x ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( y ) {\r\n\t\r\n\t\t\tthis.y = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetZ: function ( z ) {\r\n\t\r\n\t\t\tthis.z = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetComponent: function ( index, value ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetComponent: function ( index ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( v ) {\r\n\t\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tadd: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScaledVector: function ( v, s ) {\r\n\t\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsub: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiply: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\t\t\tthis.z *= v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\t\r\n\t\t\tif ( isFinite( scalar ) ) {\r\n\t\t\t\tthis.x *= scalar;\r\n\t\t\t\tthis.y *= scalar;\r\n\t\t\t\tthis.z *= scalar;\r\n\t\t\t} else {\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = 0;\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x * b.x;\r\n\t\t\tthis.y = a.y * b.y;\r\n\t\t\tthis.z = a.z * b.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyEuler: function () {\r\n\t\r\n\t\t\tvar quaternion;\r\n\t\r\n\t\t\treturn function applyEuler( euler ) {\r\n\t\r\n\t\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\t\r\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\t\tthis.applyQuaternion( quaternion.setFromEuler( euler ) );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyAxisAngle: function () {\r\n\t\r\n\t\t\tvar quaternion;\r\n\t\r\n\t\t\treturn function applyAxisAngle( axis, angle ) {\r\n\t\r\n\t\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\t\tthis.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyMatrix3: function ( m ) {\r\n\t\r\n\t\t\tvar x = this.x;\r\n\t\t\tvar y = this.y;\r\n\t\t\tvar z = this.z;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function ( m ) {\r\n\t\r\n\t\t\t// input: THREE.Matrix4 affine matrix\r\n\t\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyProjection: function ( m ) {\r\n\t\r\n\t\t\t// input: THREE.Matrix4 projection matrix\r\n\t\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\r\n\t\r\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\r\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\r\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyQuaternion: function ( q ) {\r\n\t\r\n\t\t\tvar x = this.x;\r\n\t\t\tvar y = this.y;\r\n\t\t\tvar z = this.z;\r\n\t\r\n\t\t\tvar qx = q.x;\r\n\t\t\tvar qy = q.y;\r\n\t\t\tvar qz = q.z;\r\n\t\t\tvar qw = q.w;\r\n\t\r\n\t\t\t// calculate quat * vector\r\n\t\r\n\t\t\tvar ix =  qw * x + qy * z - qz * y;\r\n\t\t\tvar iy =  qw * y + qz * x - qx * z;\r\n\t\t\tvar iz =  qw * z + qx * y - qy * x;\r\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\t\r\n\t\t\t// calculate result * inverse quat\r\n\t\r\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tproject: function () {\r\n\t\r\n\t\t\tvar matrix;\r\n\t\r\n\t\t\treturn function project( camera ) {\r\n\t\r\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\r\n\t\t\t\treturn this.applyProjection( matrix );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tunproject: function () {\r\n\t\r\n\t\t\tvar matrix;\r\n\t\r\n\t\t\treturn function unproject( camera ) {\r\n\t\r\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\r\n\t\t\t\treturn this.applyProjection( matrix );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttransformDirection: function ( m ) {\r\n\t\r\n\t\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t\t// vector interpreted as a direction\r\n\t\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\t\r\n\t\t\tthis.normalize();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivide: function ( v ) {\r\n\t\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\t\t\tthis.z /= v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivideScalar: function ( scalar ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmin: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmax: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclamp: function ( min, max ) {\r\n\t\r\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\t\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampScalar: function () {\r\n\t\r\n\t\t\tvar min, max;\r\n\t\r\n\t\t\treturn function clampScalar( minVal, maxVal ) {\r\n\t\r\n\t\t\t\tif ( min === undefined ) {\r\n\t\r\n\t\t\t\t\tmin = new THREE.Vector3();\r\n\t\t\t\t\tmax = new THREE.Vector3();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmin.set( minVal, minVal, minVal );\r\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\r\n\t\r\n\t\t\t\treturn this.clamp( min, max );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclampLength: function ( min, max ) {\r\n\t\r\n\t\t\tvar length = this.length();\r\n\t\r\n\t\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfloor: function () {\r\n\t\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tceil: function () {\r\n\t\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tround: function () {\r\n\t\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\troundToZero: function () {\r\n\t\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnegate: function () {\r\n\t\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdot: function ( v ) {\r\n\t\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthSq: function () {\r\n\t\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlength: function () {\r\n\t\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthManhattan: function () {\r\n\t\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\treturn this.divideScalar( this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetLength: function ( length ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( length / this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp: function ( v, alpha ) {\r\n\t\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\t\r\n\t\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcross: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.crossVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\r\n\t\t\tthis.x = y * v.z - z * v.y;\r\n\t\t\tthis.y = z * v.x - x * v.z;\r\n\t\t\tthis.z = x * v.y - y * v.x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcrossVectors: function ( a, b ) {\r\n\t\r\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\t\r\n\t\t\tthis.x = ay * bz - az * by;\r\n\t\t\tthis.y = az * bx - ax * bz;\r\n\t\t\tthis.z = ax * by - ay * bx;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tprojectOnVector: function () {\r\n\t\r\n\t\t\tvar v1, dot;\r\n\t\r\n\t\t\treturn function projectOnVector( vector ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\tv1.copy( vector ).normalize();\r\n\t\r\n\t\t\t\tdot = this.dot( v1 );\r\n\t\r\n\t\t\t\treturn this.copy( v1 ).multiplyScalar( dot );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tprojectOnPlane: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function projectOnPlane( planeNormal ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\r\n\t\r\n\t\t\t\treturn this.sub( v1 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\treflect: function () {\r\n\t\r\n\t\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t\t// normal is assumed to have unit length\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function reflect( normal ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tangleTo: function ( v ) {\r\n\t\r\n\t\t\tvar theta = this.dot( v ) / ( this.length() * v.length() );\r\n\t\r\n\t\t\t// clamp, to handle numerical problems\r\n\t\r\n\t\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceTo: function ( v ) {\r\n\t\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToSquared: function ( v ) {\r\n\t\r\n\t\t\tvar dx = this.x - v.x;\r\n\t\t\tvar dy = this.y - v.y;\r\n\t\t\tvar dz = this.z - v.z;\r\n\t\r\n\t\t\treturn dx * dx + dy * dy + dz * dz;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetEulerFromRotationMatrix: function ( m, order ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetEulerFromQuaternion: function ( q, order ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetPositionFromMatrix: function ( m ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\t\r\n\t\t\treturn this.setFromMatrixPosition( m );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetScaleFromMatrix: function ( m ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\t\r\n\t\t\treturn this.setFromMatrixScale( m );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\t\r\n\t\t\treturn this.setFromMatrixColumn( index, matrix );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromMatrixPosition: function ( m ) {\r\n\t\r\n\t\t\tthis.x = m.elements[ 12 ];\r\n\t\t\tthis.y = m.elements[ 13 ];\r\n\t\t\tthis.z = m.elements[ 14 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromMatrixScale: function ( m ) {\r\n\t\r\n\t\t\tvar sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[ 2 ] ).length();\r\n\t\t\tvar sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[ 6 ] ).length();\r\n\t\t\tvar sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();\r\n\t\r\n\t\t\tthis.x = sx;\r\n\t\t\tthis.y = sy;\r\n\t\t\tthis.z = sz;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromMatrixColumn: function ( index, matrix ) {\r\n\t\r\n\t\t\tvar offset = index * 4;\r\n\t\r\n\t\t\tvar me = matrix.elements;\r\n\t\r\n\t\t\tthis.x = me[ offset ];\r\n\t\t\tthis.y = me[ offset + 1 ];\r\n\t\t\tthis.z = me[ offset + 2 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( v ) {\r\n\t\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tindex = index * attribute.itemSize + offset;\r\n\t\r\n\t\t\tthis.x = attribute.array[ index ];\r\n\t\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\t\tthis.z = attribute.array[ index + 2 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Vector4.js\r\n\t\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.Vector4 = function ( x, y, z, w ) {\r\n\t\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\t\tthis.w = ( w !== undefined ) ? w : 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Vector4.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Vector4,\r\n\t\r\n\t\tset: function ( x, y, z, w ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\t\t\tthis.w = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( x ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( y ) {\r\n\t\r\n\t\t\tthis.y = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetZ: function ( z ) {\r\n\t\r\n\t\t\tthis.z = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetW: function ( w ) {\r\n\t\r\n\t\t\tthis.w = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetComponent: function ( index, value ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tcase 3: this.w = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetComponent: function ( index ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tcase 3: return this.w;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( v ) {\r\n\t\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tadd: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\t\t\tthis.w += v.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\t\t\tthis.w += s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\t\t\tthis.w = a.w + b.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScaledVector: function ( v, s ) {\r\n\t\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\t\t\tthis.w += v.w * s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsub: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\t\t\tthis.w -= v.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\t\t\tthis.w -= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\t\t\tthis.w = a.w - b.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\t\r\n\t\t\tif ( isFinite( scalar ) ) {\r\n\t\t\t\tthis.x *= scalar;\r\n\t\t\t\tthis.y *= scalar;\r\n\t\t\t\tthis.z *= scalar;\r\n\t\t\t\tthis.w *= scalar;\r\n\t\t\t} else {\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = 0;\r\n\t\t\t\tthis.w = 0;\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function ( m ) {\r\n\t\r\n\t\t\tvar x = this.x;\r\n\t\t\tvar y = this.y;\r\n\t\t\tvar z = this.z;\r\n\t\t\tvar w = this.w;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivideScalar: function ( scalar ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\t\r\n\t\t\t// q is assumed to be normalized\r\n\t\r\n\t\t\tthis.w = 2 * Math.acos( q.w );\r\n\t\r\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\t\r\n\t\t\tif ( s < 0.0001 ) {\r\n\t\r\n\t\t\t\t this.x = 1;\r\n\t\t\t\t this.y = 0;\r\n\t\t\t\t this.z = 0;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t this.x = q.x / s;\r\n\t\t\t\t this.y = q.y / s;\r\n\t\t\t\t this.z = q.z / s;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\t\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\t\r\n\t\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\t\r\n\t\t\t\tte = m.elements,\r\n\t\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\t\r\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon )\r\n\t\t\t   && ( Math.abs( m13 - m31 ) < epsilon )\r\n\t\t\t   && ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\t\r\n\t\t\t\t// singularity found\r\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t\t// in leading diagonal and zero in other terms\r\n\t\r\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 )\r\n\t\t\t\t   && ( Math.abs( m13 + m31 ) < epsilon2 )\r\n\t\t\t\t   && ( Math.abs( m23 + m32 ) < epsilon2 )\r\n\t\t\t\t   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\t\r\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\t\r\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\t\r\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// otherwise this singularity is angle = 180\r\n\t\r\n\t\t\t\tangle = Math.PI;\r\n\t\r\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\t\r\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\t\r\n\t\t\t\t\t// m11 is the largest diagonal term\r\n\t\r\n\t\t\t\t\tif ( xx < epsilon ) {\r\n\t\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\t\tz = xz / x;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( yy > zz ) {\r\n\t\r\n\t\t\t\t\t// m22 is the largest diagonal term\r\n\t\r\n\t\t\t\t\tif ( yy < epsilon ) {\r\n\t\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\t\tz = yz / y;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\t\r\n\t\t\t\t\tif ( zz < epsilon ) {\r\n\t\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\t\ty = yz / z;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.set( x, y, z, angle );\r\n\t\r\n\t\t\t\treturn this; // return 180 deg rotation\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// as we have reached here there are no singularities so we can handle normally\r\n\t\r\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\r\n\t\t\t\t\t\t\t  + ( m13 - m31 ) * ( m13 - m31 )\r\n\t\t\t\t\t\t\t  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\t\r\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\t\r\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t\t// caught by singularity test above, but I've left it in just in case\r\n\t\r\n\t\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmin: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\t\t\tthis.w = Math.min( this.w, v.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmax: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\t\t\tthis.w = Math.max( this.w, v.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclamp: function ( min, max ) {\r\n\t\r\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\t\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampScalar: function () {\r\n\t\r\n\t\t\tvar min, max;\r\n\t\r\n\t\t\treturn function clampScalar( minVal, maxVal ) {\r\n\t\r\n\t\t\t\tif ( min === undefined ) {\r\n\t\r\n\t\t\t\t\tmin = new THREE.Vector4();\r\n\t\t\t\t\tmax = new THREE.Vector4();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\r\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\r\n\t\r\n\t\t\t\treturn this.clamp( min, max );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tfloor: function () {\r\n\t\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\t\t\tthis.w = Math.floor( this.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tceil: function () {\r\n\t\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\t\t\tthis.w = Math.ceil( this.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tround: function () {\r\n\t\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\t\t\tthis.w = Math.round( this.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\troundToZero: function () {\r\n\t\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnegate: function () {\r\n\t\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\t\t\tthis.w = - this.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdot: function ( v ) {\r\n\t\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthSq: function () {\r\n\t\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlength: function () {\r\n\t\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthManhattan: function () {\r\n\t\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\treturn this.divideScalar( this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetLength: function ( length ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( length / this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp: function ( v, alpha ) {\r\n\t\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\t\r\n\t\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( v ) {\r\n\t\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\t\t\tthis.w = array[ offset + 3 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\t\t\tarray[ offset + 3 ] = this.w;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tindex = index * attribute.itemSize + offset;\r\n\t\r\n\t\t\tthis.x = attribute.array[ index ];\r\n\t\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\t\tthis.z = attribute.array[ index + 2 ];\r\n\t\t\tthis.w = attribute.array[ index + 3 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Euler.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Euler = function ( x, y, z, order ) {\r\n\t\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._order = order || THREE.Euler.DefaultOrder;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\t\r\n\tTHREE.Euler.DefaultOrder = 'XYZ';\r\n\t\r\n\tTHREE.Euler.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Euler,\r\n\t\r\n\t\tget x () {\r\n\t\r\n\t\t\treturn this._x;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset x ( value ) {\r\n\t\r\n\t\t\tthis._x = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget y () {\r\n\t\r\n\t\t\treturn this._y;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset y ( value ) {\r\n\t\r\n\t\t\tthis._y = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget z () {\r\n\t\r\n\t\t\treturn this._z;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset z ( value ) {\r\n\t\r\n\t\t\tthis._z = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget order () {\r\n\t\r\n\t\t\treturn this._order;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset order ( value ) {\r\n\t\r\n\t\t\tthis._order = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( x, y, z, order ) {\r\n\t\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._order = order || this._order;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order);\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( euler ) {\r\n\t\r\n\t\t\tthis._x = euler._x;\r\n\t\t\tthis._y = euler._y;\r\n\t\t\tthis._z = euler._z;\r\n\t\t\tthis._order = euler._order;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\t\r\n\t\t\tvar clamp = THREE.Math.clamp;\r\n\t\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\t\r\n\t\t\tvar te = m.elements;\r\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\t\r\n\t\t\torder = order || this._order;\r\n\t\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\t\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\t\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\t\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\t\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\t\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\t\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis._order = order;\r\n\t\r\n\t\t\tif ( update !== false ) this.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromQuaternion: function () {\r\n\t\r\n\t\t\tvar matrix;\r\n\t\r\n\t\t\treturn function ( q, order, update ) {\r\n\t\r\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\r\n\t\t\t\tthis.setFromRotationMatrix( matrix, order, update );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tsetFromVector3: function ( v, order ) {\r\n\t\r\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\t\r\n\t\t},\r\n\t\r\n\t\treorder: function () {\r\n\t\r\n\t\t\t// WARNING: this discards revolution information -bhouston\r\n\t\r\n\t\t\tvar q = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( newOrder ) {\r\n\t\r\n\t\t\t\tq.setFromEuler( this );\r\n\t\t\t\tthis.setFromQuaternion( q, newOrder );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tequals: function ( euler ) {\r\n\t\r\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array ) {\r\n\t\r\n\t\t\tthis._x = array[ 0 ];\r\n\t\t\tthis._y = array[ 1 ];\r\n\t\t\tthis._z = array[ 2 ];\r\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._order;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoVector3: function ( optionalResult ) {\r\n\t\r\n\t\t\tif ( optionalResult ) {\r\n\t\r\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tonChange: function ( callback ) {\r\n\t\r\n\t\t\tthis.onChangeCallback = callback;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tonChangeCallback: function () {}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Line3.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Line3 = function ( start, end ) {\r\n\t\r\n\t\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\r\n\t\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Line3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Line3,\r\n\t\r\n\t\tset: function ( start, end ) {\r\n\t\r\n\t\t\tthis.start.copy( start );\r\n\t\t\tthis.end.copy( end );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( line ) {\r\n\t\r\n\t\t\tthis.start.copy( line.start );\r\n\t\t\tthis.end.copy( line.end );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdelta: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.subVectors( this.end, this.start );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceSq: function () {\r\n\t\r\n\t\t\treturn this.start.distanceToSquared( this.end );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistance: function () {\r\n\t\r\n\t\t\treturn this.start.distanceTo( this.end );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tat: function ( t, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclosestPointToPointParameter: function () {\r\n\t\r\n\t\t\tvar startP = new THREE.Vector3();\r\n\t\t\tvar startEnd = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( point, clampToLine ) {\r\n\t\r\n\t\t\t\tstartP.subVectors( point, this.start );\r\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\r\n\t\r\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\r\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\r\n\t\r\n\t\t\t\tvar t = startEnd_startP / startEnd2;\r\n\t\r\n\t\t\t\tif ( clampToLine ) {\r\n\t\r\n\t\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn t;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\r\n\t\r\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\t\r\n\t\t\tthis.start.applyMatrix4( matrix );\r\n\t\t\tthis.end.applyMatrix4( matrix );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( line ) {\r\n\t\r\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Box2.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Box2 = function ( min, max ) {\r\n\t\r\n\t\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Box2.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Box2,\r\n\t\r\n\t\tset: function ( min, max ) {\r\n\t\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromPoints: function ( points ) {\r\n\t\r\n\t\t\tthis.makeEmpty();\r\n\t\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.expandByPoint( points[ i ] )\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromCenterAndSize: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector2();\r\n\t\r\n\t\t\treturn function ( center, size ) {\r\n\t\r\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\t\tthis.max.copy( center ).add( halfSize );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( box ) {\r\n\t\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeEmpty: function () {\r\n\t\r\n\t\t\tthis.min.x = this.min.y = Infinity;\r\n\t\t\tthis.max.x = this.max.y = - Infinity;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tempty: function () {\r\n\t\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\t\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsize: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\t\treturn result.subVectors( this.max, this.min );\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByPoint: function ( point ) {\r\n\t\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByVector: function ( vector ) {\r\n\t\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByScalar: function ( scalar ) {\r\n\t\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t     point.y < this.min.y || point.y > this.max.y ) {\r\n\t\r\n\t\t\t\treturn false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsBox: function ( box ) {\r\n\t\r\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetParameter: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\r\n\t\t\treturn result.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t\t);\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisIntersectionBox: function ( box ) {\r\n\t\r\n\t\t\t// using 6 splitting planes to rule out intersections.\r\n\t\r\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\r\n\t\r\n\t\t\t\treturn false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector2();\r\n\t\r\n\t\t\treturn function ( point ) {\r\n\t\r\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\t\treturn clampedPoint.sub( point ).length();\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersect: function ( box ) {\r\n\t\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tunion: function ( box ) {\r\n\t\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranslate: function ( offset ) {\r\n\t\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( box ) {\r\n\t\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Box3.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.Box3 = function ( min, max ) {\r\n\t\r\n\t\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Box3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Box3,\r\n\t\r\n\t\tset: function ( min, max ) {\r\n\t\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromPoints: function ( points ) {\r\n\t\r\n\t\t\tthis.makeEmpty();\r\n\t\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromCenterAndSize: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( center, size ) {\r\n\t\r\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\r\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\t\tthis.max.copy( center ).add( halfSize );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tsetFromObject: function () {\r\n\t\r\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t\t// accounting for both the object's, and children's, world transforms\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( object ) {\r\n\t\r\n\t\t\t\tvar scope = this;\r\n\t\r\n\t\t\t\tobject.updateMatrixWorld( true );\r\n\t\r\n\t\t\t\tthis.makeEmpty();\r\n\t\r\n\t\t\t\tobject.traverse( function ( node ) {\r\n\t\r\n\t\t\t\t\tvar geometry = node.geometry;\r\n\t\r\n\t\t\t\t\tif ( geometry !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\t\t\t\tvar vertices = geometry.vertices;\r\n\t\r\n\t\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\r\n\t\r\n\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\t\r\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tvar positions = geometry.attributes[ 'position' ].array;\r\n\t\r\n\t\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\t\tv1.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\r\n\t\r\n\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\t\r\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( box ) {\r\n\t\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeEmpty: function () {\r\n\t\r\n\t\t\tthis.min.x = this.min.y = this.min.z = Infinity;\r\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tempty: function () {\r\n\t\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\t\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsize: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.subVectors( this.max, this.min );\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByPoint: function ( point ) {\r\n\t\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByVector: function ( vector ) {\r\n\t\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByScalar: function ( scalar ) {\r\n\t\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t     point.y < this.min.y || point.y > this.max.y ||\r\n\t\t\t     point.z < this.min.z || point.z > this.max.z ) {\r\n\t\r\n\t\t\t\treturn false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsBox: function ( box ) {\r\n\t\r\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\r\n\t\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetParameter: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\treturn result.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t\t);\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisIntersectionBox: function ( box ) {\r\n\t\r\n\t\t\t// using 6 splitting planes to rule out intersections.\r\n\t\r\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t     box.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\t     box.max.z < this.min.z || box.min.z > this.max.z ) {\r\n\t\r\n\t\t\t\treturn false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( point ) {\r\n\t\r\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\t\treturn clampedPoint.sub( point ).length();\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tgetBoundingSphere: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Sphere();\r\n\t\r\n\t\t\t\tresult.center = this.center();\r\n\t\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\r\n\t\r\n\t\t\t\treturn result;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersect: function ( box ) {\r\n\t\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tunion: function ( box ) {\r\n\t\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function () {\r\n\t\r\n\t\t\tvar points = [\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3()\r\n\t\t\t];\r\n\t\r\n\t\t\treturn function ( matrix ) {\r\n\t\r\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111\r\n\t\r\n\t\t\t\tthis.makeEmpty();\r\n\t\t\t\tthis.setFromPoints( points );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslate: function ( offset ) {\r\n\t\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( box ) {\r\n\t\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Matrix3.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Matrix3 = function () {\r\n\t\r\n\t\tthis.elements = new Float32Array( [\r\n\t\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\t\r\n\t\t] );\r\n\t\r\n\t\tif ( arguments.length > 0 ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Matrix3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Matrix3,\r\n\t\r\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 0 ] = n11; te[ 3 ] = n12; te[ 6 ] = n13;\r\n\t\t\tte[ 1 ] = n21; te[ 4 ] = n22; te[ 7 ] = n23;\r\n\t\t\tte[ 2 ] = n31; te[ 5 ] = n32; te[ 8 ] = n33;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tidentity: function () {\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t1, 0, 0,\r\n\t\t\t\t0, 1, 0,\r\n\t\t\t\t0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().fromArray( this.elements );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( m ) {\r\n\t\r\n\t\t\tvar me = m.elements;\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\r\n\t\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\r\n\t\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix3( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyVector3Array: function ( a ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\t\treturn this.applyToVector3Array( a );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyToVector3Array: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function ( array, offset, length ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\t\tif ( length === undefined ) length = array.length;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\t\r\n\t\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\t\tv1.applyMatrix3( this );\r\n\t\t\t\t\tv1.toArray( array, j );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn array;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyToBuffer: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\t\r\n\t\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\t\tv1.z = buffer.getZ( j );\r\n\t\r\n\t\t\t\t\tv1.applyMatrix3( this );\r\n\t\r\n\t\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn buffer;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmultiplyScalar: function ( s ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdeterminant: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\t\r\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetInverse: function ( matrix, throwOnInvertible ) {\r\n\t\r\n\t\t\t// input: THREE.Matrix4\r\n\t\t\t// ( based on http://code.google.com/p/webgl-mjs/ )\r\n\t\r\n\t\t\tvar me = matrix.elements;\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 0 ] =   me[ 10 ] * me[ 5 ] - me[ 6 ] * me[ 9 ];\r\n\t\t\tte[ 1 ] = - me[ 10 ] * me[ 1 ] + me[ 2 ] * me[ 9 ];\r\n\t\t\tte[ 2 ] =   me[ 6 ] * me[ 1 ] - me[ 2 ] * me[ 5 ];\r\n\t\t\tte[ 3 ] = - me[ 10 ] * me[ 4 ] + me[ 6 ] * me[ 8 ];\r\n\t\t\tte[ 4 ] =   me[ 10 ] * me[ 0 ] - me[ 2 ] * me[ 8 ];\r\n\t\t\tte[ 5 ] = - me[ 6 ] * me[ 0 ] + me[ 2 ] * me[ 4 ];\r\n\t\t\tte[ 6 ] =   me[ 9 ] * me[ 4 ] - me[ 5 ] * me[ 8 ];\r\n\t\t\tte[ 7 ] = - me[ 9 ] * me[ 0 ] + me[ 1 ] * me[ 8 ];\r\n\t\t\tte[ 8 ] =   me[ 5 ] * me[ 0 ] - me[ 1 ] * me[ 4 ];\r\n\t\r\n\t\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];\r\n\t\r\n\t\t\t// no inverse\r\n\t\r\n\t\t\tif ( det === 0 ) {\r\n\t\r\n\t\t\t\tvar msg = \"Matrix3.getInverse(): can't invert matrix, determinant is 0\";\r\n\t\r\n\t\t\t\tif ( throwOnInvertible || false ) {\r\n\t\r\n\t\t\t\t\tthrow new Error( msg );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tconsole.warn( msg );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.identity();\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.multiplyScalar( 1.0 / det );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranspose: function () {\r\n\t\r\n\t\t\tvar tmp, m = this.elements;\r\n\t\r\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetNormalMatrix: function ( m ) {\r\n\t\r\n\t\t\t// input: THREE.Matrix4\r\n\t\r\n\t\t\tthis.getInverse( m ).transpose();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttransposeIntoArray: function ( r ) {\r\n\t\r\n\t\t\tvar m = this.elements;\r\n\t\r\n\t\t\tr[ 0 ] = m[ 0 ];\r\n\t\t\tr[ 1 ] = m[ 3 ];\r\n\t\t\tr[ 2 ] = m[ 6 ];\r\n\t\t\tr[ 3 ] = m[ 1 ];\r\n\t\t\tr[ 4 ] = m[ 4 ];\r\n\t\t\tr[ 5 ] = m[ 7 ];\r\n\t\t\tr[ 6 ] = m[ 2 ];\r\n\t\t\tr[ 7 ] = m[ 5 ];\r\n\t\t\tr[ 8 ] = m[ 8 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array ) {\r\n\t\r\n\t\t\tthis.elements.set( array );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\tte[ 0 ], te[ 1 ], te[ 2 ],\r\n\t\t\t\tte[ 3 ], te[ 4 ], te[ 5 ],\r\n\t\t\t\tte[ 6 ], te[ 7 ], te[ 8 ]\r\n\t\t\t];\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Matrix4.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author jordi_ros / http://plattsoft.com\r\n\t * @author D1plo1d / http://github.com/D1plo1d\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author timknip / http://www.floorplanner.com/\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.Matrix4 = function () {\r\n\t\r\n\t\tthis.elements = new Float32Array( [\r\n\t\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t] );\r\n\t\r\n\t\tif ( arguments.length > 0 ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Matrix4.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Matrix4,\r\n\t\r\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tidentity: function () {\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, 1, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new THREE.Matrix4().fromArray( this.elements );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( m ) {\r\n\t\r\n\t\t\tthis.elements.set( m.elements );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\textractPosition: function ( m ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\t\treturn this.copyPosition( m );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyPosition: function ( m ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\t\r\n\t\t\tte[ 12 ] = me[ 12 ];\r\n\t\t\tte[ 13 ] = me[ 13 ];\r\n\t\t\tte[ 14 ] = me[ 14 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\txAxis.set( te[ 0 ], te[ 1 ], te[ 2 ] );\r\n\t\t\tyAxis.set( te[ 4 ], te[ 5 ], te[ 6 ] );\r\n\t\t\tzAxis.set( te[ 8 ], te[ 9 ], te[ 10 ] );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\t\r\n\t\t\tthis.set(\r\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t\t0,       0,       0,       1\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\textractRotation: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function ( m ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\tvar te = this.elements;\r\n\t\t\t\tvar me = m.elements;\r\n\t\r\n\t\t\t\tvar scaleX = 1 / v1.set( me[ 0 ], me[ 1 ], me[ 2 ] ).length();\r\n\t\t\t\tvar scaleY = 1 / v1.set( me[ 4 ], me[ 5 ], me[ 6 ] ).length();\r\n\t\t\t\tvar scaleZ = 1 / v1.set( me[ 8 ], me[ 9 ], me[ 10 ] ).length();\r\n\t\r\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\r\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\r\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmakeRotationFromEuler: function ( euler ) {\r\n\t\r\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\t\r\n\t\t\tif ( euler.order === 'XYZ' ) {\r\n\t\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\t\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - c * f;\r\n\t\t\t\tte[ 8 ] = d;\r\n\t\r\n\t\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\t\tte[ 9 ] = - b * c;\r\n\t\r\n\t\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\t\r\n\t\t\t} else if ( euler.order === 'YXZ' ) {\r\n\t\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\t\r\n\t\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\t\tte[ 8 ] = a * d;\r\n\t\r\n\t\t\t\tte[ 1 ] = a * f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b;\r\n\t\r\n\t\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\t\r\n\t\t\t} else if ( euler.order === 'ZXY' ) {\r\n\t\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\t\r\n\t\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\t\tte[ 4 ] = - a * f;\r\n\t\t\t\tte[ 8 ] = de + cf * b;\r\n\t\r\n\t\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = df - ce * b;\r\n\t\r\n\t\t\t\tte[ 2 ] = - a * d;\r\n\t\t\t\tte[ 6 ] = b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\t\r\n\t\t\t} else if ( euler.order === 'ZYX' ) {\r\n\t\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\t\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\t\tte[ 8 ] = ae * d + bf;\r\n\t\r\n\t\t\t\tte[ 1 ] = c * f;\r\n\t\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\t\tte[ 9 ] = af * d - be;\r\n\t\r\n\t\t\t\tte[ 2 ] = - d;\r\n\t\t\t\tte[ 6 ] = b * c;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\t\r\n\t\t\t} else if ( euler.order === 'YZX' ) {\r\n\t\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\t\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\t\tte[ 8 ] = bc * f + ad;\r\n\t\r\n\t\t\t\tte[ 1 ] = f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b * e;\r\n\t\r\n\t\t\t\tte[ 2 ] = - d * e;\r\n\t\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\t\tte[ 10 ] = ac - bd * f;\r\n\t\r\n\t\t\t} else if ( euler.order === 'XZY' ) {\r\n\t\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\t\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - f;\r\n\t\t\t\tte[ 8 ] = d * e;\r\n\t\r\n\t\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = ad * f - bc;\r\n\t\r\n\t\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\t\tte[ 6 ] = b * e;\r\n\t\t\t\tte[ 10 ] = bd * f + ac;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// last column\r\n\t\t\tte[ 3 ] = 0;\r\n\t\t\tte[ 7 ] = 0;\r\n\t\t\tte[ 11 ] = 0;\r\n\t\r\n\t\t\t// bottom row\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\t\r\n\t\t\treturn this.makeRotationFromQuaternion( q );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationFromQuaternion: function ( q ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\r\n\t\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\r\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\t\r\n\t\t\tte[ 0 ] = 1 - ( yy + zz );\r\n\t\t\tte[ 4 ] = xy - wz;\r\n\t\t\tte[ 8 ] = xz + wy;\r\n\t\r\n\t\t\tte[ 1 ] = xy + wz;\r\n\t\t\tte[ 5 ] = 1 - ( xx + zz );\r\n\t\t\tte[ 9 ] = yz - wx;\r\n\t\r\n\t\t\tte[ 2 ] = xz - wy;\r\n\t\t\tte[ 6 ] = yz + wx;\r\n\t\t\tte[ 10 ] = 1 - ( xx + yy );\r\n\t\r\n\t\t\t// last column\r\n\t\t\tte[ 3 ] = 0;\r\n\t\t\tte[ 7 ] = 0;\r\n\t\t\tte[ 11 ] = 0;\r\n\t\r\n\t\t\t// bottom row\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlookAt: function () {\r\n\t\r\n\t\t\tvar x, y, z;\r\n\t\r\n\t\t\treturn function ( eye, target, up ) {\r\n\t\r\n\t\t\t\tif ( x === undefined ) x = new THREE.Vector3();\r\n\t\t\t\tif ( y === undefined ) y = new THREE.Vector3();\r\n\t\t\t\tif ( z === undefined ) z = new THREE.Vector3();\r\n\t\r\n\t\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\t\tz.subVectors( eye, target ).normalize();\r\n\t\r\n\t\t\t\tif ( z.lengthSq() === 0 ) {\r\n\t\r\n\t\t\t\t\tz.z = 1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tx.crossVectors( up, z ).normalize();\r\n\t\r\n\t\t\t\tif ( x.lengthSq() === 0 ) {\r\n\t\r\n\t\t\t\t\tz.x += 0.0001;\r\n\t\t\t\t\tx.crossVectors( up, z ).normalize();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ty.crossVectors( z, x );\r\n\t\r\n\t\r\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\r\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\r\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmultiply: function ( m, n ) {\r\n\t\r\n\t\t\tif ( n !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyMatrices( m, n );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\t\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\t\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\t\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\t\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\t\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\t\r\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyToArray: function ( a, b, r ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tthis.multiplyMatrices( a, b );\r\n\t\r\n\t\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\r\n\t\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\r\n\t\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\r\n\t\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( s ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\r\n\t\t\treturn vector.applyProjection( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyVector4: function ( vector ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyVector3Array: function ( a ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\t\treturn this.applyToVector3Array( a );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyToVector3Array: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function ( array, offset, length ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\t\tif ( length === undefined ) length = array.length;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\t\r\n\t\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\t\tv1.applyMatrix4( this );\r\n\t\t\t\t\tv1.toArray( array, j );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn array;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyToBuffer: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\t\r\n\t\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\t\tv1.z = buffer.getZ( j );\r\n\t\r\n\t\t\t\t\tv1.applyMatrix4( this );\r\n\t\r\n\t\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn buffer;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateAxis: function ( v ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\t\r\n\t\t\tv.transformDirection( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcrossVector: function ( vector ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdeterminant: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\t\r\n\t\t\t//TODO: make this more efficient\r\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\t\r\n\t\t\treturn (\r\n\t\t\t\tn41 * (\r\n\t\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t\t - n12 * n23 * n34\r\n\t\t\t\t) +\r\n\t\t\t\tn42 * (\r\n\t\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t\t - n14 * n23 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn43 * (\r\n\t\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t\t - n12 * n24 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn44 * (\r\n\t\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t\t + n12 * n23 * n31\r\n\t\t\t\t)\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranspose: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar tmp;\r\n\t\r\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\t\r\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\r\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\t\t\tarray[ offset + 9 ]  = te[ 9 ];\r\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\t\r\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetPosition: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\t\r\n\t\t\t\tvar te = this.elements;\r\n\t\t\t\treturn v1.set( te[ 12 ], te[ 13 ], te[ 14 ] );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tsetPosition: function ( v ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 12 ] = v.x;\r\n\t\t\tte[ 13 ] = v.y;\r\n\t\t\tte[ 14 ] = v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetInverse: function ( m, throwOnInvertible ) {\r\n\t\r\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\t\r\n\t\t\tvar n11 = me[ 0 ], n12 = me[ 4 ], n13 = me[ 8 ], n14 = me[ 12 ];\r\n\t\t\tvar n21 = me[ 1 ], n22 = me[ 5 ], n23 = me[ 9 ], n24 = me[ 13 ];\r\n\t\t\tvar n31 = me[ 2 ], n32 = me[ 6 ], n33 = me[ 10 ], n34 = me[ 14 ];\r\n\t\t\tvar n41 = me[ 3 ], n42 = me[ 7 ], n43 = me[ 11 ], n44 = me[ 15 ];\r\n\t\r\n\t\t\tte[ 0 ] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\r\n\t\t\tte[ 4 ] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\r\n\t\t\tte[ 8 ] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\r\n\t\t\tte[ 12 ] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\t\t\tte[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\r\n\t\t\tte[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\r\n\t\t\tte[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\r\n\t\t\tte[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\r\n\t\t\tte[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\r\n\t\t\tte[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\r\n\t\t\tte[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\r\n\t\t\tte[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\r\n\t\t\tte[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\r\n\t\t\tte[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\r\n\t\t\tte[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\r\n\t\t\tte[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\r\n\t\r\n\t\t\tvar det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];\r\n\t\r\n\t\t\tif ( det === 0 ) {\r\n\t\r\n\t\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\r\n\t\r\n\t\t\t\tif ( throwOnInvertible || false ) {\r\n\t\r\n\t\t\t\t\tthrow new Error( msg );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tconsole.warn( msg );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.identity();\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.multiplyScalar( 1 / det );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranslate: function ( v ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateX: function ( angle ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateY: function ( angle ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateZ: function ( angle ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateByAxis: function ( axis, angle ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tscale: function ( v ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = v.x, y = v.y, z = v.z;\r\n\t\r\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetMaxScaleOnAxis: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\t\r\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeTranslation: function ( x, y, z ) {\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationX: function ( theta ) {\r\n\t\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t1, 0,  0, 0,\r\n\t\t\t\t0, c, - s, 0,\r\n\t\t\t\t0, s,  c, 0,\r\n\t\t\t\t0, 0,  0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationY: function ( theta ) {\r\n\t\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t c, 0, s, 0,\r\n\t\t\t\t 0, 1, 0, 0,\r\n\t\t\t\t- s, 0, c, 0,\r\n\t\t\t\t 0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationZ: function ( theta ) {\r\n\t\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\tc, - s, 0, 0,\r\n\t\t\t\ts,  c, 0, 0,\r\n\t\t\t\t0,  0, 1, 0,\r\n\t\t\t\t0,  0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationAxis: function ( axis, angle ) {\r\n\t\r\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\t\r\n\t\t\tvar c = Math.cos( angle );\r\n\t\t\tvar s = Math.sin( angle );\r\n\t\t\tvar t = 1 - c;\r\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\t\tvar tx = t * x, ty = t * y;\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\t return this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeScale: function ( x, y, z ) {\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\tx, 0, 0, 0,\r\n\t\t\t\t0, y, 0, 0,\r\n\t\t\t\t0, 0, z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcompose: function ( position, quaternion, scale ) {\r\n\t\r\n\t\t\tthis.makeRotationFromQuaternion( quaternion );\r\n\t\t\tthis.scale( scale );\r\n\t\t\tthis.setPosition( position );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdecompose: function () {\r\n\t\r\n\t\t\tvar vector, matrix;\r\n\t\r\n\t\t\treturn function ( position, quaternion, scale ) {\r\n\t\r\n\t\t\t\tif ( vector === undefined ) vector = new THREE.Vector3();\r\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\t\r\n\t\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\t\tvar det = this.determinant();\r\n\t\t\t\tif ( det < 0 ) {\r\n\t\r\n\t\t\t\t\tsx = - sx;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tposition.x = te[ 12 ];\r\n\t\t\t\tposition.y = te[ 13 ];\r\n\t\t\t\tposition.z = te[ 14 ];\r\n\t\r\n\t\t\t\t// scale the rotation part\r\n\t\r\n\t\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\r\n\t\r\n\t\t\t\tvar invSX = 1 / sx;\r\n\t\t\t\tvar invSY = 1 / sy;\r\n\t\t\t\tvar invSZ = 1 / sz;\r\n\t\r\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\r\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\r\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\r\n\t\r\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\r\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\r\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\r\n\t\r\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\r\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\r\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\r\n\t\r\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\r\n\t\r\n\t\t\t\tscale.x = sx;\r\n\t\t\t\tscale.y = sy;\r\n\t\t\t\tscale.z = sz;\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = 2 * near / ( right - left );\r\n\t\t\tvar y = 2 * near / ( top - bottom );\r\n\t\r\n\t\t\tvar a = ( right + left ) / ( right - left );\r\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\t\tvar d = - 2 * far * near / ( far - near );\r\n\t\r\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakePerspective: function ( fov, aspect, near, far ) {\r\n\t\r\n\t\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\r\n\t\t\tvar ymin = - ymax;\r\n\t\t\tvar xmin = ymin * aspect;\r\n\t\t\tvar xmax = ymax * aspect;\r\n\t\r\n\t\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar w = right - left;\r\n\t\t\tvar h = top - bottom;\r\n\t\t\tvar p = far - near;\r\n\t\r\n\t\t\tvar x = ( right + left ) / w;\r\n\t\t\tvar y = ( top + bottom ) / h;\r\n\t\t\tvar z = ( far + near ) / p;\r\n\t\r\n\t\t\tte[ 0 ] = 2 / w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 / h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 / p;\tte[ 14 ] = - z;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( matrix ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\t\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\t\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array ) {\r\n\t\r\n\t\t\tthis.elements.set( array );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\tte[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],\r\n\t\t\t\tte[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],\r\n\t\t\t\tte[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],\r\n\t\t\t\tte[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]\r\n\t\t\t];\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Ray.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Ray = function ( origin, direction ) {\r\n\t\r\n\t\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\r\n\t\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Ray.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Ray,\r\n\t\r\n\t\tset: function ( origin, direction ) {\r\n\t\r\n\t\t\tthis.origin.copy( origin );\r\n\t\t\tthis.direction.copy( direction );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( ray ) {\r\n\t\r\n\t\t\tthis.origin.copy( ray.origin );\r\n\t\t\tthis.direction.copy( ray.direction );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tat: function ( t, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\t\r\n\t\t},\r\n\t\r\n\t\trecast: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( t ) {\r\n\t\r\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclosestPointToPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\tresult.subVectors( point, this.origin );\r\n\t\t\tvar directionDistance = result.dot( this.direction );\r\n\t\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\t\r\n\t\t\t\treturn result.copy( this.origin );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function ( point ) {\r\n\t\r\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceSqToPoint: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( point ) {\r\n\t\r\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\r\n\t\r\n\t\t\t\t// point behind the ray\r\n\t\r\n\t\t\t\tif ( directionDistance < 0 ) {\r\n\t\r\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\t\r\n\t\t\t\treturn v1.distanceToSquared( point );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tdistanceSqToSegment: function () {\r\n\t\r\n\t\t\tvar segCenter = new THREE.Vector3();\r\n\t\t\tvar segDir = new THREE.Vector3();\r\n\t\t\tvar diff = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\t\r\n\t\t\t\t// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp\r\n\t\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t\t// defined by v0 and v1\r\n\t\t\t\t// It can also set two optional targets :\r\n\t\t\t\t// - The closest point on the ray\r\n\t\t\t\t// - The closest point on the segment\r\n\t\r\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\r\n\t\r\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\r\n\t\t\t\tvar b0 = diff.dot( this.direction );\r\n\t\t\t\tvar b1 = - diff.dot( segDir );\r\n\t\t\t\tvar c = diff.lengthSq();\r\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\t\tvar s0, s1, sqrDist, extDet;\r\n\t\r\n\t\t\t\tif ( det > 0 ) {\r\n\t\r\n\t\t\t\t\t// The ray and segment are not parallel.\r\n\t\r\n\t\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\t\textDet = segExtent * det;\r\n\t\r\n\t\t\t\t\tif ( s0 >= 0 ) {\r\n\t\r\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\t\r\n\t\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\t\r\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\t// region 1\r\n\t\r\n\t\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t// region 5\r\n\t\r\n\t\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\t\r\n\t\t\t\t\t\t\t// region 4\r\n\t\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\t\r\n\t\t\t\t\t\t\t// region 3\r\n\t\r\n\t\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t// region 2\r\n\t\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// Ray and segment are parallel.\r\n\t\r\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( optionalPointOnRay ) {\r\n\t\r\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( optionalPointOnSegment ) {\r\n\t\r\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn sqrDist;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\r\n\t\tisIntersectionSphere: function ( sphere ) {\r\n\t\r\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectSphere: function () {\r\n\t\r\n\t\t\t// from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-sphere-intersection/\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( sphere, optionalTarget ) {\r\n\t\r\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\r\n\t\r\n\t\t\t\tvar tca = v1.dot( this.direction );\r\n\t\r\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\r\n\t\r\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\t\r\n\t\t\t\tif ( d2 > radius2 ) return null;\r\n\t\r\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\t\r\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\t\tvar t0 = tca - thc;\r\n\t\r\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\t\tvar t1 = tca + thc;\r\n\t\r\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\r\n\t\r\n\t\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\r\n\t\r\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\t\treturn this.at( t0, optionalTarget );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tisIntersectionPlane: function ( plane ) {\r\n\t\r\n\t\t\t// check if the ray lies on the plane first\r\n\t\r\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\t\r\n\t\t\tif ( distToPoint === 0 ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\r\n\t\t\tif ( denominator * distToPoint < 0 ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPlane: function ( plane ) {\r\n\t\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\t\tif ( denominator === 0 ) {\r\n\t\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\t\r\n\t\t\t\t\treturn 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\t\r\n\t\t\t\treturn null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\t\r\n\t\t\t// Return if the ray never intersects the plane\r\n\t\r\n\t\t\treturn t >= 0 ? t :  null;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectPlane: function ( plane, optionalTarget ) {\r\n\t\r\n\t\t\tvar t = this.distanceToPlane( plane );\r\n\t\r\n\t\t\tif ( t === null ) {\r\n\t\r\n\t\t\t\treturn null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.at( t, optionalTarget );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisIntersectionBox: function () {\r\n\t\r\n\t\t\tvar v = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( box ) {\r\n\t\r\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersectBox: function ( box, optionalTarget ) {\r\n\t\r\n\t\t\t// http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/\r\n\t\r\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\t\r\n\t\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\t\tinvdirz = 1 / this.direction.z;\r\n\t\r\n\t\t\tvar origin = this.origin;\r\n\t\r\n\t\t\tif ( invdirx >= 0 ) {\r\n\t\r\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( invdiry >= 0 ) {\r\n\t\r\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\t\r\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\t\r\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\r\n\t\r\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\r\n\t\r\n\t\t\tif ( invdirz >= 0 ) {\r\n\t\r\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\t\r\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\t\r\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\t\r\n\t\t\t//return point closest to the ray (positive side)\r\n\t\r\n\t\t\tif ( tmax < 0 ) return null;\r\n\t\r\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectTriangle: function () {\r\n\t\r\n\t\t\t// Compute the offset origin, edges, and normal.\r\n\t\t\tvar diff = new THREE.Vector3();\r\n\t\t\tvar edge1 = new THREE.Vector3();\r\n\t\t\tvar edge2 = new THREE.Vector3();\r\n\t\t\tvar normal = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( a, b, c, backfaceCulling, optionalTarget ) {\r\n\t\r\n\t\t\t\t// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp\r\n\t\r\n\t\t\t\tedge1.subVectors( b, a );\r\n\t\t\t\tedge2.subVectors( c, a );\r\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\r\n\t\r\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\t\tvar DdN = this.direction.dot( normal );\r\n\t\t\t\tvar sign;\r\n\t\r\n\t\t\t\tif ( DdN > 0 ) {\r\n\t\r\n\t\t\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\t\t\tsign = 1;\r\n\t\r\n\t\t\t\t} else if ( DdN < 0 ) {\r\n\t\r\n\t\t\t\t\tsign = - 1;\r\n\t\t\t\t\tDdN = - DdN;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tdiff.subVectors( this.origin, a );\r\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\r\n\t\r\n\t\t\t\t// b1 < 0, no intersection\r\n\t\t\t\tif ( DdQxE2 < 0 ) {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\r\n\t\r\n\t\t\t\t// b2 < 0, no intersection\r\n\t\t\t\tif ( DdE1xQ < 0 ) {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\r\n\t\r\n\t\t\t\t// t < 0, no intersection\r\n\t\t\t\tif ( QdN < 0 ) {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Ray intersects triangle.\r\n\t\t\t\treturn this.at( QdN / DdN, optionalTarget );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyMatrix4: function ( matrix4 ) {\r\n\t\r\n\t\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\r\n\t\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\t\tthis.direction.sub( this.origin );\r\n\t\t\tthis.direction.normalize();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( ray ) {\r\n\t\r\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Sphere.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Sphere = function ( center, radius ) {\r\n\t\r\n\t\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Sphere.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Sphere,\r\n\t\r\n\t\tset: function ( center, radius ) {\r\n\t\r\n\t\t\tthis.center.copy( center );\r\n\t\t\tthis.radius = radius;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromPoints: function () {\r\n\t\r\n\t\t\tvar box = new THREE.Box3();\r\n\t\r\n\t\t\treturn function ( points, optionalCenter ) {\r\n\t\r\n\t\t\t\tvar center = this.center;\r\n\t\r\n\t\t\t\tif ( optionalCenter !== undefined ) {\r\n\t\r\n\t\t\t\t\tcenter.copy( optionalCenter );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tbox.setFromPoints( points ).center( center );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( sphere ) {\r\n\t\r\n\t\t\tthis.center.copy( sphere.center );\r\n\t\t\tthis.radius = sphere.radius;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tempty: function () {\r\n\t\r\n\t\t\treturn ( this.radius <= 0 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function ( point ) {\r\n\t\r\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\t\r\n\t\t\tvar radiusSum = this.radius + sphere.radius;\r\n\t\r\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\tresult.copy( point );\r\n\t\r\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\t\r\n\t\t\t\tresult.sub( this.center ).normalize();\r\n\t\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetBoundingBox: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar box = optionalTarget || new THREE.Box3();\r\n\t\r\n\t\t\tbox.set( this.center, this.center );\r\n\t\t\tbox.expandByScalar( this.radius );\r\n\t\r\n\t\t\treturn box;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\t\r\n\t\t\tthis.center.applyMatrix4( matrix );\r\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranslate: function ( offset ) {\r\n\t\r\n\t\t\tthis.center.add( offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( sphere ) {\r\n\t\r\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Frustum.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\r\n\t\r\n\t\tthis.planes = [\r\n\t\r\n\t\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\r\n\t\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\r\n\t\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\r\n\t\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\r\n\t\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\r\n\t\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\r\n\t\r\n\t\t];\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Frustum.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Frustum,\r\n\t\r\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\r\n\t\t\tplanes[ 0 ].copy( p0 );\r\n\t\t\tplanes[ 1 ].copy( p1 );\r\n\t\t\tplanes[ 2 ].copy( p2 );\r\n\t\t\tplanes[ 3 ].copy( p3 );\r\n\t\t\tplanes[ 4 ].copy( p4 );\r\n\t\t\tplanes[ 5 ].copy( p5 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( frustum ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromMatrix: function ( m ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar me = m.elements;\r\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\t\r\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsObject: function () {\r\n\t\r\n\t\t\tvar sphere = new THREE.Sphere();\r\n\t\r\n\t\t\treturn function ( object ) {\r\n\t\r\n\t\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\t\r\n\t\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\t\tsphere.applyMatrix4( object.matrixWorld );\r\n\t\r\n\t\t\t\treturn this.intersectsSphere( sphere );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar center = sphere.center;\r\n\t\t\tvar negRadius = - sphere.radius;\r\n\t\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\t\r\n\t\t\t\tif ( distance < negRadius ) {\r\n\t\r\n\t\t\t\t\treturn false;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsBox: function () {\r\n\t\r\n\t\t\tvar p1 = new THREE.Vector3(),\r\n\t\t\t\tp2 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( box ) {\r\n\t\r\n\t\t\t\tvar planes = this.planes;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar plane = planes[ i ];\r\n\t\r\n\t\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\r\n\t\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\r\n\t\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\r\n\t\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\t\r\n\t\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\r\n\t\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\r\n\t\r\n\t\t\t\t\t// if both outside plane, no intersection\r\n\t\r\n\t\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\r\n\t\r\n\t\t\t\t\t\treturn false;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\t\r\n\t\t\t\t\treturn false;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Plane.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Plane = function ( normal, constant ) {\r\n\t\r\n\t\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\r\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Plane.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Plane,\r\n\t\r\n\t\tset: function ( normal, constant ) {\r\n\t\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = constant;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetComponents: function ( x, y, z, w ) {\r\n\t\r\n\t\t\tthis.normal.set( x, y, z );\r\n\t\t\tthis.constant = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\t\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromCoplanarPoints: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\t\tvar v2 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( a, b, c ) {\r\n\t\r\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\r\n\t\r\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\t\r\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( plane ) {\r\n\t\r\n\t\t\tthis.normal.copy( plane.normal );\r\n\t\t\tthis.constant = plane.constant;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\t\r\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\t\tthis.constant *= inverseNormalLength;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnegate: function () {\r\n\t\r\n\t\t\tthis.constant *= - 1;\r\n\t\t\tthis.normal.negate();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function ( point ) {\r\n\t\r\n\t\t\treturn this.normal.dot( point ) + this.constant;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToSphere: function ( sphere ) {\r\n\t\r\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tprojectPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\r\n\t\r\n\t\t},\r\n\t\r\n\t\torthoPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisIntersectionLine: function ( line ) {\r\n\t\r\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\t\r\n\t\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\t\tvar endSign = this.distanceToPoint( line.end );\r\n\t\r\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectLine: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( line, optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\t\tvar direction = line.delta( v1 );\r\n\t\r\n\t\t\t\tvar denominator = this.normal.dot( direction );\r\n\t\r\n\t\t\t\tif ( denominator === 0 ) {\r\n\t\r\n\t\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\t\r\n\t\t\t\t\t\treturn result.copy( line.start );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\t\treturn undefined;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\t\r\n\t\t\t\tif ( t < 0 || t > 1 ) {\r\n\t\r\n\t\t\t\t\treturn undefined;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\r\n\t\tcoplanarPoint: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\t\tvar v2 = new THREE.Vector3();\r\n\t\t\tvar m1 = new THREE.Matrix3();\r\n\t\r\n\t\t\treturn function ( matrix, optionalNormalMatrix ) {\r\n\t\r\n\t\t\t\t// compute new normal based on theory here:\r\n\t\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\r\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\r\n\t\t\t\tvar newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );\r\n\t\r\n\t\t\t\tvar newCoplanarPoint = this.coplanarPoint( v2 );\r\n\t\t\t\tnewCoplanarPoint.applyMatrix4( matrix );\r\n\t\r\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslate: function ( offset ) {\r\n\t\r\n\t\t\tthis.constant = this.constant - offset.dot( this.normal );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( plane ) {\r\n\t\r\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Math.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Math = {\r\n\t\r\n\t\tgenerateUUID: function () {\r\n\t\r\n\t\t\t// http://www.broofa.com/Tools/Math.uuid.htm\r\n\t\r\n\t\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\r\n\t\t\tvar uuid = new Array( 36 );\r\n\t\t\tvar rnd = 0, r;\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < 36; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\r\n\t\r\n\t\t\t\t\t\tuuid[ i ] = '-';\r\n\t\r\n\t\t\t\t\t} else if ( i === 14 ) {\r\n\t\r\n\t\t\t\t\t\tuuid[ i ] = '4';\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\r\n\t\t\t\t\t\tr = rnd & 0xf;\r\n\t\t\t\t\t\trnd = rnd >> 4;\r\n\t\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn uuid.join( '' );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclamp: function ( value, min, max ) {\r\n\t\r\n\t\t\treturn Math.max( min, Math.min( max, value ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// compute euclidian modulo of m % n\r\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\t\r\n\t\teuclideanModulo: function ( n, m ) {\r\n\t\r\n\t\t\treturn ( ( n % m ) + m ) % m;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\t\r\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\t\r\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\t\r\n\t\tsmoothstep: function ( x, min, max ) {\r\n\t\r\n\t\t\tif ( x <= min ) return 0;\r\n\t\t\tif ( x >= max ) return 1;\r\n\t\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\t\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsmootherstep: function ( x, min, max ) {\r\n\t\r\n\t\t\tif ( x <= min ) return 0;\r\n\t\t\tif ( x >= max ) return 1;\r\n\t\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\t\r\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Random float from <0, 1> with 16 bits of randomness\r\n\t\t// (standard Math.random() creates repetitive patterns when applied over larger space)\r\n\t\r\n\t\trandom16: function () {\r\n\t\r\n\t\t\treturn ( 65280 * Math.random() + 255 * Math.random() ) / 65535;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Random integer from <low, high> interval\r\n\t\r\n\t\trandInt: function ( low, high ) {\r\n\t\r\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Random float from <low, high> interval\r\n\t\r\n\t\trandFloat: function ( low, high ) {\r\n\t\r\n\t\t\treturn low + Math.random() * ( high - low );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Random float from <-range/2, range/2> interval\r\n\t\r\n\t\trandFloatSpread: function ( range ) {\r\n\t\r\n\t\t\treturn range * ( 0.5 - Math.random() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdegToRad: function () {\r\n\t\r\n\t\t\tvar degreeToRadiansFactor = Math.PI / 180;\r\n\t\r\n\t\t\treturn function ( degrees ) {\r\n\t\r\n\t\t\t\treturn degrees * degreeToRadiansFactor;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tradToDeg: function () {\r\n\t\r\n\t\t\tvar radianToDegreesFactor = 180 / Math.PI;\r\n\t\r\n\t\t\treturn function ( radians ) {\r\n\t\r\n\t\t\t\treturn radians * radianToDegreesFactor;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tisPowerOfTwo: function ( value ) {\r\n\t\r\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnearestPowerOfTwo: function ( value ) {\r\n\t\r\n\t\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnextPowerOfTwo: function ( value ) {\r\n\t\r\n\t\t\tvalue --;\r\n\t\t\tvalue |= value >> 1;\r\n\t\t\tvalue |= value >> 2;\r\n\t\t\tvalue |= value >> 4;\r\n\t\t\tvalue |= value >> 8;\r\n\t\t\tvalue |= value >> 16;\r\n\t\t\tvalue ++;\r\n\t\r\n\t\t\treturn value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Spline.js\r\n\t\r\n\t/**\r\n\t * Spline from Tween.js, slightly optimized (and trashed)\r\n\t * http://sole.github.com/tween.js/examples/05_spline.html\r\n\t *\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Spline = function ( points ) {\r\n\t\r\n\t\tthis.points = points;\r\n\t\r\n\t\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\r\n\t\tpoint, intPoint, weight, w2, w3,\r\n\t\tpa, pb, pc, pd;\r\n\t\r\n\t\tthis.initFromArray = function ( a ) {\r\n\t\r\n\t\t\tthis.points = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < a.length; i ++ ) {\r\n\t\r\n\t\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getPoint = function ( k ) {\r\n\t\r\n\t\t\tpoint = ( this.points.length - 1 ) * k;\r\n\t\t\tintPoint = Math.floor( point );\r\n\t\t\tweight = point - intPoint;\r\n\t\r\n\t\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\t\t\tc[ 1 ] = intPoint;\r\n\t\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\r\n\t\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\r\n\t\r\n\t\t\tpa = this.points[ c[ 0 ] ];\r\n\t\t\tpb = this.points[ c[ 1 ] ];\r\n\t\t\tpc = this.points[ c[ 2 ] ];\r\n\t\t\tpd = this.points[ c[ 3 ] ];\r\n\t\r\n\t\t\tw2 = weight * weight;\r\n\t\t\tw3 = weight * w2;\r\n\t\r\n\t\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\r\n\t\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\r\n\t\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\r\n\t\r\n\t\t\treturn v3;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getControlPointsArray = function () {\r\n\t\r\n\t\t\tvar i, p, l = this.points.length,\r\n\t\t\t\tcoords = [];\r\n\t\r\n\t\t\tfor ( i = 0; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tp = this.points[ i ];\r\n\t\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn coords;\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// approximate length by summing linear segments\r\n\t\r\n\t\tthis.getLength = function ( nSubDivisions ) {\r\n\t\r\n\t\t\tvar i, index, nSamples, position,\r\n\t\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\r\n\t\t\t\toldPosition = new THREE.Vector3(),\r\n\t\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\t\tchunkLengths = [],\r\n\t\t\t\ttotalLength = 0;\r\n\t\r\n\t\t\t// first point has 0 length\r\n\t\r\n\t\t\tchunkLengths[ 0 ] = 0;\r\n\t\r\n\t\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\r\n\t\r\n\t\t\tnSamples = this.points.length * nSubDivisions;\r\n\t\r\n\t\t\toldPosition.copy( this.points[ 0 ] );\r\n\t\r\n\t\t\tfor ( i = 1; i < nSamples; i ++ ) {\r\n\t\r\n\t\t\t\tindex = i / nSamples;\r\n\t\r\n\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\ttmpVec.copy( position );\r\n\t\r\n\t\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\r\n\t\r\n\t\t\t\toldPosition.copy( position );\r\n\t\r\n\t\t\t\tpoint = ( this.points.length - 1 ) * index;\r\n\t\t\t\tintPoint = Math.floor( point );\r\n\t\r\n\t\t\t\tif ( intPoint !== oldIntPoint ) {\r\n\t\r\n\t\t\t\t\tchunkLengths[ intPoint ] = totalLength;\r\n\t\t\t\t\toldIntPoint = intPoint;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// last point ends with total length\r\n\t\r\n\t\t\tchunkLengths[ chunkLengths.length ] = totalLength;\r\n\t\r\n\t\t\treturn { chunks: chunkLengths, total: totalLength };\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\r\n\t\r\n\t\t\tvar i, j,\r\n\t\t\t\tindex, indexCurrent, indexNext,\r\n\t\t\t\trealDistance,\r\n\t\t\t\tsampling, position,\r\n\t\t\t\tnewpoints = [],\r\n\t\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\t\tsl = this.getLength();\r\n\t\r\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\r\n\t\r\n\t\t\tfor ( i = 1; i < this.points.length; i ++ ) {\r\n\t\r\n\t\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\r\n\t\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\r\n\t\r\n\t\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\r\n\t\r\n\t\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\r\n\t\r\n\t\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\r\n\t\t\t\tindexNext = i / ( this.points.length - 1 );\r\n\t\r\n\t\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\r\n\t\r\n\t\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\r\n\t\r\n\t\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.points = newpoints;\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Catmull-Rom\r\n\t\r\n\t\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\r\n\t\r\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\t\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\t\r\n\t\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Triangle.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Triangle = function ( a, b, c ) {\r\n\t\r\n\t\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\r\n\t\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\r\n\t\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Triangle.normal = function () {\r\n\t\r\n\t\tvar v0 = new THREE.Vector3();\r\n\t\r\n\t\treturn function ( a, b, c, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\tresult.subVectors( c, b );\r\n\t\t\tv0.subVectors( a, b );\r\n\t\t\tresult.cross( v0 );\r\n\t\r\n\t\t\tvar resultLengthSq = result.lengthSq();\r\n\t\t\tif ( resultLengthSq > 0 ) {\r\n\t\r\n\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result.set( 0, 0, 0 );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\t// static/instance method to calculate barycentric coordinates\r\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\tTHREE.Triangle.barycoordFromPoint = function () {\r\n\t\r\n\t\tvar v0 = new THREE.Vector3();\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\r\n\t\treturn function ( point, a, b, c, optionalTarget ) {\r\n\t\r\n\t\t\tv0.subVectors( c, a );\r\n\t\t\tv1.subVectors( b, a );\r\n\t\t\tv2.subVectors( point, a );\r\n\t\r\n\t\t\tvar dot00 = v0.dot( v0 );\r\n\t\t\tvar dot01 = v0.dot( v1 );\r\n\t\t\tvar dot02 = v0.dot( v2 );\r\n\t\t\tvar dot11 = v1.dot( v1 );\r\n\t\t\tvar dot12 = v1.dot( v2 );\r\n\t\r\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\t// collinear or singular triangle\r\n\t\t\tif ( denom === 0 ) {\r\n\t\r\n\t\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\t\treturn result.set( - 2, - 1, - 1 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar invDenom = 1 / denom;\r\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\t\r\n\t\t\t// barycentric coordinates must always sum to 1\r\n\t\t\treturn result.set( 1 - u - v, v, u );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.Triangle.containsPoint = function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\treturn function ( point, a, b, c ) {\r\n\t\r\n\t\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\r\n\t\r\n\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.Triangle.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Triangle,\r\n\t\r\n\t\tset: function ( a, b, c ) {\r\n\t\r\n\t\t\tthis.a.copy( a );\r\n\t\t\tthis.b.copy( b );\r\n\t\t\tthis.c.copy( c );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\t\r\n\t\t\tthis.a.copy( points[ i0 ] );\r\n\t\t\tthis.b.copy( points[ i1 ] );\r\n\t\t\tthis.c.copy( points[ i2 ] );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( triangle ) {\r\n\t\r\n\t\t\tthis.a.copy( triangle.a );\r\n\t\t\tthis.b.copy( triangle.b );\r\n\t\t\tthis.c.copy( triangle.c );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tarea: function () {\r\n\t\r\n\t\t\tvar v0 = new THREE.Vector3();\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tv0.subVectors( this.c, this.b );\r\n\t\t\t\tv1.subVectors( this.a, this.b );\r\n\t\r\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmidpoint: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormal: function ( optionalTarget ) {\r\n\t\r\n\t\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tplane: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Plane();\r\n\t\r\n\t\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tbarycoordFromPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( triangle ) {\r\n\t\r\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/Channels.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Channels = function () {\r\n\t\r\n\t\tthis.mask = 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Channels.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Channels,\r\n\t\r\n\t\tset: function ( channel ) {\r\n\t\r\n\t\t\tthis.mask = 1 << channel;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tenable: function ( channel ) {\r\n\t\r\n\t\t\tthis.mask |= 1 << channel;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoggle: function ( channel ) {\r\n\t\r\n\t\t\tthis.mask ^= 1 << channel;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdisable: function ( channel ) {\r\n\t\r\n\t\t\tthis.mask &= ~ ( 1 << channel );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/Clock.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Clock = function ( autoStart ) {\r\n\t\r\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\t\r\n\t\tthis.startTime = 0;\r\n\t\tthis.oldTime = 0;\r\n\t\tthis.elapsedTime = 0;\r\n\t\r\n\t\tthis.running = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Clock.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Clock,\r\n\t\r\n\t\tstart: function () {\r\n\t\r\n\t\t\tthis.startTime = self.performance.now();\r\n\t\r\n\t\t\tthis.oldTime = this.startTime;\r\n\t\t\tthis.running = true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tstop: function () {\r\n\t\r\n\t\t\tthis.getElapsedTime();\r\n\t\t\tthis.running = false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetElapsedTime: function () {\r\n\t\r\n\t\t\tthis.getDelta();\r\n\t\t\treturn this.elapsedTime;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetDelta: function () {\r\n\t\r\n\t\t\tvar diff = 0;\r\n\t\r\n\t\t\tif ( this.autoStart && ! this.running ) {\r\n\t\r\n\t\t\t\tthis.start();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.running ) {\r\n\t\r\n\t\t\t\tvar newTime = self.performance.now();\r\n\t\r\n\t\t\t\tdiff = 0.001 * ( newTime - this.oldTime );\r\n\t\t\t\tthis.oldTime = newTime;\r\n\t\r\n\t\t\t\tthis.elapsedTime += diff;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn diff;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/EventDispatcher.js\r\n\t\r\n\t/**\r\n\t * https://github.com/mrdoob/eventdispatcher.js/\r\n\t */\r\n\t\r\n\tTHREE.EventDispatcher = function () {};\r\n\t\r\n\tTHREE.EventDispatcher.prototype = {\r\n\t\r\n\t\tconstructor: THREE.EventDispatcher,\r\n\t\r\n\t\tapply: function ( object ) {\r\n\t\r\n\t\t\tobject.addEventListener = THREE.EventDispatcher.prototype.addEventListener;\r\n\t\t\tobject.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;\r\n\t\t\tobject.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;\r\n\t\t\tobject.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddEventListener: function ( type, listener ) {\r\n\t\r\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\t\r\n\t\t\tvar listeners = this._listeners;\r\n\t\r\n\t\t\tif ( listeners[ type ] === undefined ) {\r\n\t\r\n\t\t\t\tlisteners[ type ] = [];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\t\r\n\t\t\t\tlisteners[ type ].push( listener );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\thasEventListener: function ( type, listener ) {\r\n\t\r\n\t\t\tif ( this._listeners === undefined ) return false;\r\n\t\r\n\t\t\tvar listeners = this._listeners;\r\n\t\r\n\t\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremoveEventListener: function ( type, listener ) {\r\n\t\r\n\t\t\tif ( this._listeners === undefined ) return;\r\n\t\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ type ];\r\n\t\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\t\r\n\t\t\t\tvar index = listenerArray.indexOf( listener );\r\n\t\r\n\t\t\t\tif ( index !== - 1 ) {\r\n\t\r\n\t\t\t\t\tlistenerArray.splice( index, 1 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispatchEvent: function ( event ) {\r\n\t\r\n\t\t\tif ( this._listeners === undefined ) return;\r\n\t\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ event.type ];\r\n\t\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\t\r\n\t\t\t\tevent.target = this;\r\n\t\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar length = listenerArray.length;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\t\r\n\t\t\t\t\tarray[ i ] = listenerArray[ i ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\t\r\n\t\t\t\t\tarray[ i ].call( this, event );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/Raycaster.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author bhouston / http://clara.io/\r\n\t * @author stephomi / http://stephaneginier.com/\r\n\t */\r\n\t\r\n\t( function ( THREE ) {\r\n\t\r\n\t\tTHREE.Raycaster = function ( origin, direction, near, far ) {\r\n\t\r\n\t\t\tthis.ray = new THREE.Ray( origin, direction );\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\t\r\n\t\t\tthis.near = near || 0;\r\n\t\t\tthis.far = far || Infinity;\r\n\t\r\n\t\t\tthis.params = {\r\n\t\t\t\tMesh: {},\r\n\t\t\t\tLine: {},\r\n\t\t\t\tLOD: {},\r\n\t\t\t\tPoints: { threshold: 1 },\r\n\t\t\t\tSprite: {}\r\n\t\t\t};\r\n\t\r\n\t\t\tObject.defineProperties( this.params, {\r\n\t\t\t\tPointCloud: {\r\n\t\t\t\t\tget: function () {\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\t\treturn this.Points;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction descSort( a, b ) {\r\n\t\r\n\t\t\treturn a.distance - b.distance;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\t\r\n\t\t\tif ( object.visible === false ) return;\r\n\t\r\n\t\t\tobject.raycast( raycaster, intersects );\r\n\t\r\n\t\t\tif ( recursive === true ) {\r\n\t\r\n\t\t\t\tvar children = object.children;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tTHREE.Raycaster.prototype = {\r\n\t\r\n\t\t\tconstructor: THREE.Raycaster,\r\n\t\r\n\t\t\tlinePrecision: 1,\r\n\t\r\n\t\t\tset: function ( origin, direction ) {\r\n\t\r\n\t\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\t\r\n\t\t\t\tthis.ray.set( origin, direction );\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tsetFromCamera: function ( coords, camera ) {\r\n\t\r\n\t\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\r\n\t\r\n\t\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\t\r\n\t\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\r\n\t\r\n\t\t\t\t\tthis.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );\r\n\t\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tintersectObject: function ( object, recursive ) {\r\n\t\r\n\t\t\t\tvar intersects = [];\r\n\t\r\n\t\t\t\tintersectObject( object, this, intersects, recursive );\r\n\t\r\n\t\t\t\tintersects.sort( descSort );\r\n\t\r\n\t\t\t\treturn intersects;\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tintersectObjects: function ( objects, recursive ) {\r\n\t\r\n\t\t\t\tvar intersects = [];\r\n\t\r\n\t\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\t\treturn intersects;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tintersects.sort( descSort );\r\n\t\r\n\t\t\t\treturn intersects;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}( THREE ) );\r\n\t\r\n\t// File:src/core/Object3D.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author elephantatwork / www.elephantatwork.ch\r\n\t */\r\n\t\r\n\tTHREE.Object3D = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Object3D';\r\n\t\r\n\t\tthis.parent = null;\r\n\t\tthis.channels = new THREE.Channels();\r\n\t\tthis.children = [];\r\n\t\r\n\t\tthis.up = THREE.Object3D.DefaultUp.clone();\r\n\t\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar rotation = new THREE.Euler();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\t\tvar scale = new THREE.Vector3( 1, 1, 1 );\r\n\t\r\n\t\tfunction onRotationChange() {\r\n\t\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction onQuaternionChange() {\r\n\t\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\t\r\n\t\t}\r\n\t\r\n\t\trotation.onChange( onRotationChange );\r\n\t\tquaternion.onChange( onQuaternionChange );\r\n\t\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tposition: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\trotation: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\tquaternion: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\tscale: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new THREE.Matrix4()\r\n\t\t\t},\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new THREE.Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\tthis.rotationAutoUpdate = true;\r\n\t\r\n\t\tthis.matrix = new THREE.Matrix4();\r\n\t\tthis.matrixWorld = new THREE.Matrix4();\r\n\t\r\n\t\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\t\r\n\t\tthis.visible = true;\r\n\t\r\n\t\tthis.castShadow = false;\r\n\t\tthis.receiveShadow = false;\r\n\t\r\n\t\tthis.frustumCulled = true;\r\n\t\tthis.renderOrder = 0;\r\n\t\r\n\t\tthis.userData = {};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\r\n\tTHREE.Object3D.DefaultMatrixAutoUpdate = true;\r\n\t\r\n\tTHREE.Object3D.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Object3D,\r\n\t\r\n\t\tget eulerOrder () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\r\n\t\t\treturn this.rotation.order;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset eulerOrder ( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\r\n\t\t\tthis.rotation.order = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget useQuaternion () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset useQuaternion ( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset renderDepth ( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t//\r\n\t\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\t\r\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\t\r\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\t\r\n\t\t\t// assumes axis is normalized\r\n\t\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRotationFromEuler: function ( euler ) {\r\n\t\r\n\t\t\tthis.quaternion.setFromEuler( euler, true );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRotationFromMatrix: function ( m ) {\r\n\t\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\t\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\t\r\n\t\t\t// assumes q is normalized\r\n\t\r\n\t\t\tthis.quaternion.copy( q );\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateOnAxis: function () {\r\n\t\r\n\t\t\t// rotate object on axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\t\r\n\t\t\tvar q1 = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( axis, angle ) {\r\n\t\r\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\t\r\n\t\t\t\tthis.quaternion.multiply( q1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateX: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\t\r\n\t\t\treturn function ( angle ) {\r\n\t\r\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateY: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\t\r\n\t\t\treturn function ( angle ) {\r\n\t\r\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateZ: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\t\r\n\t\t\treturn function ( angle ) {\r\n\t\r\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslateOnAxis: function () {\r\n\t\r\n\t\t\t// translate object by distance along axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( axis, distance ) {\r\n\t\r\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\r\n\t\r\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslate: function ( distance, axis ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\t\treturn this.translateOnAxis( axis, distance );\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranslateX: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\t\r\n\t\t\treturn function ( distance ) {\r\n\t\r\n\t\t\t\treturn this.translateOnAxis( v1, distance );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslateY: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\t\r\n\t\t\treturn function ( distance ) {\r\n\t\r\n\t\t\t\treturn this.translateOnAxis( v1, distance );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslateZ: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\t\r\n\t\t\treturn function ( distance ) {\r\n\t\r\n\t\t\t\treturn this.translateOnAxis( v1, distance );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tlocalToWorld: function ( vector ) {\r\n\t\r\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tworldToLocal: function () {\r\n\t\r\n\t\t\tvar m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\treturn function ( vector ) {\r\n\t\r\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tlookAt: function () {\r\n\t\r\n\t\t\t// This routine does not support objects with rotated and/or translated parent(s)\r\n\t\r\n\t\t\tvar m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\treturn function ( vector ) {\r\n\t\r\n\t\t\t\tm1.lookAt( vector, this.position, this.up );\r\n\t\r\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tadd: function ( object ) {\r\n\t\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tthis.add( arguments[ i ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object === this ) {\r\n\t\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object instanceof THREE.Object3D ) {\r\n\t\r\n\t\t\t\tif ( object.parent !== null ) {\r\n\t\r\n\t\t\t\t\tobject.parent.remove( object );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tobject.parent = this;\r\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\r\n\t\r\n\t\t\t\tthis.children.push( object );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremove: function ( object ) {\r\n\t\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tthis.remove( arguments[ i ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar index = this.children.indexOf( object );\r\n\t\r\n\t\t\tif ( index !== - 1 ) {\r\n\t\r\n\t\t\t\tobject.parent = null;\r\n\t\r\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\r\n\t\r\n\t\t\t\tthis.children.splice( index, 1 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetChildByName: function ( name ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\t\treturn this.getObjectByName( name );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetObjectById: function ( id ) {\r\n\t\r\n\t\t\treturn this.getObjectByProperty( 'id', id );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetObjectByName: function ( name ) {\r\n\t\r\n\t\t\treturn this.getObjectByProperty( 'name', name );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetObjectByProperty: function ( name, value ) {\r\n\t\r\n\t\t\tif ( this[ name ] === value ) return this;\r\n\t\r\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar child = this.children[ i ];\r\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\t\r\n\t\t\t\tif ( object !== undefined ) {\r\n\t\r\n\t\t\t\t\treturn object;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn undefined;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetWorldPosition: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\t\r\n\t\t\treturn result.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetWorldQuaternion: function () {\r\n\t\r\n\t\t\tvar position = new THREE.Vector3();\r\n\t\t\tvar scale = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Quaternion();\r\n\t\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\t\r\n\t\t\t\tthis.matrixWorld.decompose( position, result, scale );\r\n\t\r\n\t\t\t\treturn result;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tgetWorldRotation: function () {\r\n\t\r\n\t\t\tvar quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Euler();\r\n\t\r\n\t\t\t\tthis.getWorldQuaternion( quaternion );\r\n\t\r\n\t\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tgetWorldScale: function () {\r\n\t\r\n\t\t\tvar position = new THREE.Vector3();\r\n\t\t\tvar quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\t\r\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\r\n\t\r\n\t\t\t\treturn result;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tgetWorldDirection: function () {\r\n\t\r\n\t\t\tvar quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\t\tthis.getWorldQuaternion( quaternion );\r\n\t\r\n\t\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\traycast: function () {},\r\n\t\r\n\t\ttraverse: function ( callback ) {\r\n\t\r\n\t\t\tcallback( this );\r\n\t\r\n\t\t\tvar children = this.children;\r\n\t\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tchildren[ i ].traverse( callback );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttraverseVisible: function ( callback ) {\r\n\t\r\n\t\t\tif ( this.visible === false ) return;\r\n\t\r\n\t\t\tcallback( this );\r\n\t\r\n\t\t\tvar children = this.children;\r\n\t\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tchildren[ i ].traverseVisible( callback );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttraverseAncestors: function ( callback ) {\r\n\t\r\n\t\t\tvar parent = this.parent;\r\n\t\r\n\t\t\tif ( parent !== null ) {\r\n\t\r\n\t\t\t\tcallback( parent );\r\n\t\r\n\t\t\t\tparent.traverseAncestors( callback );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdateMatrix: function () {\r\n\t\r\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\t\r\n\t\t\tthis.matrixWorldNeedsUpdate = true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\t\r\n\t\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\r\n\t\r\n\t\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\r\n\t\r\n\t\t\t\tif ( this.parent === null ) {\r\n\t\r\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\t\r\n\t\t\t\tforce = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// update children\r\n\t\r\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function ( meta ) {\r\n\t\r\n\t\t\tvar isRootObject = ( meta === undefined );\r\n\t\r\n\t\t\tvar output = {};\r\n\t\r\n\t\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t\t// not providing it implies that this is the root object\r\n\t\t\t// being serialized.\r\n\t\t\tif ( isRootObject ) {\r\n\t\r\n\t\t\t\t// initialize meta obj\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\tgeometries: {},\r\n\t\t\t\t\tmaterials: {},\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {}\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\toutput.metadata = {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'Object',\r\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// standard Object3D serialization\r\n\t\r\n\t\t\tvar object = {};\r\n\t\r\n\t\t\tobject.uuid = this.uuid;\r\n\t\t\tobject.type = this.type;\r\n\t\r\n\t\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\r\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\t\tif ( this.visible === false ) object.visible = false;\r\n\t\r\n\t\t\tobject.matrix = this.matrix.toArray();\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( this.geometry !== undefined ) {\r\n\t\r\n\t\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\r\n\t\r\n\t\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tobject.geometry = this.geometry.uuid;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.material !== undefined ) {\r\n\t\r\n\t\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\r\n\t\r\n\t\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tobject.material = this.material.uuid;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( this.children.length > 0 ) {\r\n\t\r\n\t\t\t\tobject.children = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( isRootObject ) {\r\n\t\r\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\t\r\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\t\tif ( images.length > 0 ) output.images = images;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\toutput.object = object;\r\n\t\r\n\t\t\treturn output;\r\n\t\r\n\t\t\t// extract data from the cache hash\r\n\t\t\t// remove metadata on each item\r\n\t\t\t// and return as array\r\n\t\t\tfunction extractFromCache ( cache ) {\r\n\t\r\n\t\t\t\tvar values = [];\r\n\t\t\t\tfor ( var key in cache ) {\r\n\t\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\t\r\n\t\t\t\t}\r\n\t\t\t\treturn values;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function ( recursive ) {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this, recursive );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source, recursive ) {\r\n\t\r\n\t\t\tif ( recursive === undefined ) recursive = true;\r\n\t\r\n\t\t\tthis.name = source.name;\r\n\t\r\n\t\t\tthis.up.copy( source.up );\r\n\t\r\n\t\t\tthis.position.copy( source.position );\r\n\t\t\tthis.quaternion.copy( source.quaternion );\r\n\t\t\tthis.scale.copy( source.scale );\r\n\t\r\n\t\t\tthis.rotationAutoUpdate = source.rotationAutoUpdate;\r\n\t\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\t\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\t\r\n\t\t\tthis.visible = source.visible;\r\n\t\r\n\t\t\tthis.castShadow = source.castShadow;\r\n\t\t\tthis.receiveShadow = source.receiveShadow;\r\n\t\r\n\t\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\t\tthis.renderOrder = source.renderOrder;\r\n\t\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\t\r\n\t\t\tif ( recursive === true ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\t\tthis.add( child.clone() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );\r\n\t\r\n\tTHREE.Object3DIdCount = 0;\r\n\t\r\n\t// File:src/core/Face3.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\r\n\t\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\t\r\n\t\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\t\r\n\t\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\t\r\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Face3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Face3,\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.a = source.a;\r\n\t\t\tthis.b = source.b;\r\n\t\t\tthis.c = source.c;\r\n\t\r\n\t\t\tthis.normal.copy( source.normal );\r\n\t\t\tthis.color.copy( source.color );\r\n\t\r\n\t\t\tthis.materialIndex = source.materialIndex;\r\n\t\r\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/Face4.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/BufferAttribute.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.BufferAttribute = function ( array, itemSize ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.array = array;\r\n\t\tthis.itemSize = itemSize;\r\n\t\r\n\t\tthis.dynamic = false;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\t\r\n\t\tthis.version = 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BufferAttribute.prototype = {\r\n\t\r\n\t\tconstructor: THREE.BufferAttribute,\r\n\t\r\n\t\tget length() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\t\treturn this.array.length;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget count() {\r\n\t\r\n\t\t\treturn this.array.length / this.itemSize;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset needsUpdate( value ) {\r\n\t\r\n\t\t\tif ( value === true ) this.version ++;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetDynamic: function ( value ) {\r\n\t\r\n\t\t\tthis.dynamic = value;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.itemSize = source.itemSize;\r\n\t\r\n\t\t\tthis.dynamic = source.dynamic;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\t\r\n\t\t\tindex1 *= this.itemSize;\r\n\t\t\tindex2 *= attribute.itemSize;\r\n\t\r\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyArray: function ( array ) {\r\n\t\r\n\t\t\tthis.array.set( array );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyColorsArray: function ( colors ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar color = colors[ i ];\r\n\t\r\n\t\t\t\tif ( color === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\t\tcolor = new THREE.Color();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\t\tarray[ offset ++ ] = color.b;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyIndicesArray: function ( indices ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar index = indices[ i ];\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = index.a;\r\n\t\t\t\tarray[ offset ++ ] = index.b;\r\n\t\t\t\tarray[ offset ++ ] = index.c;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyVector2sArray: function ( vectors ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\t\r\n\t\t\t\tif ( vector === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new THREE.Vector2();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyVector3sArray: function ( vectors ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\t\r\n\t\t\t\tif ( vector === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new THREE.Vector3();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyVector4sArray: function ( vectors ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\t\r\n\t\t\t\tif ( vector === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new THREE.Vector4();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\t\tarray[ offset ++ ] = vector.w;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( value, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.array.set( value, offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetX: function ( index ) {\r\n\t\r\n\t\t\treturn this.array[ index * this.itemSize ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( index, x ) {\r\n\t\r\n\t\t\tthis.array[ index * this.itemSize ] = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetY: function ( index ) {\r\n\t\r\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( index, y ) {\r\n\t\r\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetZ: function ( index ) {\r\n\t\r\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetZ: function ( index, z ) {\r\n\t\r\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetW: function ( index ) {\r\n\t\r\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetW: function ( index, w ) {\r\n\t\r\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXY: function ( index, x, y ) {\r\n\t\r\n\t\t\tindex *= this.itemSize;\r\n\t\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\t\r\n\t\t\tindex *= this.itemSize;\r\n\t\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\t\r\n\t\t\tindex *= this.itemSize;\r\n\t\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\t\t\tthis.array[ index + 3 ] = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.Int8Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Uint8Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Int16Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Uint16Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Int32Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Uint32Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Float32Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Float64Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t// Deprecated\r\n\t\r\n\tTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\t\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/InstancedBufferAttribute.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\r\n\t\r\n\t\tTHREE.BufferAttribute.call( this, array, itemSize );\r\n\t\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\r\n\tTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\r\n\t\r\n\tTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.BufferAttribute.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/InterleavedBuffer.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InterleavedBuffer = function ( array, stride ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.array = array;\r\n\t\tthis.stride = stride;\r\n\t\r\n\t\tthis.dynamic = false;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\t\r\n\t\tthis.version = 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InterleavedBuffer.prototype = {\r\n\t\r\n\t\tconstructor: THREE.InterleavedBuffer,\r\n\t\r\n\t\tget length () {\r\n\t\r\n\t\t\treturn this.array.length;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget count () {\r\n\t\r\n\t\t\treturn this.array.length / this.stride;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset needsUpdate( value ) {\r\n\t\r\n\t\t\tif ( value === true ) this.version ++;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetDynamic: function ( value ) {\r\n\t\r\n\t\t\tthis.dynamic = value;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.stride = source.stride;\r\n\t\t\tthis.dynamic = source.dynamic;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\t\r\n\t\t\tindex1 *= this.stride;\r\n\t\t\tindex2 *= attribute.stride;\r\n\t\r\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( value, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.array.set( value, offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/InstancedInterleavedBuffer.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\r\n\t\r\n\t\tTHREE.InterleavedBuffer.call( this, array, stride );\r\n\t\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\r\n\tTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\r\n\t\r\n\tTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/InterleavedBufferAttribute.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.data = interleavedBuffer;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.offset = offset;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.InterleavedBufferAttribute.prototype = {\r\n\t\r\n\t\tconstructor: THREE.InterleavedBufferAttribute,\r\n\t\r\n\t\tget length() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\t\treturn this.array.length;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget count() {\r\n\t\r\n\t\t\treturn this.data.array.length / this.data.stride;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( index, x ) {\r\n\t\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( index, y ) {\r\n\t\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetZ: function ( index, z ) {\r\n\t\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetW: function ( index, w ) {\r\n\t\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetX: function ( index ) {\r\n\t\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetY: function ( index ) {\r\n\t\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetZ: function ( index ) {\r\n\t\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetW: function ( index ) {\r\n\t\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXY: function ( index, x, y ) {\r\n\t\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\t\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\t\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\t\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\t\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\t\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\t\t\tthis.data.array[ index + 3 ] = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/Geometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Geometry = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Geometry';\r\n\t\r\n\t\tthis.vertices = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [ [] ];\r\n\t\r\n\t\tthis.morphTargets = [];\r\n\t\tthis.morphNormals = [];\r\n\t\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\t\r\n\t\tthis.lineDistances = [];\r\n\t\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\t\r\n\t\t// update flags\r\n\t\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.elementsNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.lineDistancesNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Geometry.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Geometry,\r\n\t\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\t\r\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\t\r\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertex.applyMatrix4( matrix );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tthis.computeBoundingBox();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.verticesNeedUpdate = true;\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateX: function () {\r\n\t\r\n\t\t\t// rotate geometry around world x-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateX( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationX( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateY: function () {\r\n\t\r\n\t\t\t// rotate geometry around world y-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateY( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationY( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateZ: function () {\r\n\t\r\n\t\t\t// rotate geometry around world z-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateZ( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationZ( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslate: function () {\r\n\t\r\n\t\t\t// translate geometry\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function translate( x, y, z ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeTranslation( x, y, z );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tscale: function () {\r\n\t\r\n\t\t\t// scale geometry\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function scale( x, y, z ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeScale( x, y, z );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tlookAt: function () {\r\n\t\r\n\t\t\tvar obj;\r\n\t\r\n\t\t\treturn function lookAt( vector ) {\r\n\t\r\n\t\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\t\r\n\t\t\t\tobj.lookAt( vector );\r\n\t\r\n\t\t\t\tobj.updateMatrix();\r\n\t\r\n\t\t\t\tthis.applyMatrix( obj.matrix );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tfromBufferGeometry: function ( geometry ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\r\n\t\t\tvar vertices = attributes.position.array;\r\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\t\r\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\r\n\t\r\n\t\t\tvar tempNormals = [];\r\n\t\t\tvar tempUVs = [];\r\n\t\t\tvar tempUVs2 = [];\r\n\t\r\n\t\t\tfor ( var i = 0, j = 0, k = 0; i < vertices.length; i += 3, j += 2, k += 4 ) {\r\n\t\r\n\t\t\t\tscope.vertices.push( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\r\n\t\r\n\t\t\t\tif ( normals !== undefined ) {\r\n\t\r\n\t\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( colors !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( uvs !== undefined ) {\r\n\t\r\n\t\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( uvs2 !== undefined ) {\r\n\t\r\n\t\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction addFace( a, b, c ) {\r\n\t\r\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\r\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\r\n\t\r\n\t\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors );\r\n\t\r\n\t\t\t\tscope.faces.push( face );\r\n\t\r\n\t\t\t\tif ( uvs !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( uvs2 !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tif ( indices !== undefined ) {\r\n\t\r\n\t\t\t\tvar groups = geometry.groups;\r\n\t\r\n\t\t\t\tif ( groups.length > 0 ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\r\n\t\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\t\tvar count = group.count;\r\n\t\r\n\t\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ] );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < vertices.length / 3; i += 3 ) {\r\n\t\r\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.computeFaceNormals();\r\n\t\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function () {\r\n\t\r\n\t\t\tthis.computeBoundingBox();\r\n\t\r\n\t\t\tvar offset = this.boundingBox.center().negate();\r\n\t\r\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\t\r\n\t\t\treturn offset;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\tthis.computeBoundingSphere();\r\n\t\r\n\t\t\tvar center = this.boundingSphere.center;\r\n\t\t\tvar radius = this.boundingSphere.radius;\r\n\t\r\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\t\r\n\t\t\tvar matrix = new THREE.Matrix4();\r\n\t\t\tmatrix.set(\r\n\t\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\t\r\n\t\t\tthis.applyMatrix( matrix );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeFaceNormals: function () {\r\n\t\r\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\t\r\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\tvar face = this.faces[ f ];\r\n\t\r\n\t\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\t\tvar vC = this.vertices[ face.c ];\r\n\t\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\t\r\n\t\t\t\tcb.normalize();\r\n\t\r\n\t\t\t\tface.normal.copy( cb );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\t\r\n\t\t\tvar v, vl, f, fl, face, vertices;\r\n\t\r\n\t\t\tvertices = new Array( this.vertices.length );\r\n\t\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\t\r\n\t\t\t\tvertices[ v ] = new THREE.Vector3();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( areaWeighted ) {\r\n\t\r\n\t\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\t\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\t\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\t\r\n\t\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\t\r\n\t\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\t\tvertices[ face.c ].add( cb );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\t\r\n\t\t\t\tvertices[ v ].normalize();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\t\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\t\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeMorphNormals: function () {\r\n\t\r\n\t\t\tvar i, il, f, fl, face;\r\n\t\r\n\t\t\t// save original normals\r\n\t\t\t// - create temp variables on first access\r\n\t\t\t//   otherwise just copy (for faster repeated calls)\r\n\t\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\t\r\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\t\r\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\t\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\t\r\n\t\t\tvar tmpGeo = new THREE.Geometry();\r\n\t\t\ttmpGeo.faces = this.faces;\r\n\t\r\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t// create on first access\r\n\t\r\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\t\r\n\t\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\t\r\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\t\r\n\t\t\t\t\tvar faceNormal, vertexNormals;\r\n\t\r\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\t\tfaceNormal = new THREE.Vector3();\r\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\r\n\t\r\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\t\r\n\t\t\t\t// set vertices to morph target\r\n\t\r\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\t\r\n\t\t\t\t// compute morph normals\r\n\t\r\n\t\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\t\ttmpGeo.computeVertexNormals();\r\n\t\r\n\t\t\t\t// store morph normals\r\n\t\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\t\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\t\r\n\t\t\t\t\tfaceNormal.copy( face.normal );\r\n\t\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// restore original normals\r\n\t\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeTangents: function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeLineDistances: function () {\r\n\t\r\n\t\t\tvar d = 0;\r\n\t\t\tvar vertices = this.vertices;\r\n\t\r\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tif ( i > 0 ) {\r\n\t\r\n\t\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.lineDistances[ i ] = d;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeBoundingBox: function () {\r\n\t\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\t\r\n\t\t\t\tthis.boundingBox = new THREE.Box3();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeBoundingSphere: function () {\r\n\t\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\t\r\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.Geometry === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar normalMatrix,\r\n\t\t\tvertexOffset = this.vertices.length,\r\n\t\t\tvertices1 = this.vertices,\r\n\t\t\tvertices2 = geometry.vertices,\r\n\t\t\tfaces1 = this.faces,\r\n\t\t\tfaces2 = geometry.faces,\r\n\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\r\n\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\r\n\t\r\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\r\n\t\r\n\t\t\tif ( matrix !== undefined ) {\r\n\t\r\n\t\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// vertices\r\n\t\r\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar vertex = vertices2[ i ];\r\n\t\r\n\t\t\t\tvar vertexCopy = vertex.clone();\r\n\t\r\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\r\n\t\r\n\t\t\t\tvertices1.push( vertexCopy );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// faces\r\n\t\r\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\t\tfaceVertexColors = face.vertexColors;\r\n\t\r\n\t\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\t\tfaceCopy.normal.copy( face.normal );\r\n\t\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\t\r\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfaceCopy.color.copy( face.color );\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\t\r\n\t\t\t\tfaces1.push( faceCopy );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// uvs\r\n\t\r\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\t\r\n\t\t\t\tif ( uv === undefined ) {\r\n\t\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuvs1.push( uvCopy );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmergeMesh: function ( mesh ) {\r\n\t\r\n\t\t\tif ( mesh instanceof THREE.Mesh === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\r\n\t\r\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t/*\r\n\t\t * Checks for duplicate vertices with hashmap.\r\n\t\t * Duplicated vertices are removed\r\n\t\t * and faces' vertices are updated.\r\n\t\t */\r\n\t\r\n\t\tmergeVertices: function () {\r\n\t\r\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\t\tvar unique = [], changes = [];\r\n\t\r\n\t\t\tvar v, key;\r\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\t\tvar i, il, face;\r\n\t\t\tvar indices, j, jl;\r\n\t\r\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tv = this.vertices[ i ];\r\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\t\r\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\t\r\n\t\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t\t// have to remove them from the geometry.\r\n\t\t\tvar faceIndicesToRemove = [];\r\n\t\r\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tface = this.faces[ i ];\r\n\t\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\t\r\n\t\t\t\tindices = [ face.a, face.b, face.c ];\r\n\t\r\n\t\t\t\tvar dupIndex = - 1;\r\n\t\r\n\t\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\t\r\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\t\r\n\t\t\t\t\t\tdupIndex = n;\r\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\t\r\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\t\r\n\t\t\t\tthis.faces.splice( idx, 1 );\r\n\t\r\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Use unique set of vertices\r\n\t\r\n\t\t\tvar diff = this.vertices.length - unique.length;\r\n\t\t\tthis.vertices = unique;\r\n\t\t\treturn diff;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsortFacesByMaterialIndex: function () {\r\n\t\r\n\t\t\tvar faces = this.faces;\r\n\t\t\tvar length = faces.length;\r\n\t\r\n\t\t\t// tag faces\r\n\t\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\t\r\n\t\t\t\tfaces[ i ]._id = i;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// sort faces\r\n\t\r\n\t\t\tfunction materialIndexSort( a, b ) {\r\n\t\r\n\t\t\t\treturn a.materialIndex - b.materialIndex;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfaces.sort( materialIndexSort );\r\n\t\r\n\t\t\t// sort uvs\r\n\t\r\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\t\r\n\t\t\tvar newUvs1, newUvs2;\r\n\t\r\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\r\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\t\r\n\t\t\t\tvar id = faces[ i ]._id;\r\n\t\r\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\r\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\r\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function () {\r\n\t\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'Geometry',\r\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\t// standard Geometry serialization\r\n\t\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\t\r\n\t\t\t\tvar parameters = this.parameters;\r\n\t\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\t\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn data;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar vertices = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar faces = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar normalsHash = {};\r\n\t\t\tvar colors = [];\r\n\t\t\tvar colorsHash = {};\r\n\t\t\tvar uvs = [];\r\n\t\t\tvar uvsHash = {};\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\t\r\n\t\t\t\tvar hasMaterial = false; // face.materialIndex !== undefined;\r\n\t\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\t\r\n\t\t\t\tvar faceType = 0;\r\n\t\r\n\t\t\t\tfaceType = setBit( faceType, 0, 0 );\r\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\t\r\n\t\t\t\tfaces.push( faceType );\r\n\t\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\r\n\t\t\t\tif ( hasFaceVertexUv ) {\r\n\t\r\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\t\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t\t);\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceNormal ) {\r\n\t\r\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\t\r\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\t\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t\t);\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceColor ) {\r\n\t\r\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceVertexColor ) {\r\n\t\r\n\t\t\t\t\tvar vertexColors = face.vertexColors;\r\n\t\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t\t);\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction setBit( value, position, enabled ) {\r\n\t\r\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction getNormalIndex( normal ) {\r\n\t\r\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\t\r\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\t\r\n\t\t\t\t\treturn normalsHash[ hash ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\t\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction getColorIndex( color ) {\r\n\t\r\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\t\r\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\t\r\n\t\t\t\t\treturn colorsHash[ hash ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\t\tcolors.push( color.getHex() );\r\n\t\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction getUvIndex( uv ) {\r\n\t\r\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\t\r\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\t\r\n\t\t\t\t\treturn uvsHash[ hash ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\t\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tdata.data = {};\r\n\t\r\n\t\t\tdata.data.vertices = vertices;\r\n\t\t\tdata.data.normals = normals;\r\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\r\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\r\n\t\t\tdata.data.faces = faces;\r\n\t\r\n\t\t\treturn data;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.vertices = [];\r\n\t\t\tthis.faces = [];\r\n\t\t\tthis.faceVertexUvs = [ [] ];\r\n\t\r\n\t\t\tvar vertices = source.vertices;\r\n\t\r\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar faces = source.faces;\r\n\t\r\n\t\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\t\r\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\t\r\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\t\r\n\t\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar uv = uvs[ k ];\r\n\t\r\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );\r\n\t\r\n\tTHREE.GeometryIdCount = 0;\r\n\t\r\n\t// File:src/core/DirectGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.DirectGeometry = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'DirectGeometry';\r\n\t\r\n\t\tthis.indices = [];\r\n\t\tthis.vertices = [];\r\n\t\tthis.normals = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.uvs = [];\r\n\t\tthis.uvs2 = [];\r\n\t\r\n\t\tthis.groups = [];\r\n\t\r\n\t\tthis.morphTargets = {};\r\n\t\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\t\r\n\t\t// this.lineDistances = [];\r\n\t\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\t\r\n\t\t// update flags\r\n\t\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DirectGeometry.prototype = {\r\n\t\r\n\t\tconstructor: THREE.DirectGeometry,\r\n\t\r\n\t\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\r\n\t\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\r\n\t\r\n\t\tcomputeFaceNormals: function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeVertexNormals: function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeGroups: function ( geometry ) {\r\n\t\r\n\t\t\tvar group;\r\n\t\t\tvar groups = [];\r\n\t\t\tvar materialIndex;\r\n\t\r\n\t\t\tvar faces = geometry.faces;\r\n\t\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\t// materials\r\n\t\r\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\t\r\n\t\t\t\t\tmaterialIndex = face.materialIndex;\r\n\t\r\n\t\t\t\t\tif ( group !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\t\tgroups.push( group );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tgroup = {\r\n\t\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( group !== undefined ) {\r\n\t\r\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\tgroups.push( group );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.groups = groups;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromGeometry: function ( geometry ) {\r\n\t\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\t\r\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\t\r\n\t\t\t// morphs\r\n\t\r\n\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\tvar morphTargetsLength = morphTargets.length;\r\n\t\r\n\t\t\tif ( morphTargetsLength > 0 ) {\r\n\t\r\n\t\t\t\tvar morphTargetsPosition = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\t\r\n\t\t\t\t\tmorphTargetsPosition[ i ] = [];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar morphNormals = geometry.morphNormals;\r\n\t\t\tvar morphNormalsLength = morphNormals.length;\r\n\t\r\n\t\t\tif ( morphNormalsLength > 0 ) {\r\n\t\r\n\t\t\t\tvar morphTargetsNormal = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\t\r\n\t\t\t\t\tmorphTargetsNormal[ i ] = [];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// skins\r\n\t\r\n\t\t\tvar skinIndices = geometry.skinIndices;\r\n\t\t\tvar skinWeights = geometry.skinWeights;\r\n\t\r\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\t\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\t\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\t\r\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvar normal = face.normal;\r\n\t\r\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\t\r\n\t\t\t\tif ( vertexColors.length === 3 ) {\r\n\t\r\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvar color = face.color;\r\n\t\r\n\t\t\t\t\tthis.colors.push( color, color, color );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceVertexUv === true ) {\r\n\t\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\t\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\t\r\n\t\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\t\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\t\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\t\r\n\t\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// morphs\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\t\r\n\t\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\t\r\n\t\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// skins\r\n\t\r\n\t\t\t\tif ( hasSkinIndices ) {\r\n\t\r\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasSkinWeights ) {\r\n\t\r\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.computeGroups( geometry );\r\n\t\r\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.DirectGeometry.prototype );\r\n\t\r\n\t// File:src/core/BufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.BufferGeometry = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'BufferGeometry';\r\n\t\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\t\r\n\t\tthis.morphAttributes = {};\r\n\t\r\n\t\tthis.groups = [];\r\n\t\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\t\r\n\t\tthis.drawRange = { start: 0, count: Infinity };\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BufferGeometry.prototype = {\r\n\t\r\n\t\tconstructor: THREE.BufferGeometry,\r\n\t\r\n\t\taddIndex: function ( index ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\t\tthis.setIndex( index );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetIndex: function () {\r\n\t\r\n\t\t\treturn this.index;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetIndex: function ( index ) {\r\n\t\r\n\t\t\tthis.index = index;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddAttribute: function ( name, attribute ) {\r\n\t\r\n\t\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\t\r\n\t\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\t\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( name === 'index' ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\t\tthis.setIndex( attribute );\r\n\t\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.attributes[ name ] = attribute;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetAttribute: function ( name ) {\r\n\t\r\n\t\t\treturn this.attributes[ name ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremoveAttribute: function ( name ) {\r\n\t\r\n\t\t\tdelete this.attributes[ name ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget drawcalls() {\r\n\t\r\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\t\treturn this.groups;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget offsets() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\t\treturn this.groups;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddDrawCall: function ( start, count, indexOffset ) {\r\n\t\r\n\t\t\tif ( indexOffset !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\t\tthis.addGroup( start, count );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclearDrawCalls: function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\t\tthis.clearGroups();\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddGroup: function ( start, count, materialIndex ) {\r\n\t\r\n\t\t\tthis.groups.push( {\r\n\t\r\n\t\t\t\tstart: start,\r\n\t\t\t\tcount: count,\r\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclearGroups: function () {\r\n\t\r\n\t\t\tthis.groups = [];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetDrawRange: function ( start, count ) {\r\n\t\r\n\t\t\tthis.drawRange.start = start;\r\n\t\t\tthis.drawRange.count = count;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\t\r\n\t\t\tvar position = this.attributes.position;\r\n\t\r\n\t\t\tif ( position !== undefined ) {\r\n\t\r\n\t\t\t\tmatrix.applyToVector3Array( position.array );\r\n\t\t\t\tposition.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar normal = this.attributes.normal;\r\n\t\r\n\t\t\tif ( normal !== undefined ) {\r\n\t\r\n\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\t\r\n\t\t\t\tnormalMatrix.applyToVector3Array( normal.array );\r\n\t\t\t\tnormal.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tthis.computeBoundingBox();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateX: function () {\r\n\t\r\n\t\t\t// rotate geometry around world x-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateX( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationX( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateY: function () {\r\n\t\r\n\t\t\t// rotate geometry around world y-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateY( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationY( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateZ: function () {\r\n\t\r\n\t\t\t// rotate geometry around world z-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateZ( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationZ( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslate: function () {\r\n\t\r\n\t\t\t// translate geometry\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function translate( x, y, z ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeTranslation( x, y, z );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tscale: function () {\r\n\t\r\n\t\t\t// scale geometry\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function scale( x, y, z ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeScale( x, y, z );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tlookAt: function () {\r\n\t\r\n\t\t\tvar obj;\r\n\t\r\n\t\t\treturn function lookAt( vector ) {\r\n\t\r\n\t\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\t\r\n\t\t\t\tobj.lookAt( vector );\r\n\t\r\n\t\t\t\tobj.updateMatrix();\r\n\t\r\n\t\t\t\tthis.applyMatrix( obj.matrix );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tcenter: function () {\r\n\t\r\n\t\t\tthis.computeBoundingBox();\r\n\t\r\n\t\t\tvar offset = this.boundingBox.center().negate();\r\n\t\r\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\t\r\n\t\t\treturn offset;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromObject: function ( object ) {\r\n\t\r\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\t\r\n\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\r\n\t\r\n\t\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\r\n\t\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\r\n\t\r\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\t\r\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\t\r\n\t\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\r\n\t\r\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( geometry.boundingBox !== null ) {\r\n\t\r\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( object instanceof THREE.Mesh ) {\r\n\t\r\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\t\tthis.fromGeometry( geometry );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdateFromObject: function ( object ) {\r\n\t\r\n\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\t\r\n\t\t\t\tvar direct = geometry.__directGeometry;\r\n\t\r\n\t\t\t\tif ( direct === undefined ) {\r\n\t\r\n\t\t\t\t\treturn this.fromGeometry( geometry );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\t\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\t\r\n\t\t\t\tgeometry = direct;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\t\r\n\t\t\t\tvar attribute = this.attributes.position;\r\n\t\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\t\r\n\t\t\t\tvar attribute = this.attributes.normal;\r\n\t\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\t\r\n\t\t\t\tvar attribute = this.attributes.color;\r\n\t\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.uvsNeedUpdate ) {\r\n\t\r\n\t\t\t\t\tvar attribute = this.attributes.uv;\r\n\t\r\n\t\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\t\r\n\t\t\t\tvar attribute = this.attributes.lineDistance;\r\n\t\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.groupsNeedUpdate ) {\r\n\t\r\n\t\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\t\tthis.groups = geometry.groups;\r\n\t\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromGeometry: function ( geometry ) {\r\n\t\r\n\t\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\r\n\t\r\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromDirectGeometry: function ( geometry ) {\r\n\t\r\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\t\r\n\t\t\tif ( geometry.normals.length > 0 ) {\r\n\t\r\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.colors.length > 0 ) {\r\n\t\r\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.uvs.length > 0 ) {\r\n\t\r\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.uvs2.length > 0 ) {\r\n\t\r\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.indices.length > 0 ) {\r\n\t\r\n\t\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\r\n\t\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\r\n\t\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// groups\r\n\t\r\n\t\t\tthis.groups = geometry.groups;\r\n\t\r\n\t\t\t// morphs\r\n\t\r\n\t\t\tfor ( var name in geometry.morphTargets ) {\r\n\t\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\r\n\t\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\r\n\t\r\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// skinning\r\n\t\r\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\t\r\n\t\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\t\r\n\t\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeBoundingBox: function () {\r\n\t\r\n\t\t\tvar vector = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tif ( this.boundingBox === null ) {\r\n\t\r\n\t\t\t\t\tthis.boundingBox = new THREE.Box3();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar positions = this.attributes.position.array;\r\n\t\r\n\t\t\t\tif ( positions ) {\r\n\t\r\n\t\t\t\t\tvar bb = this.boundingBox;\r\n\t\t\t\t\tbb.makeEmpty();\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\t\tbb.expandByPoint( vector );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( positions === undefined || positions.length === 0 ) {\r\n\t\r\n\t\t\t\t\tthis.boundingBox.min.set( 0, 0, 0 );\r\n\t\t\t\t\tthis.boundingBox.max.set( 0, 0, 0 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\t\r\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tcomputeBoundingSphere: function () {\r\n\t\r\n\t\t\tvar box = new THREE.Box3();\r\n\t\t\tvar vector = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tif ( this.boundingSphere === null ) {\r\n\t\r\n\t\t\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar positions = this.attributes.position.array;\r\n\t\r\n\t\t\t\tif ( positions ) {\r\n\t\r\n\t\t\t\t\tbox.makeEmpty();\r\n\t\r\n\t\t\t\t\tvar center = this.boundingSphere.center;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\t\tbox.expandByPoint( vector );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tbox.center( center );\r\n\t\r\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\t\r\n\t\t\t\t\tvar maxRadiusSq = 0;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\t\r\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tcomputeFaceNormals: function () {\r\n\t\r\n\t\t\t// backwards compatibility\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeVertexNormals: function () {\r\n\t\r\n\t\t\tvar index = this.index;\r\n\t\t\tvar attributes = this.attributes;\r\n\t\t\tvar groups = this.groups;\r\n\t\r\n\t\t\tif ( attributes.position ) {\r\n\t\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\tif ( attributes.normal === undefined ) {\r\n\t\r\n\t\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// reset existing normals to zero\r\n\t\r\n\t\t\t\t\tvar normals = attributes.normal.array;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = normals.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tnormals[ i ] = 0;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar normals = attributes.normal.array;\r\n\t\r\n\t\t\t\tvar vA, vB, vC,\r\n\t\r\n\t\t\t\tpA = new THREE.Vector3(),\r\n\t\t\t\tpB = new THREE.Vector3(),\r\n\t\t\t\tpC = new THREE.Vector3(),\r\n\t\r\n\t\t\t\tcb = new THREE.Vector3(),\r\n\t\t\t\tab = new THREE.Vector3();\r\n\t\r\n\t\t\t\t// indexed elements\r\n\t\r\n\t\t\t\tif ( index ) {\r\n\t\r\n\t\t\t\t\tvar indices = index.array;\r\n\t\r\n\t\t\t\t\tif ( groups.length === 0 ) {\r\n\t\r\n\t\t\t\t\t\tthis.addGroup( 0, indices.length );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\r\n\t\r\n\t\t\t\t\t\tvar group = groups[ j ];\r\n\t\r\n\t\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\t\tvar count = group.count;\r\n\t\r\n\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\t\r\n\t\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\t\r\n\t\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\t\tcb.cross( ab );\r\n\t\r\n\t\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\t\r\n\t\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\t\r\n\t\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\t\r\n\t\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\t\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\t\r\n\t\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\t\r\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\t\r\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.normalizeNormals();\r\n\t\r\n\t\t\t\tattributes.normal.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeTangents: function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeOffsets: function ( size ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.')\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmerge: function ( geometry, offset ) {\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tvar attributes = this.attributes;\r\n\t\r\n\t\t\tfor ( var key in attributes ) {\r\n\t\r\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\r\n\t\r\n\t\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\t\tvar attributeArray1 = attribute1.array;\r\n\t\r\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\t\tvar attributeArray2 = attribute2.array;\r\n\t\r\n\t\t\t\tvar attributeSize = attribute2.itemSize;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\r\n\t\r\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalizeNormals: function () {\r\n\t\r\n\t\t\tvar normals = this.attributes.normal.array;\r\n\t\r\n\t\t\tvar x, y, z, n;\r\n\t\r\n\t\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\tx = normals[ i ];\r\n\t\t\t\ty = normals[ i + 1 ];\r\n\t\t\t\tz = normals[ i + 2 ];\r\n\t\r\n\t\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\r\n\t\r\n\t\t\t\tnormals[ i ] *= n;\r\n\t\t\t\tnormals[ i + 1 ] *= n;\r\n\t\t\t\tnormals[ i + 2 ] *= n;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function () {\r\n\t\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\t// standard BufferGeometry serialization\r\n\t\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\t\r\n\t\t\t\tvar parameters = this.parameters;\r\n\t\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\t\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn data;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tdata.data = { attributes: {} };\r\n\t\r\n\t\t\tvar index = this.index;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\r\n\t\r\n\t\t\t\tdata.data.index = {\r\n\t\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\t\tarray: array\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar attributes = this.attributes;\r\n\t\r\n\t\t\tfor ( var key in attributes ) {\r\n\t\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\t\r\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\r\n\t\r\n\t\t\t\tdata.data.attributes[ key ] = {\r\n\t\t\t\t\titemSize: attribute.itemSize,\r\n\t\t\t\t\ttype: attribute.array.constructor.name,\r\n\t\t\t\t\tarray: array\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar groups = this.groups;\r\n\t\r\n\t\t\tif ( groups.length > 0 ) {\r\n\t\r\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar boundingSphere = this.boundingSphere;\r\n\t\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn data;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tvar index = source.index;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tthis.setIndex( index.clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar attributes = source.attributes;\r\n\t\r\n\t\t\tfor ( var name in attributes ) {\r\n\t\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar groups = source.groups;\r\n\t\r\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tthis.addGroup( group.start, group.count );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );\r\n\t\r\n\tTHREE.BufferGeometry.MaxIndex = 65535;\r\n\t\r\n\t// File:src/core/InstancedBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InstancedBufferGeometry = function () {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'InstancedBufferGeometry';\r\n\t\tthis.maxInstancedCount = undefined;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\r\n\t\r\n\tTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\r\n\t\r\n\t\tthis.groups.push( {\r\n\t\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tinstances: instances\r\n\t\r\n\t\t} );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\r\n\t\r\n\t\tvar index = source.index;\r\n\t\r\n\t\tif ( index !== null ) {\r\n\t\r\n\t\t\tthis.setIndex( index.clone() );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar attributes = source.attributes;\r\n\t\r\n\t\tfor ( var name in attributes ) {\r\n\t\r\n\t\t\tvar attribute = attributes[ name ];\r\n\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar groups = source.groups;\r\n\t\r\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count, group.instances );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.InstancedBufferGeometry.prototype );\r\n\t\r\n\t// File:src/animation/AnimationAction.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A clip that has been explicitly scheduled.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.AnimationAction = function ( clip, startTime, timeScale, weight, loop ) {\r\n\t\r\n\t\tif ( clip === undefined ) throw new Error( 'clip is null' );\r\n\t\tthis.clip = clip;\r\n\t\tthis.localRoot = null;\r\n\t\tthis.startTime = startTime || 0;\r\n\t\tthis.timeScale = timeScale || 1;\r\n\t\tthis.weight = weight || 1;\r\n\t\tthis.loop = loop || THREE.LoopRepeat;\r\n\t\tthis.loopCount = 0;\r\n\t\tthis.enabled = true;\t// allow for easy disabling of the action.\r\n\t\r\n\t\tthis.actionTime = - this.startTime;\r\n\t\tthis.clipTime = 0;\r\n\t\r\n\t\tthis.propertyBindings = [];\r\n\t};\r\n\t\r\n\t/*\r\n\tTHREE.LoopOnce = 2200;\r\n\tTHREE.LoopRepeat = 2201;\r\n\tTHREE.LoopPingPing = 2202;\r\n\t*/\r\n\t\r\n\tTHREE.AnimationAction.prototype = {\r\n\t\r\n\t\tconstructor: THREE.AnimationAction,\r\n\t\r\n\t\tsetLocalRoot: function( localRoot ) {\r\n\t\r\n\t\t\tthis.localRoot = localRoot;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdateTime: function( clipDeltaTime ) {\r\n\t\r\n\t\t\tvar previousClipTime = this.clipTime;\r\n\t   \t\tvar previousLoopCount = this.loopCount;\r\n\t   \t\tvar previousActionTime = this.actionTime;\r\n\t\r\n\t\t\tvar duration = this.clip.duration;\r\n\t\r\n\t\t\tthis.actionTime = this.actionTime + clipDeltaTime;\r\n\t\r\n\t\t\tif ( this.loop === THREE.LoopOnce ) {\r\n\t\r\n\t\t\t\tthis.loopCount = 0;\r\n\t\t\t\tthis.clipTime = Math.min( Math.max( this.actionTime, 0 ), duration );\r\n\t\r\n\t\t\t\t// if time is changed since last time, see if we have hit a start/end limit\r\n\t\t\t\tif ( this.clipTime !== previousClipTime ) {\r\n\t\r\n\t\t\t\t\tif ( this.clipTime === duration ) {\r\n\t\r\n\t\t\t\t\t\tthis.mixer.dispatchEvent( { type: 'finished', action: this, direction: 1 } );\r\n\t\r\n\t\t\t\t\t} else if ( this.clipTime === 0 ) {\r\n\t\r\n\t\t\t\t\t\tthis.mixer.dispatchEvent( { type: 'finished', action: this, direction: -1 } );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\treturn this.clipTime;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.loopCount = Math.floor( this.actionTime / duration );\r\n\t\r\n\t\t\tvar newClipTime = this.actionTime - this.loopCount * duration;\r\n\t\t\tnewClipTime = newClipTime % duration;\r\n\t\r\n\t\t\t// if we are ping pong looping, ensure that we go backwards when appropriate\r\n\t\t\tif ( this.loop == THREE.LoopPingPong ) {\r\n\t\r\n\t\t\t\tif ( Math.abs( this.loopCount % 2 ) === 1 ) {\r\n\t\r\n\t\t\t\t\tnewClipTime = duration - newClipTime;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.clipTime = newClipTime;\r\n\t\r\n\t\t\tif ( this.loopCount !== previousLoopCount ) {\r\n\t\r\n\t   \t\t\tthis.mixer.dispatchEvent( { type: 'loop', action: this, loopDelta: ( this.loopCount - this.loopCount ) } );\r\n\t\r\n\t   \t\t}\r\n\t\r\n\t\t   \treturn this.clipTime;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsyncWith: function( action ) {\r\n\t\r\n\t\t\tthis.actionTime = action.actionTime;\r\n\t\t\tthis.timeScale = action.timeScale;\r\n\t\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\r\n\t\twarpToDuration: function( duration ) {\r\n\t\r\n\t\t\tthis.timeScale = this.clip.duration / duration;\r\n\t\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\r\n\t\tinit: function( time ) {\r\n\t\r\n\t\t\tthis.clipTime = time - this.startTime;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdate: function( clipDeltaTime ) {\r\n\t\r\n\t\t\tthis.updateTime( clipDeltaTime );\r\n\t\r\n\t\t\tvar clipResults = this.clip.getAt( this.clipTime );\r\n\t\r\n\t\t\treturn clipResults;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetTimeScaleAt: function( time ) {\r\n\t\r\n\t\t\tif ( this.timeScale.getAt ) {\r\n\t\t\t\t// pass in time, not clip time, allows for fadein/fadeout across multiple loops of the clip\r\n\t\t\t\treturn this.timeScale.getAt( time );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.timeScale;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetWeightAt: function( time ) {\r\n\t\r\n\t\t\tif ( this.weight.getAt ) {\r\n\t\t\t\t// pass in time, not clip time, allows for fadein/fadeout across multiple loops of the clip\r\n\t\t\t\treturn this.weight.getAt( time );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.weight;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/AnimationClip.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * Reusable set of Tracks that represent an animation.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.AnimationClip = function ( name, duration, tracks ) {\r\n\t\r\n\t\tthis.name = name;\r\n\t\tthis.tracks = tracks;\r\n\t\tthis.duration = ( duration !== undefined ) ? duration : -1;\r\n\t\r\n\t\t// this means it should figure out its duration by scanning the tracks\r\n\t\tif ( this.duration < 0 ) {\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\t\t\t\tvar track = this.tracks[i];\r\n\t\t\t\tthis.duration = Math.max( track.keys[ track.keys.length - 1 ].time );\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t// maybe only do these on demand, as doing them here could potentially slow down loading\r\n\t\t// but leaving these here during development as this ensures a lot of testing of these functions\r\n\t\tthis.trim();\r\n\t\tthis.optimize();\r\n\t\r\n\t\tthis.results = [];\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AnimationClip.prototype = {\r\n\t\r\n\t\tconstructor: THREE.AnimationClip,\r\n\t\r\n\t\tgetAt: function( clipTime ) {\r\n\t\r\n\t\t\tclipTime = Math.max( 0, Math.min( clipTime, this.duration ) );\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar track = this.tracks[ i ];\r\n\t\r\n\t\t\t\tthis.results[ i ] = track.getAt( clipTime );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.results;\r\n\t\t},\r\n\t\r\n\t\ttrim: function() {\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\t\r\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\toptimize: function() {\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\t\r\n\t\t\t\tthis.tracks[ i ].optimize();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.AnimationClip.CreateFromMorphTargetSequence = function( name, morphTargetSequence, fps ) {\r\n\t\r\n\t\r\n\t\tvar numMorphTargets = morphTargetSequence.length;\r\n\t\tvar tracks = [];\r\n\t\r\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\t\r\n\t\t\tvar keys = [];\r\n\t\r\n\t\t\tkeys.push( { time: ( i + numMorphTargets - 1 ) % numMorphTargets, value: 0 } );\r\n\t\t\tkeys.push( { time: i, value: 1 } );\r\n\t\t\tkeys.push( { time: ( i + 1 ) % numMorphTargets, value: 0 } );\r\n\t\r\n\t\t\tkeys.sort( THREE.KeyframeTrack.keyComparer );\r\n\t\r\n\t\t\t// if there is a key at the first frame, duplicate it as the last frame as well for perfect loop.\r\n\t\t\tif ( keys[0].time === 0 ) {\r\n\t\t\t\tkeys.push( {\r\n\t\t\t\t\ttime: numMorphTargets,\r\n\t\t\t\t\tvalue: keys[0].value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\r\n\t\t\ttracks.push( new THREE.NumberKeyframeTrack( '.morphTargetInfluences[' + morphTargetSequence[i].name + ']', keys ).scale( 1.0 / fps ) );\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.AnimationClip( name, -1, tracks );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AnimationClip.findByName = function( clipArray, name ) {\r\n\t\r\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\t\r\n\t\t\tif ( clipArray[i].name === name ) {\r\n\t\r\n\t\t\t\treturn clipArray[i];\r\n\t\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn null;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AnimationClip.CreateClipsFromMorphTargetSequences = function( morphTargets, fps ) {\r\n\t\r\n\t\tvar animationToMorphTargets = {};\r\n\t\r\n\t\t// tested with https://regex101.com/ on trick sequences such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\t\r\n\t\t// sort morph target names into animation groups based patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\t\tvar parts = morphTarget.name.match( pattern );\r\n\t\r\n\t\t\tif ( parts && parts.length > 1 ) {\r\n\t\r\n\t\t\t\tvar name = parts[ 1 ];\r\n\t\r\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\t\tif ( ! animationMorphTargets ) {\r\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar clips = [];\r\n\t\r\n\t\tfor ( var name in animationToMorphTargets ) {\r\n\t\r\n\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps ) );\r\n\t\t}\r\n\t\r\n\t\treturn clips;\r\n\t\r\n\t};\r\n\t\r\n\t// parse the standard JSON format for clips\r\n\tTHREE.AnimationClip.parse = function( json ) {\r\n\t\r\n\t\tvar tracks = [];\r\n\t\r\n\t\tfor ( var i = 0; i < json.tracks.length; i ++ ) {\r\n\t\r\n\t\t\ttracks.push( THREE.KeyframeTrack.parse( json.tracks[i] ).scale( 1.0 / json.fps ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t// parse the animation.hierarchy format\r\n\tTHREE.AnimationClip.parseAnimation = function( animation, bones, nodeName ) {\r\n\t\r\n\t\tif ( ! animation ) {\r\n\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\r\n\t\tvar convertTrack = function( trackName, animationKeys, propertyName, trackType, animationKeyToValueFunc ) {\r\n\t\r\n\t\t\tvar keys = [];\r\n\t\r\n\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\t\r\n\t\t\t\tvar animationKey = animationKeys[k];\r\n\t\r\n\t\t\t\tif ( animationKey[propertyName] !== undefined ) {\r\n\t\r\n\t\t\t\t\tkeys.push( { time: animationKey.time, value: animationKeyToValueFunc( animationKey ) } );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// only return track if there are actually keys.\r\n\t\t\tif ( keys.length > 0 ) {\r\n\t\r\n\t\t\t\treturn new trackType( trackName, keys );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn null;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tvar tracks = [];\r\n\t\r\n\t\tvar clipName = animation.name || 'default';\r\n\t\tvar duration = animation.length || -1; // automatic length determination in AnimationClip.\r\n\t\tvar fps = animation.fps || 30;\r\n\t\r\n\t\tvar hierarchyTracks = animation.hierarchy || [];\r\n\t\r\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\t\r\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\t\r\n\t\t\t// skip empty tracks\r\n\t\t\tif ( ! animationKeys || animationKeys.length == 0 ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\r\n\t\t\t// process morph targets in a way exactly compatible with AnimationHandler.init( animation )\r\n\t\t\tif ( animationKeys[0].morphTargets ) {\r\n\t\r\n\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\tvar morphTargetNames = {};\r\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\t\r\n\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\r\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// create a track for each morph target with all zero morphTargetInfluences except for the keys in which the morphTarget is named.\r\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\t\r\n\t\t\t\t\tvar keys = [];\r\n\t\r\n\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar animationKey = animationKeys[k];\r\n\t\r\n\t\t\t\t\t\tkeys.push( {\r\n\t\t\t\t\t\t\t\ttime: animationKey.time,\r\n\t\t\t\t\t\t\t\tvalue: (( animationKey.morphTarget === morphTargetName ) ? 1 : 0 )\r\n\t\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack( nodeName + '.morphTargetInfluence[' + morphTargetName + ']', keys ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar boneName = nodeName + '.bones[' + bones[ h ].name + ']';\r\n\t\r\n\t\t\t\t// track contains positions...\r\n\t\t\t\tvar positionTrack = convertTrack( boneName + '.position', animationKeys, 'pos', THREE.VectorKeyframeTrack, function( animationKey ) {\r\n\t\t\t\t\t\treturn new THREE.Vector3().fromArray( animationKey.pos )\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\tif ( positionTrack ) tracks.push( positionTrack );\r\n\t\r\n\t\t\t\t// track contains quaternions...\r\n\t\t\t\tvar quaternionTrack = convertTrack( boneName + '.quaternion', animationKeys, 'rot', THREE.QuaternionKeyframeTrack, function( animationKey ) {\r\n\t\t\t\t\t\tif ( animationKey.rot.slerp ) {\r\n\t\t\t\t\t\t\treturn animationKey.rot.clone();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn new THREE.Quaternion().fromArray( animationKey.rot );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\tif ( quaternionTrack ) tracks.push( quaternionTrack );\r\n\t\r\n\t\t\t\t// track contains quaternions...\r\n\t\t\t\tvar scaleTrack = convertTrack( boneName + '.scale', animationKeys, 'scl', THREE.VectorKeyframeTrack, function( animationKey ) {\r\n\t\t\t\t\t\treturn new THREE.Vector3().fromArray( animationKey.scl )\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\tif ( scaleTrack ) tracks.push( scaleTrack );\r\n\t\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tif ( tracks.length === 0 ) {\r\n\t\r\n\t\t\treturn null;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\r\n\t\r\n\t\treturn clip;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/AnimationMixer.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * Mixes together the AnimationClips scheduled by AnimationActions and applies them to the root and subtree\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.AnimationMixer = function( root ) {\r\n\t\r\n\t\tthis.root = root;\r\n\t\tthis.time = 0;\r\n\t\tthis.timeScale = 1.0;\r\n\t\tthis.actions = [];\r\n\t\tthis.propertyBindingMap = {};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AnimationMixer.prototype = {\r\n\t\r\n\t\tconstructor: THREE.AnimationMixer,\r\n\t\r\n\t\taddAction: function( action ) {\r\n\t\r\n\t\t\t// TODO: check for duplicate action names?  Or provide each action with a UUID?\r\n\t\r\n\t\t\tthis.actions.push( action );\r\n\t\t\taction.init( this.time );\r\n\t\t\taction.mixer = this;\r\n\t\r\n\t\t\tvar tracks = action.clip.tracks;\r\n\t\r\n\t\t\tvar root = action.localRoot || this.root;\r\n\t\r\n\t\t\tfor ( var i = 0; i < tracks.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar track = tracks[ i ];\r\n\t\r\n\t\t\t\tvar propertyBindingKey = root.uuid + '-' + track.name;\r\n\t\t\t\tvar propertyBinding = this.propertyBindingMap[ propertyBindingKey ];\r\n\t\r\n\t\t\t\tif ( propertyBinding === undefined ) {\r\n\t\r\n\t\t\t\t\tpropertyBinding = new THREE.PropertyBinding( root, track.name );\r\n\t\t\t\t\tthis.propertyBindingMap[ propertyBindingKey ] = propertyBinding;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// push in the same order as the tracks.\r\n\t\t\t\taction.propertyBindings.push( propertyBinding );\r\n\t\r\n\t\t\t\t// track usages of shared property bindings, because if we leave too many around, the mixer can get slow\r\n\t\t\t\tpropertyBinding.referenceCount += 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremoveAllActions: function() {\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.actions.length; i ++ ) {\r\n\t\r\n\t\t\t\tthis.actions[i].mixer = null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// unbind all property bindings\r\n\t\t\tfor ( var properyBindingKey in this.propertyBindingMap ) {\r\n\t\r\n\t\t\t\tthis.propertyBindingMap[ properyBindingKey ].unbind();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.actions = [];\r\n\t\t\tthis.propertyBindingMap = {};\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremoveAction: function( action ) {\r\n\t\r\n\t\t\tvar index = this.actions.indexOf( action );\r\n\t\r\n\t\t\tif ( index !== - 1 ) {\r\n\t\r\n\t\t\t\tthis.actions.splice( index, 1 );\r\n\t\t\t\taction.mixer = null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\t// remove unused property bindings because if we leave them around the mixer can get slow\r\n\t\t\tvar root = action.localRoot || this.root;\r\n\t\t\tvar tracks = action.clip.tracks;\r\n\t\r\n\t\t\tfor ( var i = 0; i < tracks.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar track = tracks[ i ];\r\n\t\r\n\t\t\t\tvar propertyBindingKey = root.uuid + '-' + track.name;\r\n\t\t\t\tvar propertyBinding = this.propertyBindingMap[ propertyBindingKey ];\r\n\t\r\n\t\t\t\tpropertyBinding.referenceCount -= 1;\r\n\t\r\n\t\t\t\tif ( propertyBinding.referenceCount <= 0 ) {\r\n\t\r\n\t\t\t\t\tpropertyBinding.unbind();\r\n\t\r\n\t\t\t\t\tdelete this.propertyBindingMap[ propertyBindingKey ];\r\n\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// can be optimized if needed\r\n\t\tfindActionByName: function( name ) {\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.actions.length; i ++ ) {\r\n\t\r\n\t\t\t\tif ( this.actions[i].name === name ) return this.actions[i];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn null;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tplay: function( action, optionalFadeInDuration ) {\r\n\t\r\n\t\t\taction.startTime = this.time;\r\n\t\t\tthis.addAction( action );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfadeOut: function( action, duration ) {\r\n\t\r\n\t\t\tvar keys = [];\r\n\t\r\n\t\t\tkeys.push( { time: this.time, value: 1 } );\r\n\t\t\tkeys.push( { time: this.time + duration, value: 0 } );\r\n\t\r\n\t\t\taction.weight = new THREE.NumberKeyframeTrack( \"weight\", keys );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfadeIn: function( action, duration ) {\r\n\t\r\n\t\t\tvar keys = [];\r\n\t\r\n\t\t\tkeys.push( { time: this.time, value: 0 } );\r\n\t\t\tkeys.push( { time: this.time + duration, value: 1 } );\r\n\t\r\n\t\t\taction.weight = new THREE.NumberKeyframeTrack( \"weight\", keys );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\twarp: function( action, startTimeScale, endTimeScale, duration ) {\r\n\t\r\n\t\t\tvar keys = [];\r\n\t\r\n\t\t\tkeys.push( { time: this.time, value: startTimeScale } );\r\n\t\t\tkeys.push( { time: this.time + duration, value: endTimeScale } );\r\n\t\r\n\t\t\taction.timeScale = new THREE.NumberKeyframeTrack( \"timeScale\", keys );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcrossFade: function( fadeOutAction, fadeInAction, duration, warp ) {\r\n\t\r\n\t\t\tthis.fadeOut( fadeOutAction, duration );\r\n\t\t\tthis.fadeIn( fadeInAction, duration );\r\n\t\r\n\t\t\tif ( warp ) {\r\n\t\r\n\t\t\t\tvar startEndRatio = fadeOutAction.clip.duration / fadeInAction.clip.duration;\r\n\t\t\t\tvar endStartRatio = 1.0 / startEndRatio;\r\n\t\r\n\t\t\t\tthis.warp( fadeOutAction, 1.0, startEndRatio, duration );\r\n\t\t\t\tthis.warp( fadeInAction, endStartRatio, 1.0, duration );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdate: function( deltaTime ) {\r\n\t\r\n\t\t\tvar mixerDeltaTime = deltaTime * this.timeScale;\r\n\t\t\tthis.time += mixerDeltaTime;\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.actions.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar action = this.actions[i];\r\n\t\r\n\t\t\t\tvar weight = action.getWeightAt( this.time );\r\n\t\r\n\t\t\t\tvar actionTimeScale = action.getTimeScaleAt( this.time );\r\n\t\t\t\tvar actionDeltaTime = mixerDeltaTime * actionTimeScale;\r\n\t\r\n\t\t\t\tvar actionResults = action.update( actionDeltaTime );\r\n\t\r\n\t\t\t\tif ( action.weight <= 0 || ! action.enabled ) continue;\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < actionResults.length; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar name = action.clip.tracks[j].name;\r\n\t\r\n\t\t\t\t\taction.propertyBindings[ j ].accumulate( actionResults[j], weight );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// apply to nodes\r\n\t\t\tfor ( var propertyBindingKey in this.propertyBindingMap ) {\r\n\t\r\n\t\t\t\tthis.propertyBindingMap[ propertyBindingKey ].apply();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.AnimationMixer.prototype );\r\n\t\r\n\t// File:src/animation/AnimationUtils.js\r\n\t\r\n\t/**\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.AnimationUtils = {\r\n\t\r\n\t\tgetEqualsFunc: function( exemplarValue ) {\r\n\t\r\n\t\t\tif ( exemplarValue.equals ) {\r\n\t\t\t\treturn function equals_object( a, b ) {\r\n\t\t\t\t\treturn a.equals( b );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn function equals_primitive( a, b ) {\r\n\t\t\t\treturn ( a === b );\r\n\t\t\t};\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function( exemplarValue ) {\r\n\t\r\n\t\t\tvar typeName = typeof exemplarValue;\r\n\t\t\tif ( typeName === \"object\" ) {\r\n\t\t\t\tif ( exemplarValue.clone ) {\r\n\t\t\t\t\treturn exemplarValue.clone();\r\n\t\t\t\t}\r\n\t\t\t\tconsole.error( \"can not figure out how to copy exemplarValue\", exemplarValue );\r\n\t\t\t}\r\n\t\r\n\t\t\treturn exemplarValue;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp: function( a, b, alpha, interTrack ) {\r\n\t\r\n\t\t\tvar lerpFunc = THREE.AnimationUtils.getLerpFunc( a, interTrack );\r\n\t\r\n\t\t\treturn lerpFunc( a, b, alpha );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp_object: function( a, b, alpha ) {\r\n\t\t\treturn a.lerp( b, alpha );\r\n\t\t},\r\n\t\r\n\t\tslerp_object: function( a, b, alpha ) {\r\n\t\t\treturn a.slerp( b, alpha );\r\n\t\t},\r\n\t\r\n\t\tlerp_number: function( a, b, alpha ) {\r\n\t\t\treturn a * ( 1 - alpha ) + b * alpha;\r\n\t\t},\r\n\t\r\n\t\tlerp_boolean: function( a, b, alpha ) {\r\n\t\t\treturn ( alpha < 0.5 ) ? a : b;\r\n\t\t},\r\n\t\r\n\t\tlerp_boolean_immediate: function( a, b, alpha ) {\r\n\t\t\treturn a;\r\n\t\t},\r\n\t\r\n\t\tlerp_string: function( a, b, alpha ) {\r\n\t\t\treturn ( alpha < 0.5 ) ? a : b;\r\n\t\t},\r\n\t\r\n\t\tlerp_string_immediate: function( a, b, alpha ) {\r\n\t \t\treturn a;\r\n\t \t},\r\n\t\r\n\t\t// NOTE: this is an accumulator function that modifies the first argument (e.g. a).\tThis is to minimize memory alocations.\r\n\t\tgetLerpFunc: function( exemplarValue, interTrack ) {\r\n\t\r\n\t\t\tif ( exemplarValue === undefined || exemplarValue === null ) throw new Error( \"examplarValue is null\" );\r\n\t\r\n\t\t\tvar typeName = typeof exemplarValue;\r\n\t\r\n\t\t\tswitch( typeName ) {\r\n\t\r\n\t\t\t\tcase \"object\":\r\n\t\t\t\t\tif ( exemplarValue.lerp ) {\r\n\t\t\t\t\t\treturn THREE.AnimationUtils.lerp_object;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( exemplarValue.slerp ) {\r\n\t\t\t\t\t\treturn THREE.AnimationUtils.slerp_object;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase \"number\":\r\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_number;\r\n\t\r\n\t\t\t\tcase \"boolean\":\r\n\t\t\t\t\tif ( interTrack ) {\r\n\t\t\t\t\t\treturn THREE.AnimationUtils.lerp_boolean;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn THREE.AnimationUtils.lerp_boolean_immediate;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\tcase \"string\":\r\n\t\t\t\t\tif ( interTrack ) {\r\n\t\t\t\t\t\treturn THREE.AnimationUtils.lerp_string;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn THREE.AnimationUtils.lerp_string_immediate;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/KeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track that returns a keyframe interpolated value, currently linearly interpolated\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.KeyframeTrack = function ( name, keys ) {\r\n\t\r\n\t\tif ( name === undefined ) throw new Error( \"track name is undefined\" );\r\n\t\tif ( keys === undefined || keys.length === 0 ) throw new Error( \"no keys in track named \" + name );\r\n\t\r\n\t\tthis.name = name;\r\n\t\tthis.keys = keys;\t// time in seconds, value as value\r\n\t\r\n\t\t// the index of the last result, used as a starting point for local search.\r\n\t\tthis.lastIndex = 0;\r\n\t\r\n\t\tthis.validate();\r\n\t\tthis.optimize();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.KeyframeTrack.prototype = {\r\n\t\r\n\t\tconstructor: THREE.KeyframeTrack,\r\n\t\r\n\t\tgetAt: function( time ) {\r\n\t\r\n\t\r\n\t\t\t// this can not go higher than this.keys.length.\r\n\t\t\twhile( ( this.lastIndex < this.keys.length ) && ( time >= this.keys[this.lastIndex].time ) ) {\r\n\t\t\t\tthis.lastIndex ++;\r\n\t\t\t};\r\n\t\r\n\t\t\t// this can not go lower than 0.\r\n\t\t\twhile( ( this.lastIndex > 0 ) && ( time < this.keys[this.lastIndex - 1].time ) ) {\r\n\t\t\t\tthis.lastIndex --;\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.lastIndex >= this.keys.length ) {\r\n\t\r\n\t\t\t\tthis.setResult( this.keys[ this.keys.length - 1 ].value );\r\n\t\r\n\t\t\t\treturn this.result;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.lastIndex === 0 ) {\r\n\t\r\n\t\t\t\tthis.setResult( this.keys[ 0 ].value );\r\n\t\r\n\t\t\t\treturn this.result;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar prevKey = this.keys[ this.lastIndex - 1 ];\r\n\t\t\tthis.setResult( prevKey.value );\r\n\t\r\n\t\t\t// if true, means that prev/current keys are identical, thus no interpolation required.\r\n\t\t\tif ( prevKey.constantToNext ) {\r\n\t\r\n\t\t\t\treturn this.result;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// linear interpolation to start with\r\n\t\t\tvar currentKey = this.keys[ this.lastIndex ];\r\n\t\t\tvar alpha = ( time - prevKey.time ) / ( currentKey.time - prevKey.time );\r\n\t\t\tthis.result = this.lerpValues( this.result, currentKey.value, alpha );\r\n\t\r\n\t\t\treturn this.result;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// move all keyframes either forwards or backwards in time\r\n\t\tshift: function( timeOffset ) {\r\n\t\r\n\t\t\tif ( timeOffset !== 0.0 ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\t\t\t\tthis.keys[i].time += timeOffset;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\t\tscale: function( timeScale ) {\r\n\t\r\n\t\t\tif ( timeScale !== 1.0 ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\t\t\t\tthis.keys[i].time *= timeScale;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\t \ttrim: function( startTime, endTime ) {\r\n\t\r\n\t\t\tvar firstKeysToRemove = 0;\r\n\t\t\tfor ( var i = 1; i < this.keys.length; i ++ ) {\r\n\t\t\t\tif ( this.keys[i] <= startTime ) {\r\n\t\t\t\t\tfirstKeysToRemove ++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tvar lastKeysToRemove = 0;\r\n\t\t\tfor ( var i = this.keys.length - 2; i > 0; i ++ ) {\r\n\t\t\t\tif ( this.keys[i] >= endTime ) {\r\n\t\t\t\t\tlastKeysToRemove ++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t// remove last keys first because it doesn't affect the position of the first keys (the otherway around doesn't work as easily)\r\n\t\t\tif ( ( firstKeysToRemove + lastKeysToRemove ) > 0 ) {\r\n\t\t\t\tthis.keys = this.keys.splice( firstKeysToRemove, this.keys.length - lastKeysToRemove - firstKeysToRemove );;\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t/* NOTE: This is commented out because we really shouldn't have to handle unsorted key lists\r\n\t\t         Tracks with out of order keys should be considered to be invalid.  - bhouston\r\n\t\tsort: function() {\r\n\t\r\n\t\t\tthis.keys.sort( THREE.KeyframeTrack.keyComparer );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},*/\r\n\t\r\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\t\t// One could eventually ensure that all key.values in a track are all of the same type (otherwise interpolation makes no sense.)\r\n\t\tvalidate: function() {\r\n\t\r\n\t\t\tvar prevKey = null;\r\n\t\r\n\t\t\tif ( this.keys.length === 0 ) {\r\n\t\t\t\tconsole.error( \"  track is empty, no keys\", this );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar currKey = this.keys[i];\r\n\t\r\n\t\t\t\tif ( ! currKey ) {\r\n\t\t\t\t\tconsole.error( \"  key is null in track\", this, i );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( ( typeof currKey.time ) !== 'number' || isNaN( currKey.time ) ) {\r\n\t\t\t\t\tconsole.error( \"  key.time is not a valid number\", this, i, currKey );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( currKey.value === undefined || currKey.value === null) {\r\n\t\t\t\t\tconsole.error( \"  key.value is null in track\", this, i, currKey );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( prevKey && prevKey.time > currKey.time ) {\r\n\t\t\t\t\tconsole.error( \"  key.time is less than previous key time, out of order keys\", this, i, currKey, prevKey );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tprevKey = currKey;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// currently only removes equivalent sequential keys (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0), which are common in morph target animations\r\n\t\toptimize: function() {\r\n\t\r\n\t\t\tvar newKeys = [];\r\n\t\t\tvar prevKey = this.keys[0];\r\n\t\t\tnewKeys.push( prevKey );\r\n\t\r\n\t\t\tvar equalsFunc = THREE.AnimationUtils.getEqualsFunc( prevKey.value );\r\n\t\r\n\t\t\tfor ( var i = 1; i < this.keys.length - 1; i ++ ) {\r\n\t\t\t\tvar currKey = this.keys[i];\r\n\t\t\t\tvar nextKey = this.keys[i+1];\r\n\t\r\n\t\t\t\t// if prevKey & currKey are the same time, remove currKey.  If you want immediate adjacent keys, use an epsilon offset\r\n\t\t\t\t// it is not possible to have two keys at the same time as we sort them.  The sort is not stable on keys with the same time.\r\n\t\t\t\tif ( ( prevKey.time === currKey.time ) ) {\r\n\t\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// remove completely unnecessary keyframes that are the same as their prev and next keys\r\n\t\t\t\tif ( this.compareValues( prevKey.value, currKey.value ) && this.compareValues( currKey.value, nextKey.value ) ) {\r\n\t\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// determine if interpolation is required\r\n\t\t\t\tprevKey.constantToNext = this.compareValues( prevKey.value, currKey.value );\r\n\t\r\n\t\t\t\tnewKeys.push( currKey );\r\n\t\t\t\tprevKey = currKey;\r\n\t\t\t}\r\n\t\t\tnewKeys.push( this.keys[ this.keys.length - 1 ] );\r\n\t\r\n\t\t\tthis.keys = newKeys;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.KeyframeTrack.keyComparer = function keyComparator(key0, key1) {\r\n\t\treturn key0.time - key1.time;\r\n\t};\r\n\t\r\n\tTHREE.KeyframeTrack.parse = function( json ) {\r\n\t\r\n\t\tif ( json.type === undefined ) throw new Error( \"track type undefined, can not parse\" );\r\n\t\r\n\t\tvar trackType = THREE.KeyframeTrack.GetTrackTypeForTypeName( json.type );\r\n\t\r\n\t\treturn trackType.parse( json );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.KeyframeTrack.GetTrackTypeForTypeName = function( typeName ) {\r\n\t\tswitch( typeName.toLowerCase() ) {\r\n\t\t \tcase \"vector\":\r\n\t\t \tcase \"vector2\":\r\n\t\t \tcase \"vector3\":\r\n\t\t \tcase \"vector4\":\r\n\t\t\t\treturn THREE.VectorKeyframeTrack;\r\n\t\r\n\t\t \tcase \"quaternion\":\r\n\t\t\t\treturn THREE.QuaternionKeyframeTrack;\r\n\t\r\n\t\t \tcase \"integer\":\r\n\t\t \tcase \"scalar\":\r\n\t\t \tcase \"double\":\r\n\t\t \tcase \"float\":\r\n\t\t \tcase \"number\":\r\n\t\t\t\treturn THREE.NumberKeyframeTrack;\r\n\t\r\n\t\t \tcase \"bool\":\r\n\t\t \tcase \"boolean\":\r\n\t\t\t\treturn THREE.BooleanKeyframeTrack;\r\n\t\r\n\t\t \tcase \"string\":\r\n\t\t \t\treturn THREE.StringKeyframeTrack;\r\n\t\t};\r\n\t\r\n\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\r\n\t};\r\n\t\r\n\t// File:src/animation/PropertyBinding.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A track bound to a real value in the scene graph.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.PropertyBinding = function ( rootNode, trackName ) {\r\n\t\r\n\t\tthis.rootNode = rootNode;\r\n\t\tthis.trackName = trackName;\r\n\t\tthis.referenceCount = 0;\r\n\t\tthis.originalValue = null; // the value of the property before it was controlled by this binding\r\n\t\r\n\t\tvar parseResults = THREE.PropertyBinding.parseTrackName( trackName );\r\n\t\r\n\t\tthis.directoryName = parseResults.directoryName;\r\n\t\tthis.nodeName = parseResults.nodeName;\r\n\t\tthis.objectName = parseResults.objectName;\r\n\t\tthis.objectIndex = parseResults.objectIndex;\r\n\t\tthis.propertyName = parseResults.propertyName;\r\n\t\tthis.propertyIndex = parseResults.propertyIndex;\r\n\t\r\n\t\tthis.node = THREE.PropertyBinding.findNode( rootNode, this.nodeName ) || rootNode;\r\n\t\r\n\t\tthis.cumulativeValue = null;\r\n\t\tthis.cumulativeWeight = 0;\r\n\t};\r\n\t\r\n\tTHREE.PropertyBinding.prototype = {\r\n\t\r\n\t\tconstructor: THREE.PropertyBinding,\r\n\t\r\n\t\treset: function() {\r\n\t\r\n\t\t\tthis.cumulativeValue = null;\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taccumulate: function( value, weight ) {\r\n\t\r\n\t\t\tif ( ! this.isBound ) this.bind();\r\n\t\r\n\t\t\tif ( this.cumulativeWeight === 0 ) {\r\n\t\r\n\t\t\t\tif ( weight > 0 ) {\r\n\t\r\n\t\t\t\t\tif ( this.cumulativeValue === null ) {\r\n\t\t\t\t\t\tthis.cumulativeValue = THREE.AnimationUtils.clone( value );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.cumulativeWeight = weight;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar lerpAlpha = weight / ( this.cumulativeWeight + weight );\r\n\t\t\t\tthis.cumulativeValue = this.lerpValue( this.cumulativeValue, value, lerpAlpha );\r\n\t\t\t\tthis.cumulativeWeight += weight;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tunbind: function() {\r\n\t\r\n\t\t\tif ( ! this.isBound ) return;\r\n\t\r\n\t\t\tthis.setValue( this.originalValue );\r\n\t\r\n\t\t\tthis.setValue = null;\r\n\t\t\tthis.getValue = null;\r\n\t\t\tthis.lerpValue = null;\r\n\t\t\tthis.equalsValue = null;\r\n\t\t\tthis.triggerDirty = null;\r\n\t\t\tthis.isBound = false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// bind to the real property in the scene graph, remember original value, memorize various accessors for speed/inefficiency\r\n\t\tbind: function() {\r\n\t\r\n\t\t\tif ( this.isBound ) return;\r\n\t\r\n\t\t\tvar targetObject = this.node;\r\n\t\r\n\t \t\t// ensure there is a value node\r\n\t\t\tif ( ! targetObject ) {\r\n\t\t\t\tconsole.error( \"  trying to update node for track: \" + this.trackName + \" but it wasn't found.\" );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.objectName ) {\r\n\t\t\t\t// special case were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\t\tif ( this.objectName === \"materials\" ) {\r\n\t\t\t\t\tif ( ! targetObject.material ) {\r\n\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\r\n\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\t\t\t\t} else if ( this.objectName === \"bones\" ) {\r\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\r\n\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\t\r\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\t\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\t\t\t\t\t\tif ( targetObject[i].name === this.objectIndex ) {\r\n\t\t\t\t\t\t\tthis.objectIndex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tif ( targetObject[ this.objectName ] === undefined ) {\r\n\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttargetObject = targetObject[ this.objectName ];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( this.objectIndex !== undefined ) {\r\n\t\t\t\t\tif ( targetObject[ this.objectIndex ] === undefined ) {\r\n\t\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttargetObject = targetObject[ this.objectIndex ];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t \t\t// special case mappings\r\n\t \t\tvar nodeProperty = targetObject[ this.propertyName ];\r\n\t\t\tif ( ! nodeProperty ) {\r\n\t\t\t\tconsole.error( \"  trying to update property for track: \" + this.nodeName + '.' + this.propertyName + \" but it wasn't found.\", targetObject );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\t\t\tif ( this.propertyIndex !== undefined ) {\r\n\t\r\n\t\t\t\tif ( this.propertyName === \"morphTargetInfluences\" ) {\r\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\t\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tif ( ! targetObject.geometry ) {\r\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[i].name === this.propertyIndex ) {\r\n\t\t\t\t\t\t\tthis.propertyIndex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.setValue = function setValue_propertyIndexed( value ) {\r\n\t\t\t\t\tif ( ! this.equalsValue( nodeProperty[ this.propertyIndex ], value ) ) {\r\n\t\t\t\t\t\tnodeProperty[ this.propertyIndex ] = value;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tthis.getValue = function getValue_propertyIndexed() {\r\n\t\t\t\t\treturn nodeProperty[ this.propertyIndex ];\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\t\t\telse if ( nodeProperty.copy ) {\r\n\t\r\n\t\t\t\tthis.setValue = function setValue_propertyObject( value ) {\r\n\t\t\t\t\tif ( ! this.equalsValue( nodeProperty, value ) ) {\r\n\t\t\t\t\t\tnodeProperty.copy( value );\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.getValue = function getValue_propertyObject() {\r\n\t\t\t\t\treturn nodeProperty;\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\t\t// otherwise just set the property directly on the node (do not use nodeProperty as it may not be a reference object)\r\n\t\t\telse {\r\n\t\r\n\t\t\t\tthis.setValue = function setValue_property( value ) {\r\n\t\t\t\t\tif ( ! this.equalsValue( targetObject[ this.propertyName ], value ) ) {\r\n\t\t\t\t\t\ttargetObject[ this.propertyName ] = value;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.getValue = function getValue_property() {\r\n\t\t\t\t\treturn targetObject[ this.propertyName ];\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// trigger node dirty\r\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\t\r\n\t\t\t\tthis.triggerDirty = function triggerDirty_needsUpdate() {\r\n\t\t\t\t\tthis.node.needsUpdate = true;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\t\r\n\t\t\t\tthis.triggerDirty = function triggerDirty_matrixWorldNeedsUpdate() {\r\n\t\t\t\t\ttargetObject.matrixWorldNeedsUpdate = true;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.originalValue = this.getValue();\r\n\t\r\n\t\t\tthis.equalsValue = THREE.AnimationUtils.getEqualsFunc( this.originalValue );\r\n\t\t\tthis.lerpValue = THREE.AnimationUtils.getLerpFunc( this.originalValue, true );\r\n\t\r\n\t\t\tthis.isBound = true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapply: function() {\r\n\t\r\n\t\t\t// for speed capture the setter pattern as a closure (sort of a memoization pattern: https://en.wikipedia.org/wiki/Memoization)\r\n\t\t\tif ( ! this.isBound ) this.bind();\r\n\t\r\n\t\t\t// early exit if there is nothing to apply.\r\n\t\t\tif ( this.cumulativeWeight > 0 ) {\r\n\t\r\n\t\t\t\t// blend with original value\r\n\t\t\t\tif ( this.cumulativeWeight < 1 ) {\r\n\t\r\n\t\t\t\t\tvar remainingWeight = 1 - this.cumulativeWeight;\r\n\t\t\t\t\tvar lerpAlpha = remainingWeight / ( this.cumulativeWeight + remainingWeight );\r\n\t\t\t\t\tthis.cumulativeValue = this.lerpValue( this.cumulativeValue, this.originalValue, lerpAlpha );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar valueChanged = this.setValue( this.cumulativeValue );\r\n\t\r\n\t\t\t\tif ( valueChanged && this.triggerDirty ) {\r\n\t\t\t\t\tthis.triggerDirty();\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// reset accumulator\r\n\t\t\t\tthis.cumulativeValue = null;\r\n\t\t\t\tthis.cumulativeWeight = 0;\r\n\t\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.PropertyBinding.parseTrackName = function( trackName ) {\r\n\t\r\n\t\t// matches strings in the form of:\r\n\t\t//    nodeName.property\r\n\t\t//    nodeName.property[accessor]\r\n\t\t//    nodeName.material.property[accessor]\r\n\t\t//    uuid.property[accessor]\r\n\t\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\r\n\t\t//    parentName/nodeName.property\r\n\t\t//    parentName/parentName/nodeName.property[index]\r\n\t\t//\t  .bone[Armature.DEF_cog].position\r\n\t\t// created and tested via https://regex101.com/#javascript\r\n\t\r\n\t\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\r\n\t\tvar matches = re.exec(trackName);\r\n\t\r\n\t\tif ( ! matches ) {\r\n\t\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\r\n\t\t}\r\n\t\r\n\t    if (matches.index === re.lastIndex) {\r\n\t        re.lastIndex++;\r\n\t    }\r\n\t\r\n\t\tvar results = {\r\n\t\t\tdirectoryName: matches[1],\r\n\t\t\tnodeName: matches[3], \t// allowed to be null, specified root node.\r\n\t\t\tobjectName: matches[5],\r\n\t\t\tobjectIndex: matches[7],\r\n\t\t\tpropertyName: matches[9],\r\n\t\t\tpropertyIndex: matches[11]\t// allowed to be null, specifies that the whole property is set.\r\n\t\t};\r\n\t\r\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\t\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\r\n\t\t}\r\n\t\r\n\t\treturn results;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PropertyBinding.findNode = function( root, nodeName ) {\r\n\t\r\n\t\tfunction searchSkeleton( skeleton ) {\r\n\t\r\n\t\t\tfor ( var i = 0; i < skeleton.bones.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar bone = skeleton.bones[i];\r\n\t\r\n\t\t\t\tif ( bone.name === nodeName ) {\r\n\t\r\n\t\t\t\t\treturn bone;\r\n\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn null;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction searchNodeSubtree( children ) {\r\n\t\r\n\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar childNode = children[i];\r\n\t\r\n\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\t\r\n\t\t\t\t\treturn childNode;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\t\r\n\t\t\t\tif ( result ) return result;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn null;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\t\r\n\t\t\treturn root;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// search into skeleton bones.\r\n\t\tif ( root.skeleton ) {\r\n\t\r\n\t\t\tvar bone = searchSkeleton( root.skeleton );\r\n\t\r\n\t\t\tif ( bone ) {\r\n\t\r\n\t\t\t\treturn bone;\r\n\t\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t// search into node subtree.\r\n\t\tif ( root.children ) {\r\n\t\r\n\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\t\r\n\t\t\tif ( subTreeNode ) {\r\n\t\r\n\t\t\t\treturn subTreeNode;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t// File:src/animation/tracks/VectorKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Vectors\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.VectorKeyframeTrack = function ( name, keys ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\t\r\n\t\t// local cache of value type to avoid allocations during runtime.\r\n\t\tthis.result = this.keys[0].value.clone();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.VectorKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\t\r\n\tTHREE.VectorKeyframeTrack.prototype.constructor = THREE.VectorKeyframeTrack;\r\n\t\r\n\tTHREE.VectorKeyframeTrack.prototype.setResult = function( value ) {\r\n\t\r\n\t\tthis.result.copy( value );\r\n\t\r\n\t};\r\n\t\r\n\t// memoization of the lerp function for speed.\r\n\t// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\n\tTHREE.VectorKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\t\r\n\t\treturn value0.lerp( value1, alpha );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.VectorKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\t\r\n\t\treturn value0.equals( value1 );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.VectorKeyframeTrack.prototype.clone = function() {\r\n\t\r\n\t\tvar clonedKeys = [];\r\n\t\r\n\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\r\n\t\t\tvar key = this.keys[i];\r\n\t\t\tclonedKeys.push( {\r\n\t\t\t\ttime: key.time,\r\n\t\t\t\tvalue: key.value.clone()\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.VectorKeyframeTrack( this.name, clonedKeys );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.VectorKeyframeTrack.parse = function( json ) {\r\n\t\r\n\t\tvar elementCount = json.keys[0].value.length;\r\n\t\tvar valueType = THREE[ 'Vector' + elementCount ];\r\n\t\r\n\t\tvar keys = [];\r\n\t\r\n\t\tfor ( var i = 0; i < json.keys.length; i ++ ) {\r\n\t\t\tvar jsonKey = json.keys[i];\r\n\t\t\tkeys.push( {\r\n\t\t\t\tvalue: new valueType().fromArray( jsonKey.value ),\r\n\t\t\t\ttime: jsonKey.time\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.VectorKeyframeTrack( json.name, keys );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/tracks/QuaternionKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Quaternion\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack = function ( name, keys ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\t\r\n\t\t// local cache of value type to avoid allocations during runtime.\r\n\t\tthis.result = this.keys[0].value.clone();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack.prototype.constructor = THREE.QuaternionKeyframeTrack;\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack.prototype.setResult = function( value ) {\r\n\t\r\n\t\tthis.result.copy( value );\r\n\t\r\n\t};\r\n\t\r\n\t// memoization of the lerp function for speed.\r\n\t// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\n\tTHREE.QuaternionKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\t\r\n\t\treturn value0.slerp( value1, alpha );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\t\r\n\t\treturn value0.equals( value1 );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack.prototype.multiply = function( quat ) {\r\n\t\r\n\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\r\n\t\t\tthis.keys[i].value.multiply( quat );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack.prototype.clone = function() {\r\n\t\r\n\t\tvar clonedKeys = [];\r\n\t\r\n\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\r\n\t\t\tvar key = this.keys[i];\r\n\t\t\tclonedKeys.push( {\r\n\t\t\t\ttime: key.time,\r\n\t\t\t\tvalue: key.value.clone()\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.QuaternionKeyframeTrack( this.name, clonedKeys );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack.parse = function( json ) {\r\n\t\r\n\t\tvar keys = [];\r\n\t\r\n\t\tfor ( var i = 0; i < json.keys.length; i ++ ) {\r\n\t\t\tvar jsonKey = json.keys[i];\r\n\t\t\tkeys.push( {\r\n\t\t\t\tvalue: new THREE.Quaternion().fromArray( jsonKey.value ),\r\n\t\t\t\ttime: jsonKey.time\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.QuaternionKeyframeTrack( json.name, keys );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/tracks/StringKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Strings\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.StringKeyframeTrack = function ( name, keys ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\t\r\n\t\t// local cache of value type to avoid allocations during runtime.\r\n\t\tthis.result = this.keys[0].value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.StringKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\t\r\n\tTHREE.StringKeyframeTrack.prototype.constructor = THREE.StringKeyframeTrack;\r\n\t\r\n\tTHREE.StringKeyframeTrack.prototype.setResult = function( value ) {\r\n\t\r\n\t\tthis.result = value;\r\n\t\r\n\t};\r\n\t\r\n\t// memoization of the lerp function for speed.\r\n\t// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\n\tTHREE.StringKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\t\r\n\t\treturn ( alpha < 1.0 ) ? value0 : value1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.StringKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\t\r\n\t\treturn ( value0 === value1 );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.StringKeyframeTrack.prototype.clone = function() {\r\n\t\r\n\t\tvar clonedKeys = [];\r\n\t\r\n\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\r\n\t\t\tvar key = this.keys[i];\r\n\t\t\tclonedKeys.push( {\r\n\t\t\t\ttime: key.time,\r\n\t\t\t\tvalue: key.value\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.StringKeyframeTrack( this.name, clonedKeys );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.StringKeyframeTrack.parse = function( json ) {\r\n\t\r\n\t\treturn new THREE.StringKeyframeTrack( json.name, json.keys );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/tracks/BooleanKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Boolean\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.BooleanKeyframeTrack = function ( name, keys ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\t\r\n\t\t// local cache of value type to avoid allocations during runtime.\r\n\t\tthis.result = this.keys[0].value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BooleanKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\t\r\n\tTHREE.BooleanKeyframeTrack.prototype.constructor = THREE.BooleanKeyframeTrack;\r\n\t\r\n\tTHREE.BooleanKeyframeTrack.prototype.setResult = function( value ) {\r\n\t\r\n\t\tthis.result = value;\r\n\t\r\n\t};\r\n\t\r\n\t// memoization of the lerp function for speed.\r\n\t// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\n\tTHREE.BooleanKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\t\r\n\t\treturn ( alpha < 1.0 ) ? value0 : value1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BooleanKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\t\r\n\t\treturn ( value0 === value1 );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BooleanKeyframeTrack.prototype.clone = function() {\r\n\t\r\n\t\tvar clonedKeys = [];\r\n\t\r\n\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\r\n\t\t\tvar key = this.keys[i];\r\n\t\t\tclonedKeys.push( {\r\n\t\t\t\ttime: key.time,\r\n\t\t\t\tvalue: key.value\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.BooleanKeyframeTrack( this.name, clonedKeys );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BooleanKeyframeTrack.parse = function( json ) {\r\n\t\r\n\t\treturn new THREE.BooleanKeyframeTrack( json.name, json.keys );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/tracks/NumberKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Numbers\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.NumberKeyframeTrack = function ( name, keys ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\t\r\n\t\t// local cache of value type to avoid allocations during runtime.\r\n\t\tthis.result = this.keys[0].value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.NumberKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\t\r\n\tTHREE.NumberKeyframeTrack.prototype.constructor = THREE.NumberKeyframeTrack;\r\n\t\r\n\tTHREE.NumberKeyframeTrack.prototype.setResult = function( value ) {\r\n\t\r\n\t\tthis.result = value;\r\n\t\r\n\t};\r\n\t\r\n\t// memoization of the lerp function for speed.\r\n\t// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\n\tTHREE.NumberKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\t\r\n\t\treturn value0 * ( 1 - alpha ) + value1 * alpha;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.NumberKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\t\r\n\t\treturn ( value0 === value1 );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.NumberKeyframeTrack.prototype.clone = function() {\r\n\t\r\n\t\tvar clonedKeys = [];\r\n\t\r\n\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\r\n\t\t\tvar key = this.keys[i];\r\n\t\t\tclonedKeys.push( {\r\n\t\t\t\ttime: key.time,\r\n\t\t\t\tvalue: key.value\r\n\t\t\t} );\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.NumberKeyframeTrack( this.name, clonedKeys );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.NumberKeyframeTrack.parse = function( json ) {\r\n\t\r\n\t\treturn new THREE.NumberKeyframeTrack( json.name, json.keys );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/cameras/Camera.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.Camera = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Camera';\r\n\t\r\n\t\tthis.matrixWorldInverse = new THREE.Matrix4();\r\n\t\tthis.projectionMatrix = new THREE.Matrix4();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Camera.prototype.constructor = THREE.Camera;\r\n\t\r\n\tTHREE.Camera.prototype.getWorldDirection = function () {\r\n\t\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\t\r\n\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\t\r\n\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.Camera.prototype.lookAt = function () {\r\n\t\r\n\t\t// This routine does not support cameras with rotated and/or translated parent(s)\r\n\t\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\t\r\n\t\treturn function ( vector ) {\r\n\t\r\n\t\t\tm1.lookAt( this.position, vector, this.up );\r\n\t\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.Camera.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Camera.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/cameras/CubeCamera.js\r\n\t\r\n\t/**\r\n\t * Camera for rendering cube maps\r\n\t *\t- renders scene into axis-aligned cube\r\n\t *\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.CubeCamera = function ( near, far, cubeResolution ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'CubeCamera';\r\n\t\r\n\t\tvar fov = 90, aspect = 1;\r\n\t\r\n\t\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPX.up.set( 0, - 1, 0 );\r\n\t\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\r\n\t\tthis.add( cameraPX );\r\n\t\r\n\t\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNX.up.set( 0, - 1, 0 );\r\n\t\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\r\n\t\tthis.add( cameraNX );\r\n\t\r\n\t\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPY.up.set( 0, 0, 1 );\r\n\t\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\r\n\t\tthis.add( cameraPY );\r\n\t\r\n\t\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNY.up.set( 0, 0, - 1 );\r\n\t\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\r\n\t\tthis.add( cameraNY );\r\n\t\r\n\t\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPZ.up.set( 0, - 1, 0 );\r\n\t\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\r\n\t\tthis.add( cameraPZ );\r\n\t\r\n\t\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNZ.up.set( 0, - 1, 0 );\r\n\t\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\r\n\t\tthis.add( cameraNZ );\r\n\t\r\n\t\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );\r\n\t\r\n\t\tthis.updateCubeMap = function ( renderer, scene ) {\r\n\t\r\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\r\n\t\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\t\r\n\t\t\trenderTarget.texture.generateMipmaps = false;\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 0;\r\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 1;\r\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 2;\r\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 3;\r\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 4;\r\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\t\r\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 5;\r\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\t\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\r\n\t\r\n\t// File:src/cameras/OrthographicCamera.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\r\n\t\r\n\t\tTHREE.Camera.call( this );\r\n\t\r\n\t\tthis.type = 'OrthographicCamera';\r\n\t\r\n\t\tthis.zoom = 1;\r\n\t\r\n\t\tthis.left = left;\r\n\t\tthis.right = right;\r\n\t\tthis.top = top;\r\n\t\tthis.bottom = bottom;\r\n\t\r\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\t\r\n\t\tthis.updateProjectionMatrix();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\tTHREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;\r\n\t\r\n\tTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\r\n\t\r\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\tvar cx = ( this.right + this.left ) / 2;\r\n\t\tvar cy = ( this.top + this.bottom ) / 2;\r\n\t\r\n\t\tthis.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.OrthographicCamera.prototype.copy = function ( source ) {\r\n\t\t\r\n\t\tTHREE.Camera.prototype.copy.call( this, source );\r\n\t\t\r\n\t\tthis.left = source.left;\r\n\t\tthis.right = source.right;\r\n\t\tthis.top = source.top;\r\n\t\tthis.bottom = source.bottom;\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\t\t\r\n\t\tthis.zoom = source.zoom;\r\n\t\t\r\n\t\treturn this;\r\n\t\t\t\r\n\t};\r\n\t\r\n\tTHREE.OrthographicCamera.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.object.zoom = this.zoom;\r\n\t\tdata.object.left = this.left;\r\n\t\tdata.object.right = this.right;\r\n\t\tdata.object.top = this.top;\r\n\t\tdata.object.bottom = this.bottom;\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/cameras/PerspectiveCamera.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author greggman / http://games.greggman.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\t\r\n\tTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\r\n\t\r\n\t\tTHREE.Camera.call( this );\r\n\t\r\n\t\tthis.type = 'PerspectiveCamera';\r\n\t\r\n\t\tthis.zoom = 1;\r\n\t\r\n\t\tthis.fov = fov !== undefined ? fov : 50;\r\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\t\tthis.near = near !== undefined ? near : 0.1;\r\n\t\tthis.far = far !== undefined ? far : 2000;\r\n\t\r\n\t\tthis.updateProjectionMatrix();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\tTHREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;\r\n\t\r\n\t\r\n\t/**\r\n\t * Uses Focal Length (in mm) to estimate and set FOV\r\n\t * 35mm (full-frame) camera is used if frame size is not specified;\r\n\t * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n\t */\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\t\r\n\t\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\t\r\n\t\tthis.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\t\tthis.updateProjectionMatrix();\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t * multi-monitor/multi-machine setups.\r\n\t *\r\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t * the monitors are in grid like this\r\n\t *\r\n\t *   +---+---+---+\r\n\t *   | A | B | C |\r\n\t *   +---+---+---+\r\n\t *   | D | E | F |\r\n\t *   +---+---+---+\r\n\t *\r\n\t * then for each monitor you would call it like this\r\n\t *\r\n\t *   var w = 1920;\r\n\t *   var h = 1080;\r\n\t *   var fullWidth = w * 3;\r\n\t *   var fullHeight = h * 2;\r\n\t *\r\n\t *   --A--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t *   --B--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t *   --C--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t *   --D--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t *   --E--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t *   --F--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t *\r\n\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t */\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\t\r\n\t\tthis.fullWidth = fullWidth;\r\n\t\tthis.fullHeight = fullHeight;\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\r\n\t\tthis.updateProjectionMatrix();\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\r\n\t\r\n\t\tvar fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );\r\n\t\r\n\t\tif ( this.fullWidth ) {\r\n\t\r\n\t\t\tvar aspect = this.fullWidth / this.fullHeight;\r\n\t\t\tvar top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;\r\n\t\t\tvar bottom = - top;\r\n\t\t\tvar left = aspect * bottom;\r\n\t\t\tvar right = aspect * top;\r\n\t\t\tvar width = Math.abs( right - left );\r\n\t\t\tvar height = Math.abs( top - bottom );\r\n\t\r\n\t\t\tthis.projectionMatrix.makeFrustum(\r\n\t\t\t\tleft + this.x * width / this.fullWidth,\r\n\t\t\t\tleft + ( this.x + this.width ) * width / this.fullWidth,\r\n\t\t\t\ttop - ( this.y + this.height ) * height / this.fullHeight,\r\n\t\t\t\ttop - this.y * height / this.fullHeight,\r\n\t\t\t\tthis.near,\r\n\t\t\t\tthis.far\r\n\t\t\t);\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.copy = function ( source ) {\r\n\t\t\r\n\t\tTHREE.Camera.prototype.copy.call( this, source );\r\n\t\t\r\n\t\tthis.fov = source.fov;\r\n\t\tthis.aspect = source.aspect;\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\t\t\r\n\t\tthis.zoom = source.zoom;\r\n\t\t\r\n\t\treturn this;\r\n\t\t\t\r\n\t};\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.object.zoom = this.zoom;\r\n\t\tdata.object.fov = this.fov;\r\n\t\tdata.object.aspect = this.aspect;\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/Light.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Light = function ( color ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Light';\r\n\t\r\n\t\tthis.color = new THREE.Color( color );\r\n\t\r\n\t\tthis.receiveShadow = undefined;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Light.prototype.constructor = THREE.Light;\r\n\t\r\n\tObject.defineProperties( THREE.Light.prototype, {\r\n\t\tonlyShadow: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFov: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.camera.fov = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraLeft: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.camera.left = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraRight: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.camera.right = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraTop: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.camera.top = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraBottom: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.camera.bottom = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraNear: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.camera.near = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFar: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.camera.far = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraVisible: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow ) instead.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowBias: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.bias = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowDarkness: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.darkness = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapWidth: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.mapSize.width = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapHeight: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.shadow.mapSize.height = value;\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tTHREE.Light.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Light.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.object.color = this.color.getHex();\r\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\r\n\t\r\n\t\tif ( this.intensity !== undefined ) data.object.intensity = this.intensity;\r\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\r\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\r\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\r\n\t\tif ( this.exponent !== undefined ) data.object.exponent = this.exponent;\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/LightShadow.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.LightShadow = function ( camera ) {\r\n\t\r\n\t\tthis.camera = camera;\r\n\t\r\n\t\tthis.bias = 0;\r\n\t\tthis.darkness = 1;\r\n\t\r\n\t\tthis.mapSize = new THREE.Vector2( 512, 512 );\r\n\t\r\n\t\tthis.map = null;\r\n\t\tthis.matrix = null;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LightShadow.prototype = {\r\n\t\r\n\t\tconstructor: THREE.LightShadow,\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.camera = source.camera.clone();\r\n\t\r\n\t\t\tthis.bias = source.bias;\r\n\t\t\tthis.darkness = source.darkness;\r\n\t\r\n\t\t\tthis.mapSize.copy( source.mapSize );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/AmbientLight.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.AmbientLight = function ( color ) {\r\n\t\r\n\t\tTHREE.Light.call( this, color );\r\n\t\r\n\t\tthis.type = 'AmbientLight';\r\n\t\r\n\t\tthis.castShadow = undefined;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.AmbientLight.prototype.constructor = THREE.AmbientLight;\r\n\t\r\n\t// File:src/lights/DirectionalLight.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.DirectionalLight = function ( color, intensity ) {\r\n\t\r\n\t\tTHREE.Light.call( this, color );\r\n\t\r\n\t\tthis.type = 'DirectionalLight';\r\n\t\r\n\t\tthis.position.set( 0, 1, 0 );\r\n\t\tthis.updateMatrix();\r\n\t\r\n\t\tthis.target = new THREE.Object3D();\r\n\t\r\n\t\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\t\r\n\t\tthis.shadow = new THREE.LightShadow( new THREE.OrthographicCamera( - 500, 500, 500, - 500, 50, 5000 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;\r\n\t\r\n\tTHREE.DirectionalLight.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.intensity = source.intensity;\r\n\t\tthis.target = source.target.clone();\r\n\t\r\n\t\tthis.shadow = source.shadow.clone();\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/HemisphereLight.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\r\n\t\r\n\t\tTHREE.Light.call( this, skyColor );\r\n\t\r\n\t\tthis.type = 'HemisphereLight';\r\n\t\r\n\t\tthis.castShadow = undefined;\r\n\t\r\n\t\tthis.position.set( 0, 1, 0 );\r\n\t\tthis.updateMatrix();\r\n\t\r\n\t\tthis.groundColor = new THREE.Color( groundColor );\r\n\t\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;\r\n\t\r\n\tTHREE.HemisphereLight.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.groundColor.copy( source.groundColor );\r\n\t\tthis.intensity = source.intensity;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/PointLight.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\t\r\n\tTHREE.PointLight = function ( color, intensity, distance, decay ) {\r\n\t\r\n\t\tTHREE.Light.call( this, color );\r\n\t\r\n\t\tthis.type = 'PointLight';\r\n\t\r\n\t\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\t\r\n\t\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 1, 500 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.PointLight.prototype.constructor = THREE.PointLight;\r\n\t\r\n\tTHREE.PointLight.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.intensity = source.intensity;\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.decay = source.decay;\r\n\t\r\n\t\tthis.shadow = source.shadow.clone();\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/SpotLight.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.SpotLight = function ( color, intensity, distance, angle, exponent, decay ) {\r\n\t\r\n\t\tTHREE.Light.call( this, color );\r\n\t\r\n\t\tthis.type = 'SpotLight';\r\n\t\r\n\t\tthis.position.set( 0, 1, 0 );\r\n\t\tthis.updateMatrix();\r\n\t\r\n\t\tthis.target = new THREE.Object3D();\r\n\t\r\n\t\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\t\tthis.exponent = ( exponent !== undefined ) ? exponent : 10;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\t\r\n\t\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 50, 1, 50, 5000 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.SpotLight.prototype.constructor = THREE.SpotLight;\r\n\t\r\n\tTHREE.SpotLight.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.intensity = source.intensity;\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.angle = source.angle;\r\n\t\tthis.exponent = source.exponent;\r\n\t\tthis.decay = source.decay;\r\n\t\r\n\t\tthis.target = source.target.clone();\r\n\t\r\n\t\tthis.shadow = source.shadow.clone();\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/Cache.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Cache = {\r\n\t\r\n\t\tenabled: false,\r\n\t\r\n\t\tfiles: {},\r\n\t\r\n\t\tadd: function ( key, file ) {\r\n\t\r\n\t\t\tif ( this.enabled === false ) return;\r\n\t\r\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\t\r\n\t\t\tthis.files[ key ] = file;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget: function ( key ) {\r\n\t\r\n\t\t\tif ( this.enabled === false ) return;\r\n\t\r\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\t\r\n\t\t\treturn this.files[ key ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremove: function ( key ) {\r\n\t\r\n\t\t\tdelete this.files[ key ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclear: function () {\r\n\t\r\n\t\t\tthis.files = {};\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/Loader.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Loader = function () {\r\n\t\r\n\t\tthis.onLoadStart = function () {};\r\n\t\tthis.onLoadProgress = function () {};\r\n\t\tthis.onLoadComplete = function () {};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Loader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Loader,\r\n\t\r\n\t\tcrossOrigin: undefined,\r\n\t\r\n\t\textractUrlBase: function ( url ) {\r\n\t\r\n\t\t\tvar parts = url.split( '/' );\r\n\t\r\n\t\t\tif ( parts.length === 1 ) return './';\r\n\t\r\n\t\t\tparts.pop();\r\n\t\r\n\t\t\treturn parts.join( '/' ) + '/';\r\n\t\r\n\t\t},\r\n\t\r\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\r\n\t\r\n\t\t\tvar array = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\t\r\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcreateMaterial: ( function () {\r\n\t\r\n\t\t\tvar color, textureLoader, materialLoader;\r\n\t\r\n\t\t\treturn function ( m, texturePath, crossOrigin ) {\r\n\t\r\n\t\t\t\tif ( color === undefined ) color = new THREE.Color();\r\n\t\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\r\n\t\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\r\n\t\r\n\t\t\t\t// convert from old material format\r\n\t\r\n\t\t\t\tvar textures = {};\r\n\t\r\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\r\n\t\r\n\t\t\t\t\tvar fullPath = texturePath + path;\r\n\t\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\r\n\t\r\n\t\t\t\t\tvar texture;\r\n\t\r\n\t\t\t\t\tif ( loader !== null ) {\r\n\t\r\n\t\t\t\t\t\ttexture = loader.load( fullPath );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\r\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( repeat !== undefined ) {\r\n\t\r\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\r\n\t\r\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( offset !== undefined ) {\r\n\t\r\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( wrap !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\r\n\t\r\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\r\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( anisotropy !== undefined ) {\r\n\t\r\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\t\t\t\ttextures[ uuid ] = texture;\r\n\t\r\n\t\t\t\t\treturn uuid;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t//\r\n\t\r\n\t\t\t\tvar json = {\r\n\t\t\t\t\tuuid: THREE.Math.generateUUID(),\r\n\t\t\t\t\ttype: 'MeshLambertMaterial'\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tfor ( var name in m ) {\r\n\t\r\n\t\t\t\t\tvar value = m[ name ];\r\n\t\r\n\t\t\t\t\tswitch ( name ) {\r\n\t\t\t\t\t\tcase 'DbgColor':\r\n\t\t\t\t\t\t\tjson.color = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'DbgIndex':\r\n\t\t\t\t\t\tcase 'opticalDensity':\r\n\t\t\t\t\t\tcase 'illumination':\r\n\t\t\t\t\t\t\t// These were never supported\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'DbgName':\r\n\t\t\t\t\t\t\tjson.name = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'blending':\r\n\t\t\t\t\t\t\tjson.blending = THREE[ value ];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorDiffuse':\r\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorSpecular':\r\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorEmissive':\r\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'specularCoef':\r\n\t\t\t\t\t\t\tjson.shininess = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'shading':\r\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\r\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapDiffuse':\r\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\r\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\r\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\r\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapLight':\r\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapLightRepeat':\r\n\t\t\t\t\t\tcase 'mapLightOffset':\r\n\t\t\t\t\t\tcase 'mapLightWrap':\r\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAO':\r\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAORepeat':\r\n\t\t\t\t\t\tcase 'mapAOOffset':\r\n\t\t\t\t\t\tcase 'mapAOWrap':\r\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapBump':\r\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapBumpScale':\r\n\t\t\t\t\t\t\tjson.bumpScale = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapBumpRepeat':\r\n\t\t\t\t\t\tcase 'mapBumpOffset':\r\n\t\t\t\t\t\tcase 'mapBumpWrap':\r\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapNormal':\r\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapNormalFactor':\r\n\t\t\t\t\t\t\tjson.normalScale = [ value, value ];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapNormalRepeat':\r\n\t\t\t\t\t\tcase 'mapNormalOffset':\r\n\t\t\t\t\t\tcase 'mapNormalWrap':\r\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapSpecular':\r\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\r\n\t\t\t\t\t\tcase 'mapSpecularOffset':\r\n\t\t\t\t\t\tcase 'mapSpecularWrap':\r\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAlpha':\r\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\r\n\t\t\t\t\t\tcase 'mapAlphaOffset':\r\n\t\t\t\t\t\tcase 'mapAlphaWrap':\r\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'flipSided':\r\n\t\t\t\t\t\t\tjson.side = THREE.BackSide;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'doubleSided':\r\n\t\t\t\t\t\t\tjson.side = THREE.DoubleSide;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'transparency':\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader: transparency has been renamed to opacity' );\r\n\t\t\t\t\t\t\tjson.opacity = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'opacity':\r\n\t\t\t\t\t\tcase 'transparent':\r\n\t\t\t\t\t\tcase 'depthTest':\r\n\t\t\t\t\t\tcase 'depthWrite':\r\n\t\t\t\t\t\tcase 'transparent':\r\n\t\t\t\t\t\tcase 'visible':\r\n\t\t\t\t\t\tcase 'wireframe':\r\n\t\t\t\t\t\t\tjson[ name ] = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'vertexColors':\r\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\r\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'Loader.createMaterial: Unsupported', name, value );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\r\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\r\n\t\r\n\t\t\t\tmaterialLoader.setTextures( textures );\r\n\t\r\n\t\t\t\treturn materialLoader.parse( json );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )()\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Loader.Handlers = {\r\n\t\r\n\t\thandlers: [],\r\n\t\r\n\t\tadd: function ( regex, loader ) {\r\n\t\r\n\t\t\tthis.handlers.push( regex, loader );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget: function ( file ) {\r\n\t\r\n\t\t\tvar handlers = this.handlers;\r\n\t\r\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\t\r\n\t\t\t\tvar regex = handlers[ i ];\r\n\t\t\t\tvar loader  = handlers[ i + 1 ];\r\n\t\r\n\t\t\t\tif ( regex.test( file ) ) {\r\n\t\r\n\t\t\t\t\treturn loader;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn null;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/XHRLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.XHRLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.XHRLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.XHRLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar cached = THREE.Cache.get( url );\r\n\t\r\n\t\t\tif ( cached !== undefined ) {\r\n\t\r\n\t\t\t\tif ( onLoad ) {\r\n\t\r\n\t\t\t\t\tsetTimeout( function () {\r\n\t\r\n\t\t\t\t\t\tonLoad( cached );\r\n\t\r\n\t\t\t\t\t}, 0 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn cached;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar request = new XMLHttpRequest();\r\n\t\t\trequest.open( 'GET', url, true );\r\n\t\r\n\t\t\trequest.addEventListener( 'load', function ( event ) {\r\n\t\r\n\t\t\t\tvar response = event.target.response;\r\n\t\r\n\t\t\t\tTHREE.Cache.add( url, response );\r\n\t\r\n\t\t\t\tif ( onLoad ) onLoad( response );\r\n\t\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t}, false );\r\n\t\r\n\t\t\tif ( onProgress !== undefined ) {\r\n\t\r\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\t\r\n\t\t\t\t\tonProgress( event );\r\n\t\r\n\t\t\t\t}, false );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\trequest.addEventListener( 'error', function ( event ) {\r\n\t\r\n\t\t\t\tif ( onError ) onError( event );\r\n\t\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\r\n\t\t\t}, false );\r\n\t\r\n\t\t\tif ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;\r\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\r\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\r\n\t\r\n\t\t\trequest.send( null );\r\n\t\r\n\t\t\tscope.manager.itemStart( url );\r\n\t\r\n\t\t\treturn request;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetResponseType: function ( value ) {\r\n\t\r\n\t\t\tthis.responseType = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetWithCredentials: function ( value ) {\r\n\t\r\n\t\t\tthis.withCredentials = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/ImageLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.ImageLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ImageLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.ImageLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar cached = THREE.Cache.get( url );\r\n\t\r\n\t\t\tif ( cached !== undefined ) {\r\n\t\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\t\r\n\t\t\t\tif ( onLoad ) {\r\n\t\r\n\t\t\t\t\tsetTimeout( function () {\r\n\t\r\n\t\t\t\t\t\tonLoad( cached );\r\n\t\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t\t\t}, 0 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn cached;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar image = document.createElement( 'img' );\r\n\t\r\n\t\t\timage.addEventListener( 'load', function ( event ) {\r\n\t\r\n\t\t\t\tTHREE.Cache.add( url, this );\r\n\t\r\n\t\t\t\tif ( onLoad ) onLoad( this );\r\n\t\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t}, false );\r\n\t\r\n\t\t\tif ( onProgress !== undefined ) {\r\n\t\r\n\t\t\t\timage.addEventListener( 'progress', function ( event ) {\r\n\t\r\n\t\t\t\t\tonProgress( event );\r\n\t\r\n\t\t\t\t}, false );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\timage.addEventListener( 'error', function ( event ) {\r\n\t\r\n\t\t\t\tif ( onError ) onError( event );\r\n\t\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\r\n\t\t\t}, false );\r\n\t\r\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\r\n\t\r\n\t\t\tscope.manager.itemStart( url );\r\n\t\r\n\t\t\timage.src = url;\r\n\t\r\n\t\t\treturn image;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/JSONLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.JSONLoader = function ( manager ) {\r\n\t\r\n\t\tif ( typeof manager === 'boolean' ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\r\n\t\t\tmanager = undefined;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t\tthis.withCredentials = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.JSONLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.JSONLoader,\r\n\t\r\n\t\t// Deprecated\r\n\t\r\n\t\tget statusDomElement () {\r\n\t\r\n\t\t\tif ( this._statusDomElement === undefined ) {\r\n\t\r\n\t\t\t\tthis._statusDomElement = document.createElement( 'div' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tconsole.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );\r\n\t\t\treturn this._statusDomElement;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tload: function( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\t\r\n\t\t\t\tvar json = JSON.parse( text );\r\n\t\t\t\tvar metadata = json.metadata;\r\n\t\r\n\t\t\t\tif ( metadata !== undefined ) {\r\n\t\r\n\t\t\t\t\tif ( metadata.type === 'object' ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\r\n\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( metadata.type === 'scene' ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\r\n\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar object = scope.parse( json, texturePath );\r\n\t\t\t\tonLoad( object.geometry, object.materials );\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetTexturePath: function ( value ) {\r\n\t\r\n\t\t\tthis.texturePath = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparse: function ( json, texturePath ) {\r\n\t\r\n\t\t\tvar geometry = new THREE.Geometry(),\r\n\t\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\r\n\t\r\n\t\t\tparseModel( scale );\r\n\t\r\n\t\t\tparseSkin();\r\n\t\t\tparseMorphing( scale );\r\n\t\t\tparseAnimations();\r\n\t\r\n\t\t\tgeometry.computeFaceNormals();\r\n\t\t\tgeometry.computeBoundingSphere();\r\n\t\r\n\t\t\tfunction parseModel( scale ) {\r\n\t\r\n\t\t\t\tfunction isBitSet( value, position ) {\r\n\t\r\n\t\t\t\t\treturn value & ( 1 << position );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar i, j, fi,\r\n\t\r\n\t\t\t\toffset, zLength,\r\n\t\r\n\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\t\r\n\t\t\t\ttype,\r\n\t\t\t\tisQuad,\r\n\t\t\t\thasMaterial,\r\n\t\t\t\thasFaceVertexUv,\r\n\t\t\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\t\t\thasFaceColor, hasFaceVertexColor,\r\n\t\r\n\t\t\tvertex, face, faceA, faceB, hex, normal,\r\n\t\r\n\t\t\t\tuvLayer, uv, u, v,\r\n\t\r\n\t\t\t\tfaces = json.faces,\r\n\t\t\t\tvertices = json.vertices,\r\n\t\t\t\tnormals = json.normals,\r\n\t\t\t\tcolors = json.colors,\r\n\t\r\n\t\t\t\tnUvLayers = 0;\r\n\t\r\n\t\t\t\tif ( json.uvs !== undefined ) {\r\n\t\r\n\t\t\t\t\t// disregard empty arrays\r\n\t\r\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\toffset = 0;\r\n\t\t\t\tzLength = vertices.length;\r\n\t\r\n\t\t\t\twhile ( offset < zLength ) {\r\n\t\r\n\t\t\t\t\tvertex = new THREE.Vector3();\r\n\t\r\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\t\r\n\t\t\t\t\tgeometry.vertices.push( vertex );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\toffset = 0;\r\n\t\t\t\tzLength = faces.length;\r\n\t\r\n\t\t\t\twhile ( offset < zLength ) {\r\n\t\r\n\t\t\t\t\ttype = faces[ offset ++ ];\r\n\t\r\n\t\r\n\t\t\t\t\tisQuad              = isBitSet( type, 0 );\r\n\t\t\t\t\thasMaterial         = isBitSet( type, 1 );\r\n\t\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\r\n\t\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\r\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\r\n\t\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\r\n\t\r\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\t\r\n\t\t\t\t\tif ( isQuad ) {\r\n\t\r\n\t\t\t\t\t\tfaceA = new THREE.Face3();\r\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\r\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\r\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\r\n\t\r\n\t\t\t\t\t\tfaceB = new THREE.Face3();\r\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\r\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\r\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\r\n\t\r\n\t\t\t\t\t\toffset += 4;\r\n\t\r\n\t\t\t\t\t\tif ( hasMaterial ) {\r\n\t\r\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\r\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// to get face <=> uv index correspondence\r\n\t\r\n\t\t\t\t\t\tfi = geometry.faces.length;\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\t\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\t\r\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceNormal ) {\r\n\t\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\t\r\n\t\t\t\t\t\t\tfaceA.normal.set(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\t\r\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t\t);\r\n\t\r\n\t\r\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\r\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceColor ) {\r\n\t\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\t\r\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\r\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\t\r\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\r\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tgeometry.faces.push( faceA );\r\n\t\t\t\t\t\tgeometry.faces.push( faceB );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tface = new THREE.Face3();\r\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\r\n\t\r\n\t\t\t\t\t\tif ( hasMaterial ) {\r\n\t\r\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// to get face <=> uv index correspondence\r\n\t\r\n\t\t\t\t\t\tfi = geometry.faces.length;\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\t\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\t\r\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceNormal ) {\r\n\t\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\t\r\n\t\t\t\t\t\t\tface.normal.set(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\t\r\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceColor ) {\r\n\t\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tgeometry.faces.push( face );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tfunction parseSkin() {\r\n\t\r\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\r\n\t\r\n\t\t\t\tif ( json.skinWeights ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\r\n\t\r\n\t\t\t\t\t\tvar x =                               json.skinWeights[ i ];\r\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\r\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\r\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\r\n\t\r\n\t\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( json.skinIndices ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\r\n\t\r\n\t\t\t\t\t\tvar a =                               json.skinIndices[ i ];\r\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\r\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\r\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\r\n\t\r\n\t\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.bones = json.bones;\r\n\t\r\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\r\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tfunction parseMorphing( scale ) {\r\n\t\r\n\t\t\t\tif ( json.morphTargets !== undefined ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\t\r\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\r\n\t\r\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\t\r\n\t\t\t\t\t\t\tdstVertices.push( vertex );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\r\n\t\r\n\t\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction parseAnimations() {\r\n\t\r\n\t\t\t\tvar outputAnimations = [];\r\n\t\r\n\t\t\t\t// parse old style Bone/Hierarchy animations\r\n\t\t\t\tvar animations = [];\r\n\t\t\t\tif ( json.animation !== undefined ) {\r\n\t\t\t\t\tanimations.push( json.animation );\r\n\t\t\t\t}\r\n\t\t\t\tif ( json.animations !== undefined ) {\r\n\t\t\t\t\tif ( json.animations.length ) {\r\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tanimations.push( json.animations );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[i], geometry.bones );\r\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// parse implicit morph animations\r\n\t\t\t\tif ( geometry.morphTargets ) {\r\n\t\r\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\r\n\t\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\r\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\r\n\t\r\n\t\t\t\treturn { geometry: geometry };\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\r\n\t\r\n\t\t\t\treturn { geometry: geometry, materials: materials };\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/LoadingManager.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\r\n\t\r\n\t\tthis.onStart = undefined;\r\n\t\tthis.onLoad = onLoad;\r\n\t\tthis.onProgress = onProgress;\r\n\t\tthis.onError = onError;\r\n\t\r\n\t\tthis.itemStart = function ( url ) {\r\n\t\r\n\t\t\titemsTotal ++;\r\n\t\r\n\t\t\tif ( isLoading === false ) {\r\n\t\r\n\t\t\t\tif ( scope.onStart !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tisLoading = true;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.itemEnd = function ( url ) {\r\n\t\r\n\t\t\titemsLoaded ++;\r\n\t\r\n\t\t\tif ( scope.onProgress !== undefined ) {\r\n\t\r\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( itemsLoaded === itemsTotal ) {\r\n\t\r\n\t\t\t\tisLoading = false;\r\n\t\r\n\t\t\t\tif ( scope.onLoad !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.onLoad();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.itemError = function ( url ) {\r\n\t\r\n\t\t\tif ( scope.onError !== undefined ) {\r\n\t\r\n\t\t\t\tscope.onError( url );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DefaultLoadingManager = new THREE.LoadingManager();\r\n\t\r\n\t// File:src/loaders/BufferGeometryLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.BufferGeometryLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BufferGeometryLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.BufferGeometryLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\t\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparse: function ( json ) {\r\n\t\r\n\t\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\r\n\t\t\tvar index = json.data.index;\r\n\t\r\n\t\t\tif ( index !== undefined ) {\r\n\t\r\n\t\t\t\tvar typedArray = new self[ index.type ]( index.array );\r\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar attributes = json.data.attributes;\r\n\t\r\n\t\t\tfor ( var key in attributes ) {\r\n\t\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\t\t\t\tvar typedArray = new self[ attribute.type ]( attribute.array );\r\n\t\r\n\t\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\t\r\n\t\t\tif ( groups !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\t\r\n\t\t\t\t\tgeometry.addGroup( group.start, group.count );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar boundingSphere = json.data.boundingSphere;\r\n\t\r\n\t\t\tif ( boundingSphere !== undefined ) {\r\n\t\r\n\t\t\t\tvar center = new THREE.Vector3();\r\n\t\r\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\t\r\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn geometry;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/MaterialLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.MaterialLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\tthis.textures = {};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MaterialLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.MaterialLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\t\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetTextures: function ( value ) {\r\n\t\r\n\t\t\tthis.textures = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetTexture: function ( name ) {\r\n\t\r\n\t\t\tvar textures = this.textures;\r\n\t\r\n\t\t\tif ( textures[ name ] === undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn textures[ name ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparse: function ( json ) {\r\n\t\r\n\t\t\tvar material = new THREE[ json.type ];\r\n\t\t\tmaterial.uuid = json.uuid;\r\n\t\r\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\r\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\r\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\r\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\r\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\r\n\t\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\r\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\r\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\r\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\r\n\t\t\tif ( json.shading !== undefined ) material.shading = json.shading;\r\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\r\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\r\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\r\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\r\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\r\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\r\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\r\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\r\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\r\n\t\r\n\t\t\t// for PointsMaterial\r\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\r\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\r\n\t\r\n\t\t\t// maps\r\n\t\r\n\t\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\r\n\t\r\n\t\t\tif ( json.alphaMap !== undefined ) {\r\n\t\r\n\t\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\r\n\t\t\t\tmaterial.transparent = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\r\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\r\n\t\r\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\r\n\t\t\tif ( json.normalScale )\tmaterial.normalScale = new THREE.Vector2( json.normalScale, json.normalScale );\r\n\t\r\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\r\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\r\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\r\n\t\r\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\r\n\t\r\n\t\t\tif ( json.envMap !== undefined ) {\r\n\t\r\n\t\t\t\tmaterial.envMap = this.getTexture( json.envMap );\r\n\t\t\t\tmaterial.combine = THREE.MultiplyOperation;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( json.reflectivity ) material.reflectivity = json.reflectivity;\r\n\t\r\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\r\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\r\n\t\r\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\r\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\r\n\t\r\n\t\t\t// MeshFaceMaterial\r\n\t\r\n\t\t\tif ( json.materials !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn material;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/ObjectLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.ObjectLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\tthis.texturePath = '';\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ObjectLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.ObjectLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tif ( this.texturePath === '' ) {\r\n\t\r\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\t\r\n\t\t\t\tscope.parse( JSON.parse( text ), onLoad );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetTexturePath: function ( value ) {\r\n\t\r\n\t\t\tthis.texturePath = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparse: function ( json, onLoad ) {\r\n\t\r\n\t\t\tvar geometries = this.parseGeometries( json.geometries );\r\n\t\r\n\t\t\tvar images = this.parseImages( json.images, function () {\r\n\t\r\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t\tvar textures  = this.parseTextures( json.textures, images );\r\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\t\r\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\t\r\n\t\t\tif ( json.animations ) {\r\n\t\r\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\t\r\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn object;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseGeometries: function ( json ) {\r\n\t\r\n\t\t\tvar geometries = {};\r\n\t\r\n\t\t\tif ( json !== undefined ) {\r\n\t\r\n\t\t\t\tvar geometryLoader = new THREE.JSONLoader();\r\n\t\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar geometry;\r\n\t\t\t\t\tvar data = json[ i ];\r\n\t\r\n\t\t\t\t\tswitch ( data.type ) {\r\n\t\r\n\t\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.BoxGeometry(\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.CircleBufferGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'CircleGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.CircleGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'CylinderGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.CylinderGeometry(\r\n\t\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'SphereGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.SphereGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.SphereBufferGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.DodecahedronGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.IcosahedronGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'OctahedronGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.OctahedronGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.TetrahedronGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'RingGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.RingGeometry(\r\n\t\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'TorusGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.TorusGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.TorusKnotGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\t\tdata.q,\r\n\t\t\t\t\t\t\t\tdata.heightScale\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'BufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'Geometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tdefault:\r\n\t\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\t\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tgeometry.uuid = data.uuid;\r\n\t\r\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\r\n\t\r\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn geometries;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseMaterials: function ( json, textures ) {\r\n\t\r\n\t\t\tvar materials = {};\r\n\t\r\n\t\t\tif ( json !== undefined ) {\r\n\t\r\n\t\t\t\tvar loader = new THREE.MaterialLoader();\r\n\t\t\t\tloader.setTextures( textures );\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar material = loader.parse( json[ i ] );\r\n\t\t\t\t\tmaterials[ material.uuid ] = material;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn materials;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseAnimations: function ( json ) {\r\n\t\r\n\t\t\tvar animations = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar clip = THREE.AnimationClip.parse( json[i] );\r\n\t\r\n\t\t\t\tanimations.push( clip );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn animations;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseImages: function ( json, onLoad ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\t\tvar images = {};\r\n\t\r\n\t\t\tfunction loadImage( url ) {\r\n\t\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\t\r\n\t\t\t\treturn loader.load( url, function () {\r\n\t\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t\t} );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( json !== undefined && json.length > 0 ) {\r\n\t\r\n\t\t\t\tvar manager = new THREE.LoadingManager( onLoad );\r\n\t\r\n\t\t\t\tvar loader = new THREE.ImageLoader( manager );\r\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar image = json[ i ];\r\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\r\n\t\r\n\t\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn images;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseTextures: function ( json, images ) {\r\n\t\r\n\t\t\tfunction parseConstant( value ) {\r\n\t\r\n\t\t\t\tif ( typeof( value ) === 'number' ) return value;\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\t\r\n\t\t\t\treturn THREE[ value ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar textures = {};\r\n\t\r\n\t\t\tif ( json !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar data = json[ i ];\r\n\t\r\n\t\t\t\t\tif ( data.image === undefined ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\t\ttexture.uuid = data.uuid;\r\n\t\r\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\r\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\r\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\r\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\r\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\r\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\r\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\r\n\t\t\t\t\tif ( Array.isArray( data.wrap ) ) {\r\n\t\r\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\r\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttextures[ data.uuid ] = texture;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn textures;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseObject: function () {\r\n\t\r\n\t\t\tvar matrix = new THREE.Matrix4();\r\n\t\r\n\t\t\treturn function ( data, geometries, materials ) {\r\n\t\r\n\t\t\t\tvar object;\r\n\t\r\n\t\t\t\tfunction getGeometry( name ) {\r\n\t\r\n\t\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn geometries[ name ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfunction getMaterial( name ) {\r\n\t\r\n\t\t\t\t\tif ( name === undefined ) return undefined;\r\n\t\r\n\t\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn materials[ name ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tswitch ( data.type ) {\r\n\t\r\n\t\t\t\t\tcase 'Scene':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Scene();\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'PerspectiveCamera':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'OrthographicCamera':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'AmbientLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.AmbientLight( data.color );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'DirectionalLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'PointLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'SpotLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent, data.decay );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'HemisphereLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Mesh':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Mesh( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'LOD':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.LOD();\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Line':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'PointCloud':\r\n\t\t\t\t\tcase 'Points':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Sprite':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Group':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Group();\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tdefault:\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Object3D();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tobject.uuid = data.uuid;\r\n\t\r\n\t\t\t\tif ( data.name !== undefined ) object.name = data.name;\r\n\t\t\t\tif ( data.matrix !== undefined ) {\r\n\t\r\n\t\t\t\t\tmatrix.fromArray( data.matrix );\r\n\t\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\r\n\t\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\r\n\t\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\r\n\t\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\r\n\t\r\n\t\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\r\n\t\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\r\n\t\r\n\t\t\t\tif ( data.children !== undefined ) {\r\n\t\r\n\t\t\t\t\tfor ( var child in data.children ) {\r\n\t\r\n\t\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( data.type === 'LOD' ) {\r\n\t\r\n\t\t\t\t\tvar levels = data.levels;\r\n\t\r\n\t\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\t\r\n\t\t\t\t\t\tif ( child !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn object;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}()\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/TextureLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.TextureLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TextureLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.TextureLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar texture = new THREE.Texture();\r\n\t\r\n\t\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.load( url, function ( image ) {\r\n\t\r\n\t\t\t\ttexture.image = image;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\tif ( onLoad !== undefined ) {\r\n\t\r\n\t\t\t\t\tonLoad( texture );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/CubeTextureLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.CubeTextureLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubeTextureLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.CubeTextureLoader,\r\n\t\r\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar texture = new THREE.CubeTexture( [] );\r\n\t\r\n\t\t\tvar loader = new THREE.ImageLoader();\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\r\n\t\t\tvar loaded = 0;\r\n\t\r\n\t\t\tfunction loadTexture( i ) {\r\n\t\r\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\t\r\n\t\t\t\t\ttexture.images[ i ] = image;\r\n\t\r\n\t\t\t\t\tloaded ++;\r\n\t\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\t\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}, undefined, onError );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\t\r\n\t\t\t\tloadTexture( i );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/BinaryTextureLoader.js\r\n\t\r\n\t/**\r\n\t * @author Nikos M. / https://github.com/foo123/\r\n\t *\r\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n\t */\r\n\t\r\n\tTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t\t// override in sub classes\r\n\t\tthis._parser = null;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BinaryTextureLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.BinaryTextureLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar texture = new THREE.DataTexture();\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\t\r\n\t\t\t\tvar texData = scope._parser( buffer );\r\n\t\r\n\t\t\t\tif ( ! texData ) return;\r\n\t\r\n\t\t\t\tif ( undefined !== texData.image ) {\r\n\t\r\n\t\t\t\t\ttexture.image = texData.image;\r\n\t\r\n\t\t\t\t} else if ( undefined !== texData.data ) {\r\n\t\r\n\t\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\t\ttexture.image.data = texData.data;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\r\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\r\n\t\r\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\r\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\r\n\t\r\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\r\n\t\r\n\t\t\t\tif ( undefined !== texData.format ) {\r\n\t\r\n\t\t\t\t\ttexture.format = texData.format;\r\n\t\r\n\t\t\t\t}\r\n\t\t\t\tif ( undefined !== texData.type ) {\r\n\t\r\n\t\t\t\t\ttexture.type = texData.type;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\r\n\t\r\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\r\n\t\r\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/CompressedTextureLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n\t */\r\n\t\r\n\tTHREE.CompressedTextureLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t\t// override in sub classes\r\n\t\tthis._parser = null;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.CompressedTextureLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.CompressedTextureLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar images = [];\r\n\t\r\n\t\t\tvar texture = new THREE.CompressedTexture();\r\n\t\t\ttexture.image = images;\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\r\n\t\t\tif ( Array.isArray( url ) ) {\r\n\t\r\n\t\t\t\tvar loaded = 0;\r\n\t\r\n\t\t\t\tvar loadTexture = function ( i ) {\r\n\t\r\n\t\t\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\t\r\n\t\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\t\r\n\t\t\t\t\t\timages[ i ] = {\r\n\t\t\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\t\tloaded += 1;\r\n\t\r\n\t\t\t\t\t\tif ( loaded === 6 ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n\t \t\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\t\r\n\t\t\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\t\r\n\t\t\t\t\tloadTexture( i );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\t\r\n\t\t\t\tloader.load( url, function ( buffer ) {\r\n\t\r\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\t\r\n\t\t\t\t\tif ( texDatas.isCubemap ) {\r\n\t\r\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\t\r\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\t\r\n\t\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\r\n\t\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\t\r\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\t\r\n\t\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/Material.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Material = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Material';\r\n\t\r\n\t\tthis.side = THREE.FrontSide;\r\n\t\r\n\t\tthis.opacity = 1;\r\n\t\tthis.transparent = false;\r\n\t\r\n\t\tthis.blending = THREE.NormalBlending;\r\n\t\r\n\t\tthis.blendSrc = THREE.SrcAlphaFactor;\r\n\t\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\r\n\t\tthis.blendEquation = THREE.AddEquation;\r\n\t\tthis.blendSrcAlpha = null;\r\n\t\tthis.blendDstAlpha = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\t\r\n\t\tthis.depthFunc = THREE.LessEqualDepth;\r\n\t\tthis.depthTest = true;\r\n\t\tthis.depthWrite = true;\r\n\t\r\n\t\tthis.colorWrite = true;\r\n\t\r\n\t\tthis.precision = null; // override the renderer's default precision for this material\r\n\t\r\n\t\tthis.polygonOffset = false;\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\t\r\n\t\tthis.alphaTest = 0;\r\n\t\r\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\r\n\t\r\n\t\tthis.visible = true;\r\n\t\r\n\t\tthis._needsUpdate = true;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Material.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Material,\r\n\t\r\n\t\tget needsUpdate () {\r\n\t\r\n\t\t\treturn this._needsUpdate;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset needsUpdate ( value ) {\r\n\t\r\n\t\t\tif ( value === true ) this.update();\r\n\t\r\n\t\t\tthis._needsUpdate = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetValues: function ( values ) {\r\n\t\r\n\t\t\tif ( values === undefined ) return;\r\n\t\r\n\t\t\tfor ( var key in values ) {\r\n\t\r\n\t\t\t\tvar newValue = values[ key ];\r\n\t\r\n\t\t\t\tif ( newValue === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar currentValue = this[ key ];\r\n\t\r\n\t\t\t\tif ( currentValue === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( currentValue instanceof THREE.Color ) {\r\n\t\r\n\t\t\t\t\tcurrentValue.set( newValue );\r\n\t\r\n\t\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\r\n\t\r\n\t\t\t\t\tcurrentValue.copy( newValue );\r\n\t\r\n\t\t\t\t} else if ( key === 'overdraw' ) {\r\n\t\r\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\r\n\t\t\t\t\tthis[ key ] = Number( newValue );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis[ key ] = newValue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function ( meta ) {\r\n\t\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'Material',\r\n\t\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\t// standard Material serialization\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\r\n\t\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\r\n\t\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\r\n\t\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\r\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\t\r\n\t\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.bumpMap instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.bumpScale = this.bumpScale;\r\n\t\r\n\t\t\t}\r\n\t\t\tif ( this.normalMap instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.normalScale = this.normalScale; // Removed for now, causes issue in editor ui.js\r\n\t\r\n\t\t\t}\r\n\t\t\tif ( this.displacementMap instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\t\tdata.displacementBias = this.displacementBias;\r\n\t\r\n\t\t\t}\r\n\t\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.envMap instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\t\r\n\t\t\tif ( this.vertexColors !== undefined && this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\r\n\t\t\tif ( this.shading !== undefined && this.shading !== THREE.SmoothShading ) data.shading = this.shading;\r\n\t\t\tif ( this.blending !== undefined && this.blending !== THREE.NormalBlending ) data.blending = this.blending;\r\n\t\t\tif ( this.side !== undefined && this.side !== THREE.FrontSide ) data.side = this.side;\r\n\t\r\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\r\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\r\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\t\r\n\t\t\treturn data;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.name = source.name;\r\n\t\r\n\t\t\tthis.side = source.side;\r\n\t\r\n\t\t\tthis.opacity = source.opacity;\r\n\t\t\tthis.transparent = source.transparent;\r\n\t\r\n\t\t\tthis.blending = source.blending;\r\n\t\r\n\t\t\tthis.blendSrc = source.blendSrc;\r\n\t\t\tthis.blendDst = source.blendDst;\r\n\t\t\tthis.blendEquation = source.blendEquation;\r\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\t\r\n\t\t\tthis.depthFunc = source.depthFunc;\r\n\t\t\tthis.depthTest = source.depthTest;\r\n\t\t\tthis.depthWrite = source.depthWrite;\r\n\t\r\n\t\t\tthis.precision = source.precision;\r\n\t\r\n\t\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\t\r\n\t\t\tthis.alphaTest = source.alphaTest;\r\n\t\r\n\t\t\tthis.overdraw = source.overdraw;\r\n\t\r\n\t\t\tthis.visible = source.visible;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdate: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'update' } );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Deprecated\r\n\t\r\n\t\tget wrapAround () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset wrapAround ( boolean ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget wrapRGB () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\r\n\t\t\treturn new THREE.Color();\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.Material.prototype );\r\n\t\r\n\tTHREE.MaterialIdCount = 0;\r\n\t\r\n\t// File:src/materials/LineBasicMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *  linecap: \"round\",\r\n\t *  linejoin: \"round\",\r\n\t *\r\n\t *  vertexColors: <bool>\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.LineBasicMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'LineBasicMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff );\r\n\t\r\n\t\tthis.linewidth = 1;\r\n\t\tthis.linecap = 'round';\r\n\t\tthis.linejoin = 'round';\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\r\n\t\r\n\tTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\tthis.linecap = source.linecap;\r\n\t\tthis.linejoin = source.linejoin;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/LineDashedMaterial.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *\r\n\t *  scale: <float>,\r\n\t *  dashSize: <float>,\r\n\t *  gapSize: <float>,\r\n\t *\r\n\t *  vertexColors: <bool>\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.LineDashedMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'LineDashedMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff );\r\n\t\r\n\t\tthis.linewidth = 1;\r\n\t\r\n\t\tthis.scale = 1;\r\n\t\tthis.dashSize = 3;\r\n\t\tthis.gapSize = 1;\r\n\t\r\n\t\tthis.vertexColors = false;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\r\n\t\r\n\tTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\t\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\r\n\t\tthis.scale = source.scale;\r\n\t\tthis.dashSize = source.dashSize;\r\n\t\tthis.gapSize = source.gapSize;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshBasicMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  shading: THREE.SmoothShading,\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshBasicMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'MeshBasicMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff ); // emissive\r\n\t\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\t\r\n\t\tthis.specularMap = null;\r\n\t\r\n\t\tthis.alphaMap = null;\r\n\t\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = THREE.MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.shading = THREE.SmoothShading;\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\r\n\t\r\n\tTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\r\n\t\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\t\r\n\t\tthis.specularMap = source.specularMap;\r\n\t\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\t\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\tthis.shading = source.shading;\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshLambertMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  emissive: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>,\r\n\t *\r\n\t *\tfog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshLambertMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'MeshLambertMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\t\tthis.emissive = new THREE.Color( 0x000000 );\r\n\t\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.specularMap = null;\r\n\t\r\n\t\tthis.alphaMap = null;\r\n\t\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = THREE.MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\r\n\t\r\n\tTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.specularMap = source.specularMap;\r\n\t\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\t\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshPhongMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  emissive: <hex>,\r\n\t *  specular: <hex>,\r\n\t *  shininess: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  shading: THREE.SmoothShading,\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>,\r\n\t *\r\n\t *\tfog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshPhongMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'MeshPhongMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\t\tthis.emissive = new THREE.Color( 0x000000 );\r\n\t\tthis.specular = new THREE.Color( 0x111111 );\r\n\t\tthis.shininess = 30;\r\n\t\r\n\t\tthis.metal = false;\r\n\t\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\t\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\t\r\n\t\tthis.emissiveMap = null;\r\n\t\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\t\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\t\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\t\r\n\t\tthis.specularMap = null;\r\n\t\r\n\t\tthis.alphaMap = null;\r\n\t\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = THREE.MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.shading = THREE.SmoothShading;\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\r\n\t\r\n\tTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.specular.copy( source.specular );\r\n\t\tthis.shininess = source.shininess;\r\n\t\r\n\t\tthis.metal = source.metal;\r\n\t\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\t\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\t\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\t\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\t\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\t\r\n\t\tthis.specularMap = source.specularMap;\r\n\t\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\t\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\tthis.shading = source.shading;\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshDepthMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshDepthMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'MeshDepthMaterial';\r\n\t\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\r\n\t\r\n\tTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshNormalMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  shading: THREE.FlatShading,\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshNormalMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this, parameters );\r\n\t\r\n\t\tthis.type = 'MeshNormalMaterial';\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\r\n\t\tthis.morphTargets = false;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\r\n\t\r\n\tTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MultiMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.MultiMaterial = function ( materials ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.type = 'MultiMaterial';\r\n\t\r\n\t\tthis.materials = materials instanceof Array ? materials : [];\r\n\t\r\n\t\tthis.visible = true;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MultiMaterial.prototype = {\r\n\t\r\n\t\tconstructor: THREE.MultiMaterial,\r\n\t\r\n\t\ttoJSON: function () {\r\n\t\r\n\t\t\tvar output = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.2,\r\n\t\t\t\t\ttype: 'material',\r\n\t\t\t\t\tgenerator: 'MaterialExporter'\r\n\t\t\t\t},\r\n\t\t\t\tuuid: this.uuid,\r\n\t\t\t\ttype: this.type,\r\n\t\t\t\tmaterials: []\r\n\t\t\t};\r\n\t\r\n\t\t\tfor ( var i = 0, l = this.materials.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\toutput.materials.push( this.materials[ i ].toJSON() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\toutput.visible = this.visible;\r\n\t\r\n\t\t\treturn output;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\tvar material = new this.constructor();\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\r\n\t\r\n\t\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tmaterial.visible = this.visible;\r\n\t\r\n\t\t\treturn material;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// backwards compatibility\r\n\t\r\n\tTHREE.MeshFaceMaterial = THREE.MultiMaterial;\r\n\t\r\n\t// File:src/materials/PointsMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  size: <float>,\r\n\t *  sizeAttenuation: <bool>,\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  vertexColors: <bool>,\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.PointsMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'PointsMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff );\r\n\t\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.size = 1;\r\n\t\tthis.sizeAttenuation = true;\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\r\n\t\r\n\tTHREE.PointsMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.size = source.size;\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// backwards compatibility\r\n\t\r\n\tTHREE.PointCloudMaterial = function ( parameters ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new THREE.PointsMaterial( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ParticleBasicMaterial = function ( parameters ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new THREE.PointsMaterial( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ParticleSystemMaterial = function ( parameters ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new THREE.PointsMaterial( parameters );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/ShaderMaterial.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  defines: { \"label\" : \"value\" },\r\n\t *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\r\n\t *\r\n\t *  fragmentShader: <string>,\r\n\t *  vertexShader: <string>,\r\n\t *\r\n\t *  shading: THREE.SmoothShading,\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  lights: <bool>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>,\r\n\t *\r\n\t *\tfog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.ShaderMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'ShaderMaterial';\r\n\t\r\n\t\tthis.defines = {};\r\n\t\tthis.uniforms = {};\r\n\t\r\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\r\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\r\n\t\r\n\t\tthis.shading = THREE.SmoothShading;\r\n\t\r\n\t\tthis.linewidth = 1;\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\r\n\t\tthis.fog = false; // set to use scene fog\r\n\t\r\n\t\tthis.lights = false; // set to use scene lights\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\r\n\t\r\n\t\tthis.skinning = false; // set to use skinning attribute streams\r\n\t\r\n\t\tthis.morphTargets = false; // set to use morph targets\r\n\t\tthis.morphNormals = false; // set to use morph normals\r\n\t\r\n\t\tthis.derivatives = false; // set to use derivatives\r\n\t\r\n\t\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\t\tthis.defaultAttributeValues = {\r\n\t\t\t'color': [ 1, 1, 1 ],\r\n\t\t\t'uv': [ 0, 0 ],\r\n\t\t\t'uv2': [ 0, 0 ]\r\n\t\t};\r\n\t\r\n\t\tthis.index0AttributeName = undefined;\r\n\t\r\n\t\tif ( parameters !== undefined ) {\r\n\t\r\n\t\t\tif ( parameters.attributes !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.setValues( parameters );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\r\n\t\r\n\tTHREE.ShaderMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.fragmentShader = source.fragmentShader;\r\n\t\tthis.vertexShader = source.vertexShader;\r\n\t\r\n\t\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\r\n\t\r\n\t\tthis.attributes = source.attributes;\r\n\t\tthis.defines = source.defines;\r\n\t\r\n\t\tthis.shading = source.shading;\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\tthis.lights = source.lights;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.skinning = source.skinning;\r\n\t\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\t\r\n\t\tthis.derivatives = source.derivatives;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.uniforms = this.uniforms;\r\n\t\tdata.attributes = this.attributes;\r\n\t\tdata.vertexShader = this.vertexShader;\r\n\t\tdata.fragmentShader = this.fragmentShader;\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/RawShaderMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.RawShaderMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.ShaderMaterial.call( this, parameters );\r\n\t\r\n\t\tthis.type = 'RawShaderMaterial';\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\r\n\tTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\r\n\t// File:src/materials/SpriteMaterial.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *\tuvOffset: new THREE.Vector2(),\r\n\t *\tuvScale: new THREE.Vector2(),\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.SpriteMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'SpriteMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff );\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.rotation = 0;\r\n\t\r\n\t\tthis.fog = false;\r\n\t\r\n\t\t// set parameters\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\r\n\t\r\n\tTHREE.SpriteMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.rotation = source.rotation;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/textures/Texture.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\t\r\n\tTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.sourceFile = '';\r\n\t\r\n\t\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\r\n\t\tthis.mipmaps = [];\r\n\t\r\n\t\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\r\n\t\r\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\r\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\r\n\t\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\r\n\t\r\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\t\r\n\t\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\r\n\t\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\r\n\t\r\n\t\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\t\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\t\r\n\t\tthis.generateMipmaps = true;\r\n\t\tthis.premultiplyAlpha = false;\r\n\t\tthis.flipY = true;\r\n\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\t\r\n\t\tthis.version = 0;\r\n\t\tthis.onUpdate = null;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Texture.DEFAULT_IMAGE = undefined;\r\n\tTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\r\n\t\r\n\tTHREE.Texture.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Texture,\r\n\t\r\n\t\tset needsUpdate ( value ) {\r\n\t\r\n\t\t\tif ( value === true ) this.version ++;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.image = source.image;\r\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\t\r\n\t\t\tthis.mapping = source.mapping;\r\n\t\r\n\t\t\tthis.wrapS = source.wrapS;\r\n\t\t\tthis.wrapT = source.wrapT;\r\n\t\r\n\t\t\tthis.magFilter = source.magFilter;\r\n\t\t\tthis.minFilter = source.minFilter;\r\n\t\r\n\t\t\tthis.anisotropy = source.anisotropy;\r\n\t\r\n\t\t\tthis.format = source.format;\r\n\t\t\tthis.type = source.type;\r\n\t\r\n\t\t\tthis.offset.copy( source.offset );\r\n\t\t\tthis.repeat.copy( source.repeat );\r\n\t\r\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\t\tthis.flipY = source.flipY;\r\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function ( meta ) {\r\n\t\r\n\t\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\r\n\t\r\n\t\t\t\treturn meta.textures[ this.uuid ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction getDataURL( image ) {\r\n\t\r\n\t\t\t\tvar canvas;\r\n\t\r\n\t\t\t\tif ( image.toDataURL !== undefined ) {\r\n\t\r\n\t\t\t\t\tcanvas = image;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tcanvas = document.createElement( 'canvas' );\r\n\t\t\t\t\tcanvas.width = image.width;\r\n\t\t\t\t\tcanvas.height = image.height;\r\n\t\r\n\t\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\t\r\n\t\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar output = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'Texture',\r\n\t\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tuuid: this.uuid,\r\n\t\t\t\tname: this.name,\r\n\t\r\n\t\t\t\tmapping: this.mapping,\r\n\t\r\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\t\r\n\t\t\t\tminFilter: this.minFilter,\r\n\t\t\t\tmagFilter: this.magFilter,\r\n\t\t\t\tanisotropy: this.anisotropy\r\n\t\t\t};\r\n\t\r\n\t\t\tif ( this.image !== undefined ) {\r\n\t\r\n\t\t\t\t// TODO: Move to THREE.Image\r\n\t\r\n\t\t\t\tvar image = this.image;\r\n\t\r\n\t\t\t\tif ( image.uuid === undefined ) {\r\n\t\r\n\t\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\r\n\t\r\n\t\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\t\turl: getDataURL( image )\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\toutput.image = image.uuid;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tmeta.textures[ this.uuid ] = output;\r\n\t\r\n\t\t\treturn output;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttransformUv: function ( uv ) {\r\n\t\r\n\t\t\tif ( this.mapping !== THREE.UVMapping )  return;\r\n\t\r\n\t\t\tuv.multiply( this.repeat );\r\n\t\t\tuv.add( this.offset );\r\n\t\r\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\t\r\n\t\t\t\tswitch ( this.wrapS ) {\r\n\t\r\n\t\t\t\t\tcase THREE.RepeatWrapping:\r\n\t\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\t\r\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\t\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\t\r\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\t\r\n\t\t\t\tswitch ( this.wrapT ) {\r\n\t\r\n\t\t\t\t\tcase THREE.RepeatWrapping:\r\n\t\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\t\r\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\t\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\t\r\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.flipY ) {\r\n\t\r\n\t\t\t\tuv.y = 1 - uv.y;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );\r\n\t\r\n\tTHREE.TextureIdCount = 0;\r\n\t\r\n\t// File:src/textures/CanvasTexture.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\t\r\n\t\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.needsUpdate = true;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\r\n\t\r\n\t// File:src/textures/CubeTexture.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\t\r\n\t\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\r\n\t\r\n\t\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.images = images;\r\n\t\tthis.flipY = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\r\n\t\r\n\tTHREE.CubeTexture.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Texture.prototype.copy.call( this, source );\r\n\t\t\r\n\t\tthis.images = source.images;\r\n\t\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t// File:src/textures/CompressedTexture.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\t\r\n\t\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.image = { width: width, height: height };\r\n\t\tthis.mipmaps = mipmaps;\r\n\t\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\t\r\n\t\tthis.flipY = false;\r\n\t\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\t\r\n\t\tthis.generateMipmaps = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\r\n\t\r\n\t// File:src/textures/DataTexture.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\t\r\n\t\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.image = { data: data, width: width, height: height };\r\n\t\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\r\n\t\t\r\n\t\tthis.flipY = false;\r\n\t\tthis.generateMipmaps  = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\r\n\t\r\n\t// File:src/textures/VideoTexture.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\t\r\n\t\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.generateMipmaps = false;\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tfunction update() {\r\n\t\r\n\t\t\trequestAnimationFrame( update );\r\n\t\r\n\t\t\tif ( video.readyState === video.HAVE_ENOUGH_DATA ) {\r\n\t\r\n\t\t\t\tscope.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tupdate();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\r\n\t\r\n\t// File:src/objects/Group.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Group = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Group';\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Group.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Group.prototype.constructor = THREE.Group;\r\n\t// File:src/objects/Points.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Points = function ( geometry, material ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Points';\r\n\t\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\t\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Points.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Points.prototype.constructor = THREE.Points;\r\n\t\r\n\tTHREE.Points.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tvar object = this;\r\n\t\t\tvar geometry = object.geometry;\r\n\t\t\tvar threshold = raycaster.params.Points.threshold;\r\n\t\r\n\t\t\tinverseMatrix.getInverse( this.matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\t\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tif ( ray.isIntersectionBox( geometry.boundingBox ) === false ) {\r\n\t\r\n\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\t\t\tvar position = new THREE.Vector3();\r\n\t\r\n\t\t\tfunction testPoint( point, index ) {\r\n\t\r\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\r\n\t\r\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\t\r\n\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\r\n\t\t\t\t\tintersectPoint.applyMatrix4( object.matrixWorld );\r\n\t\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\t\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\t\r\n\t\t\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\r\n\t\t\t\t\t\tindex: index,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tobject: object\r\n\t\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\t\tvar indices = index.array;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\r\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\r\n\t\r\n\t\t\t\t\t\ttestPoint( position, a );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\r\n\t\r\n\t\t\t\t\t\ttestPoint( position, i );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\ttestPoint( vertices[ i ], i );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.Points.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// Backwards compatibility\r\n\t\r\n\tTHREE.PointCloud = function ( geometry, material ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\t\treturn new THREE.Points( geometry, material );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ParticleSystem = function ( geometry, material ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\t\treturn new THREE.Points( geometry, material );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/Line.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Line = function ( geometry, material, mode ) {\r\n\t\r\n\t\tif ( mode === 1 ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\r\n\t\t\treturn new THREE.LineSegments( geometry, material );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Line';\r\n\t\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\t\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Line.prototype.constructor = THREE.Line;\r\n\t\r\n\tTHREE.Line.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tvar precision = raycaster.linePrecision;\r\n\t\t\tvar precisionSq = precision * precision;\r\n\t\r\n\t\t\tvar geometry = this.geometry;\r\n\t\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\t\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\t\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( this.matrixWorld );\r\n\t\r\n\t\t\tif ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {\r\n\t\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tinverseMatrix.getInverse( this.matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\t\r\n\t\t\tvar vStart = new THREE.Vector3();\r\n\t\t\tvar vEnd = new THREE.Vector3();\r\n\t\t\tvar interSegment = new THREE.Vector3();\r\n\t\t\tvar interRay = new THREE.Vector3();\r\n\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\r\n\t\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\t\tvar indices = index.array;\r\n\t\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\t\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\t\r\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\t\r\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\t\r\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\t\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\t\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\t\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\t\r\n\t\t\t\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\t\r\n\t\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\t\r\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\t\r\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\t\r\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\t\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\t\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\t\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\t\r\n\t\t\t\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\t\r\n\t\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar nbVertices = vertices.length;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\t\r\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\t\r\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\t\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\t\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\t\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\t\r\n\t\t\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\t\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.Line.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// DEPRECATED\r\n\t\r\n\tTHREE.LineStrip = 0;\r\n\tTHREE.LinePieces = 1;\r\n\t\r\n\t// File:src/objects/LineSegments.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.LineSegments = function ( geometry, material ) {\r\n\t\r\n\t\tTHREE.Line.call( this, geometry, material );\r\n\t\r\n\t\tthis.type = 'LineSegments';\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineSegments.prototype = Object.create( THREE.Line.prototype );\r\n\tTHREE.LineSegments.prototype.constructor = THREE.LineSegments;\r\n\t\r\n\t// File:src/objects/Mesh.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author jonobr1 / http://jonobr1.com/\r\n\t */\r\n\t\r\n\tTHREE.Mesh = function ( geometry, material ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Mesh';\r\n\t\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\t\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\t\r\n\t\tthis.updateMorphTargets();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Mesh.prototype.constructor = THREE.Mesh;\r\n\t\r\n\tTHREE.Mesh.prototype.updateMorphTargets = function () {\r\n\t\r\n\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\r\n\t\r\n\t\t\tthis.morphTargetBase = - 1;\r\n\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\tthis.morphTargetDictionary = {};\r\n\t\r\n\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\r\n\t\r\n\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\r\n\t\r\n\t\t\treturn this.morphTargetDictionary[ name ];\r\n\t\r\n\t\t}\r\n\t\r\n\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\r\n\t\r\n\t\treturn 0;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.Mesh.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\t\r\n\t\tvar vA = new THREE.Vector3();\r\n\t\tvar vB = new THREE.Vector3();\r\n\t\tvar vC = new THREE.Vector3();\r\n\t\r\n\t\tvar tempA = new THREE.Vector3();\r\n\t\tvar tempB = new THREE.Vector3();\r\n\t\tvar tempC = new THREE.Vector3();\r\n\t\r\n\t\tvar uvA = new THREE.Vector2();\r\n\t\tvar uvB = new THREE.Vector2();\r\n\t\tvar uvC = new THREE.Vector2();\r\n\t\r\n\t\tvar barycoord = new THREE.Vector3();\r\n\t\r\n\t\tvar intersectionPoint = new THREE.Vector3();\r\n\t\tvar intersectionPointWorld = new THREE.Vector3();\r\n\t\r\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\r\n\t\r\n\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\r\n\t\r\n\t\t\tuv1.multiplyScalar( barycoord.x );\r\n\t\t\tuv2.multiplyScalar( barycoord.y );\r\n\t\t\tuv3.multiplyScalar( barycoord.z );\r\n\t\r\n\t\t\tuv1.add( uv2 ).add( uv3 );\r\n\t\r\n\t\t\treturn uv1.clone();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ){\r\n\t\r\n\t\t\tvar intersect;\r\n\t\t\tvar material = object.material;\r\n\t\r\n\t\t\tif ( material.side === THREE.BackSide ) {\r\n\t\r\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( intersect === null ) return null;\r\n\t\r\n\t\t\tintersectionPointWorld.copy( point );\r\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\t\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\t\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\t\r\n\t\t\treturn {\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: intersectionPointWorld.clone(),\r\n\t\t\t\tobject: object\r\n\t\t\t};\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\r\n\t\r\n\t\t\tvA.fromArray( positions, a * 3 );\r\n\t\t\tvB.fromArray( positions, b * 3 );\r\n\t\t\tvC.fromArray( positions, c * 3 );\r\n\t\r\n\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\t\r\n\t\t\tif ( intersection ) {\r\n\t\r\n\t\t\t\tif ( uvs ) {\r\n\t\r\n\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\r\n\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\r\n\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\r\n\t\r\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\r\n\t\t\t\tintersection.faceIndex = a;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn intersection;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar material = this.material;\r\n\t\r\n\t\t\tif ( material === undefined ) return;\r\n\t\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\t\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\t\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\tif ( raycaster.ray.isIntersectionSphere( sphere ) === false ) return;\r\n\t\r\n\t\t\t// Check boundingBox before continuing\r\n\t\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\t\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tif ( ray.isIntersectionBox( geometry.boundingBox ) === false ) return;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar uvs, intersection;\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tvar a, b, c;\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\tif ( attributes.uv !== undefined ){\r\n\t\r\n\t\t\t\t\tuvs = attributes.uv.array;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\t\tvar indices = index.array;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\ta = indices[ i ];\r\n\t\t\t\t\t\tb = indices[ i + 1 ];\r\n\t\t\t\t\t\tc = indices[ i + 2 ];\r\n\t\r\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\t\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\t\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\r\n\t\r\n\t\t\t\t\t\ta = i / 3;\r\n\t\t\t\t\t\tb = a + 1;\r\n\t\t\t\t\t\tc = a + 2;\r\n\t\r\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\t\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\t\r\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tvar fvA, fvB, fvC;\r\n\t\t\t\tvar isFaceMaterial = material instanceof THREE.MeshFaceMaterial;\r\n\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\r\n\t\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\r\n\t\r\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\r\n\t\r\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\r\n\t\r\n\t\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\t\tfvC = vertices[ face.c ];\r\n\t\r\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\r\n\t\r\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\r\n\t\r\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\r\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\r\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\r\n\t\r\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\r\n\t\r\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\r\n\t\r\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\r\n\t\r\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\r\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\r\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tvA.add( fvA );\r\n\t\t\t\t\t\tvB.add( fvB );\r\n\t\t\t\t\t\tvC.add( fvC );\r\n\t\r\n\t\t\t\t\t\tfvA = vA;\r\n\t\t\t\t\t\tfvB = vB;\r\n\t\t\t\t\t\tfvC = vC;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\r\n\t\r\n\t\t\t\t\tif ( intersection ) {\r\n\t\r\n\t\t\t\t\t\tif ( uvs ) {\r\n\t\r\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\r\n\t\r\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.Mesh.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/Bone.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\t\r\n\tTHREE.Bone = function ( skin ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Bone';\r\n\t\r\n\t\tthis.skin = skin;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Bone.prototype.constructor = THREE.Bone;\r\n\t\r\n\tTHREE.Bone.prototype.copy = function ( source ) {\r\n\t\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\t\r\n\t\tthis.skin = source.skin;\r\n\t\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/Skeleton.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author michael guerrero / http://realitymeltdown.com\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\t\r\n\tTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\r\n\t\r\n\t\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\r\n\t\r\n\t\tthis.identityMatrix = new THREE.Matrix4();\r\n\t\r\n\t\t// copy the bone array\r\n\t\r\n\t\tbones = bones || [];\r\n\t\r\n\t\tthis.bones = bones.slice( 0 );\r\n\t\r\n\t\t// create a bone texture or an array of floats\r\n\t\r\n\t\tif ( this.useVertexTexture ) {\r\n\t\r\n\t\t\t// layout (1 matrix = 4 pixels)\r\n\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\t\r\n\t\t\t\r\n\t\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\r\n\t\t\tsize = Math.max( size, 4 );\r\n\t\r\n\t\t\tthis.boneTextureWidth = size;\r\n\t\t\tthis.boneTextureHeight = size;\r\n\t\r\n\t\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\r\n\t\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// use the supplied bone inverses or calculate the inverses\r\n\t\r\n\t\tif ( boneInverses === undefined ) {\r\n\t\r\n\t\t\tthis.calculateInverses();\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tif ( this.bones.length === boneInverses.length ) {\r\n\t\r\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\r\n\t\r\n\t\t\t\tthis.boneInverses = [];\r\n\t\r\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Skeleton.prototype.calculateInverses = function () {\r\n\t\r\n\t\tthis.boneInverses = [];\r\n\t\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\tvar inverse = new THREE.Matrix4();\r\n\t\r\n\t\t\tif ( this.bones[ b ] ) {\r\n\t\r\n\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.boneInverses.push( inverse );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Skeleton.prototype.pose = function () {\r\n\t\r\n\t\tvar bone;\r\n\t\r\n\t\t// recover the bind-time world matrices\r\n\t\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\tbone = this.bones[ b ];\r\n\t\r\n\t\t\tif ( bone ) {\r\n\t\r\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// compute the local matrices, positions, rotations and scales\r\n\t\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\tbone = this.bones[ b ];\r\n\t\r\n\t\t\tif ( bone ) {\r\n\t\r\n\t\t\t\tif ( bone.parent ) {\r\n\t\r\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Skeleton.prototype.update = ( function () {\r\n\t\r\n\t\tvar offsetMatrix = new THREE.Matrix4();\r\n\t\r\n\t\treturn function update() {\r\n\t\r\n\t\t\t// flatten bone matrices to array\r\n\t\r\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\t\t// compute the offset between the current and the original transform\r\n\t\r\n\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\r\n\t\r\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\r\n\t\t\t\toffsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.useVertexTexture ) {\r\n\t\r\n\t\t\t\tthis.boneTexture.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\tTHREE.Skeleton.prototype.clone = function () {\r\n\t\r\n\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/SkinnedMesh.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\t\r\n\tTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\r\n\t\r\n\t\tTHREE.Mesh.call( this, geometry, material );\r\n\t\r\n\t\tthis.type = 'SkinnedMesh';\r\n\t\r\n\t\tthis.bindMode = \"attached\";\r\n\t\tthis.bindMatrix = new THREE.Matrix4();\r\n\t\tthis.bindMatrixInverse = new THREE.Matrix4();\r\n\t\r\n\t\t// init bones\r\n\t\r\n\t\t// TODO: remove bone creation as there is no reason (other than\r\n\t\t// convenience) for THREE.SkinnedMesh to do this.\r\n\t\r\n\t\tvar bones = [];\r\n\t\r\n\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\t\r\n\t\t\tvar bone, gbone;\r\n\t\r\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\t\r\n\t\t\t\tgbone = this.geometry.bones[ b ];\r\n\t\r\n\t\t\t\tbone = new THREE.Bone( this );\r\n\t\t\t\tbones.push( bone );\r\n\t\r\n\t\t\t\tbone.name = gbone.name;\r\n\t\t\t\tbone.position.fromArray( gbone.pos );\r\n\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\r\n\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\t\r\n\t\t\t\tgbone = this.geometry.bones[ b ];\r\n\t\r\n\t\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null) {\r\n\t\r\n\t\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis.add( bones[ b ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.normalizeSkinWeights();\r\n\t\r\n\t\tthis.updateMatrixWorld( true );\r\n\t\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\tTHREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {\r\n\t\r\n\t\tthis.skeleton = skeleton;\r\n\t\r\n\t\tif ( bindMatrix === undefined ) {\r\n\t\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\t\t\t\r\n\t\t\tthis.skeleton.calculateInverses();\r\n\t\r\n\t\t\tbindMatrix = this.matrixWorld;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.pose = function () {\r\n\t\r\n\t\tthis.skeleton.pose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {\r\n\t\r\n\t\tif ( this.geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\t\r\n\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\r\n\t\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\t\r\n\t\t\t\t\tsw.multiplyScalar( scale );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tsw.set( 1 ); // this will be normalized by the shader anyway\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\t// skinning weights assumed to be normalized for THREE.BufferGeometry\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {\r\n\t\r\n\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\r\n\t\r\n\t\tif ( this.bindMode === \"attached\" ) {\r\n\t\r\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\t\r\n\t\t} else if ( this.bindMode === \"detached\" ) {\r\n\t\r\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.clone = function() {\r\n\t\r\n\t\treturn new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/LOD.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.LOD = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'LOD';\r\n\t\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tlevels: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: []\r\n\t\t\t},\r\n\t\t\tobjects: {\r\n\t\t\t\tget: function () {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\t\t\treturn this.levels;\r\n\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.LOD.prototype.constructor = THREE.LOD;\r\n\t\r\n\tTHREE.LOD.prototype.addLevel = function ( object, distance ) {\r\n\t\r\n\t\tif ( distance === undefined ) distance = 0;\r\n\t\r\n\t\tdistance = Math.abs( distance );\r\n\t\r\n\t\tvar levels = this.levels;\r\n\t\r\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\t\r\n\t\t\tif ( distance < levels[ l ].distance ) {\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\t\r\n\t\tthis.add( object );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LOD.prototype.getObjectForDistance = function ( distance ) {\r\n\t\r\n\t\tvar levels = this.levels;\r\n\t\r\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tif ( distance < levels[ i ].distance ) {\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn levels[ i - 1 ].object;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LOD.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar matrixPosition = new THREE.Vector3();\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\r\n\t\r\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.LOD.prototype.update = function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\r\n\t\treturn function update( camera ) {\r\n\t\r\n\t\t\tvar levels = this.levels;\r\n\t\r\n\t\t\tif ( levels.length > 1 ) {\r\n\t\r\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t\t\tvar distance = v1.distanceTo( v2 );\r\n\t\r\n\t\t\t\tlevels[ 0 ].object.visible = true;\r\n\t\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\t\r\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( ; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tlevels[ i ].object.visible = false;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.LOD.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\r\n\t\r\n\t\tvar levels = source.levels;\r\n\t\r\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar level = levels[ i ];\r\n\t\r\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LOD.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.object.levels = [];\r\n\t\r\n\t\tvar levels = this.levels;\r\n\t\r\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar level = levels[ i ];\r\n\t\r\n\t\t\tdata.object.levels.push( {\r\n\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\tdistance: level.distance\r\n\t\t\t} );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/Sprite.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Sprite = ( function () {\r\n\t\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );\r\n\t\tvar vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );\r\n\t\tvar uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\t\r\n\t\treturn function Sprite( material ) {\r\n\t\r\n\t\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\t\tthis.type = 'Sprite';\r\n\t\r\n\t\t\tthis.geometry = geometry;\r\n\t\t\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\tTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Sprite.prototype.constructor = THREE.Sprite;\r\n\t\r\n\tTHREE.Sprite.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar matrixPosition = new THREE.Vector3();\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\r\n\t\t\tvar guessSizeSq = this.scale.x * this.scale.y;\r\n\t\r\n\t\t\tif ( distanceSq > guessSizeSq ) {\r\n\t\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\tdistance: Math.sqrt( distanceSq ),\r\n\t\t\t\tpoint: this.position,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: this\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.Sprite.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor( this.material ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// Backwards compatibility\r\n\t\r\n\tTHREE.Particle = THREE.Sprite;\r\n\t\r\n\t// File:src/objects/LensFlare.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.lensFlares = [];\r\n\t\r\n\t\tthis.positionScreen = new THREE.Vector3();\r\n\t\tthis.customUpdateCallback = undefined;\r\n\t\r\n\t\tif ( texture !== undefined ) {\r\n\t\r\n\t\t\tthis.add( texture, size, distance, blending, color );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.LensFlare.prototype.constructor = THREE.LensFlare;\r\n\t\r\n\t\r\n\t/*\r\n\t * Add: adds another flare\r\n\t */\r\n\t\r\n\tTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\r\n\t\r\n\t\tif ( size === undefined ) size = - 1;\r\n\t\tif ( distance === undefined ) distance = 0;\r\n\t\tif ( opacity === undefined ) opacity = 1;\r\n\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\r\n\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\r\n\t\r\n\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\r\n\t\r\n\t\tthis.lensFlares.push( {\r\n\t\t\ttexture: texture,\t// THREE.Texture\r\n\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\r\n\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\r\n\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\r\n\t\t\tscale: 1, \t\t// scale\r\n\t\t\trotation: 0, \t\t// rotation\r\n\t\t\topacity: opacity,\t// opacity\r\n\t\t\tcolor: color,\t\t// color\r\n\t\t\tblending: blending\t// blending\r\n\t\t} );\r\n\t\r\n\t};\r\n\t\r\n\t/*\r\n\t * Update lens flares update positions on all flares based on the screen position\r\n\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n\t */\r\n\t\r\n\tTHREE.LensFlare.prototype.updateLensFlares = function () {\r\n\t\r\n\t\tvar f, fl = this.lensFlares.length;\r\n\t\tvar flare;\r\n\t\tvar vecX = - this.positionScreen.x * 2;\r\n\t\tvar vecY = - this.positionScreen.y * 2;\r\n\t\r\n\t\tfor ( f = 0; f < fl; f ++ ) {\r\n\t\r\n\t\t\tflare = this.lensFlares[ f ];\r\n\t\r\n\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\r\n\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\r\n\t\r\n\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\r\n\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LensFlare.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.positionScreen.copy( source.positionScreen );\r\n\t\tthis.customUpdateCallback = source.customUpdateCallback;\r\n\t\r\n\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/scenes/Scene.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Scene = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Scene';\r\n\t\r\n\t\tthis.fog = null;\r\n\t\tthis.overrideMaterial = null;\r\n\t\r\n\t\tthis.autoUpdate = true; // checked by the renderer\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Scene.prototype.constructor = THREE.Scene;\r\n\t\r\n\tTHREE.Scene.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\r\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\r\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\r\n\t\r\n\t\tthis.autoUpdate = source.autoUpdate;\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/scenes/Fog.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Fog = function ( color, near, far ) {\r\n\t\r\n\t\tthis.name = '';\r\n\t\r\n\t\tthis.color = new THREE.Color( color );\r\n\t\r\n\t\tthis.near = ( near !== undefined ) ? near : 1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Fog.prototype.clone = function () {\r\n\t\r\n\t\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/scenes/FogExp2.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.FogExp2 = function ( color, density ) {\r\n\t\r\n\t\tthis.name = '';\r\n\t\r\n\t\tthis.color = new THREE.Color( color );\r\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.FogExp2.prototype.clone = function () {\r\n\t\r\n\t\treturn new THREE.FogExp2( this.color.getHex(), this.density );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk.js\r\n\t\r\n\tTHREE.ShaderChunk = {};\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'alphamap_fragment'] = \"#ifdef USE_ALPHAMAP\\n\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'alphamap_pars_fragment'] = \"#ifdef USE_ALPHAMAP\\n\\n\tuniform sampler2D alphaMap;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'alphatest_fragment'] = \"#ifdef ALPHATEST\\n\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'aomap_fragment'] = \"#ifdef USE_AOMAP\\n\\n\ttotalAmbientLight *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'aomap_pars_fragment'] = \"#ifdef USE_AOMAP\\n\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'begin_vertex'] = \"\\nvec3 transformed = vec3( position );\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'beginnormal_vertex'] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'bumpmap_pars_fragment'] = \"#ifdef USE_BUMPMAP\\n\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\\n\\n\\n\tvec2 dHdxy_fwd() {\\n\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\n\t\treturn vec2( dBx, dBy );\\n\\n\t}\\n\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\n\t}\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'color_fragment'] = \"#ifdef USE_COLOR\\n\\n\tdiffuseColor.rgb *= vColor;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'color_pars_fragment'] = \"#ifdef USE_COLOR\\n\\n\tvarying vec3 vColor;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'color_pars_vertex'] = \"#ifdef USE_COLOR\\n\\n\tvarying vec3 vColor;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'color_vertex'] = \"#ifdef USE_COLOR\\n\\n\tvColor.xyz = color.xyz;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/common.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'common'] = \"#define PI 3.14159\\n#define PI2 6.28318\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\n\\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\\n\\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\\n\\n}\\n\\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\\n\\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\\n\\n}\\n\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\n\treturn - distance * planeNormal + point;\\n\\n}\\n\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n\\n}\\n\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n\\n}\\n\\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\\n\\n\tif ( decayExponent > 0.0 ) {\\n\\n\t  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\n\t}\\n\\n\treturn 1.0;\\n\\n}\\n\\nvec3 F_Schlick( in vec3 specularColor, in float dotLH ) {\\n\\n\\n\tfloat fresnel = exp2( ( -5.55437 * dotLH - 6.98316 ) * dotLH );\\n\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n\\n}\\n\\nfloat G_BlinnPhong_Implicit( /* in float dotNL, in float dotNV */ ) {\\n\\n\\n\treturn 0.25;\\n\\n}\\n\\nfloat D_BlinnPhong( in float shininess, in float dotNH ) {\\n\\n\\n\treturn ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n\\n}\\n\\nvec3 BRDF_BlinnPhong( in vec3 specularColor, in float shininess, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {\\n\\n\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( lightDir, halfDir ) );\\n\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\\n\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\n\treturn F * G * D;\\n\\n}\\n\\nvec3 inputToLinear( in vec3 a ) {\\n\\n\t#ifdef GAMMA_INPUT\\n\\n\t\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\\n\\n\t#else\\n\\n\t\treturn a;\\n\\n\t#endif\\n\\n}\\n\\nvec3 linearToOutput( in vec3 a ) {\\n\\n\t#ifdef GAMMA_OUTPUT\\n\\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\\n\\n\t#else\\n\\n\t\treturn a;\\n\\n\t#endif\\n\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'defaultnormal_vertex'] = \"#ifdef FLIP_SIDED\\n\\n\tobjectNormal = -objectNormal;\\n\\n#endif\\n\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'displacementmap_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'displacementmap_pars_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'emissivemap_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\n\temissiveColor.rgb = inputToLinear( emissiveColor.rgb );\\n\\n\ttotalEmissiveLight *= emissiveColor.rgb;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'emissivemap_pars_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\\n\tuniform sampler2D emissiveMap;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'envmap_fragment'] = \"#ifdef USE_ENVMAP\\n\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\n\t\t#else\\n\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\t\t#endif\\n\\n\t#else\\n\\n\t\tvec3 reflectVec = vReflect;\\n\\n\t#endif\\n\\n\t#ifdef DOUBLE_SIDED\\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t#else\\n\t\tfloat flipNormal = 1.0;\\n\t#endif\\n\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\\n\tenvColor.xyz = inputToLinear( envColor.xyz );\\n\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'envmap_pars_fragment'] = \"#ifdef USE_ENVMAP\\n\\n\tuniform float reflectivity;\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\t\tuniform float refractionRatio;\\n\\n\t#else\\n\\n\t\tvarying vec3 vReflect;\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'envmap_pars_vertex'] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\\n\\n\tvarying vec3 vReflect;\\n\\n\tuniform float refractionRatio;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'envmap_vertex'] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\\n\\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\n\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\n\t#else\\n\\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'fog_fragment'] = \"#ifdef USE_FOG\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\n\t#else\\n\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\n\t#endif\\n\\n\t#ifdef FOG_EXP2\\n\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\n\t#else\\n\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\n\t#endif\\n\t\\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'fog_pars_fragment'] = \"#ifdef USE_FOG\\n\\n\tuniform vec3 fogColor;\\n\\n\t#ifdef FOG_EXP2\\n\\n\t\tuniform float fogDensity;\\n\\n\t#else\\n\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/hemilight_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'hemilight_fragment'] = \"#if MAX_HEMI_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\\n\\n\t\tvec3 lightColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\\n\\n\t\ttotalAmbientLight += lightColor;\\n\\n\t}\\n\\n#endif\\n\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lightmap_fragment'] = \"#ifdef USE_LIGHTMAP\\n\\n\ttotalAmbientLight += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lightmap_pars_fragment'] = \"#ifdef USE_LIGHTMAP\\n\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_lambert_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_lambert_pars_vertex'] = \"#if MAX_DIR_LIGHTS > 0\\n\\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_lambert_vertex'] = \"vLightFront = vec3( 0.0 );\\n\\n#ifdef DOUBLE_SIDED\\n\\n\tvLightBack = vec3( 0.0 );\\n\\n#endif\\n\\nvec3 normal = normalize( transformedNormal );\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = pointLightColor[ i ];\\n\\n\t\tvec3 lVector = pointLightPosition[ i ] - mvPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\\n\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = spotLightColor[ i ];\\n\\n\t\tvec3 lightPosition = spotLightPosition[ i ];\\n\t\tvec3 lVector = lightPosition - mvPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\\n\\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\\n\\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\\n\\n\\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\\n\\n\t\t\tattenuation *= spotEffect;\\n\\n\\n\t\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\\n\\n\t\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\\n\\n\t\t\t#endif\\n\\n\t\t}\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = directionalLightColor[ i ];\\n\\n\t\tvec3 lightDir = directionalLightDirection[ i ];\\n\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tvLightFront += lightColor * saturate( dotProduct );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tvLightBack += lightColor * saturate( - dotProduct );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\\n\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\\n\\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tfloat hemiDiffuseWeightBack = - 0.5 * dotProduct + 0.5;\\n\\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_phong_fragment'] = \"vec3 viewDir = normalize( vViewPosition );\\n\\nvec3 totalDiffuseLight = vec3( 0.0 );\\nvec3 totalSpecularLight = vec3( 0.0 );\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = pointLightColor[ i ];\\n\\n\t\tvec3 lightPosition = pointLightPosition[ i ];\\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\\n\\n\\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\\n\\n\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\\n\\n\\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\\n\\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\\n\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = spotLightColor[ i ];\\n\\n\t\tvec3 lightPosition = spotLightPosition[ i ];\\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\\n\\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\\n\\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\\n\\n\\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\\n\\n\t\t\tattenuation *= spotEffect;\\n\\n\\n\t\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\\n\\n\t\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\\n\\n\\n\t\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\\n\\n\t\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\\n\\n\t\t}\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = directionalLightColor[ i ];\\n\\n\t\tvec3 lightDir = directionalLightDirection[ i ];\\n\\n\\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\\n\\n\t\ttotalDiffuseLight += lightColor * cosineTerm;\\n\\n\\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\\n\\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * cosineTerm;\\n\\n\t}\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_phong_pars_fragment'] = \"uniform vec3 ambientLightColor;\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\\n\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\\n\\n\tvarying vec3 vWorldPosition;\\n\\n#endif\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\tvarying vec3 vNormal;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_phong_pars_vertex'] = \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\\n\\n\tvarying vec3 vWorldPosition;\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_phong_vertex'] = \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\\n\\n\tvWorldPosition = worldPosition.xyz;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/linear_to_gamma_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'linear_to_gamma_fragment'] = \"\\n\toutgoingLight = linearToOutput( outgoingLight );\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'logdepthbuf_fragment'] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\tuniform float logDepthBufFC;\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvarying float vFragDepth;\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvarying float vFragDepth;\\n\\n\t#endif\\n\\n\tuniform float logDepthBufFC;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'logdepthbuf_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\\n#else\\n\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\n\t#endif\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'map_fragment'] = \"#ifdef USE_MAP\\n\\n\tvec4 texelColor = texture2D( map, vUv );\\n\\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\\n\\n\tdiffuseColor *= texelColor;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'map_pars_fragment'] = \"#ifdef USE_MAP\\n\\n\tuniform sampler2D map;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'map_particle_fragment'] = \"#ifdef USE_MAP\\n\\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'map_particle_pars_fragment'] = \"#ifdef USE_MAP\\n\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'morphnormal_vertex'] = \"#ifdef USE_MORPHNORMALS\\n\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'morphtarget_pars_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\\n\t#ifndef USE_MORPHNORMALS\\n\\n\tuniform float morphTargetInfluences[ 8 ];\\n\\n\t#else\\n\\n\tuniform float morphTargetInfluences[ 4 ];\\n\\n\t#endif\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'morphtarget_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\n\t#ifndef USE_MORPHNORMALS\\n\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/normal_phong_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'normal_phong_fragment'] = \"#ifndef FLAT_SHADED\\n\\n\tvec3 normal = normalize( vNormal );\\n\\n\t#ifdef DOUBLE_SIDED\\n\\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\\n\t#endif\\n\\n#else\\n\\n\tvec3 fdx = dFdx( vViewPosition );\\n\tvec3 fdy = dFdy( vViewPosition );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n\\n#endif\\n\\n#ifdef USE_NORMALMAP\\n\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\n#elif defined( USE_BUMPMAP )\\n\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n\\n#endif\\n\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'normalmap_pars_fragment'] = \"#ifdef USE_NORMALMAP\\n\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\\n\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\\n\t}\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'project_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n\\n#else\\n\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n\\n#endif\\n\\ngl_Position = projectionMatrix * mvPosition;\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'shadowmap_fragment'] = \"#ifdef USE_SHADOWMAP\\n\\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\\n\\n\t\tfloat texelSizeY =  1.0 / shadowMapSize[ i ].y;\\n\\n\t\tfloat shadow = 0.0;\\n\\n#if defined( POINT_LIGHT_SHADOWS )\\n\\n\t\tbool isPointLight = shadowDarkness[ i ] < 0.0;\\n\\n\t\tif ( isPointLight ) {\\n\\n\t\t\tfloat realShadowDarkness = abs( shadowDarkness[ i ] );\\n\\n\t\t\tvec3 lightToPosition = vShadowCoord[ i ].xyz;\\n\\n\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\t\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\t\tfloat dp = length( lightToPosition );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\\n\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tconst float Dr = 1.25;\\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tconst float Dr = 2.25;\\n\t#endif\\n\\n\t\t\tfloat os = Dr *  2.0 * texelSizeY;\\n\\n\t\t\tconst vec3 Gsd = vec3( - 1, 0, 1 );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\t\t\tshadow *= realShadowDarkness * ( 1.0 / 21.0 );\\n\\n\t#else \\n\t\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\t\tfloat dp = length( lightToPosition );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\t\t\tshadow *= realShadowDarkness;\\n\\n\t#endif\\n\\n\t\t} else {\\n\\n#endif \\n\t\t\tfloat texelSizeX =  1.0 / shadowMapSize[ i ].x;\\n\\n\t\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\\n\\n\\n\t\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\t\tbool inFrustum = all( inFrustumVec );\\n\\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\n\t\t\tbool frustumTest = all( frustumTestVec );\\n\\n\t\t\tif ( frustumTest ) {\\n\\n\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\n\\n\t\t\t\t/*\\n\t\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\\n\t\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\\n\t\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\\n\t\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\\n\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\\n\t\t\t\t\t\t\t\tshadow += 1.0;\\n\t\t\t\t\t}\\n\t\t\t\t\tshadow /= 9.0;\\n\t\t\t\t*/\\n\\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t\tconst float ShadowDelta = 1.0 / 9.0;\\n\\n\t\t\t\tfloat xPixelOffset = texelSizeX;\\n\t\t\t\tfloat yPixelOffset = texelSizeY;\\n\\n\t\t\t\tfloat dx0 = - 1.25 * xPixelOffset;\\n\t\t\t\tfloat dy0 = - 1.25 * yPixelOffset;\\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\\n\\n\t\t\t\tfloat fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tshadow *= shadowDarkness[ i ];\\n\\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t\tfloat xPixelOffset = texelSizeX;\\n\t\t\t\tfloat yPixelOffset = texelSizeY;\\n\\n\t\t\t\tfloat dx0 = - 1.0 * xPixelOffset;\\n\t\t\t\tfloat dy0 = - 1.0 * yPixelOffset;\\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\\n\\n\t\t\t\tmat3 shadowKernel;\\n\t\t\t\tmat3 depthKernel;\\n\\n\t\t\t\tdepthKernel[ 0 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\\n\t\t\t\tdepthKernel[ 0 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\\n\t\t\t\tdepthKernel[ 0 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\\n\t\t\t\tdepthKernel[ 1 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\\n\t\t\t\tdepthKernel[ 1 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\\n\t\t\t\tdepthKernel[ 1 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\\n\t\t\t\tdepthKernel[ 2 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\\n\t\t\t\tdepthKernel[ 2 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\\n\t\t\t\tdepthKernel[ 2 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\\n\\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\\n\t\t\t\tshadowKernel[ 0 ] = vec3( lessThan( depthKernel[ 0 ], shadowZ ) );\\n\t\t\t\tshadowKernel[ 0 ] *= vec3( 0.25 );\\n\\n\t\t\t\tshadowKernel[ 1 ] = vec3( lessThan( depthKernel[ 1 ], shadowZ ) );\\n\t\t\t\tshadowKernel[ 1 ] *= vec3( 0.25 );\\n\\n\t\t\t\tshadowKernel[ 2 ] = vec3( lessThan( depthKernel[ 2 ], shadowZ ) );\\n\t\t\t\tshadowKernel[ 2 ] *= vec3( 0.25 );\\n\\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[ i ].xy );\\n\\n\t\t\t\tshadowKernel[ 0 ] = mix( shadowKernel[ 1 ], shadowKernel[ 0 ], fractionalCoord.x );\\n\t\t\t\tshadowKernel[ 1 ] = mix( shadowKernel[ 2 ], shadowKernel[ 1 ], fractionalCoord.x );\\n\\n\t\t\t\tvec4 shadowValues;\\n\t\t\t\tshadowValues.x = mix( shadowKernel[ 0 ][ 1 ], shadowKernel[ 0 ][ 0 ], fractionalCoord.y );\\n\t\t\t\tshadowValues.y = mix( shadowKernel[ 0 ][ 2 ], shadowKernel[ 0 ][ 1 ], fractionalCoord.y );\\n\t\t\t\tshadowValues.z = mix( shadowKernel[ 1 ][ 1 ], shadowKernel[ 1 ][ 0 ], fractionalCoord.y );\\n\t\t\t\tshadowValues.w = mix( shadowKernel[ 1 ][ 2 ], shadowKernel[ 1 ][ 1 ], fractionalCoord.y );\\n\\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) ) * shadowDarkness[ i ];\\n\\n\t#else \\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\\n\\n\t\t\t\tif ( fDepth < shadowCoord.z )\\n\t\t\t\t\tshadow = shadowDarkness[ i ];\\n\\n\t#endif\\n\\n\t\t\t}\\n\\n#ifdef SHADOWMAP_DEBUG\\n\\n\t\t\tif ( inFrustum ) {\\n\\n\t\t\t\tif ( i == 0 ) {\\n\\n\t\t\t\t\toutgoingLight *= vec3( 1.0, 0.5, 0.0 );\\n\\n\t\t\t\t} else if ( i == 1 ) {\\n\\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 1.0, 0.8 );\\n\\n\t\t\t\t} else {\\n\\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 0.5, 1.0 );\\n\\n\t\t\t\t}\\n\\n\t\t\t}\\n\\n#endif\\n\\n#if defined( POINT_LIGHT_SHADOWS )\\n\\n\t\t}\\n\\n#endif\\n\\n\t\tshadowMask = shadowMask * vec3( 1.0 - shadow );\\n\\n\t}\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'shadowmap_pars_fragment'] = \"#ifdef USE_SHADOWMAP\\n\\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\\n\\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\\n\tuniform float shadowBias[ MAX_SHADOWS ];\\n\\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\\n\\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\\n\\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\t\tfloat depth = dot( rgba_depth, bit_shift );\\n\t\treturn depth;\\n\\n\t}\\n\\n\t#if defined(POINT_LIGHT_SHADOWS)\\n\\n\\n\t\tvoid adjustShadowValue1K( const float testDepth, const vec4 textureData, const float bias, inout float shadowValue ) {\\n\\n\t\t\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\t\t\tif ( testDepth >= dot( textureData, bitSh ) * 1000.0 + bias )\\n\t\t\t\tshadowValue += 1.0;\\n\\n\t\t}\\n\\n\\n\t\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\n\\n\t\t\tvec3 absV = abs( v );\\n\\n\\n\t\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\t\tabsV *= scaleToCube;\\n\\n\\n\t\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\n\\n\\n\t\t\tvec2 planar = v.xy;\\n\\n\t\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\t\tfloat almostOne = 1.0 - almostATexel;\\n\\n\t\t\tif ( absV.z >= almostOne ) {\\n\\n\t\t\t\tif ( v.z > 0.0 )\\n\t\t\t\t\tplanar.x = 4.0 - v.x;\\n\\n\t\t\t} else if ( absV.x >= almostOne ) {\\n\\n\t\t\t\tfloat signX = sign( v.x );\\n\t\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\\n\t\t\t} else if ( absV.y >= almostOne ) {\\n\\n\t\t\t\tfloat signY = sign( v.y );\\n\t\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\t\tplanar.y = v.z * signY - 2.0;\\n\\n\t\t\t}\\n\\n\\n\t\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\n\t\t}\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'shadowmap_pars_vertex'] = \"#ifdef USE_SHADOWMAP\\n\\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'shadowmap_vertex'] = \"#ifdef USE_SHADOWMAP\\n\\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\\n\\n\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\\n\\n\t}\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'skinbase_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'skinning_pars_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\\n\t#ifdef BONE_TEXTURE\\n\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\n\t\t\ty = dy * ( y + 0.5 );\\n\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\n\t\t\treturn bone;\\n\\n\t\t}\\n\\n\t#else\\n\\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\\n\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\\n\t\t}\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'skinning_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'skinnormal_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'specularmap_fragment'] = \"float specularStrength;\\n\\n#ifdef USE_SPECULARMAP\\n\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n\\n#else\\n\\n\tspecularStrength = 1.0;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'specularmap_pars_fragment'] = \"#ifdef USE_SPECULARMAP\\n\\n\tuniform sampler2D specularMap;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv2_pars_fragment'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\tvarying vec2 vUv2;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv2_pars_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv2_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\tvUv2 = uv2;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv_pars_fragment'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\\n\\n\tvarying vec2 vUv;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv_pars_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\\n\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\\n\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'worldpos_vertex'] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\n\t#ifdef USE_SKINNING\\n\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\\n\t#else\\n\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/UniformsUtils.js\r\n\t\r\n\t/**\r\n\t * Uniform Utilities\r\n\t */\r\n\t\r\n\tTHREE.UniformsUtils = {\r\n\t\r\n\t\tmerge: function ( uniforms ) {\r\n\t\r\n\t\t\tvar merged = {};\r\n\t\r\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\t\r\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\r\n\t\r\n\t\t\t\tfor ( var p in tmp ) {\r\n\t\r\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn merged;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function ( uniforms_src ) {\r\n\t\r\n\t\t\tvar uniforms_dst = {};\r\n\t\r\n\t\t\tfor ( var u in uniforms_src ) {\r\n\t\r\n\t\t\t\tuniforms_dst[ u ] = {};\r\n\t\r\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\r\n\t\r\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\r\n\t\r\n\t\t\t\t\tif ( parameter_src instanceof THREE.Color ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\t\r\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\r\n\t\r\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn uniforms_dst;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/shaders/UniformsLib.js\r\n\t\r\n\t/**\r\n\t * Uniforms library for shared webgl shaders\r\n\t */\r\n\t\r\n\tTHREE.UniformsLib = {\r\n\t\r\n\t\tcommon: {\r\n\t\r\n\t\t\t\"diffuse\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\t\r\n\t\t\t\"map\" : { type: \"t\", value: null },\r\n\t\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\t\r\n\t\t\t\"specularMap\" : { type: \"t\", value: null },\r\n\t\t\t\"alphaMap\" : { type: \"t\", value: null },\r\n\t\r\n\t\t\t\"envMap\" : { type: \"t\", value: null },\r\n\t\t\t\"flipEnvMap\" : { type: \"f\", value: - 1 },\r\n\t\t\t\"reflectivity\" : { type: \"f\", value: 1.0 },\r\n\t\t\t\"refractionRatio\" : { type: \"f\", value: 0.98 }\r\n\t\r\n\t\t},\r\n\t\r\n\t\taomap: {\r\n\t\r\n\t\t\t\"aoMap\" : { type: \"t\", value: null },\r\n\t\t\t\"aoMapIntensity\" : { type: \"f\", value: 1 },\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlightmap: {\r\n\t\r\n\t\t\t\"lightMap\" : { type: \"t\", value: null },\r\n\t\t\t\"lightMapIntensity\" : { type: \"f\", value: 1 },\r\n\t\r\n\t\t},\r\n\t\r\n\t\temissivemap: {\r\n\t\r\n\t\t\t\"emissiveMap\" : { type: \"t\", value: null },\r\n\t\r\n\t\t},\r\n\t\r\n\t\tbumpmap: {\r\n\t\r\n\t\t\t\"bumpMap\" : { type: \"t\", value: null },\r\n\t\t\t\"bumpScale\" : { type: \"f\", value: 1 }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalmap: {\r\n\t\r\n\t\t\t\"normalMap\" : { type: \"t\", value: null },\r\n\t\t\t\"normalScale\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdisplacementmap: {\r\n\t\r\n\t\t\t\"displacementMap\" : { type: \"t\", value: null },\r\n\t\t\t\"displacementScale\" : { type: \"f\", value: 1 },\r\n\t\t\t\"displacementBias\" : { type: \"f\", value: 0 }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfog : {\r\n\t\r\n\t\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlights: {\r\n\t\r\n\t\t\t\"ambientLightColor\" : { type: \"fv\", value: [] },\r\n\t\r\n\t\t\t\"directionalLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\t\"directionalLightColor\" : { type: \"fv\", value: [] },\r\n\t\r\n\t\t\t\"hemisphereLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\t\"hemisphereLightSkyColor\" : { type: \"fv\", value: [] },\r\n\t\t\t\"hemisphereLightGroundColor\" : { type: \"fv\", value: [] },\r\n\t\r\n\t\t\t\"pointLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\t\"pointLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\t\"pointLightDistance\" : { type: \"fv1\", value: [] },\r\n\t\t\t\"pointLightDecay\" : { type: \"fv1\", value: [] },\r\n\t\r\n\t\t\t\"spotLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\t\"spotLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\t\"spotLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\t\"spotLightDistance\" : { type: \"fv1\", value: [] },\r\n\t\t\t\"spotLightAngleCos\" : { type: \"fv1\", value: [] },\r\n\t\t\t\"spotLightExponent\" : { type: \"fv1\", value: [] },\r\n\t\t\t\"spotLightDecay\" : { type: \"fv1\", value: [] }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tpoints: {\r\n\t\r\n\t\t\t\"psColor\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\t\t\t\"size\" : { type: \"f\", value: 1.0 },\r\n\t\t\t\"scale\" : { type: \"f\", value: 1.0 },\r\n\t\t\t\"map\" : { type: \"t\", value: null },\r\n\t\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\t\r\n\t\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tshadowmap: {\r\n\t\r\n\t\t\t\"shadowMap\": { type: \"tv\", value: [] },\r\n\t\t\t\"shadowMapSize\": { type: \"v2v\", value: [] },\r\n\t\r\n\t\t\t\"shadowBias\" : { type: \"fv1\", value: [] },\r\n\t\t\t\"shadowDarkness\": { type: \"fv1\", value: [] },\r\n\t\r\n\t\t\t\"shadowMatrix\" : { type: \"m4v\", value: [] }\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib.js\r\n\t\r\n\t/**\r\n\t * Webgl Shader Library for three.js\r\n\t *\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t */\r\n\t\r\n\t\r\n\tTHREE.ShaderLib = {\r\n\t\r\n\t\t'basic': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"uv_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"uv2_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\r\n\t\t\t\t\"\t#ifdef USE_ENVMAP\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"beginnormal_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\t\r\n\t\t\t\t\"\t#endif\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\t\"uniform float opacity;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"aomap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\r\n\t\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\r\n\t\t\t\t\"\tvec3 totalAmbientLight = vec3( 1.0 );\", // hardwired\r\n\t\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"aomap_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\r\n\t\t\t\t\"\toutgoingLight = diffuseColor.rgb * totalAmbientLight * shadowMask;\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\t\r\n\t\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'lambert': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\t\r\n\t\t\t\t{\r\n\t\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) }\r\n\t\t\t\t}\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\"#define LAMBERT\",\r\n\t\r\n\t\t\t\t\"varying vec3 vLightFront;\",\r\n\t\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\t\r\n\t\t\t\t\"\tvarying vec3 vLightBack;\",\r\n\t\r\n\t\t\t\t\"#endif\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_lambert_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"uv_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"uv2_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"beginnormal_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"lights_lambert_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\t\"uniform vec3 emissive;\",\r\n\t\t\t\t\"uniform float opacity;\",\r\n\t\r\n\t\t\t\t\"uniform vec3 ambientLightColor;\",\r\n\t\r\n\t\t\t\t\"varying vec3 vLightFront;\",\r\n\t\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\t\r\n\t\t\t\t\"\tvarying vec3 vLightBack;\",\r\n\t\r\n\t\t\t\t\"#endif\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\t// outgoing light does not have an alpha, the surface does\r\n\t\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\r\n\t\t\t\t\"\tvec3 totalAmbientLight = ambientLightColor;\",\r\n\t\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\r\n\t\t\t\t\"\t#ifdef DOUBLE_SIDED\",\r\n\t\r\n\t\t\t\t\"\t\tif ( gl_FrontFacing )\",\r\n\t\t\t\t\"\t\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\",\r\n\t\t\t\t\"\t\telse\",\r\n\t\t\t\t\"\t\t\toutgoingLight += diffuseColor.rgb * ( vLightBack * shadowMask + totalAmbientLight ) + emissive;\",\r\n\t\r\n\t\t\t\t\"\t#else\",\r\n\t\r\n\t\t\t\t\"\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\",\r\n\t\r\n\t\t\t\t\"\t#endif\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\t\r\n\t\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'phong': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"lightmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"emissivemap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"bumpmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"displacementmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\t\r\n\t\t\t\t{\r\n\t\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\t\t\"shininess\": { type: \"f\", value: 30 }\r\n\t\t\t\t}\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\"#define PHONG\",\r\n\t\r\n\t\t\t\t\"varying vec3 vViewPosition;\",\r\n\t\r\n\t\t\t\t\"#ifndef FLAT_SHADED\",\r\n\t\r\n\t\t\t\t\"\tvarying vec3 vNormal;\",\r\n\t\r\n\t\t\t\t\"#endif\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"displacementmap_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"uv_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"uv2_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"beginnormal_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\t\r\n\t\t\t\t\"#ifndef FLAT_SHADED\", // Normal computed with derivatives when FLAT_SHADED\r\n\t\r\n\t\t\t\t\"\tvNormal = normalize( transformedNormal );\",\r\n\t\r\n\t\t\t\t\"#endif\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"displacementmap_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\r\n\t\t\t\t\"\tvViewPosition = - mvPosition.xyz;\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"#define PHONG\",\r\n\t\r\n\t\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\t\"uniform vec3 emissive;\",\r\n\t\t\t\t\"uniform vec3 specular;\",\r\n\t\t\t\t\"uniform float shininess;\",\r\n\t\t\t\t\"uniform float opacity;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"aomap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"emissivemap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"bumpmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"normalmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\r\n\t\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\r\n\t\t\t\t\"\tvec3 totalAmbientLight = ambientLightColor;\",\r\n\t\t\t\t\"\tvec3 totalEmissiveLight = emissive;\",\r\n\t\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"normal_phong_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"hemilight_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"aomap_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"emissivemap_fragment\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\r\n\t\t\t\t\t\"totalDiffuseLight *= shadowMask;\",\r\n\t\t\t\t\t\"totalSpecularLight *= shadowMask;\",\r\n\t\r\n\t\t\t\t\t\"#ifdef METAL\",\r\n\t\r\n\t\t\t\t\t\"\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) * specular + totalSpecularLight + totalEmissiveLight;\",\r\n\t\r\n\t\t\t\t\t\"#else\",\r\n\t\r\n\t\t\t\t\t\"\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) + totalSpecularLight + totalEmissiveLight;\",\r\n\t\r\n\t\t\t\t\t\"#endif\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\t\r\n\t\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'points': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"points\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\"uniform float size;\",\r\n\t\t\t\t\"uniform float scale;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\t\r\n\t\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\r\n\t\t\t\t\"\t#ifdef USE_SIZEATTENUATION\",\r\n\t\t\t\t\"\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\",\r\n\t\t\t\t\"\t#else\",\r\n\t\t\t\t\"\t\tgl_PointSize = size;\",\r\n\t\t\t\t\"\t#endif\",\r\n\t\r\n\t\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"uniform vec3 psColor;\",\r\n\t\t\t\t\"uniform float opacity;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_particle_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\r\n\t\t\t\t\"\tvec4 diffuseColor = vec4( psColor, opacity );\",\r\n\t\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"map_particle_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\r\n\t\t\t\t\"\toutgoingLight = diffuseColor.rgb * shadowMask;\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\t\r\n\t\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'dashed': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\r\n\t\t\t\t{\r\n\t\t\t\t\t\"scale\"    : { type: \"f\", value: 1 },\r\n\t\t\t\t\t\"dashSize\" : { type: \"f\", value: 1 },\r\n\t\t\t\t\t\"totalSize\": { type: \"f\", value: 2 }\r\n\t\t\t\t}\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\"uniform float scale;\",\r\n\t\t\t\t\"attribute float lineDistance;\",\r\n\t\r\n\t\t\t\t\"varying float vLineDistance;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\t\r\n\t\t\t\t\"\tvLineDistance = scale * lineDistance;\",\r\n\t\r\n\t\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\t\"uniform float opacity;\",\r\n\t\r\n\t\t\t\t\"uniform float dashSize;\",\r\n\t\t\t\t\"uniform float totalSize;\",\r\n\t\r\n\t\t\t\t\"varying float vLineDistance;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\",\r\n\t\r\n\t\t\t\t\"\t\tdiscard;\",\r\n\t\r\n\t\t\t\t\"\t}\",\r\n\t\r\n\t\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\r\n\t\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\r\n\t\t\t\t\"\toutgoingLight = diffuseColor.rgb;\", // simple shader\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\t\r\n\t\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'depth': {\r\n\t\r\n\t\t\tuniforms: {\r\n\t\r\n\t\t\t\t\"mNear\": { type: \"f\", value: 1.0 },\r\n\t\t\t\t\"mFar\" : { type: \"f\", value: 2000.0 },\r\n\t\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"uniform float mNear;\",\r\n\t\t\t\t\"uniform float mFar;\",\r\n\t\t\t\t\"uniform float opacity;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\r\n\t\t\t\t\"\t#ifdef USE_LOGDEPTHBUF_EXT\",\r\n\t\r\n\t\t\t\t\"\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\",\r\n\t\r\n\t\t\t\t\"\t#else\",\r\n\t\r\n\t\t\t\t\"\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\t\r\n\t\t\t\t\"\t#endif\",\r\n\t\r\n\t\t\t\t\"\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\",\r\n\t\t\t\t\"\tgl_FragColor = vec4( vec3( color ), opacity );\",\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'normal': {\r\n\t\r\n\t\t\tuniforms: {\r\n\t\r\n\t\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\"varying vec3 vNormal;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\"varying vec3 vNormal;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t/* -------------------------------------------------------------------------\r\n\t\t//\tCube map shader\r\n\t\t ------------------------------------------------------------------------- */\r\n\t\r\n\t\t'cube': {\r\n\t\r\n\t\t\tuniforms: { \"tCube\": { type: \"t\", value: null },\r\n\t\t\t\t\t\t\"tFlip\": { type: \"f\", value: - 1 } },\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tvWorldPosition = transformDirection( position, modelMatrix );\",\r\n\t\r\n\t\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"uniform samplerCube tCube;\",\r\n\t\t\t\t\"uniform float tFlip;\",\r\n\t\r\n\t\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t/* -------------------------------------------------------------------------\r\n\t\t//\tCube map shader\r\n\t\t ------------------------------------------------------------------------- */\r\n\t\r\n\t\t'equirect': {\r\n\t\r\n\t\t\tuniforms: { \"tEquirect\": { type: \"t\", value: null },\r\n\t\t\t\t\t\t\"tFlip\": { type: \"f\", value: - 1 } },\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\"\tvWorldPosition = transformDirection( position, modelMatrix );\",\r\n\t\r\n\t\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"uniform sampler2D tEquirect;\",\r\n\t\t\t\t\"uniform float tFlip;\",\r\n\t\r\n\t\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\t// \"\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\r\n\t\t\t\t\t\"vec3 direction = normalize( vWorldPosition );\",\r\n\t\t\t\t\t\"vec2 sampleUV;\",\r\n\t\t\t\t\t\"sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\",\r\n\t\t\t\t\t\"sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\r\n\t\t\t\t\t\"gl_FragColor = texture2D( tEquirect, sampleUV );\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t/* Depth encoding into RGBA texture\r\n\t\t *\r\n\t\t * based on SpiderGL shadow map example\r\n\t\t * http://spidergl.org/example.php?id=6\r\n\t\t *\r\n\t\t * originally from\r\n\t\t * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\r\n\t\t *\r\n\t\t * see also\r\n\t\t * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n\t\t */\r\n\t\r\n\t\t'depthRGBA': {\r\n\t\r\n\t\t\tuniforms: {},\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\t\r\n\t\t\t\t\"vec4 pack_depth( const in float depth ) {\",\r\n\t\r\n\t\t\t\t\"\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\r\n\t\t\t\t\"\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\r\n\t\t\t\t\"\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\", // \"\tvec4 res = fract( depth * bit_shift );\",\r\n\t\t\t\t\"\tres -= res.xxyz * bit_mask;\",\r\n\t\t\t\t\"\treturn res;\",\r\n\t\r\n\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\r\n\t\t\t\t\"\t#ifdef USE_LOGDEPTHBUF_EXT\",\r\n\t\r\n\t\t\t\t\"\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\",\r\n\t\r\n\t\t\t\t\"\t#else\",\r\n\t\r\n\t\t\t\t\"\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\",\r\n\t\r\n\t\t\t\t\"\t#endif\",\r\n\t\r\n\t\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );\",\r\n\t\t\t\t\t//\"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );\",\r\n\t\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( z );\",\r\n\t\t\t\t\t//\"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );\",\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t},\r\n\t\r\n\t\r\n\t\t'distanceRGBA': {\r\n\t\r\n\t\t\tuniforms: {\r\n\t\r\n\t\t\t\t\"lightPos\": { type: \"v3\", value: new THREE.Vector3( 0, 0, 0 ) }\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\"varying vec4 vWorldPosition;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\r\n\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\r\n\t\t\t\t\t\"vWorldPosition = worldPosition;\",\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\"uniform vec3 lightPos;\",\r\n\t\t\t\t\"varying vec4 vWorldPosition;\",\r\n\t\r\n\t\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\r\n\t\t\t\t\"vec4 pack1K ( float depth ) {\",\r\n\t\r\n\t\t\t\t\"   depth /= 1000.0;\",\r\n\t\t\t\t\"   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\r\n\t  \t\t\t\"\tconst vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\r\n\t   \t\t\t\"\tvec4 res = fract( depth * bitSh );\",\r\n\t   \t\t\t\"\tres -= res.xxyz * bitMsk;\",\r\n\t   \t\t\t\"\treturn res; \",\r\n\t\r\n\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\"float unpack1K ( vec4 color ) {\",\r\n\t\r\n\t\t\t\t\"\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\r\n\t\t\t\t\"\treturn dot( color, bitSh ) * 1000.0;\",\r\n\t\r\n\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\"void main () {\",\r\n\t\r\n\t\t\t\t\"\tgl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );\",\r\n\t\r\n\t\t\t\t\"}\"\r\n\t\r\n\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/WebGLRenderer.js\r\n\t\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\t\r\n\tTHREE.WebGLRenderer = function ( parameters ) {\r\n\t\r\n\t\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\r\n\t\r\n\t\tparameters = parameters || {};\r\n\t\r\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\r\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\t\r\n\t\t_width = _canvas.width,\r\n\t\t_height = _canvas.height,\r\n\t\r\n\t\tpixelRatio = 1,\r\n\t\r\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n\t\r\n\t\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t\t_clearAlpha = 0;\r\n\t\r\n\t\tvar lights = [];\r\n\t\r\n\t\tvar opaqueObjects = [];\r\n\t\tvar opaqueObjectsLastIndex = - 1;\r\n\t\tvar transparentObjects = [];\r\n\t\tvar transparentObjectsLastIndex = - 1;\r\n\t\r\n\t\tvar morphInfluences = new Float32Array( 8 );\r\n\t\r\n\t\r\n\t\tvar sprites = [];\r\n\t\tvar lensFlares = [];\r\n\t\r\n\t\t// public properties\r\n\t\r\n\t\tthis.domElement = _canvas;\r\n\t\tthis.context = null;\r\n\t\r\n\t\t// clearing\r\n\t\r\n\t\tthis.autoClear = true;\r\n\t\tthis.autoClearColor = true;\r\n\t\tthis.autoClearDepth = true;\r\n\t\tthis.autoClearStencil = true;\r\n\t\r\n\t\t// scene graph\r\n\t\r\n\t\tthis.sortObjects = true;\r\n\t\r\n\t\t// physically based shading\r\n\t\r\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\t\tthis.gammaInput = false;\r\n\t\tthis.gammaOutput = false;\r\n\t\r\n\t\t// morphs\r\n\t\r\n\t\tthis.maxMorphTargets = 8;\r\n\t\tthis.maxMorphNormals = 4;\r\n\t\r\n\t\t// flags\r\n\t\r\n\t\tthis.autoScaleCubemaps = true;\r\n\t\r\n\t\t// internal properties\r\n\t\r\n\t\tvar _this = this,\r\n\t\r\n\t\t// internal state cache\r\n\t\r\n\t\t_currentProgram = null,\r\n\t\t_currentFramebuffer = null,\r\n\t\t_currentMaterialId = - 1,\r\n\t\t_currentGeometryProgram = '',\r\n\t\t_currentCamera = null,\r\n\t\r\n\t\t_usedTextureUnits = 0,\r\n\t\r\n\t\t_viewportX = 0,\r\n\t\t_viewportY = 0,\r\n\t\t_viewportWidth = _canvas.width,\r\n\t\t_viewportHeight = _canvas.height,\r\n\t\t_currentWidth = 0,\r\n\t\t_currentHeight = 0,\r\n\t\r\n\t\t// frustum\r\n\t\r\n\t\t_frustum = new THREE.Frustum(),\r\n\t\r\n\t\t // camera matrices cache\r\n\t\r\n\t\t_projScreenMatrix = new THREE.Matrix4(),\r\n\t\r\n\t\t_vector3 = new THREE.Vector3(),\r\n\t\r\n\t\t// light arrays cache\r\n\t\r\n\t\t_direction = new THREE.Vector3(),\r\n\t\r\n\t\t_lightsNeedUpdate = true,\r\n\t\r\n\t\t_lights = {\r\n\t\r\n\t\t\tambient: [ 0, 0, 0 ],\r\n\t\t\tdirectional: { length: 0, colors: [], positions: [] },\r\n\t\t\tpoint: { length: 0, colors: [], positions: [], distances: [], decays: [] },\r\n\t\t\tspot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [], decays: [] },\r\n\t\t\themi: { length: 0, skyColors: [], groundColors: [], positions: [] }\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// info\r\n\t\r\n\t\t_infoMemory = {\r\n\t\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_infoRender = {\r\n\t\r\n\t\t\tcalls: 0,\r\n\t\t\tvertices: 0,\r\n\t\t\tfaces: 0,\r\n\t\t\tpoints: 0\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.info = {\r\n\t\r\n\t\t\trender: _infoRender,\r\n\t\t\tmemory: _infoMemory,\r\n\t\t\tprograms: null\r\n\t\r\n\t\t};\r\n\t\r\n\t\r\n\t\t// initialize\r\n\t\r\n\t\tvar _gl;\r\n\t\r\n\t\ttry {\r\n\t\r\n\t\t\tvar attributes = {\r\n\t\t\t\talpha: _alpha,\r\n\t\t\t\tdepth: _depth,\r\n\t\t\t\tstencil: _stencil,\r\n\t\t\t\tantialias: _antialias,\r\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\r\n\t\t\t};\r\n\t\r\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\r\n\t\r\n\t\t\tif ( _gl === null ) {\r\n\t\r\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\t\r\n\t\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthrow 'Error creating WebGL context.';\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\r\n\t\t} catch ( error ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar extensions = new THREE.WebGLExtensions( _gl );\r\n\t\r\n\t\textensions.get( 'OES_texture_float' );\r\n\t\textensions.get( 'OES_texture_float_linear' );\r\n\t\textensions.get( 'OES_texture_half_float' );\r\n\t\textensions.get( 'OES_texture_half_float_linear' );\r\n\t\textensions.get( 'OES_standard_derivatives' );\r\n\t\textensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\tif ( extensions.get( 'OES_element_index_uint' ) ) {\r\n\t\r\n\t\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\r\n\t\r\n\t\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\r\n\t\tvar properties = new THREE.WebGLProperties();\r\n\t\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\r\n\t\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\r\n\t\r\n\t\tthis.info.programs = programCache.programs;\r\n\t\r\n\t\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\r\n\t\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\r\n\t\r\n\t\t//\r\n\t\r\n\t\tfunction glClearColor( r, g, b, a ) {\r\n\t\r\n\t\t\tif ( _premultipliedAlpha === true ) {\r\n\t\r\n\t\t\t\tr *= a; g *= a; b *= a;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_gl.clearColor( r, g, b, a );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setDefaultGLState() {\r\n\t\r\n\t\t\tstate.init();\r\n\t\r\n\t\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\r\n\t\r\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction resetGLState() {\r\n\t\r\n\t\t\t_currentProgram = null;\r\n\t\t\t_currentCamera = null;\r\n\t\r\n\t\t\t_currentGeometryProgram = '';\r\n\t\t\t_currentMaterialId = - 1;\r\n\t\r\n\t\t\t_lightsNeedUpdate = true;\r\n\t\r\n\t\t\tstate.reset();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tsetDefaultGLState();\r\n\t\r\n\t\tthis.context = _gl;\r\n\t\tthis.capabilities = capabilities;\r\n\t\tthis.extensions = extensions;\r\n\t\tthis.state = state;\r\n\t\r\n\t\t// shadow map\r\n\t\r\n\t\tvar shadowMap = new THREE.WebGLShadowMap( this, lights, objects );\r\n\t\r\n\t\tthis.shadowMap = shadowMap;\r\n\t\r\n\t\r\n\t\t// Plugins\r\n\t\r\n\t\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\r\n\t\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\r\n\t\r\n\t\t// API\r\n\t\r\n\t\tthis.getContext = function () {\r\n\t\r\n\t\t\treturn _gl;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getContextAttributes = function () {\r\n\t\r\n\t\t\treturn _gl.getContextAttributes();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.forceContextLoss = function () {\r\n\t\r\n\t\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getMaxAnisotropy = ( function () {\r\n\t\r\n\t\t\tvar value;\r\n\t\r\n\t\t\treturn function getMaxAnisotropy() {\r\n\t\r\n\t\t\t\tif ( value !== undefined ) return value;\r\n\t\r\n\t\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\t\r\n\t\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\t\tvalue = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvalue = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn value;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} )();\r\n\t\r\n\t\tthis.getPrecision = function () {\r\n\t\r\n\t\t\treturn capabilities.precision;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getPixelRatio = function () {\r\n\t\r\n\t\t\treturn pixelRatio;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setPixelRatio = function ( value ) {\r\n\t\r\n\t\t\tif ( value !== undefined ) pixelRatio = value;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getSize = function () {\r\n\t\r\n\t\t\treturn {\r\n\t\t\t\twidth: _width,\r\n\t\t\t\theight: _height\r\n\t\t\t};\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setSize = function ( width, height, updateStyle ) {\r\n\t\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\t\r\n\t\t\t_canvas.width = width * pixelRatio;\r\n\t\t\t_canvas.height = height * pixelRatio;\r\n\t\r\n\t\t\tif ( updateStyle !== false ) {\r\n\t\r\n\t\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t\t_canvas.style.height = height + 'px';\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setViewport = function ( x, y, width, height ) {\r\n\t\r\n\t\t\t_viewportX = x * pixelRatio;\r\n\t\t\t_viewportY = y * pixelRatio;\r\n\t\r\n\t\t\t_viewportWidth = width * pixelRatio;\r\n\t\t\t_viewportHeight = height * pixelRatio;\r\n\t\r\n\t\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getViewport = function ( dimensions ) {\r\n\t\r\n\t\t\tdimensions.x = _viewportX / pixelRatio;\r\n\t\t\tdimensions.y = _viewportY / pixelRatio;\r\n\t\r\n\t\t\tdimensions.z = _viewportWidth / pixelRatio;\r\n\t\t\tdimensions.w = _viewportHeight / pixelRatio;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setScissor = function ( x, y, width, height ) {\r\n\t\r\n\t\t\t_gl.scissor(\r\n\t\t\t\tx * pixelRatio,\r\n\t\t\t\ty * pixelRatio,\r\n\t\t\t\twidth * pixelRatio,\r\n\t\t\t\theight * pixelRatio\r\n\t\t\t);\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.enableScissorTest = function ( boolean ) {\r\n\t\r\n\t\t\tstate.setScissorTest( boolean );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Clearing\r\n\t\r\n\t\tthis.getClearColor = function () {\r\n\t\r\n\t\t\treturn _clearColor;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setClearColor = function ( color, alpha ) {\r\n\t\r\n\t\t\t_clearColor.set( color );\r\n\t\r\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\r\n\t\r\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getClearAlpha = function () {\r\n\t\r\n\t\t\treturn _clearAlpha;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setClearAlpha = function ( alpha ) {\r\n\t\r\n\t\t\t_clearAlpha = alpha;\r\n\t\r\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clear = function ( color, depth, stencil ) {\r\n\t\r\n\t\t\tvar bits = 0;\r\n\t\r\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\t\r\n\t\t\t_gl.clear( bits );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearColor = function () {\r\n\t\r\n\t\t\t_gl.clear( _gl.COLOR_BUFFER_BIT );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearDepth = function () {\r\n\t\r\n\t\t\t_gl.clear( _gl.DEPTH_BUFFER_BIT );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearStencil = function () {\r\n\t\r\n\t\t\t_gl.clear( _gl.STENCIL_BUFFER_BIT );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\t\r\n\t\t\tthis.setRenderTarget( renderTarget );\r\n\t\t\tthis.clear( color, depth, stencil );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Reset\r\n\t\r\n\t\tthis.resetGLState = resetGLState;\r\n\t\r\n\t\tthis.dispose = function() {\r\n\t\r\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Events\r\n\t\r\n\t\tfunction onContextLost( event ) {\r\n\t\r\n\t\t\tevent.preventDefault();\r\n\t\r\n\t\t\tresetGLState();\r\n\t\t\tsetDefaultGLState();\r\n\t\r\n\t\t\tproperties.clear();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction onTextureDispose( event ) {\r\n\t\r\n\t\t\tvar texture = event.target;\r\n\t\r\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\t\r\n\t\t\tdeallocateTexture( texture );\r\n\t\r\n\t\t\t_infoMemory.textures --;\r\n\t\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction onRenderTargetDispose( event ) {\r\n\t\r\n\t\t\tvar renderTarget = event.target;\r\n\t\r\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\t\r\n\t\t\tdeallocateRenderTarget( renderTarget );\r\n\t\r\n\t\t\t_infoMemory.textures --;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction onMaterialDispose( event ) {\r\n\t\r\n\t\t\tvar material = event.target;\r\n\t\r\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\t\r\n\t\t\tdeallocateMaterial( material );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Buffer deallocation\r\n\t\r\n\t\tfunction deallocateTexture( texture ) {\r\n\t\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\t\r\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\r\n\t\r\n\t\t\t\t// cube texture\r\n\t\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// 2D texture\r\n\t\r\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\r\n\t\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// remove all webgl properties\r\n\t\t\tproperties.delete( texture );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction deallocateRenderTarget( renderTarget ) {\r\n\t\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\r\n\t\t\tif ( ! renderTarget || textureProperties.__webglTexture === undefined ) return;\r\n\t\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\t\r\n\t\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglRenderbuffer[ i ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglRenderbuffer );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tproperties.delete( renderTarget.texture );\r\n\t\t\tproperties.delete( renderTarget );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction deallocateMaterial( material ) {\r\n\t\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\t\r\n\t\t\tproperties.delete( material );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tfunction releaseMaterialProgramReference( material ) {\r\n\t\r\n\t\t\tvar programInfo = properties.get( material ).program;\r\n\t\r\n\t\t\tmaterial.program = undefined;\r\n\t\r\n\t\t\tif ( programInfo !== undefined ) {\r\n\t\r\n\t\t\t\tprogramCache.releaseProgram( programInfo );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Buffer rendering\r\n\t\r\n\t\tthis.renderBufferImmediate = function ( object, program, material ) {\r\n\t\r\n\t\t\tstate.initAttributes();\r\n\t\r\n\t\t\tvar buffers = properties.get( object );\r\n\t\r\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\r\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\r\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\r\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\r\n\t\r\n\t\t\tvar attributes = program.getAttributes();\r\n\t\r\n\t\t\tif ( object.hasPositions ) {\r\n\t\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\t\r\n\t\t\t\tstate.enableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object.hasNormals ) {\r\n\t\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\r\n\t\r\n\t\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.shading === THREE.FlatShading ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\r\n\t\r\n\t\t\t\t\t\tvar array = object.normalArray;\r\n\t\r\n\t\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\r\n\t\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\r\n\t\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\r\n\t\r\n\t\t\t\t\t\tarray[ i + 0 ] = nx;\r\n\t\t\t\t\t\tarray[ i + 1 ] = ny;\r\n\t\t\t\t\t\tarray[ i + 2 ] = nz;\r\n\t\r\n\t\t\t\t\t\tarray[ i + 3 ] = nx;\r\n\t\t\t\t\t\tarray[ i + 4 ] = ny;\r\n\t\t\t\t\t\tarray[ i + 5 ] = nz;\r\n\t\r\n\t\t\t\t\t\tarray[ i + 6 ] = nx;\r\n\t\t\t\t\t\tarray[ i + 7 ] = ny;\r\n\t\t\t\t\t\tarray[ i + 8 ] = nz;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\t\r\n\t\t\t\tstate.enableAttribute( attributes.normal );\r\n\t\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object.hasUvs && material.map ) {\r\n\t\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\t\r\n\t\t\t\tstate.enableAttribute( attributes.uv );\r\n\t\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\r\n\t\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\t\r\n\t\t\t\tstate.enableAttribute( attributes.color );\r\n\t\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.disableUnusedAttributes();\r\n\t\r\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\t\r\n\t\t\tobject.count = 0;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.renderBufferDirect = function ( camera, lights, fog, geometry, material, object, group ) {\r\n\t\r\n\t\t\tsetMaterial( material );\r\n\t\r\n\t\t\tvar program = setProgram( camera, lights, fog, material, object );\r\n\t\r\n\t\t\tvar updateBuffers = false;\r\n\t\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\r\n\t\r\n\t\t\tif ( geometryProgram !== _currentGeometryProgram ) {\r\n\t\r\n\t\t\t\t_currentGeometryProgram = geometryProgram;\r\n\t\t\t\tupdateBuffers = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// morph targets\r\n\t\r\n\t\t\tvar morphTargetInfluences = object.morphTargetInfluences;\r\n\t\r\n\t\t\tif ( morphTargetInfluences !== undefined ) {\r\n\t\r\n\t\t\t\tvar activeInfluences = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar influence = morphTargetInfluences[ i ];\r\n\t\t\t\t\tactiveInfluences.push( [ influence, i ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tactiveInfluences.sort( numericalSort );\r\n\t\r\n\t\t\t\tif ( activeInfluences.length > 8 ) {\r\n\t\r\n\t\t\t\t\tactiveInfluences.length = 8;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar influence = activeInfluences[ i ];\r\n\t\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\r\n\t\r\n\t\t\t\t\tif ( influence[ 0 ] !== 0 ) {\r\n\t\r\n\t\t\t\t\t\tvar index = influence[ 1 ];\r\n\t\r\n\t\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\r\n\t\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\r\n\t\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar uniforms = program.getUniforms();\r\n\t\r\n\t\t\t\tif ( uniforms.morphTargetInfluences !== null ) {\r\n\t\r\n\t\t\t\t\t_gl.uniform1fv( uniforms.morphTargetInfluences, morphInfluences );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tupdateBuffers = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar position = geometry.attributes.position;\r\n\t\r\n\t\t\tif ( material.wireframe === true ) {\r\n\t\r\n\t\t\t\tindex = objects.getWireframeAttribute( geometry );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar renderer;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\t\trenderer.setIndex( index );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\trenderer = bufferRenderer;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( updateBuffers ) {\r\n\t\r\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\r\n\t\r\n\t\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar dataStart = 0;\r\n\t\t\tvar dataCount = Infinity;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tdataCount = index.count\r\n\t\r\n\t\t\t} else if ( position !== undefined ) {\r\n\t\r\n\t\t\t\tdataCount = position.count;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar rangeStart = geometry.drawRange.start;\r\n\t\t\tvar rangeCount = geometry.drawRange.count;\r\n\t\r\n\t\t\tvar groupStart = group !== null ? group.start : 0;\r\n\t\t\tvar groupCount = group !== null ? group.count : Infinity;\r\n\t\r\n\t\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\r\n\t\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\t\r\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\t\r\n\t\t\t\tif ( material.wireframe === true ) {\r\n\t\r\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * pixelRatio );\r\n\t\t\t\t\trenderer.setMode( _gl.LINES );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry && geometry.maxInstancedCount > 0 ) {\r\n\t\r\n\t\t\t\t\trenderer.renderInstances( geometry );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\trenderer.render( drawStart, drawCount );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\t\r\n\t\t\t\tvar lineWidth = material.linewidth;\r\n\t\r\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\r\n\t\r\n\t\t\t\tstate.setLineWidth( lineWidth * pixelRatio );\r\n\t\r\n\t\t\t\tif ( object instanceof THREE.LineSegments ) {\r\n\t\r\n\t\t\t\t\trenderer.setMode( _gl.LINES );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\trenderer.render( drawStart, drawCount );\r\n\t\r\n\t\t\t} else if ( object instanceof THREE.Points ) {\r\n\t\r\n\t\t\t\trenderer.setMode( _gl.POINTS );\r\n\t\t\t\trenderer.render( drawStart, drawCount );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\r\n\t\r\n\t\t\tvar extension;\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\t\r\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\t\t\tif ( extension === null ) {\r\n\t\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( startIndex === undefined ) startIndex = 0;\r\n\t\r\n\t\t\tstate.initAttributes();\r\n\t\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\t\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\t\r\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\t\r\n\t\t\tfor ( var name in programAttributes ) {\r\n\t\r\n\t\t\t\tvar programAttribute = programAttributes[ name ];\r\n\t\r\n\t\t\t\tif ( programAttribute >= 0 ) {\r\n\t\r\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\t\r\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\t\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\r\n\t\r\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\t\r\n\t\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\r\n\t\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\r\n\t\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\t\r\n\t\t\t\t\t\tif ( value !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tswitch ( value.length ) {\r\n\t\r\n\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.disableUnusedAttributes();\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Sorting\r\n\t\r\n\t\tfunction numericalSort ( a, b ) {\r\n\t\r\n\t\t\treturn b[ 0 ] - a[ 0 ];\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction painterSortStable ( a, b ) {\r\n\t\r\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\t\r\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\t\r\n\t\t\t} else if ( a.material.id !== b.material.id ) {\r\n\t\r\n\t\t\t\treturn a.material.id - b.material.id;\r\n\t\r\n\t\t\t} else if ( a.z !== b.z ) {\r\n\t\r\n\t\t\t\treturn a.z - b.z;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn a.id - b.id;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction reversePainterSortStable ( a, b ) {\r\n\t\r\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\t\r\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\t\r\n\t\t\t} if ( a.z !== b.z ) {\r\n\t\r\n\t\t\t\treturn b.z - a.z;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn a.id - b.id;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Rendering\r\n\t\r\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\t\r\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar fog = scene.fog;\r\n\t\r\n\t\t\t// reset caching for this frame\r\n\t\r\n\t\t\t_currentGeometryProgram = '';\r\n\t\t\t_currentMaterialId = - 1;\r\n\t\t\t_currentCamera = null;\r\n\t\t\t_lightsNeedUpdate = true;\r\n\t\r\n\t\t\t// update scene graph\r\n\t\r\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\t\r\n\t\t\t// update camera matrices and frustum\r\n\t\r\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\t\r\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\t\r\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\t\r\n\t\t\tlights.length = 0;\r\n\t\r\n\t\t\topaqueObjectsLastIndex = - 1;\r\n\t\t\ttransparentObjectsLastIndex = - 1;\r\n\t\r\n\t\t\tsprites.length = 0;\r\n\t\t\tlensFlares.length = 0;\r\n\t\r\n\t\t\tprojectObject( scene, camera );\r\n\t\r\n\t\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\r\n\t\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\r\n\t\r\n\t\t\tif ( _this.sortObjects === true ) {\r\n\t\r\n\t\t\t\topaqueObjects.sort( painterSortStable );\r\n\t\t\t\ttransparentObjects.sort( reversePainterSortStable );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tshadowMap.render( scene );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\t_infoRender.calls = 0;\r\n\t\t\t_infoRender.vertices = 0;\r\n\t\t\t_infoRender.faces = 0;\r\n\t\t\t_infoRender.points = 0;\r\n\t\r\n\t\t\tthis.setRenderTarget( renderTarget );\r\n\t\r\n\t\t\tif ( this.autoClear || forceClear ) {\r\n\t\r\n\t\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( scene.overrideMaterial ) {\r\n\t\r\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\t\r\n\t\t\t\trenderObjects( opaqueObjects, camera, lights, fog, overrideMaterial );\r\n\t\t\t\trenderObjects( transparentObjects, camera, lights, fog, overrideMaterial );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// opaque pass (front-to-back order)\r\n\t\r\n\t\t\t\tstate.setBlending( THREE.NoBlending );\r\n\t\t\t\trenderObjects( opaqueObjects, camera, lights, fog );\r\n\t\r\n\t\t\t\t// transparent pass (back-to-front order)\r\n\t\r\n\t\t\t\trenderObjects( transparentObjects, camera, lights, fog );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// custom render plugins (post pass)\r\n\t\r\n\t\t\tspritePlugin.render( scene, camera );\r\n\t\t\tlensFlarePlugin.render( scene, camera, _currentWidth, _currentHeight );\r\n\t\r\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\t\r\n\t\t\tif ( renderTarget ) {\r\n\t\r\n\t\t\t\tvar texture = renderTarget.texture;\r\n\t\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\r\n\t\t\t\tif ( texture.generateMipmaps && isTargetPowerOfTwo && texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\r\n\t\r\n\t\t\t\t\t updateRenderTargetMipmap( renderTarget );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\t\r\n\t\t\tstate.setDepthTest( true );\r\n\t\t\tstate.setDepthWrite( true );\r\n\t\t\tstate.setColorWrite( true );\r\n\t\r\n\t\t\t// _gl.finish();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction pushRenderItem( object, geometry, material, z, group ) {\r\n\t\r\n\t\t\tvar array, index;\r\n\t\r\n\t\t\t// allocate the next position in the appropriate array\r\n\t\r\n\t\t\tif ( material.transparent ) {\r\n\t\r\n\t\t\t\tarray = transparentObjects;\r\n\t\t\t\tindex = ++ transparentObjectsLastIndex;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tarray = opaqueObjects;\r\n\t\t\t\tindex = ++ opaqueObjectsLastIndex;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// recycle existing render item or grow the array\r\n\t\r\n\t\t\tvar renderItem = array[ index ];\r\n\t\r\n\t\t\tif ( renderItem !== undefined ) {\r\n\t\r\n\t\t\t\trenderItem.id = object.id;\r\n\t\t\t\trenderItem.object = object;\r\n\t\t\t\trenderItem.geometry = geometry;\r\n\t\t\t\trenderItem.material = material;\r\n\t\t\t\trenderItem.z = _vector3.z;\r\n\t\t\t\trenderItem.group = group;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\trenderItem = {\r\n\t\t\t\t\tid: object.id,\r\n\t\t\t\t\tobject: object,\r\n\t\t\t\t\tgeometry: geometry,\r\n\t\t\t\t\tmaterial: material,\r\n\t\t\t\t\tz: _vector3.z,\r\n\t\t\t\t\tgroup: group\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\t// assert( index === array.length );\r\n\t\t\t\tarray.push( renderItem );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction projectObject( object, camera ) {\r\n\t\r\n\t\t\tif ( object.visible === false ) return;\r\n\t\r\n\t\t\tif ( ( object.channels.mask & camera.channels.mask ) !== 0 ) {\r\n\t\r\n\t\t\t\tif ( object instanceof THREE.Light ) {\r\n\t\r\n\t\t\t\t\tlights.push( object );\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\t\r\n\t\t\t\t\tsprites.push( object );\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\t\r\n\t\t\t\t\tlensFlares.push( object );\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\r\n\t\r\n\t\t\t\t\tif ( _this.sortObjects === true ) {\r\n\t\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\r\n\t\r\n\t\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\r\n\t\r\n\t\t\t\t\t\tobject.skeleton.update();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\t\r\n\t\t\t\t\t\tvar material = object.material;\r\n\t\r\n\t\t\t\t\t\tif ( material.visible === true ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( _this.sortObjects === true ) {\r\n\t\r\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\r\n\t\t\t\t\t\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\r\n\t\r\n\t\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\t\t\tvar materials = material.materials;\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\r\n\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar children = object.children;\r\n\t\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tprojectObject( children[ i ], camera );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction renderObjects( renderList, camera, lights, fog, overrideMaterial ) {\r\n\t\r\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar renderItem = renderList[ i ];\r\n\t\r\n\t\t\t\tvar object = renderItem.object;\r\n\t\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\t\tvar group = renderItem.group;\r\n\t\r\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\t\r\n\t\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\r\n\t\r\n\t\t\t\t\tsetMaterial( material );\r\n\t\r\n\t\t\t\t\tvar program = setProgram( camera, lights, fog, material, object );\r\n\t\r\n\t\t\t\t\t_currentGeometryProgram = '';\r\n\t\r\n\t\t\t\t\tobject.render( function ( object ) {\r\n\t\r\n\t\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\r\n\t\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t_this.renderBufferDirect( camera, lights, fog, geometry, material, object, group );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction initMaterial( material, lights, fog, object ) {\r\n\t\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\t\r\n\t\t\tvar parameters = programCache.getParameters( material, lights, fog, object );\r\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\r\n\t\r\n\t\t\tvar program = materialProperties.program;\r\n\t\t\tvar programChange = true;\r\n\t\r\n\t\t\tif ( program === undefined ) {\r\n\t\r\n\t\t\t\t// new material\r\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\t\r\n\t\t\t} else if ( program.code !== code ) {\r\n\t\r\n\t\t\t\t// changed glsl or parameters\r\n\t\t\t\treleaseMaterialProgramReference( material );\r\n\t\r\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\t\r\n\t\t\t\t// same glsl and uniform list\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// only rebuild uniform list\r\n\t\t\t\tprogramChange = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( programChange ) {\r\n\t\r\n\t\t\t\tif ( parameters.shaderID ) {\r\n\t\r\n\t\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\r\n\t\r\n\t\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\r\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\r\n\t\r\n\t\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\r\n\t\r\n\t\t\t\tmaterialProperties.program = program;\r\n\t\t\t\tmaterial.program = program;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar attributes = program.getAttributes();\r\n\t\r\n\t\t\tif ( material.morphTargets ) {\r\n\t\r\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\r\n\t\r\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.morphNormals ) {\r\n\t\r\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\t\r\n\t\t\t\tfor ( i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\r\n\t\r\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tmaterialProperties.uniformsList = [];\r\n\t\r\n\t\t\tvar uniformLocations = materialProperties.program.getUniforms();\r\n\t\r\n\t\t\tfor ( var u in materialProperties.__webglShader.uniforms ) {\r\n\t\r\n\t\t\t\tvar location = uniformLocations[ u ];\r\n\t\r\n\t\t\t\tif ( location ) {\r\n\t\r\n\t\t\t\t\tmaterialProperties.uniformsList.push( [ materialProperties.__webglShader.uniforms[ u ], location ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setMaterial( material ) {\r\n\t\r\n\t\t\tsetMaterialFaces( material );\r\n\t\r\n\t\t\tif ( material.transparent === true ) {\r\n\t\r\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tstate.setBlending( THREE.NoBlending );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.setDepthFunc( material.depthFunc );\r\n\t\t\tstate.setDepthTest( material.depthTest );\r\n\t\t\tstate.setDepthWrite( material.depthWrite );\r\n\t\t\tstate.setColorWrite( material.colorWrite );\r\n\t\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setMaterialFaces( material ) {\r\n\t\r\n\t\t\tmaterial.side !== THREE.DoubleSide ? state.enable( _gl.CULL_FACE ) : state.disable( _gl.CULL_FACE );\r\n\t\t\tstate.setFlipSided( material.side === THREE.BackSide );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setProgram( camera, lights, fog, material, object ) {\r\n\t\r\n\t\t\t_usedTextureUnits = 0;\r\n\t\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\t\r\n\t\t\tif ( material.needsUpdate || ! materialProperties.program ) {\r\n\t\r\n\t\t\t\tinitMaterial( material, lights, fog, object );\r\n\t\t\t\tmaterial.needsUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar refreshProgram = false;\r\n\t\t\tvar refreshMaterial = false;\r\n\t\t\tvar refreshLights = false;\r\n\t\r\n\t\t\tvar program = materialProperties.program,\r\n\t\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\r\n\t\r\n\t\t\tif ( program.id !== _currentProgram ) {\r\n\t\r\n\t\t\t\t_gl.useProgram( program.program );\r\n\t\t\t\t_currentProgram = program.id;\r\n\t\r\n\t\t\t\trefreshProgram = true;\r\n\t\t\t\trefreshMaterial = true;\r\n\t\t\t\trefreshLights = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.id !== _currentMaterialId ) {\r\n\t\r\n\t\t\t\tif ( _currentMaterialId === - 1 ) refreshLights = true;\r\n\t\t\t\t_currentMaterialId = material.id;\r\n\t\r\n\t\t\t\trefreshMaterial = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( refreshProgram || camera !== _currentCamera ) {\r\n\t\r\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\t\r\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\t\r\n\t\t\t\t\t_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\tif ( camera !== _currentCamera ) _currentCamera = camera;\r\n\t\r\n\t\t\t\t// load material specific uniforms\r\n\t\t\t\t// (shader material also gets them for the sake of genericity)\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t\t material.envMap ) {\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.cameraPosition !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t\t\t_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t\t material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t\t material.skinning ) {\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.viewMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t\t// not sure why, but otherwise weird things happen\r\n\t\r\n\t\t\tif ( material.skinning ) {\r\n\t\r\n\t\t\t\tif ( object.bindMatrix && p_uniforms.bindMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== undefined ) {\r\n\t\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( capabilities.floatVertexTextures && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.boneTexture !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tvar textureUnit = getTextureUnit();\r\n\t\r\n\t\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTexture, textureUnit );\r\n\t\t\t\t\t\t_this.setTexture( object.skeleton.boneTexture, textureUnit );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.boneTextureWidth !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.boneTextureHeight !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( object.skeleton && object.skeleton.boneMatrices ) {\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.boneGlobalMatrices !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( refreshMaterial ) {\r\n\t\r\n\t\t\t\t// refresh uniforms common to several materials\r\n\t\r\n\t\t\t\tif ( fog && material.fog ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t\t material.lights ) {\r\n\t\r\n\t\t\t\t\tif ( _lightsNeedUpdate ) {\r\n\t\r\n\t\t\t\t\t\trefreshLights = true;\r\n\t\t\t\t\t\tsetupLights( lights, camera );\r\n\t\t\t\t\t\t_lightsNeedUpdate = false;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( refreshLights ) {\r\n\t\r\n\t\t\t\t\t\trefreshUniformsLights( m_uniforms, _lights );\r\n\t\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, true );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, false );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshPhongMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// refresh single material specific uniforms\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsParticle( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\t\r\n\t\t\t\t\tm_uniforms.mNear.value = camera.near;\r\n\t\t\t\t\tm_uniforms.mFar.value = camera.far;\r\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\t\r\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( object.receiveShadow && ! material._shadowPass ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsShadow( m_uniforms, lights, camera );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// load common uniforms\r\n\t\r\n\t\t\t\tloadUniformsGeneric( materialProperties.uniformsList );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tloadUniformsMatrices( p_uniforms, object );\r\n\t\r\n\t\t\tif ( p_uniforms.modelMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn program;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Uniforms (refresh uniforms objects)\r\n\t\r\n\t\tfunction refreshUniformsCommon ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\t\r\n\t\t\tif ( material.emissive ) {\r\n\t\r\n\t\t\t\tuniforms.emissive.value = material.emissive;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tuniforms.map.value = material.map;\r\n\t\t\tuniforms.specularMap.value = material.specularMap;\r\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\t\r\n\t\t\tif ( material.aoMap ) {\r\n\t\r\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. specular map\r\n\t\t\t// 3. normal map\r\n\t\t\t// 4. bump map\r\n\t\t\t// 5. alpha map\r\n\t\t\t// 6. emissive map\r\n\t\r\n\t\t\tvar uvScaleMap;\r\n\t\r\n\t\t\tif ( material.map ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.map;\r\n\t\r\n\t\t\t} else if ( material.specularMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.specularMap;\r\n\t\r\n\t\t\t} else if ( material.displacementMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.displacementMap;\r\n\t\r\n\t\t\t} else if ( material.normalMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.normalMap;\r\n\t\r\n\t\t\t} else if ( material.bumpMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.bumpMap;\r\n\t\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\t\r\n\t\t\t} else if ( material.emissiveMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.emissiveMap;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\t\r\n\t\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) uvScaleMap = uvScaleMap.texture;\r\n\t\t\t\tvar offset = uvScaleMap.offset;\r\n\t\t\t\tvar repeat = uvScaleMap.repeat;\r\n\t\r\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tuniforms.envMap.value = material.envMap;\r\n\t\t\tuniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;\r\n\t\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsLine ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsDash ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\t\tuniforms.scale.value = material.scale;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsParticle ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.psColor.value = material.color;\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.size.value = material.size;\r\n\t\t\tuniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.\r\n\t\r\n\t\t\tuniforms.map.value = material.map;\r\n\t\r\n\t\t\tif ( material.map !== null ) {\r\n\t\r\n\t\t\t\tvar offset = material.map.offset;\r\n\t\t\t\tvar repeat = material.map.repeat;\r\n\t\r\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsFog ( uniforms, fog ) {\r\n\t\r\n\t\t\tuniforms.fogColor.value = fog.color;\r\n\t\r\n\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\t\r\n\t\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\t\tuniforms.fogFar.value = fog.far;\r\n\t\r\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\t\r\n\t\t\t\tuniforms.fogDensity.value = fog.density;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsPhong ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.specular.value = material.specular;\r\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\t\r\n\t\t\tif ( material.lightMap ) {\r\n\t\r\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.emissiveMap ) {\r\n\t\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.bumpMap ) {\r\n\t\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.normalMap ) {\r\n\t\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.displacementMap ) {\r\n\t\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsLights ( uniforms, lights ) {\r\n\t\r\n\t\t\tuniforms.ambientLightColor.value = lights.ambient;\r\n\t\r\n\t\t\tuniforms.directionalLightColor.value = lights.directional.colors;\r\n\t\t\tuniforms.directionalLightDirection.value = lights.directional.positions;\r\n\t\r\n\t\t\tuniforms.pointLightColor.value = lights.point.colors;\r\n\t\t\tuniforms.pointLightPosition.value = lights.point.positions;\r\n\t\t\tuniforms.pointLightDistance.value = lights.point.distances;\r\n\t\t\tuniforms.pointLightDecay.value = lights.point.decays;\r\n\t\r\n\t\t\tuniforms.spotLightColor.value = lights.spot.colors;\r\n\t\t\tuniforms.spotLightPosition.value = lights.spot.positions;\r\n\t\t\tuniforms.spotLightDistance.value = lights.spot.distances;\r\n\t\t\tuniforms.spotLightDirection.value = lights.spot.directions;\r\n\t\t\tuniforms.spotLightAngleCos.value = lights.spot.anglesCos;\r\n\t\t\tuniforms.spotLightExponent.value = lights.spot.exponents;\r\n\t\t\tuniforms.spotLightDecay.value = lights.spot.decays;\r\n\t\r\n\t\t\tuniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;\r\n\t\t\tuniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;\r\n\t\t\tuniforms.hemisphereLightDirection.value = lights.hemi.positions;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\t\r\n\t\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\r\n\t\r\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\t\r\n\t\t\tuniforms.directionalLightColor.needsUpdate = value;\r\n\t\t\tuniforms.directionalLightDirection.needsUpdate = value;\r\n\t\r\n\t\t\tuniforms.pointLightColor.needsUpdate = value;\r\n\t\t\tuniforms.pointLightPosition.needsUpdate = value;\r\n\t\t\tuniforms.pointLightDistance.needsUpdate = value;\r\n\t\t\tuniforms.pointLightDecay.needsUpdate = value;\r\n\t\r\n\t\t\tuniforms.spotLightColor.needsUpdate = value;\r\n\t\t\tuniforms.spotLightPosition.needsUpdate = value;\r\n\t\t\tuniforms.spotLightDistance.needsUpdate = value;\r\n\t\t\tuniforms.spotLightDirection.needsUpdate = value;\r\n\t\t\tuniforms.spotLightAngleCos.needsUpdate = value;\r\n\t\t\tuniforms.spotLightExponent.needsUpdate = value;\r\n\t\t\tuniforms.spotLightDecay.needsUpdate = value;\r\n\t\r\n\t\t\tuniforms.hemisphereLightSkyColor.needsUpdate = value;\r\n\t\t\tuniforms.hemisphereLightGroundColor.needsUpdate = value;\r\n\t\t\tuniforms.hemisphereLightDirection.needsUpdate = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsShadow ( uniforms, lights, camera ) {\r\n\t\r\n\t\t\tif ( uniforms.shadowMatrix ) {\r\n\t\r\n\t\t\t\tvar j = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar light = lights[ i ];\r\n\t\r\n\t\t\t\t\tif ( light.castShadow === true ) {\r\n\t\r\n\t\t\t\t\t\tif ( light instanceof THREE.PointLight || light instanceof THREE.SpotLight || light instanceof THREE.DirectionalLight ) {\r\n\t\r\n\t\t\t\t\t\t\tvar shadow = light.shadow;\r\n\t\r\n\t\t\t\t\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\t\r\n\t\t\t\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\r\n\t\t\t\t\t\t\t\t// equal to inverse of the light's position\r\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\r\n\t\t\t\t\t\t\t\tshadow.matrix.identity().setPosition( _vector3 );\r\n\t\r\n\t\t\t\t\t\t\t\t// for point lights we set the sign of the shadowDarkness uniform to be negative\r\n\t\t\t\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = - shadow.darkness;\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = shadow.darkness;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\tuniforms.shadowMatrix.value[ j ] = shadow.matrix;\r\n\t\t\t\t\t\t\tuniforms.shadowMap.value[ j ] = shadow.map;\r\n\t\t\t\t\t\t\tuniforms.shadowMapSize.value[ j ] = shadow.mapSize;\r\n\t\t\t\t\t\t\tuniforms.shadowBias.value[ j ] = shadow.bias;\r\n\t\r\n\t\t\t\t\t\t\tj ++;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Uniforms (load to GPU)\r\n\t\r\n\t\tfunction loadUniformsMatrices ( uniforms, object ) {\r\n\t\r\n\t\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object.modelViewMatrix.elements );\r\n\t\r\n\t\t\tif ( uniforms.normalMatrix ) {\r\n\t\r\n\t\t\t\t_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object.normalMatrix.elements );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getTextureUnit() {\r\n\t\r\n\t\t\tvar textureUnit = _usedTextureUnits;\r\n\t\r\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_usedTextureUnits += 1;\r\n\t\r\n\t\t\treturn textureUnit;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction loadUniformsGeneric ( uniforms ) {\r\n\t\r\n\t\t\tvar texture, textureUnit;\r\n\t\r\n\t\t\tfor ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\tvar uniform = uniforms[ j ][ 0 ];\r\n\t\r\n\t\t\t\t// needsUpdate property is not added to all uniforms.\r\n\t\t\t\tif ( uniform.needsUpdate === false ) continue;\r\n\t\r\n\t\t\t\tvar type = uniform.type;\r\n\t\t\t\tvar value = uniform.value;\r\n\t\t\t\tvar location = uniforms[ j ][ 1 ];\r\n\t\r\n\t\t\t\tswitch ( type ) {\r\n\t\r\n\t\t\t\t\tcase '1i':\r\n\t\t\t\t\t\t_gl.uniform1i( location, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '1f':\r\n\t\t\t\t\t\t_gl.uniform1f( location, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '2f':\r\n\t\t\t\t\t\t_gl.uniform2f( location, value[ 0 ], value[ 1 ] );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '3f':\r\n\t\t\t\t\t\t_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '4f':\r\n\t\t\t\t\t\t_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '1iv':\r\n\t\t\t\t\t\t_gl.uniform1iv( location, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '3iv':\r\n\t\t\t\t\t\t_gl.uniform3iv( location, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '1fv':\r\n\t\t\t\t\t\t_gl.uniform1fv( location, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '2fv':\r\n\t\t\t\t\t\t_gl.uniform2fv( location, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '3fv':\r\n\t\t\t\t\t\t_gl.uniform3fv( location, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase '4fv':\r\n\t\t\t\t\t\t_gl.uniform4fv( location, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Matrix3fv':\r\n\t\t\t\t\t\t_gl.uniformMatrix3fv( location, false, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Matrix4fv':\r\n\t\t\t\t\t\t_gl.uniformMatrix4fv( location, false, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t//\r\n\t\r\n\t\t\t\t\tcase 'i':\r\n\t\r\n\t\t\t\t\t\t// single integer\r\n\t\t\t\t\t\t_gl.uniform1i( location, value );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'f':\r\n\t\r\n\t\t\t\t\t\t// single float\r\n\t\t\t\t\t\t_gl.uniform1f( location, value );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'v2':\r\n\t\r\n\t\t\t\t\t\t// single THREE.Vector2\r\n\t\t\t\t\t\t_gl.uniform2f( location, value.x, value.y );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'v3':\r\n\t\r\n\t\t\t\t\t\t// single THREE.Vector3\r\n\t\t\t\t\t\t_gl.uniform3f( location, value.x, value.y, value.z );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'v4':\r\n\t\r\n\t\t\t\t\t\t// single THREE.Vector4\r\n\t\t\t\t\t\t_gl.uniform4f( location, value.x, value.y, value.z, value.w );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'c':\r\n\t\r\n\t\t\t\t\t\t// single THREE.Color\r\n\t\t\t\t\t\t_gl.uniform3f( location, value.r, value.g, value.b );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'iv1':\r\n\t\r\n\t\t\t\t\t\t// flat array of integers (JS or typed array)\r\n\t\t\t\t\t\t_gl.uniform1iv( location, value );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'iv':\r\n\t\r\n\t\t\t\t\t\t// flat array of integers with 3 x N size (JS or typed array)\r\n\t\t\t\t\t\t_gl.uniform3iv( location, value );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'fv1':\r\n\t\r\n\t\t\t\t\t\t// flat array of floats (JS or typed array)\r\n\t\t\t\t\t\t_gl.uniform1fv( location, value );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'fv':\r\n\t\r\n\t\t\t\t\t\t// flat array of floats with 3 x N size (JS or typed array)\r\n\t\t\t\t\t\t_gl.uniform3fv( location, value );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'v2v':\r\n\t\r\n\t\t\t\t\t\t// array of THREE.Vector2\r\n\t\r\n\t\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array = new Float32Array( 2 * value.length );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tfor ( var i = 0, i2 = 0, il = value.length; i < il; i ++, i2 += 2 ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array[ i2 + 0 ] = value[ i ].x;\r\n\t\t\t\t\t\t\tuniform._array[ i2 + 1 ] = value[ i ].y;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t_gl.uniform2fv( location, uniform._array );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'v3v':\r\n\t\r\n\t\t\t\t\t\t// array of THREE.Vector3\r\n\t\r\n\t\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array = new Float32Array( 3 * value.length );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tfor ( var i = 0, i3 = 0, il = value.length; i < il; i ++, i3 += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array[ i3 + 0 ] = value[ i ].x;\r\n\t\t\t\t\t\t\tuniform._array[ i3 + 1 ] = value[ i ].y;\r\n\t\t\t\t\t\t\tuniform._array[ i3 + 2 ] = value[ i ].z;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t_gl.uniform3fv( location, uniform._array );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'v4v':\r\n\t\r\n\t\t\t\t\t\t// array of THREE.Vector4\r\n\t\r\n\t\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array = new Float32Array( 4 * value.length );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tfor ( var i = 0, i4 = 0, il = value.length; i < il; i ++, i4 += 4 ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array[ i4 + 0 ] = value[ i ].x;\r\n\t\t\t\t\t\t\tuniform._array[ i4 + 1 ] = value[ i ].y;\r\n\t\t\t\t\t\t\tuniform._array[ i4 + 2 ] = value[ i ].z;\r\n\t\t\t\t\t\t\tuniform._array[ i4 + 3 ] = value[ i ].w;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t_gl.uniform4fv( location, uniform._array );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'm3':\r\n\t\r\n\t\t\t\t\t\t// single THREE.Matrix3\r\n\t\t\t\t\t\t_gl.uniformMatrix3fv( location, false, value.elements );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'm3v':\r\n\t\r\n\t\t\t\t\t\t// array of THREE.Matrix3\r\n\t\r\n\t\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array = new Float32Array( 9 * value.length );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 9 );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t_gl.uniformMatrix3fv( location, false, uniform._array );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'm4':\r\n\t\r\n\t\t\t\t\t\t// single THREE.Matrix4\r\n\t\t\t\t\t\t_gl.uniformMatrix4fv( location, false, value.elements );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'm4v':\r\n\t\r\n\t\t\t\t\t\t// array of THREE.Matrix4\r\n\t\r\n\t\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array = new Float32Array( 16 * value.length );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 16 );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 't':\r\n\t\r\n\t\t\t\t\t\t// single THREE.Texture (2d or cube)\r\n\t\r\n\t\t\t\t\t\ttexture = value;\r\n\t\t\t\t\t\ttextureUnit = getTextureUnit();\r\n\t\r\n\t\t\t\t\t\t_gl.uniform1i( location, textureUnit );\r\n\t\r\n\t\t\t\t\t\tif ( ! texture ) continue;\r\n\t\r\n\t\t\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\t\r\n\t\t\t\t\t\t\t// CompressedTexture can have Array in image :/\r\n\t\r\n\t\t\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\t\r\n\t\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\t\r\n\t\t\t\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\r\n\t\r\n\t\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\t\r\n\t\t\t\t\t\t\t_this.setTexture( texture.texture, textureUnit );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'tv':\r\n\t\r\n\t\t\t\t\t\t// array of THREE.Texture (2d or cube)\r\n\t\r\n\t\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array = [];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tuniform._array[ i ] = getTextureUnit();\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t_gl.uniform1iv( location, uniform._array );\r\n\t\r\n\t\t\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\ttexture = uniform.value[ i ];\r\n\t\t\t\t\t\t\ttextureUnit = uniform._array[ i ];\r\n\t\r\n\t\t\t\t\t\t\tif ( ! texture ) continue;\r\n\t\r\n\t\t\t\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t\t\t\t\t ( texture.image instanceof Array && texture.image.length === 6 ) ) {\r\n\t\r\n\t\t\t\t\t\t\t\t// CompressedTexture can have Array in image :/\r\n\t\r\n\t\t\t\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\t\r\n\t\t\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\t\r\n\t\t\t\t\t\t\t\t_this.setTexture( texture.texture, textureUnit );\r\n\t\r\n\t\t\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\t\r\n\t\t\t\t\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tdefault:\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setColorLinear( array, offset, color, intensity ) {\r\n\t\r\n\t\t\tarray[ offset + 0 ] = color.r * intensity;\r\n\t\t\tarray[ offset + 1 ] = color.g * intensity;\r\n\t\t\tarray[ offset + 2 ] = color.b * intensity;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setupLights ( lights, camera ) {\r\n\t\r\n\t\t\tvar l, ll, light,\r\n\t\t\tr = 0, g = 0, b = 0,\r\n\t\t\tcolor, skyColor, groundColor,\r\n\t\t\tintensity,\r\n\t\t\tdistance,\r\n\t\r\n\t\t\tzlights = _lights,\r\n\t\r\n\t\t\tviewMatrix = camera.matrixWorldInverse,\r\n\t\r\n\t\t\tdirColors = zlights.directional.colors,\r\n\t\t\tdirPositions = zlights.directional.positions,\r\n\t\r\n\t\t\tpointColors = zlights.point.colors,\r\n\t\t\tpointPositions = zlights.point.positions,\r\n\t\t\tpointDistances = zlights.point.distances,\r\n\t\t\tpointDecays = zlights.point.decays,\r\n\t\r\n\t\t\tspotColors = zlights.spot.colors,\r\n\t\t\tspotPositions = zlights.spot.positions,\r\n\t\t\tspotDistances = zlights.spot.distances,\r\n\t\t\tspotDirections = zlights.spot.directions,\r\n\t\t\tspotAnglesCos = zlights.spot.anglesCos,\r\n\t\t\tspotExponents = zlights.spot.exponents,\r\n\t\t\tspotDecays = zlights.spot.decays,\r\n\t\r\n\t\t\themiSkyColors = zlights.hemi.skyColors,\r\n\t\t\themiGroundColors = zlights.hemi.groundColors,\r\n\t\t\themiPositions = zlights.hemi.positions,\r\n\t\r\n\t\t\tdirLength = 0,\r\n\t\t\tpointLength = 0,\r\n\t\t\tspotLength = 0,\r\n\t\t\themiLength = 0,\r\n\t\r\n\t\t\tdirCount = 0,\r\n\t\t\tpointCount = 0,\r\n\t\t\tspotCount = 0,\r\n\t\t\themiCount = 0,\r\n\t\r\n\t\t\tdirOffset = 0,\r\n\t\t\tpointOffset = 0,\r\n\t\t\tspotOffset = 0,\r\n\t\t\themiOffset = 0;\r\n\t\r\n\t\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\t\r\n\t\t\t\tlight = lights[ l ];\r\n\t\r\n\t\t\t\tcolor = light.color;\r\n\t\t\t\tintensity = light.intensity;\r\n\t\t\t\tdistance = light.distance;\r\n\t\r\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\t\r\n\t\t\t\t\tif ( ! light.visible ) continue;\r\n\t\r\n\t\t\t\t\tr += color.r;\r\n\t\t\t\t\tg += color.g;\r\n\t\t\t\t\tb += color.b;\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\t\r\n\t\t\t\t\tdirCount += 1;\r\n\t\r\n\t\t\t\t\tif ( ! light.visible ) continue;\r\n\t\r\n\t\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\t_direction.sub( _vector3 );\r\n\t\t\t\t\t_direction.transformDirection( viewMatrix );\r\n\t\r\n\t\t\t\t\tdirOffset = dirLength * 3;\r\n\t\r\n\t\t\t\t\tdirPositions[ dirOffset + 0 ] = _direction.x;\r\n\t\t\t\t\tdirPositions[ dirOffset + 1 ] = _direction.y;\r\n\t\t\t\t\tdirPositions[ dirOffset + 2 ] = _direction.z;\r\n\t\r\n\t\t\t\t\tsetColorLinear( dirColors, dirOffset, color, intensity );\r\n\t\r\n\t\t\t\t\tdirLength += 1;\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\t\r\n\t\t\t\t\tpointCount += 1;\r\n\t\r\n\t\t\t\t\tif ( ! light.visible ) continue;\r\n\t\r\n\t\t\t\t\tpointOffset = pointLength * 3;\r\n\t\r\n\t\t\t\t\tsetColorLinear( pointColors, pointOffset, color, intensity );\r\n\t\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\t_vector3.applyMatrix4( viewMatrix );\r\n\t\r\n\t\t\t\t\tpointPositions[ pointOffset + 0 ] = _vector3.x;\r\n\t\t\t\t\tpointPositions[ pointOffset + 1 ] = _vector3.y;\r\n\t\t\t\t\tpointPositions[ pointOffset + 2 ] = _vector3.z;\r\n\t\r\n\t\t\t\t\t// distance is 0 if decay is 0, because there is no attenuation at all.\r\n\t\t\t\t\tpointDistances[ pointLength ] = distance;\r\n\t\t\t\t\tpointDecays[ pointLength ] = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\t\r\n\t\t\t\t\tpointLength += 1;\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.SpotLight ) {\r\n\t\r\n\t\t\t\t\tspotCount += 1;\r\n\t\r\n\t\t\t\t\tif ( ! light.visible ) continue;\r\n\t\r\n\t\t\t\t\tspotOffset = spotLength * 3;\r\n\t\r\n\t\t\t\t\tsetColorLinear( spotColors, spotOffset, color, intensity );\r\n\t\r\n\t\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\t_vector3.copy( _direction ).applyMatrix4( viewMatrix );\r\n\t\r\n\t\t\t\t\tspotPositions[ spotOffset + 0 ] = _vector3.x;\r\n\t\t\t\t\tspotPositions[ spotOffset + 1 ] = _vector3.y;\r\n\t\t\t\t\tspotPositions[ spotOffset + 2 ] = _vector3.z;\r\n\t\r\n\t\t\t\t\tspotDistances[ spotLength ] = distance;\r\n\t\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\t_direction.sub( _vector3 );\r\n\t\t\t\t\t_direction.transformDirection( viewMatrix );\r\n\t\r\n\t\t\t\t\tspotDirections[ spotOffset + 0 ] = _direction.x;\r\n\t\t\t\t\tspotDirections[ spotOffset + 1 ] = _direction.y;\r\n\t\t\t\t\tspotDirections[ spotOffset + 2 ] = _direction.z;\r\n\t\r\n\t\t\t\t\tspotAnglesCos[ spotLength ] = Math.cos( light.angle );\r\n\t\t\t\t\tspotExponents[ spotLength ] = light.exponent;\r\n\t\t\t\t\tspotDecays[ spotLength ] = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\t\r\n\t\t\t\t\tspotLength += 1;\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\r\n\t\r\n\t\t\t\t\themiCount += 1;\r\n\t\r\n\t\t\t\t\tif ( ! light.visible ) continue;\r\n\t\r\n\t\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\t_direction.transformDirection( viewMatrix );\r\n\t\r\n\t\t\t\t\themiOffset = hemiLength * 3;\r\n\t\r\n\t\t\t\t\themiPositions[ hemiOffset + 0 ] = _direction.x;\r\n\t\t\t\t\themiPositions[ hemiOffset + 1 ] = _direction.y;\r\n\t\t\t\t\themiPositions[ hemiOffset + 2 ] = _direction.z;\r\n\t\r\n\t\t\t\t\tskyColor = light.color;\r\n\t\t\t\t\tgroundColor = light.groundColor;\r\n\t\r\n\t\t\t\t\tsetColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );\r\n\t\t\t\t\tsetColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );\r\n\t\r\n\t\t\t\t\themiLength += 1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// null eventual remains from removed lights\r\n\t\t\t// (this is to avoid if in shader)\r\n\t\r\n\t\t\tfor ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;\r\n\t\t\tfor ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;\r\n\t\t\tfor ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;\r\n\t\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;\r\n\t\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;\r\n\t\r\n\t\t\tzlights.directional.length = dirLength;\r\n\t\t\tzlights.point.length = pointLength;\r\n\t\t\tzlights.spot.length = spotLength;\r\n\t\t\tzlights.hemi.length = hemiLength;\r\n\t\r\n\t\t\tzlights.ambient[ 0 ] = r;\r\n\t\t\tzlights.ambient[ 1 ] = g;\r\n\t\t\tzlights.ambient[ 2 ] = b;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// GL state setting\r\n\t\r\n\t\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\r\n\t\r\n\t\t\tif ( cullFace === THREE.CullFaceNone ) {\r\n\t\r\n\t\t\t\tstate.disable( _gl.CULL_FACE );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tif ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\r\n\t\r\n\t\t\t\t\t_gl.frontFace( _gl.CW );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\r\n\t\r\n\t\t\t\t\t_gl.cullFace( _gl.BACK );\r\n\t\r\n\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\r\n\t\r\n\t\t\t\t\t_gl.cullFace( _gl.FRONT );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t_gl.cullFace( _gl.FRONT_AND_BACK );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tstate.enable( _gl.CULL_FACE );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Textures\r\n\t\r\n\t\tfunction setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {\r\n\t\r\n\t\t\tvar extension;\r\n\t\r\n\t\t\tif ( isImagePowerOfTwo ) {\r\n\t\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\r\n\t\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\t\r\n\t\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\t\r\n\t\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\t\r\n\t\t\tif ( extension ) {\r\n\t\r\n\t\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\r\n\t\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\r\n\t\r\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\t\r\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );\r\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\t\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\t\r\n\t\t\t\ttextureProperties.__webglInit = true;\r\n\t\r\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\t\r\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\t\r\n\t\t\t\t_infoMemory.textures ++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\t\r\n\t\t\ttexture.image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\r\n\t\r\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false ) {\r\n\t\r\n\t\t\t\ttexture.image = makePowerOfTwo( texture.image );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar image = texture.image,\r\n\t\t\tisImagePowerOfTwo = isPowerOfTwo( image ),\r\n\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\tglType = paramThreeToGL( texture.type );\r\n\t\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );\r\n\t\r\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\t\r\n\t\t\tif ( texture instanceof THREE.DataTexture ) {\r\n\t\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\t\r\n\t\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\r\n\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\t\r\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\t\r\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// regular Texture (image, video, canvas)\r\n\t\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\t\r\n\t\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\r\n\t\t\ttextureProperties.__version = texture.version;\r\n\t\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setTexture = function ( texture, slot ) {\r\n\t\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\t\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\t\r\n\t\t\t\tvar image = texture.image;\r\n\t\r\n\t\t\t\tif ( image === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\r\n\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( image.complete === false ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\r\n\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction clampToMaxSize ( image, maxSize ) {\r\n\t\r\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\t\r\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t\t\t// premultiplied alpha.\r\n\t\r\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\r\n\t\r\n\t\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\r\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\r\n\t\r\n\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\t\r\n\t\t\t\treturn canvas;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn image;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction isPowerOfTwo( image ) {\r\n\t\r\n\t\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\t\r\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\r\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction makePowerOfTwo( image ) {\r\n\t\r\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\r\n\t\r\n\t\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\r\n\t\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\r\n\t\r\n\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\t\r\n\t\t\t\treturn canvas;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn image;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setCubeTexture ( texture, slot ) {\r\n\t\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\t\r\n\t\t\tif ( texture.image.length === 6 ) {\r\n\t\r\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\t\r\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\r\n\t\r\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\t\r\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\r\n\t\r\n\t\t\t\t\t\t_infoMemory.textures ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\t\r\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\r\n\t\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\r\n\t\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\r\n\t\r\n\t\t\t\t\tvar cubeImage = [];\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {\r\n\t\r\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\t\tisImagePowerOfTwo = isPowerOfTwo( image ),\r\n\t\t\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\t\t\tglType = paramThreeToGL( texture.type );\r\n\t\r\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( ! isCompressed ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( isDataTexture ) {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\t\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\t\r\n\t\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\t\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()\" );\r\n\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) {\r\n\t\r\n\t\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttextureProperties.__version = texture.version;\r\n\t\r\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setCubeTextureDynamic ( texture, slot ) {\r\n\t\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Render targets\r\n\t\r\n\t\tfunction setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {\r\n\t\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setupRenderBuffer ( renderbuffer, renderTarget ) {\r\n\t\r\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\t\r\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\t\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\t\r\n\t\t\t/* For some reason this is not working. Defaulting to RGBA4.\r\n\t\t\t} else if ( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\t\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );\r\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\t\t\t*/\r\n\t\r\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\t\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setRenderTarget = function ( renderTarget ) {\r\n\t\r\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\r\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\t\r\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\r\n\t\t\t\tif ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;\r\n\t\t\t\tif ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;\r\n\t\r\n\t\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\t\r\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\t\r\n\t\t\t\t_infoMemory.textures ++;\r\n\t\r\n\t\t\t\t// Setup texture, create render and frame buffers\r\n\t\r\n\t\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget ),\r\n\t\t\t\t\tglFormat = paramThreeToGL( renderTarget.texture.format ),\r\n\t\t\t\t\tglType = paramThreeToGL( renderTarget.texture.type );\r\n\t\r\n\t\t\t\tif ( isCube ) {\r\n\t\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\t\t\t\t\trenderTargetProperties.__webglRenderbuffer = [];\r\n\t\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\t\r\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\t\t\t\t\t\trenderTargetProperties.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\r\n\t\t\t\t\t\tsetupFrameBuffer( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\t\t\t\t\t\tsetupRenderBuffer( renderTargetProperties.__webglRenderbuffer[ i ], renderTarget );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\t\r\n\t\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\t\r\n\t\t\t\t\t\trenderTargetProperties.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\trenderTargetProperties.__webglRenderbuffer = _gl.createRenderbuffer();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\r\n\t\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\r\n\t\t\t\t\tsetupFrameBuffer( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );\r\n\t\r\n\t\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\t\r\n\t\t\t\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\t\r\n\t\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTargetProperties.__webglRenderbuffer );\r\n\t\r\n\t\t\t\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\t\r\n\t\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTargetProperties.__webglRenderbuffer );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tsetupRenderBuffer( renderTargetProperties.__webglRenderbuffer, renderTarget );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Release everything\r\n\t\r\n\t\t\t\tif ( isCube ) {\r\n\t\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar framebuffer, width, height, vx, vy;\r\n\t\r\n\t\t\tif ( renderTarget ) {\r\n\t\r\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\r\n\t\t\t\tif ( isCube ) {\r\n\t\r\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\twidth = renderTarget.width;\r\n\t\t\t\theight = renderTarget.height;\r\n\t\r\n\t\t\t\tvx = 0;\r\n\t\t\t\tvy = 0;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tframebuffer = null;\r\n\t\r\n\t\t\t\twidth = _viewportWidth;\r\n\t\t\t\theight = _viewportHeight;\r\n\t\r\n\t\t\t\tvx = _viewportX;\r\n\t\t\t\tvy = _viewportY;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\t\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t\t_gl.viewport( vx, vy, width, height );\r\n\t\r\n\t\t\t\t_currentFramebuffer = framebuffer;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( isCube ) {\r\n\t\r\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_currentWidth = width;\r\n\t\t\t_currentHeight = height;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\r\n\t\r\n\t\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\t\r\n\t\t\tif ( framebuffer ) {\r\n\t\r\n\t\t\t\tvar restore = false;\r\n\t\r\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\t\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\r\n\t\t\t\t\trestore = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ttry {\r\n\t\r\n\t\t\t\t\tvar texture = renderTarget.texture;\r\n\t\r\n\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat\r\n\t\t\t\t\t\t&& paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( texture.type !== THREE.UnsignedByteType\r\n\t\t\t\t\t\t&& paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE )\r\n\t\t\t\t\t\t&& ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) )\r\n\t\t\t\t\t\t&& ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\r\n\t\r\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} finally {\r\n\t\r\n\t\t\t\t\tif ( restore ) {\r\n\t\r\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\t\r\n\t\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\r\n\t\t\tvar texture = properties.get( renderTarget.texture ).__webglTexture;\r\n\t\r\n\t\t\tstate.bindTexture( target, texture );\r\n\t\t\t_gl.generateMipmap( target );\r\n\t\t\tstate.bindTexture( target, null );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Fallback filters for non-power-of-2 textures\r\n\t\r\n\t\tfunction filterFallback ( f ) {\r\n\t\r\n\t\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\r\n\t\r\n\t\t\t\treturn _gl.NEAREST;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn _gl.LINEAR;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Map three.js constants to WebGL constants\r\n\t\r\n\t\tfunction paramThreeToGL ( p ) {\r\n\t\r\n\t\t\tvar extension;\r\n\t\r\n\t\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\r\n\t\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\r\n\t\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\r\n\t\r\n\t\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\r\n\t\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\r\n\t\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\r\n\t\r\n\t\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\r\n\t\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\r\n\t\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\r\n\t\r\n\t\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\r\n\t\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\r\n\t\r\n\t\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\r\n\t\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\r\n\t\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\r\n\t\t\tif ( p === THREE.IntType ) return _gl.INT;\r\n\t\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\r\n\t\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\r\n\t\r\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\t\r\n\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\r\n\t\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\r\n\t\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\r\n\t\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\r\n\t\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\r\n\t\r\n\t\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\r\n\t\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\r\n\t\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\r\n\t\r\n\t\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\r\n\t\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\r\n\t\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\r\n\t\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\r\n\t\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\r\n\t\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\r\n\t\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\r\n\t\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\r\n\t\r\n\t\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\r\n\t\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\r\n\t\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\r\n\t\r\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\t\r\n\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\t\r\n\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n\t\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n\t\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\t\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textension = extensions.get( 'EXT_blend_minmax' );\r\n\t\r\n\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\r\n\t\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn 0;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// DEPRECATED\r\n\t\r\n\t\tthis.supportsFloatTextures = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\t\treturn extensions.get( 'OES_texture_float' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.supportsHalfFloatTextures = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\t\treturn extensions.get( 'OES_texture_half_float' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.supportsStandardDerivatives = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\t\treturn extensions.get( 'OES_standard_derivatives' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.supportsCompressedTextureS3TC = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\t\treturn extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.supportsCompressedTexturePVRTC = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\t\treturn extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.supportsBlendMinMax = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\t\treturn extensions.get( 'EXT_blend_minmax' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.supportsVertexTextures = function () {\r\n\t\r\n\t\t\treturn capabilities.vertexTextures;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.supportsInstancedArrays = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\t\treturn extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t//\r\n\t\r\n\t\tthis.initMaterial = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.addPrePlugin = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.addPostPlugin = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.updateShadowMap = function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tshadowMapEnabled: {\r\n\t\t\t\tget: function () {\r\n\t\r\n\t\t\t\t\treturn shadowMap.enabled;\r\n\t\r\n\t\t\t\t},\r\n\t\t\t\tset: function ( value ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\t\t\tshadowMap.enabled = value;\r\n\t\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tshadowMapType: {\r\n\t\t\t\tget: function () {\r\n\t\r\n\t\t\t\t\treturn shadowMap.type;\r\n\t\r\n\t\t\t\t},\r\n\t\t\t\tset: function ( value ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\t\t\tshadowMap.type = value;\r\n\t\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tshadowMapCullFace: {\r\n\t\t\t\tget: function () {\r\n\t\r\n\t\t\t\t\treturn shadowMap.cullFace;\r\n\t\r\n\t\t\t\t},\r\n\t\t\t\tset: function ( value ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\r\n\t\t\t\t\tshadowMap.cullFace = value;\r\n\t\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tshadowMapDebug: {\r\n\t\t\t\tget: function () {\r\n\t\r\n\t\t\t\t\treturn shadowMap.debug;\r\n\t\r\n\t\t\t\t},\r\n\t\t\t\tset: function ( value ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.' );\r\n\t\t\t\t\tshadowMap.debug = value;\r\n\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/WebGLRenderTarget.js\r\n\t\r\n\t/**\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.WebGLRenderTarget = function ( width, height, options ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\r\n\t\toptions = options || {};\r\n\t\r\n\t\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\r\n\t\r\n\t\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy );\r\n\t\r\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\t\r\n\t\tthis.shareDepthFrom = options.shareDepthFrom !== undefined ? options.shareDepthFrom : null;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.WebGLRenderTarget.prototype = {\r\n\t\r\n\t\tconstructor: THREE.WebGLRenderTarget,\r\n\t\r\n\t\tget wrapS() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\r\n\t\t\treturn this.texture.wrapS;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset wrapS( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\r\n\t\t\tthis.texture.wrapS = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget wrapT() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\r\n\t\t\treturn this.texture.wrapT;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset wrapT( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\r\n\t\t\tthis.texture.wrapT = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget magFilter() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\r\n\t\t\treturn this.texture.magFilter;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset magFilter( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\r\n\t\t\tthis.texture.magFilter = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget minFilter() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\r\n\t\t\treturn this.texture.minFilter;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset minFilter( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\r\n\t\t\tthis.texture.minFilter = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget anisotropy() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\r\n\t\t\treturn this.texture.anisotropy;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset anisotropy( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\r\n\t\t\tthis.texture.anisotropy = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget offset() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\r\n\t\t\treturn this.texture.offset;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset offset( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\r\n\t\t\tthis.texture.offset = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget repeat() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\r\n\t\t\treturn this.texture.repeat;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset repeat( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\r\n\t\t\tthis.texture.repeat = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget format() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\r\n\t\t\treturn this.texture.format;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset format( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\r\n\t\t\tthis.texture.format = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget type() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\r\n\t\t\treturn this.texture.type;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset type( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\r\n\t\t\tthis.texture.type = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget generateMipmaps() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\r\n\t\t\treturn this.texture.generateMipmaps;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset generateMipmaps( value ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\r\n\t\t\tthis.texture.generateMipmaps = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t//\r\n\t\r\n\t\tsetSize: function ( width, height ) {\r\n\t\r\n\t\t\tif ( this.width !== width || this.height !== height ) {\r\n\t\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\t\r\n\t\t\t\tthis.dispose();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\t\r\n\t\t\tthis.texture = source.texture.clone();\r\n\t\r\n\t\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\t\r\n\t\t\tthis.shareDepthFrom = source.shareDepthFrom;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );\r\n\t\r\n\t// File:src/renderers/WebGLRenderTargetCube.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com\r\n\t */\r\n\t\r\n\tTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\r\n\t\r\n\t\tTHREE.WebGLRenderTarget.call( this, width, height, options );\r\n\t\r\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\r\n\tTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\r\n\t\r\n\t// File:src/renderers/webgl/WebGLBufferRenderer.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\t\r\n\t\tvar mode;\r\n\t\r\n\t\tfunction setMode( value ) {\r\n\t\r\n\t\t\tmode = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction render( start, count ) {\r\n\t\r\n\t\t\t_gl.drawArrays( mode, start, count );\r\n\t\r\n\t\t\t_infoRender.calls ++;\r\n\t\t\t_infoRender.vertices += count;\r\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction renderInstances( geometry ) {\r\n\t\r\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\t\tif ( extension === null ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar position = geometry.attributes.position;\r\n\t\r\n\t\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, position.data.count, geometry.maxInstancedCount );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, position.count, geometry.maxInstancedCount );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\t\r\n\t\tvar mode;\r\n\t\r\n\t\tfunction setMode( value ) {\r\n\t\r\n\t\t\tmode = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar type, size;\r\n\t\r\n\t\tfunction setIndex( index ) {\r\n\t\r\n\t\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\r\n\t\r\n\t\t\t\ttype = _gl.UNSIGNED_INT;\r\n\t\t\t\tsize = 4;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttype = _gl.UNSIGNED_SHORT;\r\n\t\t\t\tsize = 2;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction render( start, count ) {\r\n\t\r\n\t\t\t_gl.drawElements( mode, count, type, start * size );\r\n\t\r\n\t\t\t_infoRender.calls ++;\r\n\t\t\t_infoRender.vertices += count;\r\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction renderInstances( geometry ) {\r\n\t\r\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\t\tif ( extension === null ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar index = geometry.index;\r\n\t\r\n\t\t\textension.drawElementsInstancedANGLE( mode, index.array.length, type, 0, geometry.maxInstancedCount );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.setIndex = setIndex;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLExtensions.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLExtensions = function ( gl ) {\r\n\t\r\n\t\tvar extensions = {};\r\n\t\r\n\t\tthis.get = function ( name ) {\r\n\t\r\n\t\t\tif ( extensions[ name ] !== undefined ) {\r\n\t\r\n\t\t\t\treturn extensions[ name ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar extension;\r\n\t\r\n\t\t\tswitch ( name ) {\r\n\t\r\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\textension = gl.getExtension( name );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( extension === null ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textensions[ name ] = extension;\r\n\t\r\n\t\t\treturn extension;\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLCapabilities.js\r\n\t\r\n\tTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\r\n\t\r\n\t\tfunction getMaxPrecision( precision ) {\r\n\t\r\n\t\t\tif ( precision === 'highp' ) {\r\n\t\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\t\r\n\t\t\t\t\treturn 'highp';\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tprecision = 'mediump';\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( precision === 'mediump' ) {\r\n\t\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\t\r\n\t\t\t\t\treturn 'mediump';\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn 'lowp';\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.getMaxPrecision = getMaxPrecision;\r\n\t\r\n\t\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp',\r\n\t\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\r\n\t\r\n\t\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\t\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\t\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\t\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\t\r\n\t\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\t\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\t\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n\t\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\t\r\n\t\tthis.vertexTextures = this.maxVertexTextures > 0;\r\n\t\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\r\n\t\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\r\n\t\r\n\t\tvar _maxPrecision = getMaxPrecision( this.precision );\r\n\t\r\n\t\tif ( _maxPrecision !== this.precision ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\r\n\t\t\tthis.precision = _maxPrecision;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tif ( this.logarithmicDepthBuffer ) {\r\n\t\r\n\t\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLGeometries.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLGeometries = function ( gl, properties, info ) {\r\n\t\r\n\t\tvar geometries = {};\r\n\t\r\n\t\tfunction get( object ) {\r\n\t\r\n\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\tif ( geometries[ geometry.id ] !== undefined ) {\r\n\t\r\n\t\t\t\treturn geometries[ geometry.id ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\t\r\n\t\t\tvar buffergeometry;\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tbuffergeometry = geometry;\r\n\t\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\t\r\n\t\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\r\n\t\r\n\t\t\tinfo.memory.geometries ++;\r\n\t\r\n\t\t\treturn buffergeometry;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction onGeometryDispose( event ) {\r\n\t\r\n\t\t\tvar geometry = event.target;\r\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\r\n\t\r\n\t\t\tdeleteAttributes( buffergeometry.attributes );\r\n\t\r\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\t\r\n\t\t\tdelete geometries[ geometry.id ];\r\n\t\r\n\t\t\tvar property = properties.get( geometry );\r\n\t\t\tif ( property.wireframe ) deleteAttribute( property.wireframe );\r\n\t\r\n\t\t\tinfo.memory.geometries --;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getAttributeBuffer( attribute ) {\r\n\t\r\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn properties.get( attribute ).__webglBuffer;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction deleteAttribute( attribute ) {\r\n\t\r\n\t\t\tvar buffer = getAttributeBuffer( attribute );\r\n\t\r\n\t\t\tif ( buffer !== undefined ) {\r\n\t\r\n\t\t\t\tgl.deleteBuffer( buffer );\r\n\t\t\t\tremoveAttributeBuffer( attribute );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction deleteAttributes( attributes ) {\r\n\t\r\n\t\t\tfor ( var name in attributes ) {\r\n\t\r\n\t\t\t\tdeleteAttribute( attributes[ name ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction removeAttributeBuffer( attribute ) {\r\n\t\r\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\tproperties.delete( attribute.data );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tproperties.delete( attribute );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.get = get;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLObjects.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLObjects = function ( gl, properties, info ) {\r\n\t\r\n\t\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\r\n\t\r\n\t\t//\r\n\t\r\n\t\tfunction update( object ) {\r\n\t\r\n\t\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\r\n\t\r\n\t\t\tvar geometry = geometries.get( object );\r\n\t\r\n\t\t\tif ( object.geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tgeometry.updateFromObject( object );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var name in attributes ) {\r\n\t\r\n\t\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// morph targets\r\n\t\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\r\n\t\t\tfor ( var name in morphAttributes ) {\r\n\t\r\n\t\t\t\tvar array = morphAttributes[ name ];\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn geometry;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction updateAttribute( attribute, bufferType ) {\r\n\t\r\n\t\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\r\n\t\r\n\t\t\tvar attributeProperties = properties.get( data );\r\n\t\r\n\t\t\tif ( attributeProperties.__webglBuffer === undefined ) {\r\n\t\r\n\t\t\t\tcreateBuffer( attributeProperties, data, bufferType );\r\n\t\r\n\t\t\t} else if ( attributeProperties.version !== data.version ) {\r\n\t\r\n\t\t\t\tupdateBuffer( attributeProperties, data, bufferType );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction createBuffer( attributeProperties, data, bufferType ) {\r\n\t\r\n\t\t\tattributeProperties.__webglBuffer = gl.createBuffer();\r\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\t\r\n\t\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\t\r\n\t\t\tgl.bufferData( bufferType, data.array, usage );\r\n\t\r\n\t\t\tattributeProperties.version = data.version;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction updateBuffer( attributeProperties, data, bufferType ) {\r\n\t\r\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\t\r\n\t\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\r\n\t\r\n\t\t\t\t// Not using update ranges\r\n\t\r\n\t\t\t\tgl.bufferSubData( bufferType, 0, data.array );\r\n\t\r\n\t\t\t} else if ( data.updateRange.count === 0 ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\r\n\t\r\n\t\t\t\tdata.updateRange.count = 0; // reset range\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tattributeProperties.version = data.version;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getAttributeBuffer( attribute ) {\r\n\t\r\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn properties.get( attribute ).__webglBuffer;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getWireframeAttribute( geometry ) {\r\n\t\r\n\t\t\tvar property = properties.get( geometry );\r\n\t\r\n\t\t\tif ( property.wireframe !== undefined ) {\r\n\t\r\n\t\t\t\treturn property.wireframe;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar indices = [];\r\n\t\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\t\tvar position = attributes.position;\r\n\t\r\n\t\t\t// console.time( 'wireframe' );\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tvar edges = {};\r\n\t\t\t\tvar array = index.array;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\t\tvar c = array[ i + 2 ];\r\n\t\r\n\t\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\r\n\t\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\r\n\t\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar array = attributes.position.array;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\tvar a = i + 0;\r\n\t\t\t\t\tvar b = i + 1;\r\n\t\t\t\t\tvar c = i + 2;\r\n\t\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// console.timeEnd( 'wireframe' );\r\n\t\r\n\t\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\r\n\t\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\r\n\t\r\n\t\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\r\n\t\r\n\t\t\tproperty.wireframe = attribute;\r\n\t\r\n\t\t\treturn attribute;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction checkEdge( edges, a, b ) {\r\n\t\r\n\t\t\tif ( a > b ) {\r\n\t\r\n\t\t\t\tvar tmp = a;\r\n\t\t\t\ta = b;\r\n\t\t\t\tb = tmp;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar list = edges[ a ];\r\n\t\r\n\t\t\tif ( list === undefined ) {\r\n\t\r\n\t\t\t\tedges[ a ] = [ b ];\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t} else if ( list.indexOf( b ) === -1 ) {\r\n\t\r\n\t\t\t\tlist.push( b );\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.getAttributeBuffer = getAttributeBuffer;\r\n\t\tthis.getWireframeAttribute = getWireframeAttribute;\r\n\t\r\n\t\tthis.update = update;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLProgram.js\r\n\t\r\n\tTHREE.WebGLProgram = ( function () {\r\n\t\r\n\t\tvar programIdCount = 0;\r\n\t\r\n\t\tfunction generateDefines( defines ) {\r\n\t\r\n\t\t\tvar chunks = [];\r\n\t\r\n\t\t\tfor ( var name in defines ) {\r\n\t\r\n\t\t\t\tvar value = defines[ name ];\r\n\t\r\n\t\t\t\tif ( value === false ) continue;\r\n\t\r\n\t\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn chunks.join( '\\n' );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction fetchUniformLocations( gl, program, identifiers ) {\r\n\t\r\n\t\t\tvar uniforms = {};\r\n\t\r\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\r\n\t\r\n\t\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\t\r\n\t\t\t\tvar info = gl.getActiveUniform( program, i );\r\n\t\t\t\tvar name = info.name;\r\n\t\t\t\tvar location = gl.getUniformLocation( program, name );\r\n\t\r\n\t\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE UNIFORM:\", name);\r\n\t\r\n\t\t\t\tvar suffixPos = name.lastIndexOf( '[0]' );\r\n\t\t\t\tif ( suffixPos !== - 1 && suffixPos === name.length - 3 ) {\r\n\t\r\n\t\t\t\t\tuniforms[ name.substr( 0, suffixPos ) ] = location;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuniforms[ name ] = location;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn uniforms;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction fetchAttributeLocations( gl, program, identifiers ) {\r\n\t\r\n\t\t\tvar attributes = {};\r\n\t\r\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\r\n\t\r\n\t\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\t\r\n\t\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\t\tvar name = info.name;\r\n\t\r\n\t\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\r\n\t\r\n\t\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn attributes;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction filterEmptyLine( string ) {\r\n\t\r\n\t\t\treturn string !== '';\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn function WebGLProgram( renderer, code, material, parameters ) {\r\n\t\r\n\t\t\tvar gl = renderer.context;\r\n\t\r\n\t\t\tvar defines = material.defines;\r\n\t\r\n\t\t\tvar vertexShader = material.__webglShader.vertexShader;\r\n\t\t\tvar fragmentShader = material.__webglShader.fragmentShader;\r\n\t\r\n\t\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\t\r\n\t\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\r\n\t\r\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\t\r\n\t\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\t\r\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\t\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\r\n\t\t\tif ( parameters.envMap ) {\r\n\t\r\n\t\t\t\tswitch ( material.envMap.mapping ) {\r\n\t\r\n\t\t\t\t\tcase THREE.CubeReflectionMapping:\r\n\t\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.EquirectangularReflectionMapping:\r\n\t\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.SphericalReflectionMapping:\r\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tswitch ( material.envMap.mapping ) {\r\n\t\r\n\t\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tswitch ( material.combine ) {\r\n\t\r\n\t\t\t\t\tcase THREE.MultiplyOperation:\r\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.MixOperation:\r\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.AddOperation:\r\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\t\r\n\t\t\t// console.log( 'building new program ' );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar customDefines = generateDefines( defines );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar program = gl.createProgram();\r\n\t\r\n\t\t\tvar prefixVertex, prefixFragment;\r\n\t\r\n\t\t\tif ( material instanceof THREE.RawShaderMaterial ) {\r\n\t\r\n\t\t\t\tprefixVertex = '';\r\n\t\t\t\tprefixFragment = '';\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tprefixVertex = [\r\n\t\r\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\t\r\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\t\r\n\t\t\t\t\tcustomDefines,\r\n\t\r\n\t\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\t\r\n\t\t\t\t\trenderer.gammaInput ? '#define GAMMA_INPUT' : '',\r\n\t\t\t\t\trenderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',\r\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\t\r\n\t\t\t\t\t'#define MAX_DIR_LIGHTS ' + parameters.maxDirLights,\r\n\t\t\t\t\t'#define MAX_POINT_LIGHTS ' + parameters.maxPointLights,\r\n\t\t\t\t\t'#define MAX_SPOT_LIGHTS ' + parameters.maxSpotLights,\r\n\t\t\t\t\t'#define MAX_HEMI_LIGHTS ' + parameters.maxHemiLights,\r\n\t\r\n\t\t\t\t\t'#define MAX_SHADOWS ' + parameters.maxShadows,\r\n\t\r\n\t\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\t\r\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\r\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\t\r\n\t\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\t\r\n\t\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\t\r\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\t\t\t\t\tparameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',\r\n\t\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\r\n\t\r\n\t\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\t\r\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\t\r\n\t\r\n\t\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\r\n\t\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t\t'attribute vec2 uv;',\r\n\t\r\n\t\t\t\t\t'#ifdef USE_COLOR',\r\n\t\r\n\t\t\t\t\t'\tattribute vec3 color;',\r\n\t\r\n\t\t\t\t\t'#endif',\r\n\t\r\n\t\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\t\r\n\t\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\t\r\n\t\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\t\r\n\t\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\t\r\n\t\t\t\t\t'\t#else',\r\n\t\r\n\t\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\t\r\n\t\t\t\t\t'\t#endif',\r\n\t\r\n\t\t\t\t\t'#endif',\r\n\t\r\n\t\t\t\t\t'#ifdef USE_SKINNING',\r\n\t\r\n\t\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\t\r\n\t\t\t\t\t'#endif',\r\n\t\r\n\t\t\t\t\t'\\n'\r\n\t\r\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\t\r\n\t\t\t\tprefixFragment = [\r\n\t\r\n\t\t\t\t\tparameters.bumpMap || parameters.normalMap || parameters.flatShading || material.derivatives ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\t\r\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\t\r\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\t\r\n\t\t\t\t\tcustomDefines,\r\n\t\r\n\t\t\t\t\t'#define MAX_DIR_LIGHTS ' + parameters.maxDirLights,\r\n\t\t\t\t\t'#define MAX_POINT_LIGHTS ' + parameters.maxPointLights,\r\n\t\t\t\t\t'#define MAX_SPOT_LIGHTS ' + parameters.maxSpotLights,\r\n\t\t\t\t\t'#define MAX_HEMI_LIGHTS ' + parameters.maxHemiLights,\r\n\t\r\n\t\t\t\t\t'#define MAX_SHADOWS ' + parameters.maxShadows,\r\n\t\r\n\t\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\r\n\t\r\n\t\t\t\t\trenderer.gammaInput ? '#define GAMMA_INPUT' : '',\r\n\t\t\t\t\trenderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',\r\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\t\r\n\t\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\r\n\t\r\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\r\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\t\r\n\t\t\t\t\tparameters.metal ? '#define METAL' : '',\r\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\t\r\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\t\t\t\t\tparameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',\r\n\t\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\r\n\t\r\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\t\r\n\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\r\n\t\t\t\t\t'\\n'\r\n\t\r\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\t\r\n\t\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\r\n\t\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\r\n\t\r\n\t\t\tgl.attachShader( program, glVertexShader );\r\n\t\t\tgl.attachShader( program, glFragmentShader );\r\n\t\r\n\t\t\t// Force a particular attribute to index 0.\r\n\t\r\n\t\t\tif ( material.index0AttributeName !== undefined ) {\r\n\t\r\n\t\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\t\r\n\t\t\t} else if ( parameters.morphTargets === true ) {\r\n\t\r\n\t\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgl.linkProgram( program );\r\n\t\r\n\t\t\tvar programLog = gl.getProgramInfoLog( program );\r\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\r\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\r\n\t\r\n\t\t\tvar runnable = true;\r\n\t\t\tvar haveDiagnostics = true;\r\n\t\r\n\t\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\r\n\t\r\n\t\t\t\trunnable = false;\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\r\n\t\r\n\t\t\t} else if ( programLog !== '' ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\t\r\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\t\r\n\t\t\t\thaveDiagnostics = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( haveDiagnostics ) {\r\n\t\r\n\t\t\t\tthis.diagnostics = {\r\n\t\r\n\t\t\t\t\trunnable: runnable,\r\n\t\t\t\t\tmaterial: material,\r\n\t\r\n\t\t\t\t\tprogramLog: programLog,\r\n\t\r\n\t\t\t\t\tvertexShader: {\r\n\t\r\n\t\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\t\tprefix: prefixVertex\r\n\t\r\n\t\t\t\t\t},\r\n\t\r\n\t\t\t\t\tfragmentShader: {\r\n\t\r\n\t\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\t\tprefix: prefixFragment\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// clean up\r\n\t\r\n\t\t\tgl.deleteShader( glVertexShader );\r\n\t\t\tgl.deleteShader( glFragmentShader );\r\n\t\r\n\t\t\t// set up caching for uniform locations\r\n\t\r\n\t\t\tvar cachedUniforms;\r\n\t\r\n\t\t\tthis.getUniforms = function() {\r\n\t\r\n\t\t\t\tif ( cachedUniforms === undefined ) {\r\n\t\r\n\t\t\t\t\tcachedUniforms = fetchUniformLocations( gl, program );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn cachedUniforms;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\t// set up caching for attribute locations\r\n\t\r\n\t\t\tvar cachedAttributes;\r\n\t\r\n\t\t\tthis.getAttributes = function() {\r\n\t\r\n\t\t\t\tif ( cachedAttributes === undefined ) {\r\n\t\r\n\t\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn cachedAttributes;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\t// free resource\r\n\t\r\n\t\t\tthis.destroy = function() {\r\n\t\r\n\t\t\t\tgl.deleteProgram( program );\r\n\t\t\t\tthis.program = undefined;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\t// DEPRECATED\r\n\t\r\n\t\t\tObject.defineProperties( this, {\r\n\t\r\n\t\t\t\tuniforms: {\r\n\t\t\t\t\tget: function() {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\r\n\t\t\t\t\t\treturn this.getUniforms();\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tattributes: {\r\n\t\t\t\t\tget: function() {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\r\n\t\t\t\t\t\treturn this.getAttributes();\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tthis.id = programIdCount ++;\r\n\t\t\tthis.code = code;\r\n\t\t\tthis.usedTimes = 1;\r\n\t\t\tthis.program = program;\r\n\t\t\tthis.vertexShader = glVertexShader;\r\n\t\t\tthis.fragmentShader = glFragmentShader;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/renderers/webgl/WebGLPrograms.js\r\n\t\r\n\tTHREE.WebGLPrograms = function ( renderer, capabilities ) {\r\n\t\r\n\t\tvar programs = [];\r\n\t\r\n\t\tvar shaderIDs = {\r\n\t\t\tMeshDepthMaterial: 'depth',\r\n\t\t\tMeshNormalMaterial: 'normal',\r\n\t\t\tMeshBasicMaterial: 'basic',\r\n\t\t\tMeshLambertMaterial: 'lambert',\r\n\t\t\tMeshPhongMaterial: 'phong',\r\n\t\t\tLineBasicMaterial: 'basic',\r\n\t\t\tLineDashedMaterial: 'dashed',\r\n\t\t\tPointsMaterial: 'points'\r\n\t\t};\r\n\t\r\n\t\tvar parameterNames = [\r\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"envMap\", \"envMapMode\",\r\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\r\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"maxDirLights\", \"maxPointLights\",\r\n\t\t\t\"maxSpotLights\", \"maxHemiLights\", \"maxShadows\", \"shadowMapEnabled\", \"pointLightShadows\",\r\n\t\t\t\"shadowMapType\", \"shadowMapDebug\", \"alphaTest\", \"metal\", \"doubleSided\",\r\n\t\t\t\"flipSided\"\r\n\t\t];\r\n\t\r\n\t\r\n\t\tfunction allocateBones ( object ) {\r\n\t\r\n\t\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\t\r\n\t\t\t\treturn 1024;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// default for when object is not specified\r\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t\t//\r\n\t\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t\t//    (up to 54 should be safe)\r\n\t\r\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\t\r\n\t\t\t\tvar maxBones = nVertexMatrices;\r\n\t\r\n\t\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\r\n\t\r\n\t\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\r\n\t\r\n\t\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn maxBones;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction allocateLights( lights ) {\r\n\t\r\n\t\t\tvar dirLights = 0;\r\n\t\t\tvar pointLights = 0;\r\n\t\t\tvar spotLights = 0;\r\n\t\t\tvar hemiLights = 0;\r\n\t\r\n\t\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\t\r\n\t\t\t\tvar light = lights[ l ];\r\n\t\r\n\t\t\t\tif ( light.visible === false ) continue;\r\n\t\r\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) dirLights ++;\r\n\t\t\t\tif ( light instanceof THREE.PointLight ) pointLights ++;\r\n\t\t\t\tif ( light instanceof THREE.SpotLight ) spotLights ++;\r\n\t\t\t\tif ( light instanceof THREE.HemisphereLight ) hemiLights ++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn { 'directional': dirLights, 'point': pointLights, 'spot': spotLights, 'hemi': hemiLights };\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction allocateShadows( lights ) {\r\n\t\r\n\t\t\tvar maxShadows = 0;\r\n\t\t\tvar pointLightShadows = 0;\r\n\t\r\n\t\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\t\r\n\t\t\t\tvar light = lights[ l ];\r\n\t\r\n\t\t\t\tif ( ! light.castShadow ) continue;\r\n\t\r\n\t\t\t\tif ( light instanceof THREE.SpotLight || light instanceof THREE.DirectionalLight ) maxShadows ++;\r\n\t\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\t\r\n\t\t\t\t\tmaxShadows ++;\r\n\t\t\t\t\tpointLightShadows ++;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn { 'maxShadows': maxShadows, 'pointLightShadows': pointLightShadows };\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.getParameters = function ( material, lights, fog, object ) {\r\n\t\r\n\t\t\tvar shaderID = shaderIDs[ material.type ];\r\n\t\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t\t// (not to blow over maxLights budget)\r\n\t\r\n\t\t\tvar maxLightCount = allocateLights( lights );\r\n\t\t\tvar allocatedShadows = allocateShadows( lights );\r\n\t\t\tvar maxBones = allocateBones( object );\r\n\t\t\tvar precision = renderer.getPrecision();\r\n\t\r\n\t\t\tif ( material.precision !== null ) {\r\n\t\r\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\t\r\n\t\t\t\tif ( precision !== material.precision ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.initMaterial:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar parameters = {\r\n\t\r\n\t\t\t\tshaderID: shaderID,\r\n\t\r\n\t\t\t\tprecision: precision,\r\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\r\n\t\r\n\t\t\t\tmap: !! material.map,\r\n\t\t\t\tenvMap: !! material.envMap,\r\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\t\tlightMap: !! material.lightMap,\r\n\t\t\t\taoMap: !! material.aoMap,\r\n\t\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\t\talphaMap: !! material.alphaMap,\r\n\t\r\n\t\t\t\tcombine: material.combine,\r\n\t\r\n\t\t\t\tvertexColors: material.vertexColors,\r\n\t\r\n\t\t\t\tfog: fog,\r\n\t\t\t\tuseFog: material.fog,\r\n\t\t\t\tfogExp: fog instanceof THREE.FogExp2,\r\n\t\r\n\t\t\t\tflatShading: material.shading === THREE.FlatShading,\r\n\t\r\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\r\n\t\r\n\t\t\t\tskinning: material.skinning,\r\n\t\t\t\tmaxBones: maxBones,\r\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\r\n\t\r\n\t\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\t\r\n\t\t\t\tmaxDirLights: maxLightCount.directional,\r\n\t\t\t\tmaxPointLights: maxLightCount.point,\r\n\t\t\t\tmaxSpotLights: maxLightCount.spot,\r\n\t\t\t\tmaxHemiLights: maxLightCount.hemi,\r\n\t\r\n\t\t\t\tmaxShadows: allocatedShadows.maxShadows,\r\n\t\t\t\tpointLightShadows: allocatedShadows.pointLightShadows,\r\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && allocatedShadows.maxShadows > 0,\r\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\t\t\t\tshadowMapDebug: renderer.shadowMap.debug,\r\n\t\r\n\t\t\t\talphaTest: material.alphaTest,\r\n\t\t\t\tmetal: material.metal,\r\n\t\t\t\tdoubleSided: material.side === THREE.DoubleSide,\r\n\t\t\t\tflipSided: material.side === THREE.BackSide\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\treturn parameters;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getProgramCode = function ( material, parameters ) {\r\n\t\r\n\t\t\tvar chunks = [];\r\n\t\r\n\t\t\tif ( parameters.shaderID ) {\r\n\t\r\n\t\t\t\tchunks.push( parameters.shaderID );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tchunks.push( material.fragmentShader );\r\n\t\t\t\tchunks.push( material.vertexShader );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.defines !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var name in material.defines ) {\r\n\t\r\n\t\t\t\t\tchunks.push( name );\r\n\t\t\t\t\tchunks.push( material.defines[ name ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar parameterName = parameterNames[ i ];\r\n\t\t\t\tchunks.push( parameterName );\r\n\t\t\t\tchunks.push( parameters[ parameterName ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn chunks.join();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.acquireProgram = function ( material, parameters, code ) {\r\n\t\r\n\t\t\tvar program;\r\n\t\r\n\t\t\t// Check if code has been already compiled\r\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\t\r\n\t\t\t\tvar programInfo = programs[ p ];\r\n\t\r\n\t\t\t\tif ( programInfo.code === code ) {\r\n\t\r\n\t\t\t\t\tprogram = programInfo;\r\n\t\t\t\t\t++ program.usedTimes;\r\n\t\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( program === undefined ) {\r\n\t\r\n\t\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\r\n\t\t\t\tprograms.push( program );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn program;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.releaseProgram = function( program ) {\r\n\t\r\n\t\t\tif ( -- program.usedTimes === 0 ) {\r\n\t\r\n\t\t\t\t// Remove from unordered set\r\n\t\t\t\tvar i = programs.indexOf( program );\r\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\t\tprograms.pop();\r\n\t\r\n\t\t\t\t// Free WebGL resources\r\n\t\t\t\tprogram.destroy();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\t\tthis.programs = programs;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLProperties.js\r\n\t\r\n\t/**\r\n\t* @author fordacious / fordacious.github.io\r\n\t*/\r\n\t\r\n\tTHREE.WebGLProperties = function () {\r\n\t\r\n\t\tvar properties = {};\r\n\t\r\n\t\tthis.get = function ( object ) {\r\n\t\r\n\t\t\tvar uuid = object.uuid;\r\n\t\t\tvar map = properties[ uuid ];\r\n\t\r\n\t\t\tif ( map === undefined ) {\r\n\t\r\n\t\t\t\tmap = {};\r\n\t\t\t\tproperties[ uuid ] = map;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn map;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.delete = function ( object ) {\r\n\t\r\n\t\t\tdelete properties[ object.uuid ];\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clear = function () {\r\n\t\r\n\t\t\tproperties = {};\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLShader.js\r\n\t\r\n\tTHREE.WebGLShader = ( function () {\r\n\t\r\n\t\tfunction addLineNumbers( string ) {\r\n\t\r\n\t\t\tvar lines = string.split( '\\n' );\r\n\t\r\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\t\r\n\t\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn lines.join( '\\n' );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn function WebGLShader( gl, type, string ) {\r\n\t\r\n\t\t\tvar shader = gl.createShader( type );\r\n\t\r\n\t\t\tgl.shaderSource( shader, string );\r\n\t\t\tgl.compileShader( shader );\r\n\t\r\n\t\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// --enable-privileged-webgl-extension\r\n\t\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\t\r\n\t\t\treturn shader;\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/renderers/webgl/WebGLShadowMap.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\r\n\t\r\n\t\tvar _gl = _renderer.context,\r\n\t\t_state = _renderer.state,\r\n\t\t_frustum = new THREE.Frustum(),\r\n\t\t_projScreenMatrix = new THREE.Matrix4(),\r\n\t\r\n\t\t_min = new THREE.Vector3(),\r\n\t\t_max = new THREE.Vector3(),\r\n\t\r\n\t\t_lookTarget = new THREE.Vector3(),\r\n\t\t_lightPositionWorld = new THREE.Vector3(),\r\n\t\r\n\t\t_renderList = [],\r\n\t\r\n\t\t_MorphingFlag = 1,\r\n\t\t_SkinningFlag = 2,\r\n\t\r\n\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\r\n\t\r\n\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\r\n\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants );\r\n\t\r\n\t\tvar cubeDirections = [\r\n\t\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\r\n\t\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\r\n\t\t];\r\n\t\r\n\t\tvar cubeUps = [\r\n\t\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\r\n\t\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\r\n\t\t];\r\n\t\r\n\t\tvar cube2DViewPorts = [\r\n\t\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\r\n\t\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\r\n\t\t];\r\n\t\r\n\t\tvar _vector4 = new THREE.Vector4();\r\n\t\r\n\t\t// init\r\n\t\r\n\t\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\t\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\t\r\n\t\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\r\n\t\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\r\n\t\r\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\r\n\t\r\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\r\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\r\n\t\r\n\t\t\tvar depthMaterial = new THREE.ShaderMaterial( {\r\n\t\t\t\tuniforms: depthUniforms,\r\n\t\t\t\tvertexShader: depthShader.vertexShader,\r\n\t\t\t\tfragmentShader: depthShader.fragmentShader,\r\n\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\tskinning: useSkinning\r\n\t\t\t} );\r\n\t\r\n\t\t\tdepthMaterial._shadowPass = true;\r\n\t\r\n\t\t\t_depthMaterials[ i ] = depthMaterial;\r\n\t\r\n\t\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\r\n\t\t\t\tuniforms: distanceUniforms,\r\n\t\t\t\tvertexShader: distanceShader.vertexShader,\r\n\t\t\t\tfragmentShader: distanceShader.fragmentShader,\r\n\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\tskinning: useSkinning\r\n\t\t\t} );\r\n\t\r\n\t\t\tdistanceMaterial._shadowPass = true;\r\n\t\r\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tthis.enabled = false;\r\n\t\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.needsUpdate = false;\r\n\t\r\n\t\tthis.type = THREE.PCFShadowMap;\r\n\t\tthis.cullFace = THREE.CullFaceFront;\r\n\t\r\n\t\tthis.render = function ( scene ) {\r\n\t\r\n\t\t\tvar faceCount, isPointLight;\r\n\t\r\n\t\t\tif ( scope.enabled === false ) return;\r\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\r\n\t\r\n\t\t\t// Set GL state for depth map.\r\n\t\t\t_gl.clearColor( 1, 1, 1, 1 );\r\n\t\t\t_state.disable( _gl.BLEND );\r\n\t\t\t_state.enable( _gl.CULL_FACE );\r\n\t\t\t_gl.frontFace( _gl.CCW );\r\n\t\t\t_gl.cullFace( scope.cullFace === THREE.CullFaceFront ? _gl.FRONT : _gl.BACK );\r\n\t\t\t_state.setDepthTest( true );\r\n\t\r\n\t\t\t// save the existing viewport so it can be restored later\r\n\t\t\t_renderer.getViewport( _vector4 );\r\n\t\r\n\t\t\t// render depth map\r\n\t\r\n\t\t\tfor ( var i = 0, il = _lights.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar light = _lights[ i ];\r\n\t\r\n\t\t\t\tif ( light.castShadow === true ) {\r\n\t\r\n\t\t\t\t\tvar shadow = light.shadow;\r\n\t\t\t\t\tvar shadowCamera = shadow.camera;\r\n\t\t\t\t\tvar shadowMapSize = shadow.mapSize;\r\n\t\r\n\t\t\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\t\r\n\t\t\t\t\t\tfaceCount = 6;\r\n\t\t\t\t\t\tisPointLight = true;\r\n\t\r\n\t\t\t\t\t\tvar vpWidth = shadowMapSize.x / 4.0;\r\n\t\t\t\t\t\tvar vpHeight = shadowMapSize.y / 2.0;\r\n\t\r\n\t\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t\t\t\t// following orientation:\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\t//  xzXZ\r\n\t\t\t\t\t\t//   y Y\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\t// X - Positive x direction\r\n\t\t\t\t\t\t// x - Negative x direction\r\n\t\t\t\t\t\t// Y - Positive y direction\r\n\t\t\t\t\t\t// y - Negative y direction\r\n\t\t\t\t\t\t// Z - Positive z direction\r\n\t\t\t\t\t\t// z - Negative z direction\r\n\t\r\n\t\t\t\t\t\t// positive X\r\n\t\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t\t// negative X\r\n\t\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t\t// positive Z\r\n\t\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t\t// negative Z\r\n\t\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t\t// positive Y\r\n\t\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\r\n\t\t\t\t\t\t// negative Y\r\n\t\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tfaceCount = 1;\r\n\t\t\t\t\t\tisPointLight = false;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( shadow.map === null ) {\r\n\t\r\n\t\t\t\t\t\tvar shadowFilter = THREE.LinearFilter;\r\n\t\r\n\t\t\t\t\t\tif ( scope.type === THREE.PCFSoftShadowMap ) {\r\n\t\r\n\t\t\t\t\t\t\tshadowFilter = THREE.NearestFilter;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tvar pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };\r\n\t\r\n\t\t\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( shadowMapSize.x, shadowMapSize.y, pars );\r\n\t\t\t\t\t\tshadow.matrix = new THREE.Matrix4();\r\n\t\r\n\t\t\t\t\t\t//\r\n\t\r\n\t\t\t\t\t\tif ( light instanceof THREE.SpotLight ) {\r\n\t\r\n\t\t\t\t\t\t\tshadowCamera.aspect = shadowMapSize.x / shadowMapSize.y;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tshadowCamera.updateProjectionMatrix();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar shadowMap = shadow.map;\r\n\t\t\t\t\tvar shadowMatrix = shadow.matrix;\r\n\t\r\n\t\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\r\n\t\r\n\t\t\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t\t\t_renderer.clear();\r\n\t\r\n\t\t\t\t\t// render shadow map for each cube face (if omni-directional) or\r\n\t\t\t\t\t// run a single pass if not\r\n\t\r\n\t\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( isPointLight ) {\r\n\t\r\n\t\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\r\n\t\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\r\n\t\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\r\n\t\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\t\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\r\n\t\t\t\t\t\t\t_renderer.setViewport( vpDimensions.x, vpDimensions.y, vpDimensions.z, vpDimensions.w );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tshadowCamera.updateMatrixWorld();\r\n\t\t\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\r\n\t\r\n\t\t\t\t\t\t// compute shadow matrix\r\n\t\r\n\t\t\t\t\t\tshadowMatrix.set(\r\n\t\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\t\r\n\t\t\t\t\t\t// update camera matrices and frustum\r\n\t\r\n\t\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\t\r\n\t\t\t\t\t\t// set object matrices & frustum culling\r\n\t\r\n\t\t\t\t\t\t_renderList.length = 0;\r\n\t\r\n\t\t\t\t\t\tprojectObject( scene, shadowCamera );\r\n\t\r\n\t\t\t\t\t\t// render shadow map\r\n\t\t\t\t\t\t// render regular objects\r\n\t\r\n\t\t\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tvar object = _renderList[ j ];\r\n\t\t\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\t\t\tvar material = object.material;\r\n\t\r\n\t\t\t\t\t\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\r\n\t\r\n\t\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\t\t\tvar materials = material.materials;\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, _lights, null, geometry, depthMaterial, object, group );\r\n\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, _lights, null, geometry, depthMaterial, object, null );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// We must call _renderer.resetGLState() at the end of each iteration of\r\n\t\t\t\t\t// the light loop in order to force material updates for each light.\r\n\t\t\t\t\t_renderer.resetGLState();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_renderer.setViewport( _vector4.x, _vector4.y, _vector4.z, _vector4.w );\r\n\t\r\n\t\t\t// Restore GL state.\r\n\t\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\t\tclearAlpha = _renderer.getClearAlpha();\r\n\t\t\t_renderer.setClearColor( clearColor, clearAlpha );\r\n\t\t\t_state.enable( _gl.BLEND );\r\n\t\r\n\t\t\tif ( scope.cullFace === THREE.CullFaceFront ) {\r\n\t\r\n\t\t\t\t_gl.cullFace( _gl.BACK );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_renderer.resetGLState();\r\n\t\r\n\t\t\tscope.needsUpdate = false;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\r\n\t\r\n\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\tvar newMaterial = null;\r\n\t\r\n\t\t\tvar materialVariants = _depthMaterials;\r\n\t\t\tvar customMaterial = object.customDepthMaterial;\r\n\t\r\n\t\t\tif ( isPointLight ) {\r\n\t\r\n\t\t\t\tmaterialVariants = _distanceMaterials;\r\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ! customMaterial ) {\r\n\t\r\n\t\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\r\n\t\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\r\n\t\r\n\t\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\r\n\t\r\n\t\t\t\tvar variantIndex = 0;\r\n\t\r\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\r\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\r\n\t\r\n\t\t\t\tnewMaterial = materialVariants[ variantIndex ];\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tnewMaterial = customMaterial;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tnewMaterial.visible = material.visible;\r\n\t\t\tnewMaterial.wireframe = material.wireframe;\r\n\t\t\tnewMaterial.wireframeLinewidth = material.wireframeLinewidth;\r\n\t\r\n\t\t\tif ( isPointLight && newMaterial.uniforms.lightPos !== undefined ) {\r\n\t\r\n\t\t\t\tnewMaterial.uniforms.lightPos.value.copy( lightPositionWorld );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn newMaterial;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction projectObject( object, camera ) {\r\n\t\r\n\t\t\tif ( object.visible === false ) return;\r\n\t\r\n\t\t\tif ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\r\n\t\r\n\t\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\r\n\t\r\n\t\t\t\t\tvar material = object.material;\r\n\t\r\n\t\t\t\t\tif ( material.visible === true ) {\r\n\t\r\n\t\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\t\t\t_renderList.push( object );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar children = object.children;\r\n\t\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tprojectObject( children[ i ], camera );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLState.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\r\n\t\r\n\t\tvar _this = this;\r\n\t\r\n\t\tvar newAttributes = new Uint8Array( 16 );\r\n\t\tvar enabledAttributes = new Uint8Array( 16 );\r\n\t\tvar attributeDivisors = new Uint8Array( 16 );\r\n\t\r\n\t\tvar capabilities = {};\r\n\t\r\n\t\tvar compressedTextureFormats = null;\r\n\t\r\n\t\tvar currentBlending = null;\r\n\t\tvar currentBlendEquation = null;\r\n\t\tvar currentBlendSrc = null;\r\n\t\tvar currentBlendDst = null;\r\n\t\tvar currentBlendEquationAlpha = null;\r\n\t\tvar currentBlendSrcAlpha = null;\r\n\t\tvar currentBlendDstAlpha = null;\r\n\t\r\n\t\tvar currentDepthFunc = null;\r\n\t\tvar currentDepthWrite = null;\r\n\t\r\n\t\tvar currentColorWrite = null;\r\n\t\r\n\t\tvar currentFlipSided = null;\r\n\t\r\n\t\tvar currentLineWidth = null;\r\n\t\r\n\t\tvar currentPolygonOffsetFactor = null;\r\n\t\tvar currentPolygonOffsetUnits = null;\r\n\t\r\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\t\r\n\t\tvar currentTextureSlot = undefined;\r\n\t\tvar currentBoundTextures = {};\r\n\t\r\n\t\tthis.init = function () {\r\n\t\r\n\t\t\tgl.clearColor( 0, 0, 0, 1 );\r\n\t\t\tgl.clearDepth( 1 );\r\n\t\t\tgl.clearStencil( 0 );\r\n\t\r\n\t\t\tthis.enable( gl.DEPTH_TEST );\r\n\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\r\n\t\t\tgl.frontFace( gl.CCW );\r\n\t\t\tgl.cullFace( gl.BACK );\r\n\t\t\tthis.enable( gl.CULL_FACE );\r\n\t\r\n\t\t\tthis.enable( gl.BLEND );\r\n\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.initAttributes = function () {\r\n\t\r\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tnewAttributes[ i ] = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.enableAttribute = function ( attribute ) {\r\n\t\r\n\t\t\tnewAttributes[ attribute ] = 1;\r\n\t\r\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\t\r\n\t\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\t\tenabledAttributes[ attribute ] = 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\r\n\t\r\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\r\n\t\t\t\tattributeDivisors[ attribute ] = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\r\n\t\r\n\t\t\tnewAttributes[ attribute ] = 1;\r\n\t\r\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\t\r\n\t\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\t\tenabledAttributes[ attribute ] = 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\t\r\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\r\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.disableUnusedAttributes = function () {\r\n\t\r\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\t\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.enable = function ( id ) {\r\n\t\r\n\t\t\tif ( capabilities[ id ] !== true ) {\r\n\t\r\n\t\t\t\tgl.enable( id );\r\n\t\t\t\tcapabilities[ id ] = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.disable = function ( id ) {\r\n\t\r\n\t\t\tif ( capabilities[ id ] !== false ) {\r\n\t\r\n\t\t\t\tgl.disable( id );\r\n\t\t\t\tcapabilities[ id ] = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getCompressedTextureFormats = function () {\r\n\t\r\n\t\t\tif ( compressedTextureFormats === null ) {\r\n\t\r\n\t\t\t\tcompressedTextureFormats = [];\r\n\t\r\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ) {\r\n\t\r\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn compressedTextureFormats;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha ) {\r\n\t\r\n\t\t\tif ( blending !== currentBlending ) {\r\n\t\r\n\t\t\t\tif ( blending === THREE.NoBlending ) {\r\n\t\r\n\t\t\t\t\tthis.disable( gl.BLEND );\r\n\t\r\n\t\t\t\t} else if ( blending === THREE.AdditiveBlending ) {\r\n\t\r\n\t\t\t\t\tthis.enable( gl.BLEND );\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\t\r\n\t\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\r\n\t\r\n\t\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\t\r\n\t\t\t\t\tthis.enable( gl.BLEND );\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\r\n\t\r\n\t\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\r\n\t\r\n\t\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\t\r\n\t\t\t\t\tthis.enable( gl.BLEND );\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\r\n\t\r\n\t\t\t\t} else if ( blending === THREE.CustomBlending ) {\r\n\t\r\n\t\t\t\t\tthis.enable( gl.BLEND );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis.enable( gl.BLEND );\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcurrentBlending = blending;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( blending === THREE.CustomBlending ) {\r\n\t\r\n\t\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\t\r\n\t\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\t\r\n\t\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\r\n\t\r\n\t\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\t\r\n\t\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\r\n\t\r\n\t\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tcurrentBlendEquation = null;\r\n\t\t\t\tcurrentBlendSrc = null;\r\n\t\t\t\tcurrentBlendDst = null;\r\n\t\t\t\tcurrentBlendEquationAlpha = null;\r\n\t\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\t\tcurrentBlendDstAlpha = null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setDepthFunc = function ( depthFunc ) {\r\n\t\r\n\t\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\t\r\n\t\t\t\tif ( depthFunc ) {\r\n\t\r\n\t\t\t\t\tswitch ( depthFunc ) {\r\n\t\r\n\t\t\t\t\t\tcase THREE.NeverDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.AlwaysDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.LessDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.LessEqualDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.EqualDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.GreaterEqualDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.GreaterDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.NotEqualDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tdefault:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcurrentDepthFunc = depthFunc;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setDepthTest = function ( depthTest ) {\r\n\t\r\n\t\t\tif ( depthTest ) {\r\n\t\r\n\t\t\t\tthis.enable( gl.DEPTH_TEST );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.disable( gl.DEPTH_TEST );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setDepthWrite = function ( depthWrite ) {\r\n\t\r\n\t\t\tif ( currentDepthWrite !== depthWrite ) {\r\n\t\r\n\t\t\t\tgl.depthMask( depthWrite );\r\n\t\t\t\tcurrentDepthWrite = depthWrite;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setColorWrite = function ( colorWrite ) {\r\n\t\r\n\t\t\tif ( currentColorWrite !== colorWrite ) {\r\n\t\r\n\t\t\t\tgl.colorMask( colorWrite, colorWrite, colorWrite, colorWrite );\r\n\t\t\t\tcurrentColorWrite = colorWrite;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setFlipSided = function ( flipSided ) {\r\n\t\r\n\t\t\tif ( currentFlipSided !== flipSided ) {\r\n\t\r\n\t\t\t\tif ( flipSided ) {\r\n\t\r\n\t\t\t\t\tgl.frontFace( gl.CW );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tgl.frontFace( gl.CCW );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcurrentFlipSided = flipSided;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setLineWidth = function ( width ) {\r\n\t\r\n\t\t\tif ( width !== currentLineWidth ) {\r\n\t\r\n\t\t\t\tgl.lineWidth( width );\r\n\t\r\n\t\t\t\tcurrentLineWidth = width;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\r\n\t\r\n\t\t\tif ( polygonOffset ) {\r\n\t\r\n\t\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( polygonOffset && ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) ) {\r\n\t\r\n\t\t\t\tgl.polygonOffset( factor, units );\r\n\t\r\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setScissorTest = function ( scissorTest ) {\r\n\t\r\n\t\t\tif ( scissorTest ) {\r\n\t\r\n\t\t\t\tthis.enable( gl.SCISSOR_TEST );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.disable( gl.SCISSOR_TEST );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// texture\r\n\t\r\n\t\tthis.activeTexture = function ( webglSlot ) {\r\n\t\r\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\t\r\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\t\r\n\t\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\t\tcurrentTextureSlot = webglSlot;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.bindTexture = function ( webglType, webglTexture ) {\r\n\t\r\n\t\t\tif ( currentTextureSlot === undefined ) {\r\n\t\r\n\t\t\t\t_this.activeTexture();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\t\r\n\t\t\tif ( boundTexture === undefined ) {\r\n\t\r\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\t\r\n\t\t\t\tgl.bindTexture( webglType, webglTexture );\r\n\t\r\n\t\t\t\tboundTexture.type = webglType;\r\n\t\t\t\tboundTexture.texture = webglTexture;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.compressedTexImage2D = function () {\r\n\t\r\n\t\t\ttry {\r\n\t\r\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\t\r\n\t\t\t} catch ( error ) {\r\n\t\r\n\t\t\t\tconsole.error( error );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.texImage2D = function () {\r\n\t\r\n\t\t\ttry {\r\n\t\r\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\t\r\n\t\t\t} catch ( error ) {\r\n\t\r\n\t\t\t\tconsole.error( error );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t//\r\n\t\r\n\t\tthis.reset = function () {\r\n\t\r\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\t\r\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\t\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tcapabilities = {};\r\n\t\r\n\t\t\tcompressedTextureFormats = null;\r\n\t\r\n\t\t\tcurrentBlending = null;\r\n\t\r\n\t\t\tcurrentDepthWrite = null;\r\n\t\t\tcurrentColorWrite = null;\r\n\t\r\n\t\t\tcurrentFlipSided = null;\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/plugins/LensFlarePlugin.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.LensFlarePlugin = function ( renderer, flares ) {\r\n\t\r\n\t\tvar gl = renderer.context;\r\n\t\tvar state = renderer.state;\r\n\t\r\n\t\tvar vertexBuffer, elementBuffer;\r\n\t\tvar program, attributes, uniforms;\r\n\t\tvar hasVertexTexture;\r\n\t\r\n\t\tvar tempTexture, occlusionTexture;\r\n\t\r\n\t\tfunction init() {\r\n\t\r\n\t\t\tvar vertices = new Float32Array( [\r\n\t\t\t\t- 1, - 1,  0, 0,\r\n\t\t\t\t 1, - 1,  1, 0,\r\n\t\t\t\t 1,  1,  1, 1,\r\n\t\t\t\t- 1,  1,  0, 1\r\n\t\t\t] );\r\n\t\r\n\t\t\tvar faces = new Uint16Array( [\r\n\t\t\t\t0, 1, 2,\r\n\t\t\t\t0, 2, 3\r\n\t\t\t] );\r\n\t\r\n\t\t\t// buffers\r\n\t\r\n\t\t\tvertexBuffer     = gl.createBuffer();\r\n\t\t\telementBuffer    = gl.createBuffer();\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\t\r\n\t\t\t// textures\r\n\t\r\n\t\t\ttempTexture      = gl.createTexture();\r\n\t\t\tocclusionTexture = gl.createTexture();\r\n\t\r\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\t\r\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\t\r\n\t\t\thasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;\r\n\t\r\n\t\t\tvar shader;\r\n\t\r\n\t\t\tif ( hasVertexTexture ) {\r\n\t\r\n\t\t\t\tshader = {\r\n\t\r\n\t\t\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\t\t\"uniform float rotation;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\t\r\n\t\t\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\t\t\"attribute vec2 uv;\",\r\n\t\r\n\t\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\t\t\"varying float vVisibility;\",\r\n\t\r\n\t\t\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\t\t\t\"vUV = uv;\",\r\n\t\r\n\t\t\t\t\t\t\t\"vec2 pos = position;\",\r\n\t\r\n\t\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\r\n\t\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\r\n\t\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\r\n\t\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\t\r\n\t\t\t\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\t\r\n\t\t\t\t\t\t\"}\"\r\n\t\r\n\t\t\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\t\t\"uniform vec3 color;\",\r\n\t\r\n\t\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\t\t\"varying float vVisibility;\",\r\n\t\r\n\t\t\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\t\t\t// pink square\r\n\t\r\n\t\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\r\n\t\r\n\t\t\t\t\t\t\t// restore\r\n\t\r\n\t\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\t\r\n\t\t\t\t\t\t\t// flare\r\n\t\r\n\t\t\t\t\t\t\t\"} else {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\t\r\n\t\t\t\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\t\t\"}\"\r\n\t\r\n\t\t\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tshader = {\r\n\t\r\n\t\t\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\t\t\"uniform float rotation;\",\r\n\t\r\n\t\t\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\t\t\"attribute vec2 uv;\",\r\n\t\r\n\t\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\r\n\t\t\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\t\t\t\"vUV = uv;\",\r\n\t\r\n\t\t\t\t\t\t\t\"vec2 pos = position;\",\r\n\t\r\n\t\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\t\r\n\t\t\t\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\t\r\n\t\t\t\t\t\t\"}\"\r\n\t\r\n\t\t\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\t\t\"precision mediump float;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\t\t\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\t\t\"uniform vec3 color;\",\r\n\t\r\n\t\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\r\n\t\t\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\t\t\t// pink square\r\n\t\r\n\t\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\r\n\t\r\n\t\t\t\t\t\t\t// restore\r\n\t\r\n\t\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\t\r\n\t\t\t\t\t\t\t// flare\r\n\t\r\n\t\t\t\t\t\t\t\"} else {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\r\n\t\t\t\t\t\t\t\t\"visibility = ( 1.0 - visibility / 4.0 );\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\t\t\"texture.a *= opacity * visibility;\",\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\t\r\n\t\t\t\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\t\t\"}\"\r\n\t\r\n\t\t\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tprogram = createProgram( shader );\r\n\t\r\n\t\t\tattributes = {\r\n\t\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\r\n\t\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\r\n\t\t\t};\r\n\t\r\n\t\t\tuniforms = {\r\n\t\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\r\n\t\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\r\n\t\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\r\n\t\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\r\n\t\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\r\n\t\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\r\n\t\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\r\n\t\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\r\n\t\t\t};\r\n\t\r\n\t\t}\r\n\t\r\n\t\t/*\r\n\t\t * Render lens flares\r\n\t\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n\t\t *         reads these back and calculates occlusion.\r\n\t\t */\r\n\t\r\n\t\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\r\n\t\r\n\t\t\tif ( flares.length === 0 ) return;\r\n\t\r\n\t\t\tvar tempPosition = new THREE.Vector3();\r\n\t\r\n\t\t\tvar invAspect = viewportHeight / viewportWidth,\r\n\t\t\t\thalfViewportWidth = viewportWidth * 0.5,\r\n\t\t\t\thalfViewportHeight = viewportHeight * 0.5;\r\n\t\r\n\t\t\tvar size = 16 / viewportHeight,\r\n\t\t\t\tscale = new THREE.Vector2( size * invAspect, size );\r\n\t\r\n\t\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\r\n\t\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\r\n\t\r\n\t\t\tif ( program === undefined ) {\r\n\t\r\n\t\t\t\tinit();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgl.useProgram( program );\r\n\t\r\n\t\t\tstate.initAttributes();\r\n\t\t\tstate.enableAttribute( attributes.vertex );\r\n\t\t\tstate.enableAttribute( attributes.uv );\r\n\t\t\tstate.disableUnusedAttributes();\r\n\t\r\n\t\t\t// loop through all lens flares to update their occlusion and positions\r\n\t\t\t// setup gl and common used attribs/uniforms\r\n\t\r\n\t\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\r\n\t\t\tgl.uniform1i( uniforms.map, 1 );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\r\n\t\t\tstate.disable( gl.CULL_FACE );\r\n\t\t\tgl.depthMask( false );\r\n\t\r\n\t\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tsize = 16 / viewportHeight;\r\n\t\t\t\tscale.set( size * invAspect, size );\r\n\t\r\n\t\t\t\t// calc object screen position\r\n\t\r\n\t\t\t\tvar flare = flares[ i ];\r\n\t\r\n\t\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\r\n\t\r\n\t\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\r\n\t\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\r\n\t\r\n\t\t\t\t// setup arrays for gl programs\r\n\t\r\n\t\t\t\tscreenPosition.copy( tempPosition );\r\n\t\r\n\t\t\t\tscreenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\r\n\t\t\t\tscreenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\r\n\t\r\n\t\t\t\t// screen cull\r\n\t\r\n\t\t\t\tif ( hasVertexTexture || (\r\n\t\t\t\t\tscreenPositionPixels.x > 0 &&\r\n\t\t\t\t\tscreenPositionPixels.x < viewportWidth &&\r\n\t\t\t\t\tscreenPositionPixels.y > 0 &&\r\n\t\t\t\t\tscreenPositionPixels.y < viewportHeight ) ) {\r\n\t\r\n\t\t\t\t\t// save current RGB to temp texture\r\n\t\r\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\r\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\t\r\n\t\r\n\t\t\t\t\t// render pink quad\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\r\n\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\r\n\t\t\t\t\tstate.disable( gl.BLEND );\r\n\t\t\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\t\r\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\t\r\n\t\r\n\t\t\t\t\t// copy result to occlusionMap\r\n\t\r\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\t\r\n\t\r\n\t\t\t\t\t// restore graphics\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\r\n\t\t\t\t\tstate.disable( gl.DEPTH_TEST );\r\n\t\r\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\t\r\n\t\r\n\t\t\t\t\t// update object positions\r\n\t\r\n\t\t\t\t\tflare.positionScreen.copy( screenPosition );\r\n\t\r\n\t\t\t\t\tif ( flare.customUpdateCallback ) {\r\n\t\r\n\t\t\t\t\t\tflare.customUpdateCallback( flare );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tflare.updateLensFlares();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// render flares\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\r\n\t\t\t\t\tstate.enable( gl.BLEND );\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\r\n\t\r\n\t\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\r\n\t\r\n\t\t\t\t\t\t\tscreenPosition.x = sprite.x;\r\n\t\t\t\t\t\t\tscreenPosition.y = sprite.y;\r\n\t\t\t\t\t\t\tscreenPosition.z = sprite.z;\r\n\t\r\n\t\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewportHeight;\r\n\t\r\n\t\t\t\t\t\t\tscale.x = size * invAspect;\r\n\t\t\t\t\t\t\tscale.y = size;\r\n\t\r\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\t\r\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\r\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\r\n\t\r\n\t\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\r\n\t\t\t\t\t\t\trenderer.setTexture( sprite.texture, 1 );\r\n\t\r\n\t\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// restore gl\r\n\t\r\n\t\t\tstate.enable( gl.CULL_FACE );\r\n\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\t\t\tgl.depthMask( true );\r\n\t\r\n\t\t\trenderer.resetGLState();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction createProgram ( shader ) {\r\n\t\r\n\t\t\tvar program = gl.createProgram();\r\n\t\r\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\t\r\n\t\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\r\n\t\r\n\t\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\t\r\n\t\t\tgl.compileShader( fragmentShader );\r\n\t\t\tgl.compileShader( vertexShader );\r\n\t\r\n\t\t\tgl.attachShader( program, fragmentShader );\r\n\t\t\tgl.attachShader( program, vertexShader );\r\n\t\r\n\t\t\tgl.linkProgram( program );\r\n\t\r\n\t\t\treturn program;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/plugins/SpritePlugin.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.SpritePlugin = function ( renderer, sprites ) {\r\n\t\r\n\t\tvar gl = renderer.context;\r\n\t\tvar state = renderer.state;\r\n\t\r\n\t\tvar vertexBuffer, elementBuffer;\r\n\t\tvar program, attributes, uniforms;\r\n\t\r\n\t\tvar texture;\r\n\t\r\n\t\t// decompose matrixWorld\r\n\t\r\n\t\tvar spritePosition = new THREE.Vector3();\r\n\t\tvar spriteRotation = new THREE.Quaternion();\r\n\t\tvar spriteScale = new THREE.Vector3();\r\n\t\r\n\t\tfunction init() {\r\n\t\r\n\t\t\tvar vertices = new Float32Array( [\r\n\t\t\t\t- 0.5, - 0.5,  0, 0,\r\n\t\t\t\t  0.5, - 0.5,  1, 0,\r\n\t\t\t\t  0.5,   0.5,  1, 1,\r\n\t\t\t\t- 0.5,   0.5,  0, 1\r\n\t\t\t] );\r\n\t\r\n\t\t\tvar faces = new Uint16Array( [\r\n\t\t\t\t0, 1, 2,\r\n\t\t\t\t0, 2, 3\r\n\t\t\t] );\r\n\t\r\n\t\t\tvertexBuffer  = gl.createBuffer();\r\n\t\t\telementBuffer = gl.createBuffer();\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\t\r\n\t\t\tprogram = createProgram();\r\n\t\r\n\t\t\tattributes = {\r\n\t\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\r\n\t\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\r\n\t\t\t};\r\n\t\r\n\t\t\tuniforms = {\r\n\t\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\r\n\t\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\r\n\t\r\n\t\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\r\n\t\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\r\n\t\r\n\t\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\r\n\t\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\r\n\t\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\r\n\t\r\n\t\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\r\n\t\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\r\n\t\r\n\t\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\r\n\t\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\r\n\t\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\r\n\t\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\r\n\t\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\r\n\t\r\n\t\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\r\n\t\t\t};\r\n\t\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = 8;\r\n\t\t\tcanvas.height = 8;\r\n\t\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.fillStyle = 'white';\r\n\t\t\tcontext.fillRect( 0, 0, 8, 8 );\r\n\t\r\n\t\t\ttexture = new THREE.Texture( canvas );\r\n\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.render = function ( scene, camera ) {\r\n\t\r\n\t\t\tif ( sprites.length === 0 ) return;\r\n\t\r\n\t\t\t// setup gl\r\n\t\r\n\t\t\tif ( program === undefined ) {\r\n\t\r\n\t\t\t\tinit();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgl.useProgram( program );\r\n\t\r\n\t\t\tstate.initAttributes();\r\n\t\t\tstate.enableAttribute( attributes.position );\r\n\t\t\tstate.enableAttribute( attributes.uv );\r\n\t\t\tstate.disableUnusedAttributes();\r\n\t\r\n\t\t\tstate.disable( gl.CULL_FACE );\r\n\t\t\tstate.enable( gl.BLEND );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\r\n\t\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\t\r\n\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\tgl.uniform1i( uniforms.map, 0 );\r\n\t\r\n\t\t\tvar oldFogType = 0;\r\n\t\t\tvar sceneFogType = 0;\r\n\t\t\tvar fog = scene.fog;\r\n\t\r\n\t\t\tif ( fog ) {\r\n\t\r\n\t\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\r\n\t\r\n\t\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\t\r\n\t\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\r\n\t\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\r\n\t\t\t\t\toldFogType = 1;\r\n\t\t\t\t\tsceneFogType = 1;\r\n\t\r\n\t\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\t\r\n\t\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\r\n\t\t\t\t\toldFogType = 2;\r\n\t\t\t\t\tsceneFogType = 2;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 0 );\r\n\t\t\t\toldFogType = 0;\r\n\t\t\t\tsceneFogType = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\t// update positions and sort\r\n\t\r\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar sprite = sprites[ i ];\r\n\t\r\n\t\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\r\n\t\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tsprites.sort( painterSortStable );\r\n\t\r\n\t\t\t// render all sprites\r\n\t\r\n\t\t\tvar scale = [];\r\n\t\r\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar sprite = sprites[ i ];\r\n\t\t\t\tvar material = sprite.material;\r\n\t\r\n\t\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\r\n\t\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\r\n\t\r\n\t\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\r\n\t\r\n\t\t\t\tscale[ 0 ] = spriteScale.x;\r\n\t\t\t\tscale[ 1 ] = spriteScale.y;\r\n\t\r\n\t\t\t\tvar fogType = 0;\r\n\t\r\n\t\t\t\tif ( scene.fog && material.fog ) {\r\n\t\r\n\t\t\t\t\tfogType = sceneFogType;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( oldFogType !== fogType ) {\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\r\n\t\t\t\t\toldFogType = fogType;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( material.map !== null ) {\r\n\t\r\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\r\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\r\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\r\n\t\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\r\n\t\r\n\t\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\r\n\t\t\t\tgl.uniform2fv( uniforms.scale, scale );\r\n\t\r\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\t\tstate.setDepthTest( material.depthTest );\r\n\t\t\t\tstate.setDepthWrite( material.depthWrite );\r\n\t\r\n\t\t\t\tif ( material.map && material.map.image && material.map.image.width ) {\r\n\t\r\n\t\t\t\t\trenderer.setTexture( material.map, 0 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\trenderer.setTexture( texture, 0 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// restore gl\r\n\t\r\n\t\t\tstate.enable( gl.CULL_FACE );\r\n\t\r\n\t\t\trenderer.resetGLState();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction createProgram () {\r\n\t\r\n\t\t\tvar program = gl.createProgram();\r\n\t\r\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\t\r\n\t\t\tgl.shaderSource( vertexShader, [\r\n\t\r\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\t\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform float rotation;',\r\n\t\t\t\t'uniform vec2 scale;',\r\n\t\t\t\t'uniform vec2 uvOffset;',\r\n\t\t\t\t'uniform vec2 uvScale;',\r\n\t\r\n\t\t\t\t'attribute vec2 position;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\t\r\n\t\t\t\t'varying vec2 vUV;',\r\n\t\r\n\t\t\t\t'void main() {',\r\n\t\r\n\t\t\t\t\t'vUV = uvOffset + uv * uvScale;',\r\n\t\r\n\t\t\t\t\t'vec2 alignedPosition = position * scale;',\r\n\t\r\n\t\t\t\t\t'vec2 rotatedPosition;',\r\n\t\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\r\n\t\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\r\n\t\r\n\t\t\t\t\t'vec4 finalPosition;',\r\n\t\r\n\t\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\r\n\t\t\t\t\t'finalPosition.xy += rotatedPosition;',\r\n\t\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\r\n\t\r\n\t\t\t\t\t'gl_Position = finalPosition;',\r\n\t\r\n\t\t\t\t'}'\r\n\t\r\n\t\t\t].join( '\\n' ) );\r\n\t\r\n\t\t\tgl.shaderSource( fragmentShader, [\r\n\t\r\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\t\r\n\t\t\t\t'uniform vec3 color;',\r\n\t\t\t\t'uniform sampler2D map;',\r\n\t\t\t\t'uniform float opacity;',\r\n\t\r\n\t\t\t\t'uniform int fogType;',\r\n\t\t\t\t'uniform vec3 fogColor;',\r\n\t\t\t\t'uniform float fogDensity;',\r\n\t\t\t\t'uniform float fogNear;',\r\n\t\t\t\t'uniform float fogFar;',\r\n\t\t\t\t'uniform float alphaTest;',\r\n\t\r\n\t\t\t\t'varying vec2 vUV;',\r\n\t\r\n\t\t\t\t'void main() {',\r\n\t\r\n\t\t\t\t\t'vec4 texture = texture2D( map, vUV );',\r\n\t\r\n\t\t\t\t\t'if ( texture.a < alphaTest ) discard;',\r\n\t\r\n\t\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\r\n\t\r\n\t\t\t\t\t'if ( fogType > 0 ) {',\r\n\t\r\n\t\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\r\n\t\t\t\t\t\t'float fogFactor = 0.0;',\r\n\t\r\n\t\t\t\t\t\t'if ( fogType == 1 ) {',\r\n\t\r\n\t\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\r\n\t\r\n\t\t\t\t\t\t'} else {',\r\n\t\r\n\t\t\t\t\t\t\t'const float LOG2 = 1.442695;',\r\n\t\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\r\n\t\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\r\n\t\r\n\t\t\t\t\t\t'}',\r\n\t\r\n\t\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\r\n\t\r\n\t\t\t\t\t'}',\r\n\t\r\n\t\t\t\t'}'\r\n\t\r\n\t\t\t].join( '\\n' ) );\r\n\t\r\n\t\t\tgl.compileShader( vertexShader );\r\n\t\t\tgl.compileShader( fragmentShader );\r\n\t\r\n\t\t\tgl.attachShader( program, vertexShader );\r\n\t\t\tgl.attachShader( program, fragmentShader );\r\n\t\r\n\t\t\tgl.linkProgram( program );\r\n\t\r\n\t\t\treturn program;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction painterSortStable ( a, b ) {\r\n\t\r\n\t\t\tif ( a.z !== b.z ) {\r\n\t\r\n\t\t\t\treturn b.z - a.z;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn b.id - a.id;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/CurveUtils.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\t\r\n\tTHREE.CurveUtils = {\r\n\t\r\n\t\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\r\n\t\r\n\t\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Puay Bing, thanks for helping with this derivative!\r\n\t\r\n\t\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\r\n\t\r\n\t\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\r\n\t\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\r\n\t\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\r\n\t\t\t\t3 * t * t * p3;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\r\n\t\r\n\t\t\t// To check if my formulas are correct\r\n\t\r\n\t\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\r\n\t\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\r\n\t\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\r\n\t\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\r\n\t\r\n\t\t\treturn h00 + h10 + h01 + h11;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Catmull-Rom\r\n\t\r\n\t\tinterpolate: function( p0, p1, p2, p3, t ) {\r\n\t\r\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\t\tvar t2 = t * t;\r\n\t\t\tvar t3 = t * t2;\r\n\t\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/GeometryUtils.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.GeometryUtils = {\r\n\t\r\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\t\r\n\t\t\tvar matrix;\r\n\t\r\n\t\t\tif ( geometry2 instanceof THREE.Mesh ) {\r\n\t\r\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\t\r\n\t\t\t\tmatrix = geometry2.matrix;\r\n\t\t\t\tgeometry2 = geometry2.geometry;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function ( geometry ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\t\treturn geometry.center();\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/ImageUtils.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Daosheng Mu / https://github.com/DaoshengMu/\r\n\t */\r\n\t\r\n\tTHREE.ImageUtils = {\r\n\t\r\n\t\tcrossOrigin: undefined,\r\n\t\r\n\t\tloadTexture: function ( url, mapping, onLoad, onError ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTexture is being deprecated. Use THREE.TextureLoader() instead.' );\r\n\t\r\n\t\t\tvar loader = new THREE.TextureLoader();\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\r\n\t\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\t\r\n\t\t\tif ( mapping ) texture.mapping = mapping;\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube is being deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\t\r\n\t\t\tvar loader = new THREE.CubeTextureLoader();\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\r\n\t\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\t\r\n\t\t\tif ( mapping ) texture.mapping = mapping;\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tloadCompressedTexture: function () {\r\n\t\r\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' )\r\n\t\r\n\t\t},\r\n\t\r\n\t\tloadCompressedTextureCube: function () {\r\n\t\r\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' )\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/SceneUtils.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.SceneUtils = {\r\n\t\r\n\t\tcreateMultiMaterialObject: function ( geometry, materials ) {\r\n\t\r\n\t\t\tvar group = new THREE.Group();\r\n\t\r\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn group;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdetach: function ( child, parent, scene ) {\r\n\t\r\n\t\t\tchild.applyMatrix( parent.matrixWorld );\r\n\t\t\tparent.remove( child );\r\n\t\t\tscene.add( child );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tattach: function ( child, scene, parent ) {\r\n\t\r\n\t\t\tvar matrixWorldInverse = new THREE.Matrix4();\r\n\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\t\t\tchild.applyMatrix( matrixWorldInverse );\r\n\t\r\n\t\t\tscene.remove( child );\r\n\t\t\tparent.add( child );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/ShapeUtils.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\t\r\n\tTHREE.ShapeUtils = {\r\n\t\r\n\t\t// calculate area of the contour polygon\r\n\t\r\n\t\tarea: function ( contour ) {\r\n\t\r\n\t\t\tvar n = contour.length;\r\n\t\t\tvar a = 0.0;\r\n\t\r\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\t\r\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn a * 0.5;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttriangulate: ( function () {\r\n\t\r\n\t\t\t/**\r\n\t\t\t * This code is a quick port of code written in C++ which was submitted to\r\n\t\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n\t\t\t * See original code and more information here:\r\n\t\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n\t\t\t *\r\n\t\t\t * ported to actionscript by Zevan Rosser\r\n\t\t\t * www.actionsnippet.com\r\n\t\t\t *\r\n\t\t\t * ported to javascript by Joshua Koo\r\n\t\t\t * http://www.lab4games.net/zz85/blog\r\n\t\t\t *\r\n\t\t\t */\r\n\t\r\n\t\t\tfunction snip( contour, u, v, w, n, verts ) {\r\n\t\r\n\t\t\t\tvar p;\r\n\t\t\t\tvar ax, ay, bx, by;\r\n\t\t\t\tvar cx, cy, px, py;\r\n\t\r\n\t\t\t\tax = contour[ verts[ u ] ].x;\r\n\t\t\t\tay = contour[ verts[ u ] ].y;\r\n\t\r\n\t\t\t\tbx = contour[ verts[ v ] ].x;\r\n\t\t\t\tby = contour[ verts[ v ] ].y;\r\n\t\r\n\t\t\t\tcx = contour[ verts[ w ] ].x;\r\n\t\t\t\tcy = contour[ verts[ w ] ].y;\r\n\t\r\n\t\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\r\n\t\r\n\t\t\t\tvar aX, aY, bX, bY, cX, cY;\r\n\t\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\r\n\t\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\r\n\t\r\n\t\t\t\taX = cx - bx;  aY = cy - by;\r\n\t\t\t\tbX = ax - cx;  bY = ay - cy;\r\n\t\t\t\tcX = bx - ax;  cY = by - ay;\r\n\t\r\n\t\t\t\tfor ( p = 0; p < n; p ++ ) {\r\n\t\r\n\t\t\t\t\tpx = contour[ verts[ p ] ].x;\r\n\t\t\t\t\tpy = contour[ verts[ p ] ].y;\r\n\t\r\n\t\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\r\n\t\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\r\n\t\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\r\n\t\r\n\t\t\t\t\tapx = px - ax;  apy = py - ay;\r\n\t\t\t\t\tbpx = px - bx;  bpy = py - by;\r\n\t\t\t\t\tcpx = px - cx;  cpy = py - cy;\r\n\t\r\n\t\t\t\t\t// see if p is inside triangle abc\r\n\t\r\n\t\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\r\n\t\t\t\t\tcCROSSap = cX * apy - cY * apx;\r\n\t\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\r\n\t\r\n\t\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// takes in an contour array and returns\r\n\t\r\n\t\t\treturn function ( contour, indices ) {\r\n\t\r\n\t\t\t\tvar n = contour.length;\r\n\t\r\n\t\t\t\tif ( n < 3 ) return null;\r\n\t\r\n\t\t\t\tvar result = [],\r\n\t\t\t\t\tverts = [],\r\n\t\t\t\t\tvertIndices = [];\r\n\t\r\n\t\t\t\t/* we want a counter-clockwise polygon in verts */\r\n\t\r\n\t\t\t\tvar u, v, w;\r\n\t\r\n\t\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\r\n\t\r\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar nv = n;\r\n\t\r\n\t\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\r\n\t\r\n\t\t\t\tvar count = 2 * nv;   /* error detection */\r\n\t\r\n\t\t\t\tfor ( v = nv - 1; nv > 2; ) {\r\n\t\r\n\t\t\t\t\t/* if we loop, it is probably a non-simple polygon */\r\n\t\r\n\t\t\t\t\tif ( ( count -- ) <= 0 ) {\r\n\t\r\n\t\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\r\n\t\r\n\t\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\r\n\t\t\t\t\t\t//return null;\r\n\t\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\r\n\t\r\n\t\t\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\t\t\treturn result;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\r\n\t\r\n\t\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\r\n\t\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\r\n\t\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\r\n\t\r\n\t\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\r\n\t\r\n\t\t\t\t\t\tvar a, b, c, s, t;\r\n\t\r\n\t\t\t\t\t\t/* true names of the vertices */\r\n\t\r\n\t\t\t\t\t\ta = verts[ u ];\r\n\t\t\t\t\t\tb = verts[ v ];\r\n\t\t\t\t\t\tc = verts[ w ];\r\n\t\r\n\t\t\t\t\t\t/* output Triangle */\r\n\t\r\n\t\t\t\t\t\tresult.push( [ contour[ a ],\r\n\t\t\t\t\t\t\tcontour[ b ],\r\n\t\t\t\t\t\t\tcontour[ c ] ] );\r\n\t\r\n\t\r\n\t\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\r\n\t\r\n\t\t\t\t\t\t/* remove v from the remaining polygon */\r\n\t\r\n\t\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tverts[ s ] = verts[ t ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tnv --;\r\n\t\r\n\t\t\t\t\t\t/* reset error detection counter */\r\n\t\r\n\t\t\t\t\t\tcount = 2 * nv;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\treturn result;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} )(),\r\n\t\r\n\t\ttriangulateShape: function ( contour, holes ) {\r\n\t\r\n\t\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\r\n\t\r\n\t\t\t\t// inOtherPt needs to be collinear to the inSegment\r\n\t\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\r\n\t\r\n\t\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\r\n\t\r\n\t\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\r\n\t\r\n\t\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\r\n\t\r\n\t\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\r\n\t\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\r\n\t\r\n\t\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\r\n\t\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\r\n\t\r\n\t\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\r\n\t\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\r\n\t\r\n\t\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t// not parallel\r\n\t\r\n\t\t\t\t\tvar perpSeg2;\r\n\t\t\t\t\tif ( limit > 0 ) {\r\n\t\r\n\t\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\r\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\r\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// i.e. to reduce rounding errors\r\n\t\t\t\t\t// intersection at endpoint of segment#1?\r\n\t\t\t\t\tif ( perpSeg2 === 0 ) {\r\n\t\r\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( perpSeg2 === limit ) {\r\n\t\r\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\t\treturn [ inSeg1Pt2 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// intersection at endpoint of segment#2?\r\n\t\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\r\n\t\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\r\n\t\r\n\t\t\t\t\t// return real intersection point\r\n\t\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\r\n\t\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\r\n\t\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\r\n\t\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\r\n\t\r\n\t\t\t\t\t// they are collinear or degenerate\r\n\t\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\r\n\t\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\r\n\t\t\t\t\t// both segments are points\r\n\t\t\t\t\tif ( seg1Pt && seg2Pt ) {\r\n\t\r\n\t\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\r\n\t\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\r\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// segment#1  is a single point\r\n\t\t\t\t\tif ( seg1Pt ) {\r\n\t\r\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\r\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// segment#2  is a single point\r\n\t\t\t\t\tif ( seg2Pt ) {\r\n\t\r\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\r\n\t\t\t\t\t\treturn [ inSeg2Pt1 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// they are collinear segments, which might overlap\r\n\t\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\r\n\t\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\r\n\t\t\t\t\tif ( seg1dx !== 0 ) {\r\n\t\r\n\t\t\t\t\t\t// the segments are NOT on a vertical line\r\n\t\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\r\n\t\r\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\r\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\r\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\r\n\t\r\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\r\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\r\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t// the segments are on a vertical line\r\n\t\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\r\n\t\r\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\r\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\r\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\r\n\t\r\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\r\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\r\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1minVal <= seg2minVal ) {\r\n\t\r\n\t\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\r\n\t\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\r\n\t\r\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\t\treturn [ seg2min ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\r\n\t\t\t\t\t\treturn\t[ seg2min, seg2max ];\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\r\n\t\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\r\n\t\r\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\t\treturn [ seg1min ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\r\n\t\t\t\t\t\treturn\t[ seg1min, seg2max ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\r\n\t\r\n\t\t\t\t// The order of legs is important\r\n\t\r\n\t\t\t\t// translation of all points, so that Vertex is at (0,0)\r\n\t\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\r\n\t\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\r\n\t\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\r\n\t\r\n\t\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\r\n\t\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\r\n\t\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\r\n\t\r\n\t\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t// angle != 180 deg.\r\n\t\r\n\t\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\r\n\t\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\r\n\t\r\n\t\t\t\t\tif ( from2toAngle > 0 ) {\r\n\t\r\n\t\t\t\t\t\t// main angle < 180 deg.\r\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t// main angle > 180 deg.\r\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// angle == 180 deg.\r\n\t\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\r\n\t\t\t\t\treturn\t( from2otherAngle > 0 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\tfunction removeHoles( contour, holes ) {\r\n\t\r\n\t\t\t\tvar shape = contour.concat(); // work on this shape\r\n\t\t\t\tvar hole;\r\n\t\r\n\t\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\r\n\t\r\n\t\t\t\t\t// Check if hole point lies within angle around shape point\r\n\t\t\t\t\tvar lastShapeIdx = shape.length - 1;\r\n\t\r\n\t\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\r\n\t\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\r\n\t\r\n\t\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\r\n\t\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\r\n\t\r\n\t\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\r\n\t\t\t\t\tif ( ! insideAngle ) {\r\n\t\r\n\t\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\r\n\t\t\t\t\t\treturn\tfalse;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// Check if shape point lies within angle around hole point\r\n\t\t\t\t\tvar lastHoleIdx = hole.length - 1;\r\n\t\r\n\t\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\r\n\t\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\r\n\t\r\n\t\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\r\n\t\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\r\n\t\r\n\t\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\r\n\t\t\t\t\tif ( ! insideAngle ) {\r\n\t\r\n\t\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\r\n\t\t\t\t\t\treturn\tfalse;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn\ttrue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\r\n\t\r\n\t\t\t\t\t// checks for intersections with shape edges\r\n\t\t\t\t\tvar sIdx, nextIdx, intersection;\r\n\t\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\r\n\t\r\n\t\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\r\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\r\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn\tfalse;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar indepHoles = [];\r\n\t\r\n\t\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\r\n\t\r\n\t\t\t\t\t// checks for intersections with hole edges\r\n\t\t\t\t\tvar ihIdx, chkHole,\r\n\t\t\t\t\t\thIdx, nextIdx, intersection;\r\n\t\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\r\n\t\r\n\t\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\r\n\t\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\r\n\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\r\n\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn\tfalse;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar holeIndex, shapeIndex,\r\n\t\t\t\t\tshapePt, holePt,\r\n\t\t\t\t\tholeIdx, cutKey, failedCuts = [],\r\n\t\t\t\t\ttmpShape1, tmpShape2,\r\n\t\t\t\t\ttmpHole1, tmpHole2;\r\n\t\r\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\t\tindepHoles.push( h );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar minShapeIndex = 0;\r\n\t\t\t\tvar counter = indepHoles.length * 2;\r\n\t\t\t\twhile ( indepHoles.length > 0 ) {\r\n\t\r\n\t\t\t\t\tcounter --;\r\n\t\t\t\t\tif ( counter < 0 ) {\r\n\t\r\n\t\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// search for shape-vertex and hole-vertex,\r\n\t\t\t\t\t// which can be connected without intersections\r\n\t\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\r\n\t\r\n\t\t\t\t\t\tshapePt = shape[ shapeIndex ];\r\n\t\t\t\t\t\tholeIndex\t= - 1;\r\n\t\r\n\t\t\t\t\t\t// search for hole which can be reached without intersections\r\n\t\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tholeIdx = indepHoles[ h ];\r\n\t\r\n\t\t\t\t\t\t\t// prevent multiple checks\r\n\t\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\r\n\t\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\r\n\t\r\n\t\t\t\t\t\t\thole = holes[ holeIdx ];\r\n\t\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tholePt = hole[ h2 ];\r\n\t\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\r\n\t\r\n\t\t\t\t\t\t\t\tholeIndex = h2;\r\n\t\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\r\n\t\r\n\t\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\r\n\t\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\r\n\t\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\r\n\t\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\r\n\t\r\n\t\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\r\n\t\r\n\t\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\r\n\t\r\n\t\t\t\t\t\t\t\t// Debug only, to show the selected cuts\r\n\t\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\r\n\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\t\r\n\t\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn shape; \t\t\t/* shape with no holes */\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\tvar i, il, f, face,\r\n\t\t\t\tkey, index,\r\n\t\t\t\tallPointsMap = {};\r\n\t\r\n\t\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\r\n\t\r\n\t\t\tvar allpoints = contour.concat();\r\n\t\r\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\r\n\t\r\n\t\t\t// prepare all points map\r\n\t\r\n\t\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\r\n\t\r\n\t\t\t\tif ( allPointsMap[ key ] !== undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tallPointsMap[ key ] = i;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// remove holes by cutting paths to holes and adding them to the shape\r\n\t\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\r\n\t\r\n\t\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\r\n\t\t\t//console.log( \"triangles\",triangles, triangles.length );\r\n\t\r\n\t\t\t// check all face vertices against all points map\r\n\t\r\n\t\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tface = triangles[ i ];\r\n\t\r\n\t\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\t\r\n\t\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\t\r\n\t\t\t\t\tindex = allPointsMap[ key ];\r\n\t\r\n\t\t\t\t\tif ( index !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tface[ f ] = index;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn triangles.concat();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisClockWise: function ( pts ) {\r\n\t\r\n\t\t\treturn THREE.ShapeUtils.area( pts ) < 0;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Bezier Curves formulas obtained from\r\n\t\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n\t\r\n\t\t// Quad Bezier Functions\r\n\t\r\n\t\tb2: ( function () {\r\n\t\r\n\t\t\tfunction b2p0( t, p ) {\r\n\t\r\n\t\t\t\tvar k = 1 - t;\r\n\t\t\t\treturn k * k * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b2p1( t, p ) {\r\n\t\r\n\t\t\t\treturn 2 * ( 1 - t ) * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b2p2( t, p ) {\r\n\t\r\n\t\t\t\treturn t * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn function ( t, p0, p1, p2 ) {\r\n\t\r\n\t\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )(),\r\n\t\r\n\t\t// Cubic Bezier Functions\r\n\t\r\n\t\tb3: ( function () {\r\n\t\r\n\t\t\tfunction b3p0( t, p ) {\r\n\t\r\n\t\t\t\tvar k = 1 - t;\r\n\t\t\t\treturn k * k * k * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b3p1( t, p ) {\r\n\t\r\n\t\t\t\tvar k = 1 - t;\r\n\t\t\t\treturn 3 * k * k * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b3p2( t, p ) {\r\n\t\r\n\t\t\t\tvar k = 1 - t;\r\n\t\t\t\treturn 3 * k * t * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b3p3( t, p ) {\r\n\t\r\n\t\t\t\treturn t * t * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn function ( t, p0, p1, p2, p3 ) {\r\n\t\r\n\t\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )()\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/audio/Audio.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Audio = function ( listener ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Audio';\r\n\t\r\n\t\tthis.context = listener.context;\r\n\t\tthis.source = this.context.createBufferSource();\r\n\t\tthis.source.onended = this.onEnded.bind( this );\r\n\t\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( this.context.destination );\r\n\t\r\n\t\tthis.panner = this.context.createPanner();\r\n\t\tthis.panner.connect( this.gain );\r\n\t\r\n\t\tthis.autoplay = false;\r\n\t\r\n\t\tthis.startTime = 0;\r\n\t\tthis.playbackRate = 1;\r\n\t\tthis.isPlaying = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Audio.prototype.constructor = THREE.Audio;\r\n\t\r\n\tTHREE.Audio.prototype.load = function ( file ) {\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tvar request = new XMLHttpRequest();\r\n\t\trequest.open( 'GET', file, true );\r\n\t\trequest.responseType = 'arraybuffer';\r\n\t\trequest.onload = function ( e ) {\r\n\t\r\n\t\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\r\n\t\r\n\t\t\t\tscope.source.buffer = buffer;\r\n\t\r\n\t\t\t\tif ( scope.autoplay ) scope.play();\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t};\r\n\t\trequest.send();\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.play = function () {\r\n\t\r\n\t\tif ( this.isPlaying === true ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar source = this.context.createBufferSource();\r\n\t\r\n\t\tsource.buffer = this.source.buffer;\r\n\t\tsource.loop = this.source.loop;\r\n\t\tsource.onended = this.source.onended;\r\n\t\tsource.start( 0, this.startTime );\r\n\t\tsource.playbackRate.value = this.playbackRate;\r\n\t\r\n\t\tthis.isPlaying = true;\r\n\t\r\n\t\tthis.source = source;\r\n\t\r\n\t\tthis.connect();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.pause = function () {\r\n\t\r\n\t\tthis.source.stop();\r\n\t\tthis.startTime = this.context.currentTime;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.stop = function () {\r\n\t\r\n\t\tthis.source.stop();\r\n\t\tthis.startTime = 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.connect = function () {\r\n\t\r\n\t\tif ( this.filter !== undefined ) {\r\n\t\r\n\t\t\tthis.source.connect( this.filter );\r\n\t\t\tthis.filter.connect( this.panner );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.source.connect( this.panner );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.disconnect = function () {\r\n\t\r\n\t\tif ( this.filter !== undefined ) {\r\n\t\r\n\t\t\tthis.source.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.panner );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.source.disconnect( this.panner );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setFilter = function ( value ) {\r\n\t\r\n\t\tif ( this.isPlaying === true ) {\r\n\t\r\n\t\t\tthis.disconnect();\r\n\t\t\tthis.filter = value;\r\n\t\t\tthis.connect();\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.filter = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getFilter = function () {\r\n\t\r\n\t\treturn this.filter;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setPlaybackRate = function ( value ) {\r\n\t\r\n\t\tthis.playbackRate = value;\r\n\t\r\n\t\tif ( this.isPlaying === true ) {\r\n\t\r\n\t\t\tthis.source.playbackRate.value = this.playbackRate;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getPlaybackRate = function () {\r\n\t\r\n\t\treturn this.playbackRate;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.onEnded = function() {\r\n\t\r\n\t\tthis.isPlaying = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setLoop = function ( value ) {\r\n\t\r\n\t\tthis.source.loop = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getLoop = function () {\r\n\t\r\n\t\treturn this.source.loop;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setRefDistance = function ( value ) {\r\n\t\r\n\t\tthis.panner.refDistance = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getRefDistance = function () {\r\n\t\r\n\t\treturn this.panner.refDistance;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\r\n\t\r\n\t\tthis.panner.rolloffFactor = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getRolloffFactor = function () {\r\n\t\r\n\t\treturn this.panner.rolloffFactor;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setVolume = function ( value ) {\r\n\t\r\n\t\tthis.gain.gain.value = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getVolume = function () {\r\n\t\r\n\t\treturn this.gain.gain.value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.updateMatrixWorld = ( function () {\r\n\t\r\n\t\tvar position = new THREE.Vector3();\r\n\t\r\n\t\treturn function updateMatrixWorld( force ) {\r\n\t\r\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\t\r\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/extras/audio/AudioListener.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.AudioListener = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'AudioListener';\r\n\t\r\n\t\tthis.context = new ( window.AudioContext || window.webkitAudioContext )();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.AudioListener.prototype.constructor = THREE.AudioListener;\r\n\t\r\n\tTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\r\n\t\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\t\tvar scale = new THREE.Vector3();\r\n\t\r\n\t\tvar orientation = new THREE.Vector3();\r\n\t\r\n\t\treturn function updateMatrixWorld( force ) {\r\n\t\r\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\t\r\n\t\t\tvar listener = this.context.listener;\r\n\t\t\tvar up = this.up;\r\n\t\r\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\r\n\t\r\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\t\r\n\t\t\tlistener.setPosition( position.x, position.y, position.z );\r\n\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/extras/core/Curve.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Extensible curve object\r\n\t *\r\n\t * Some common of Curve methods\r\n\t * .getPoint(t), getTangent(t)\r\n\t * .getPointAt(u), getTagentAt(u)\r\n\t * .getPoints(), .getSpacedPoints()\r\n\t * .getLength()\r\n\t * .updateArcLengths()\r\n\t *\r\n\t * This following classes subclasses THREE.Curve:\r\n\t *\r\n\t * -- 2d classes --\r\n\t * THREE.LineCurve\r\n\t * THREE.QuadraticBezierCurve\r\n\t * THREE.CubicBezierCurve\r\n\t * THREE.SplineCurve\r\n\t * THREE.ArcCurve\r\n\t * THREE.EllipseCurve\r\n\t *\r\n\t * -- 3d classes --\r\n\t * THREE.LineCurve3\r\n\t * THREE.QuadraticBezierCurve3\r\n\t * THREE.CubicBezierCurve3\r\n\t * THREE.SplineCurve3\r\n\t * THREE.ClosedSplineCurve3\r\n\t *\r\n\t * A series of curves can be represented as a THREE.CurvePath\r\n\t *\r\n\t **/\r\n\t\r\n\t/**************************************************************\r\n\t *\tAbstract Curve base class\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.Curve = function () {\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Curve.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Curve,\r\n\t\r\n\t\t// Virtual base class method to overwrite and implement in subclasses\r\n\t\t//\t- t [0 .. 1]\r\n\t\r\n\t\tgetPoint: function ( t ) {\r\n\t\r\n\t\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\r\n\t\t\treturn null;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get point at relative position in curve according to arc length\r\n\t\t// - u [0 .. 1]\r\n\t\r\n\t\tgetPointAt: function ( u ) {\r\n\t\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getPoint( t );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get sequence of points using getPoint( t )\r\n\t\r\n\t\tgetPoints: function ( divisions ) {\r\n\t\r\n\t\t\tif ( ! divisions ) divisions = 5;\r\n\t\r\n\t\t\tvar d, pts = [];\r\n\t\r\n\t\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\t\r\n\t\t\t\tpts.push( this.getPoint( d / divisions ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn pts;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get sequence of points using getPointAt( u )\r\n\t\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\t\r\n\t\t\tif ( ! divisions ) divisions = 5;\r\n\t\r\n\t\t\tvar d, pts = [];\r\n\t\r\n\t\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\t\r\n\t\t\t\tpts.push( this.getPointAt( d / divisions ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn pts;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get total curve arc length\r\n\t\r\n\t\tgetLength: function () {\r\n\t\r\n\t\t\tvar lengths = this.getLengths();\r\n\t\t\treturn lengths[ lengths.length - 1 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get list of cumulative segment lengths\r\n\t\r\n\t\tgetLengths: function ( divisions ) {\r\n\t\r\n\t\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\r\n\t\r\n\t\t\tif ( this.cacheArcLengths\r\n\t\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\r\n\t\t\t\t&& ! this.needsUpdate ) {\r\n\t\r\n\t\t\t\t//console.log( \"cached\", this.cacheArcLengths );\r\n\t\t\t\treturn this.cacheArcLengths;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.needsUpdate = false;\r\n\t\r\n\t\t\tvar cache = [];\r\n\t\t\tvar current, last = this.getPoint( 0 );\r\n\t\t\tvar p, sum = 0;\r\n\t\r\n\t\t\tcache.push( 0 );\r\n\t\r\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\t\r\n\t\t\t\tcurrent = this.getPoint ( p / divisions );\r\n\t\t\t\tsum += current.distanceTo( last );\r\n\t\t\t\tcache.push( sum );\r\n\t\t\t\tlast = current;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.cacheArcLengths = cache;\r\n\t\r\n\t\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdateArcLengths: function() {\r\n\t\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.getLengths();\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\t\r\n\t\tgetUtoTmapping: function ( u, distance ) {\r\n\t\r\n\t\t\tvar arcLengths = this.getLengths();\r\n\t\r\n\t\t\tvar i = 0, il = arcLengths.length;\r\n\t\r\n\t\t\tvar targetArcLength; // The targeted u distance value to get\r\n\t\r\n\t\t\tif ( distance ) {\r\n\t\r\n\t\t\t\ttargetArcLength = distance;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//var time = Date.now();\r\n\t\r\n\t\t\t// binary search for the index with largest value smaller than target u distance\r\n\t\r\n\t\t\tvar low = 0, high = il - 1, comparison;\r\n\t\r\n\t\t\twhile ( low <= high ) {\r\n\t\r\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\t\r\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\t\r\n\t\t\t\tif ( comparison < 0 ) {\r\n\t\r\n\t\t\t\t\tlow = i + 1;\r\n\t\r\n\t\t\t\t} else if ( comparison > 0 ) {\r\n\t\r\n\t\t\t\t\thigh = i - 1;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\thigh = i;\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t// DONE\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\ti = high;\r\n\t\r\n\t\t\t//console.log('b' , i, low, high, Date.now()- time);\r\n\t\r\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\t\r\n\t\t\t\tvar t = i / ( il - 1 );\r\n\t\t\t\treturn t;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\t\r\n\t\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\t\r\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\t\r\n\t\t\t// determine where we are between the 'before' and 'after' points\r\n\t\r\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\t\r\n\t\t\t// add that fractional amount to t\r\n\t\r\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\t\r\n\t\t\treturn t;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Returns a unit vector tangent at t\r\n\t\t// In case any sub curve does not implement its tangent derivation,\r\n\t\t// 2 points a small delta apart will be used to find its gradient\r\n\t\t// which seems to give a reasonable approximation\r\n\t\r\n\t\tgetTangent: function( t ) {\r\n\t\r\n\t\t\tvar delta = 0.0001;\r\n\t\t\tvar t1 = t - delta;\r\n\t\t\tvar t2 = t + delta;\r\n\t\r\n\t\t\t// Capping in case of danger\r\n\t\r\n\t\t\tif ( t1 < 0 ) t1 = 0;\r\n\t\t\tif ( t2 > 1 ) t2 = 1;\r\n\t\r\n\t\t\tvar pt1 = this.getPoint( t1 );\r\n\t\t\tvar pt2 = this.getPoint( t2 );\r\n\t\r\n\t\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\t\treturn vec.normalize();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetTangentAt: function ( u ) {\r\n\t\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getTangent( t );\r\n\t\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\tTHREE.Curve.Utils = THREE.CurveUtils; // backwards compatibility\r\n\t\r\n\t// TODO: Transformation for Curves?\r\n\t\r\n\t/**************************************************************\r\n\t *\t3D Curves\r\n\t **************************************************************/\r\n\t\r\n\t// A Factory method for creating new curve subclasses\r\n\t\r\n\tTHREE.Curve.create = function ( constructor, getPointFunc ) {\r\n\t\r\n\t\tconstructor.prototype = Object.create( THREE.Curve.prototype );\r\n\t\tconstructor.prototype.constructor = constructor;\r\n\t\tconstructor.prototype.getPoint = getPointFunc;\r\n\t\r\n\t\treturn constructor;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/core/CurvePath.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t **/\r\n\t\r\n\t/**************************************************************\r\n\t *\tCurved Path - a curve path is simply a array of connected\r\n\t *  curves, but retains the api of a curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.CurvePath = function () {\r\n\t\r\n\t\tthis.curves = [];\r\n\t\r\n\t\tthis.autoClose = false; // Automatically closes the path\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.CurvePath.prototype.constructor = THREE.CurvePath;\r\n\t\r\n\tTHREE.CurvePath.prototype.add = function ( curve ) {\r\n\t\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t};\r\n\t\r\n\t/*\r\n\tTHREE.CurvePath.prototype.checkConnection = function() {\r\n\t\t// TODO\r\n\t\t// If the ending of curve is not connected to the starting\r\n\t\t// or the next curve, then, this is not a real path\r\n\t};\r\n\t*/\r\n\t\r\n\tTHREE.CurvePath.prototype.closePath = function() {\r\n\t\r\n\t\t// TODO Test\r\n\t\t// and verify for vector3 (needs to implement equals)\r\n\t\t// Add a line curve if start and end of lines are not connected\r\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\t\r\n\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\t\r\n\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// To get accurate point with reference to\r\n\t// entire path distance at time t,\r\n\t// following has to be done:\r\n\t\r\n\t// 1. Length of each sub path have to be known\r\n\t// 2. Locate and identify type of curve\r\n\t// 3. Get t for the curve\r\n\t// 4. Return curve.getPointAt(t')\r\n\t\r\n\tTHREE.CurvePath.prototype.getPoint = function( t ) {\r\n\t\r\n\t\tvar d = t * this.getLength();\r\n\t\tvar curveLengths = this.getCurveLengths();\r\n\t\tvar i = 0;\r\n\t\r\n\t\t// To think about boundaries points.\r\n\t\r\n\t\twhile ( i < curveLengths.length ) {\r\n\t\r\n\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\t\r\n\t\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\t\tvar curve = this.curves[ i ];\r\n\t\r\n\t\t\t\tvar u = 1 - diff / curve.getLength();\r\n\t\r\n\t\t\t\treturn curve.getPointAt( u );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\ti ++;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn null;\r\n\t\r\n\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\t\r\n\t};\r\n\t\r\n\t/*\r\n\tTHREE.CurvePath.prototype.getTangent = function( t ) {\r\n\t};\r\n\t*/\r\n\t\r\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n\t// getPoint() depends on getLength\r\n\t\r\n\tTHREE.CurvePath.prototype.getLength = function() {\r\n\t\r\n\t\tvar lens = this.getCurveLengths();\r\n\t\treturn lens[ lens.length - 1 ];\r\n\t\r\n\t};\r\n\t\r\n\t// Compute lengths and cache them\r\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\t\r\n\tTHREE.CurvePath.prototype.getCurveLengths = function() {\r\n\t\r\n\t\t// We use cache values if curves and cache array are same length\r\n\t\r\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\t\r\n\t\t\treturn this.cacheLengths;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Get length of sub-curve\r\n\t\t// Push sums into cached array\r\n\t\r\n\t\tvar lengths = [], sums = 0;\r\n\t\r\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\tlengths.push( sums );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.cacheLengths = lengths;\r\n\t\r\n\t\treturn lengths;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t\r\n\t/**************************************************************\r\n\t *\tCreate Geometries Helpers\r\n\t **************************************************************/\r\n\t\r\n\t/// Generate geometry from path points (for Line or Points objects)\r\n\t\r\n\tTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\r\n\t\r\n\t\tvar pts = this.getPoints( divisions, true );\r\n\t\treturn this.createGeometry( pts );\r\n\t\r\n\t};\r\n\t\r\n\t// Generate geometry from equidistant sampling along the path\r\n\t\r\n\tTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\r\n\t\r\n\t\tvar pts = this.getSpacedPoints( divisions, true );\r\n\t\treturn this.createGeometry( pts );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CurvePath.prototype.createGeometry = function( points ) {\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\r\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar point = points[ i ];\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn geometry;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/core/Path.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Creates free form 2d path using series of points, lines or curves.\r\n\t *\r\n\t **/\r\n\t\r\n\tTHREE.Path = function ( points ) {\r\n\t\r\n\t\tTHREE.CurvePath.call( this );\r\n\t\r\n\t\tthis.actions = [];\r\n\t\r\n\t\tif ( points ) {\r\n\t\r\n\t\t\tthis.fromPoints( points );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\r\n\tTHREE.Path.prototype.constructor = THREE.Path;\r\n\t\r\n\t// TODO Clean up PATH API\r\n\t\r\n\t// Create path using straight lines to connect all points\r\n\t// - vectors: array of Vector2\r\n\t\r\n\tTHREE.Path.prototype.fromPoints = function ( vectors ) {\r\n\t\r\n\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\r\n\t\r\n\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// startPath() endPath()?\r\n\t\r\n\tTHREE.Path.prototype.moveTo = function ( x, y ) {\r\n\t\r\n\t\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype.lineTo = function ( x, y ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tvar curve = new THREE.QuadraticBezierCurve(\r\n\t\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\t\tnew THREE.Vector2( aCPx, aCPy ),\r\n\t\t\tnew THREE.Vector2( aX, aY )\r\n\t\t);\r\n\t\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tvar curve = new THREE.CubicBezierCurve(\r\n\t\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\r\n\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\r\n\t\t\tnew THREE.Vector2( aX, aY )\r\n\t\t);\r\n\t\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\r\n\t\r\n\t\tvar args = Array.prototype.slice.call( arguments );\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\r\n\t\tArray.prototype.push.apply( npts, pts );\r\n\t\r\n\t\tvar curve = new THREE.SplineCurve( npts );\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tthis.actions.push( { action: 'splineThru', args: args } );\r\n\t\r\n\t};\r\n\t\r\n\t// FUTURE: Change the API or follow canvas API?\r\n\t\r\n\tTHREE.Path.prototype.arc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\t\r\n\t };\r\n\t\r\n\t THREE.Path.prototype.absarc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\t\r\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\t\r\n\t };\r\n\t\r\n\tTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\t\r\n\t };\r\n\t\r\n\t\r\n\tTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\t\r\n\t\tvar args = [\r\n\t\t\taX, aY,\r\n\t\t\txRadius, yRadius,\r\n\t\t\taStartAngle, aEndAngle,\r\n\t\t\taClockwise,\r\n\t\t\taRotation || 0 // aRotation is optional.\r\n\t\t];\r\n\t\r\n\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tvar lastPoint = curve.getPoint( 1 );\r\n\t\targs.push( lastPoint.x );\r\n\t\targs.push( lastPoint.y );\r\n\t\r\n\t\tthis.actions.push( { action: 'ellipse', args: args } );\r\n\t\r\n\t };\r\n\t\r\n\tTHREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {\r\n\t\r\n\t\tif ( ! divisions ) divisions = 40;\r\n\t\r\n\t\tvar points = [];\r\n\t\r\n\t\tfor ( var i = 0; i < divisions; i ++ ) {\r\n\t\r\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\t\r\n\t\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// if ( closedPath ) {\r\n\t\t//\r\n\t\t// \tpoints.push( points[ 0 ] );\r\n\t\t//\r\n\t\t// }\r\n\t\r\n\t\treturn points;\r\n\t\r\n\t};\r\n\t\r\n\t/* Return an array of vectors based on contour of the path */\r\n\t\r\n\tTHREE.Path.prototype.getPoints = function( divisions, closedPath ) {\r\n\t\r\n\t\tdivisions = divisions || 12;\r\n\t\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\t\r\n\t\tvar points = [];\r\n\t\r\n\t\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\r\n\t\t\tlaste, tx, ty;\r\n\t\r\n\t\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar item = this.actions[ i ];\r\n\t\r\n\t\t\tvar action = item.action;\r\n\t\t\tvar args = item.args;\r\n\t\r\n\t\t\tswitch ( action ) {\r\n\t\r\n\t\t\tcase 'moveTo':\r\n\t\r\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'lineTo':\r\n\t\r\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'quadraticCurveTo':\r\n\t\r\n\t\t\t\tcpx  = args[ 2 ];\r\n\t\t\t\tcpy  = args[ 3 ];\r\n\t\r\n\t\t\t\tcpx1 = args[ 0 ];\r\n\t\t\t\tcpy1 = args[ 1 ];\r\n\t\r\n\t\t\t\tif ( points.length > 0 ) {\r\n\t\r\n\t\t\t\t\tlaste = points[ points.length - 1 ];\r\n\t\r\n\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\tcpy0 = laste.y;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\t\r\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar t = j / divisions;\r\n\t\r\n\t\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\r\n\t\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'bezierCurveTo':\r\n\t\r\n\t\t\t\tcpx  = args[ 4 ];\r\n\t\t\t\tcpy  = args[ 5 ];\r\n\t\r\n\t\t\t\tcpx1 = args[ 0 ];\r\n\t\t\t\tcpy1 = args[ 1 ];\r\n\t\r\n\t\t\t\tcpx2 = args[ 2 ];\r\n\t\t\t\tcpy2 = args[ 3 ];\r\n\t\r\n\t\t\t\tif ( points.length > 0 ) {\r\n\t\r\n\t\t\t\t\tlaste = points[ points.length - 1 ];\r\n\t\r\n\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\tcpy0 = laste.y;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\t\r\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar t = j / divisions;\r\n\t\r\n\t\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\r\n\t\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'splineThru':\r\n\t\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\t\r\n\t\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\r\n\t\t\t\tvar spts = [ last ];\r\n\t\r\n\t\t\t\tvar n = divisions * args[ 0 ].length;\r\n\t\r\n\t\t\t\tspts = spts.concat( args[ 0 ] );\r\n\t\r\n\t\t\t\tvar spline = new THREE.SplineCurve( spts );\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= n; j ++ ) {\r\n\t\r\n\t\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'arc':\r\n\t\r\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\t\taRadius = args[ 2 ],\r\n\t\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\r\n\t\t\t\t\taClockwise = !! args[ 5 ];\r\n\t\r\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\t\tvar angle;\r\n\t\t\t\tvar tdivisions = divisions * 2;\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar t = j / tdivisions;\r\n\t\r\n\t\t\t\t\tif ( ! aClockwise ) {\r\n\t\r\n\t\t\t\t\t\tt = 1 - t;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\t\r\n\t\t\t\t\ttx = aX + aRadius * Math.cos( angle );\r\n\t\t\t\t\tty = aY + aRadius * Math.sin( angle );\r\n\t\r\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\t\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t//console.log(points);\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'ellipse':\r\n\t\r\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\t\txRadius = args[ 2 ],\r\n\t\t\t\t\tyRadius = args[ 3 ],\r\n\t\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\r\n\t\t\t\t\taClockwise = !! args[ 6 ],\r\n\t\t\t\t\taRotation = args[ 7 ];\r\n\t\r\n\t\r\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\t\tvar angle;\r\n\t\t\t\tvar tdivisions = divisions * 2;\r\n\t\r\n\t\t\t\tvar cos, sin;\r\n\t\t\t\tif ( aRotation !== 0 ) {\r\n\t\r\n\t\t\t\t\tcos = Math.cos( aRotation );\r\n\t\t\t\t\tsin = Math.sin( aRotation );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar t = j / tdivisions;\r\n\t\r\n\t\t\t\t\tif ( ! aClockwise ) {\r\n\t\r\n\t\t\t\t\t\tt = 1 - t;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\t\r\n\t\t\t\t\ttx = aX + xRadius * Math.cos( angle );\r\n\t\t\t\t\tty = aY + yRadius * Math.sin( angle );\r\n\t\r\n\t\t\t\t\tif ( aRotation !== 0 ) {\r\n\t\r\n\t\t\t\t\t\tvar x = tx, y = ty;\r\n\t\r\n\t\t\t\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\r\n\t\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\t\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t//console.log(points);\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\t} // end switch\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\r\n\t\t// Normalize to remove the closing point by default.\r\n\t\tvar lastPoint = points[ points.length - 1 ];\r\n\t\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\r\n\t\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\r\n\t\t\tpoints.splice( points.length - 1, 1 );\r\n\t\tif ( closedPath ) {\r\n\t\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn points;\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t// Breaks path into shapes\r\n\t//\r\n\t//\tAssumptions (if parameter isCCW==true the opposite holds):\r\n\t//\t- solid shapes are defined clockwise (CW)\r\n\t//\t- holes are defined counterclockwise (CCW)\r\n\t//\r\n\t//\tIf parameter noHoles==true:\r\n\t//  - all subPaths are regarded as solid shapes\r\n\t//  - definition order CW/CCW has no relevance\r\n\t//\r\n\t\r\n\tTHREE.Path.prototype.toShapes = function( isCCW, noHoles ) {\r\n\t\r\n\t\tfunction extractSubpaths( inActions ) {\r\n\t\r\n\t\t\tvar subPaths = [], lastPath = new THREE.Path();\r\n\t\r\n\t\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar item = inActions[ i ];\r\n\t\r\n\t\t\t\tvar args = item.args;\r\n\t\t\t\tvar action = item.action;\r\n\t\r\n\t\t\t\tif ( action === 'moveTo' ) {\r\n\t\r\n\t\t\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\t\r\n\t\t\t\t\t\tsubPaths.push( lastPath );\r\n\t\t\t\t\t\tlastPath = new THREE.Path();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tlastPath[ action ].apply( lastPath, args );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\t\r\n\t\t\t\tsubPaths.push( lastPath );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// console.log(subPaths);\r\n\t\r\n\t\t\treturn\tsubPaths;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction toShapesNoHoles( inSubpaths ) {\r\n\t\r\n\t\t\tvar shapes = [];\r\n\t\r\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\t\r\n\t\t\t\tvar tmpShape = new THREE.Shape();\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//console.log(\"shape\", shapes);\r\n\t\r\n\t\t\treturn shapes;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\t\r\n\t\t\tvar polyLen = inPolygon.length;\r\n\t\r\n\t\t\t// inPt on polygon contour => immediate success    or\r\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\t\tvar inside = false;\r\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\t\r\n\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\r\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\t\r\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\t\r\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t// not parallel\r\n\t\t\t\t\tif ( edgeDy < 0 ) {\r\n\t\r\n\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\r\n\t\r\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\t\r\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\r\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\r\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\r\n\t\t\t\t\t// continue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn\tinside;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\r\n\t\r\n\t\tvar subPaths = extractSubpaths( this.actions );\r\n\t\tif ( subPaths.length === 0 ) return [];\r\n\t\r\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\r\n\t\r\n\t\r\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\t\r\n\t\tif ( subPaths.length === 1 ) {\r\n\t\r\n\t\t\ttmpPath = subPaths[ 0 ];\r\n\t\t\ttmpShape = new THREE.Shape();\r\n\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\treturn shapes;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\t\r\n\t\t// console.log(\"Holes first\", holesFirst);\r\n\t\r\n\t\tvar betterShapeHoles = [];\r\n\t\tvar newShapes = [];\r\n\t\tvar newShapeHoles = [];\r\n\t\tvar mainIdx = 0;\r\n\t\tvar tmpPoints;\r\n\t\r\n\t\tnewShapes[ mainIdx ] = undefined;\r\n\t\tnewShapeHoles[ mainIdx ] = [];\r\n\t\r\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\t\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\t\t\ttmpPoints = tmpPath.getPoints();\r\n\t\t\tsolid = isClockWise( tmpPoints );\r\n\t\t\tsolid = isCCW ? ! solid : solid;\r\n\t\r\n\t\t\tif ( solid ) {\r\n\t\r\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\r\n\t\r\n\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\r\n\t\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\r\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\t\r\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\r\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\t\r\n\t\t\t\t//console.log('cw', i);\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\t\r\n\t\t\t\t//console.log('ccw', i);\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// only Holes? -> probably all Shapes with wrong orientation\r\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\r\n\t\r\n\t\r\n\t\tif ( newShapes.length > 1 ) {\r\n\t\r\n\t\t\tvar ambiguous = false;\r\n\t\t\tvar toChange = [];\r\n\t\r\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\t\r\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\t\r\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\t\r\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\t\r\n\t\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\t\tvar hole_unassigned = true;\r\n\t\r\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\r\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\t\r\n\t\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tambiguous = true;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( hole_unassigned ) {\r\n\t\r\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\t\tif ( toChange.length > 0 ) {\r\n\t\r\n\t\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar tmpHoles;\r\n\t\r\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\t\r\n\t\t\ttmpShape = newShapes[ i ].s;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\ttmpHoles = newShapeHoles[ i ];\r\n\t\r\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//console.log(\"shape\", shapes);\r\n\t\r\n\t\treturn shapes;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/core/Shape.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Defines a 2d shape plane using paths.\r\n\t **/\r\n\t\r\n\t// STEP 1 Create a path.\r\n\t// STEP 2 Turn path into shape.\r\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n\t// STEP 3a - Extract points from each shape, turn to vertices\r\n\t// STEP 3b - Triangulate each shape, add faces.\r\n\t\r\n\tTHREE.Shape = function () {\r\n\t\r\n\t\tTHREE.Path.apply( this, arguments );\r\n\t\r\n\t\tthis.holes = [];\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\r\n\tTHREE.Shape.prototype.constructor = THREE.Shape;\r\n\t\r\n\t// Convenience method to return ExtrudeGeometry\r\n\t\r\n\tTHREE.Shape.prototype.extrude = function ( options ) {\r\n\t\r\n\t\treturn new THREE.ExtrudeGeometry( this, options );\r\n\t\r\n\t};\r\n\t\r\n\t// Convenience method to return ShapeGeometry\r\n\t\r\n\tTHREE.Shape.prototype.makeGeometry = function ( options ) {\r\n\t\r\n\t\treturn new THREE.ShapeGeometry( this, options );\r\n\t\r\n\t};\r\n\t\r\n\t// Get points of holes\r\n\t\r\n\tTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\r\n\t\r\n\t\tvar holesPts = [];\r\n\t\r\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn holesPts;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t// Get points of shape and holes (keypoints based on segments parameter)\r\n\t\r\n\tTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\r\n\t\r\n\t\treturn {\r\n\t\r\n\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\tholes: this.getPointsHoles( divisions )\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Shape.prototype.extractPoints = function ( divisions ) {\r\n\t\r\n\t\treturn this.extractAllPoints( divisions );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Shape.Utils = THREE.ShapeUtils; // backwards compatibility\r\n\t\r\n\t// File:src/extras/curves/LineCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tLine\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.LineCurve = function ( v1, v2 ) {\r\n\t\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\r\n\t\r\n\tTHREE.LineCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar point = this.v2.clone().sub( this.v1 );\r\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\t\r\n\t\treturn point;\r\n\t\r\n\t};\r\n\t\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\t\r\n\tTHREE.LineCurve.prototype.getPointAt = function ( u ) {\r\n\t\r\n\t\treturn this.getPoint( u );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineCurve.prototype.getTangent = function( t ) {\r\n\t\r\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\t\r\n\t\treturn tangent.normalize();\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/QuadraticBezierCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tQuadratic Bezier curve\r\n\t **************************************************************/\r\n\t\r\n\t\r\n\tTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\r\n\t\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\r\n\t\r\n\t\r\n\tTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\r\n\t\r\n\t\treturn new THREE.Vector2(\r\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\r\n\t\r\n\t\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\r\n\t\r\n\t\treturn new THREE.Vector2(\r\n\t\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t\t).normalize();\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/CubicBezierCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tCubic Bezier curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\r\n\t\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\r\n\t\r\n\tTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\t\r\n\t\treturn new THREE.Vector2( \r\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\r\n\t\r\n\t\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\r\n\t\r\n\t\treturn new THREE.Vector2( \r\n\t\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t\t).normalize();\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/SplineCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tSpline curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\r\n\t\r\n\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\r\n\t\r\n\tTHREE.SplineCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar points = this.points;\r\n\t\tvar point = ( points.length - 1 ) * t;\r\n\t\r\n\t\tvar intPoint = Math.floor( point );\r\n\t\tvar weight = point - intPoint;\r\n\t\r\n\t\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar point1 = points[ intPoint ];\r\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\t\r\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\t\r\n\t\treturn new THREE.Vector2(\r\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/EllipseCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tEllipse curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\t\r\n\t\tthis.aX = aX;\r\n\t\tthis.aY = aY;\r\n\t\r\n\t\tthis.xRadius = xRadius;\r\n\t\tthis.yRadius = yRadius;\r\n\t\r\n\t\tthis.aStartAngle = aStartAngle;\r\n\t\tthis.aEndAngle = aEndAngle;\r\n\t\r\n\t\tthis.aClockwise = aClockwise;\r\n\t\t\r\n\t\tthis.aRotation = aRotation || 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\r\n\t\r\n\tTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\t\r\n\t\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\r\n\t\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\r\n\t\r\n\t\tvar angle;\r\n\t\r\n\t\tif ( this.aClockwise === true ) {\r\n\t\r\n\t\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tangle = this.aStartAngle + t * deltaAngle;\r\n\t\r\n\t\t}\r\n\t\t\r\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\t\r\n\t\tif ( this.aRotation !== 0 ) {\r\n\t\r\n\t\t\tvar cos = Math.cos( this.aRotation );\r\n\t\t\tvar sin = Math.sin( this.aRotation );\r\n\t\r\n\t\t\tvar tx = x, ty = y;\r\n\t\r\n\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\r\n\t\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.Vector2( x, y );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/ArcCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tArc curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\t\r\n\t\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\r\n\tTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\r\n\t\r\n\t// File:src/extras/curves/LineCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tLine3D\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.LineCurve3 = THREE.Curve.create(\r\n\t\r\n\t\tfunction ( v1, v2 ) {\r\n\t\r\n\t\t\tthis.v1 = v1;\r\n\t\t\tthis.v2 = v2;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfunction ( t ) {\r\n\t\r\n\t\t\tvar vector = new THREE.Vector3();\r\n\t\r\n\t\t\tvector.subVectors( this.v2, this.v1 ); // diff\r\n\t\t\tvector.multiplyScalar( t );\r\n\t\t\tvector.add( this.v1 );\r\n\t\r\n\t\t\treturn vector;\r\n\t\r\n\t\t}\r\n\t\r\n\t);\r\n\t\r\n\t// File:src/extras/curves/QuadraticBezierCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tQuadratic Bezier 3D curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\r\n\t\r\n\t\tfunction ( v0, v1, v2 ) {\r\n\t\r\n\t\t\tthis.v0 = v0;\r\n\t\t\tthis.v1 = v1;\r\n\t\t\tthis.v2 = v2;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfunction ( t ) {\r\n\t\r\n\t\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\r\n\t\r\n\t\t\treturn new THREE.Vector3(\r\n\t\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\r\n\t\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\r\n\t\t\t);\r\n\t\r\n\t\t}\r\n\t\r\n\t);\r\n\t\r\n\t// File:src/extras/curves/CubicBezierCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tCubic Bezier 3D curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.CubicBezierCurve3 = THREE.Curve.create(\r\n\t\r\n\t\tfunction ( v0, v1, v2, v3 ) {\r\n\t\r\n\t\t\tthis.v0 = v0;\r\n\t\t\tthis.v1 = v1;\r\n\t\t\tthis.v2 = v2;\r\n\t\t\tthis.v3 = v3;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfunction ( t ) {\r\n\t\r\n\t\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\t\r\n\t\t\treturn new THREE.Vector3(\r\n\t\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\r\n\t\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\r\n\t\t\t);\r\n\t\r\n\t\t}\r\n\t\r\n\t);\r\n\t\r\n\t// File:src/extras/curves/SplineCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tSpline 3D curve\r\n\t **************************************************************/\r\n\t\r\n\t\r\n\tTHREE.SplineCurve3 = THREE.Curve.create(\r\n\t\r\n\t\tfunction ( points /* array of Vector3 */ ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\r\n\t\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfunction ( t ) {\r\n\t\r\n\t\t\tvar points = this.points;\r\n\t\t\tvar point = ( points.length - 1 ) * t;\r\n\t\r\n\t\t\tvar intPoint = Math.floor( point );\r\n\t\t\tvar weight = point - intPoint;\r\n\t\r\n\t\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\r\n\t\t\tvar point1 = points[ intPoint ];\r\n\t\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\t\r\n\t\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\t\r\n\t\t\treturn new THREE.Vector3(\r\n\t\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\r\n\t\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\r\n\t\t\t);\r\n\t\r\n\t\t}\r\n\t\r\n\t);\r\n\t\r\n\t// File:src/extras/curves/CatmullRomCurve3.js\r\n\t\r\n\t/**\r\n\t * @author zz85 https://github.com/zz85\r\n\t *\r\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\r\n\t * cusps and self-intersections in non-uniform catmull rom curves.\r\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n\t *\r\n\t * curve.type accepts centripetal(default), chordal and catmullrom\r\n\t * curve.tension is used for catmullrom which defaults to 0.5\r\n\t */\r\n\t\r\n\tTHREE.CatmullRomCurve3 = ( function() {\r\n\t\r\n\t\tvar\r\n\t\t\ttmp = new THREE.Vector3(),\r\n\t\t\tpx = new CubicPoly(),\r\n\t\t\tpy = new CubicPoly(),\r\n\t\t\tpz = new CubicPoly();\r\n\t\r\n\t\t/*\r\n\t\tBased on an optimized c++ solution in\r\n\t\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t\t - http://ideone.com/NoEbVM\r\n\t\r\n\t\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\t\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\t\twhich can be placed in CurveUtils.\r\n\t\t*/\r\n\t\r\n\t\tfunction CubicPoly() {\r\n\t\r\n\t\t}\r\n\t\r\n\t\t/*\r\n\t\t * Compute coefficients for a cubic polynomial\r\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t\t * such that\r\n\t\t *   p(0) = x0, p(1) = x1\r\n\t\t *  and\r\n\t\t *   p'(0) = t0, p'(1) = t1.\r\n\t\t */\r\n\t\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\r\n\t\r\n\t\t\tthis.c0 = x0;\r\n\t\t\tthis.c1 = t0;\r\n\t\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\t\r\n\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\t\r\n\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\tt1 *= dt1;\r\n\t\t\tt2 *= dt1;\r\n\t\r\n\t\t\t// initCubicPoly\r\n\t\t\tthis.init( x1, x2, t1, t2 );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\r\n\t\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\r\n\t\r\n\t\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tCubicPoly.prototype.calc = function( t ) {\r\n\t\r\n\t\t\tvar t2 = t * t;\r\n\t\t\tvar t3 = t2 * t;\r\n\t\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Subclass Three.js curve\r\n\t\treturn THREE.Curve.create(\r\n\t\r\n\t\t\tfunction ( p /* array of Vector3 */ ) {\r\n\t\r\n\t\t\t\tthis.points = p || [];\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tfunction ( t ) {\r\n\t\r\n\t\t\t\tvar points = this.points,\r\n\t\t\t\t\tpoint, intPoint, weight, l;\r\n\t\r\n\t\t\t\tl = points.length;\r\n\t\r\n\t\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\r\n\t\r\n\t\t\t\tpoint = ( l - 1 ) * t;\r\n\t\t\t\tintPoint = Math.floor( point );\r\n\t\t\t\tweight = point - intPoint;\r\n\t\r\n\t\t\t\tif ( weight === 0 && intPoint === l - 1 ) {\r\n\t\r\n\t\t\t\t\tintPoint = l - 2;\r\n\t\t\t\t\tweight = 1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar p0, p1, p2, p3;\r\n\t\r\n\t\t\t\tif ( intPoint === 0 ) {\r\n\t\r\n\t\t\t\t\t// extrapolate first point\r\n\t\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\t\t\tp0 = tmp;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tp0 = points[ intPoint - 1 ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tp1 = points[ intPoint ];\r\n\t\t\t\tp2 = points[ intPoint + 1 ];\r\n\t\r\n\t\t\t\tif ( intPoint + 2 < l ) {\r\n\t\r\n\t\t\t\t\tp3 = points[ intPoint + 2 ]\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// extrapolate last point\r\n\t\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 2 ] );\r\n\t\t\t\t\tp3 = tmp;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\r\n\t\r\n\t\t\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\r\n\t\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\t\r\n\t\t\t\t\t// safety check for repeated points\r\n\t\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\t\r\n\t\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\t\r\n\t\t\t\t} else if ( this.type === 'catmullrom' ) {\r\n\t\r\n\t\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\r\n\t\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\r\n\t\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\r\n\t\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar v = new THREE.Vector3(\r\n\t\t\t\t\tpx.calc( weight ),\r\n\t\t\t\t\tpy.calc( weight ),\r\n\t\t\t\t\tpz.calc( weight )\r\n\t\t\t\t);\r\n\t\r\n\t\t\t\treturn v;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t);\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/extras/curves/ClosedSplineCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tClosed Spline 3D curve\r\n\t **************************************************************/\r\n\t\r\n\t\r\n\tTHREE.ClosedSplineCurve3 = THREE.Curve.create(\r\n\t\r\n\t\tfunction ( points /* array of Vector3 */ ) {\r\n\t\r\n\t\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfunction ( t ) {\r\n\t\r\n\t\t\tvar points = this.points;\r\n\t\t\tvar point = ( points.length - 0 ) * t; // This needs to be from 0-length +1\r\n\t\r\n\t\t\tvar intPoint = Math.floor( point );\r\n\t\t\tvar weight = point - intPoint;\r\n\t\r\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\r\n\t\r\n\t\t\tvar point0 = points[ ( intPoint - 1 ) % points.length ];\r\n\t\t\tvar point1 = points[ ( intPoint     ) % points.length ];\r\n\t\t\tvar point2 = points[ ( intPoint + 1 ) % points.length ];\r\n\t\t\tvar point3 = points[ ( intPoint + 2 ) % points.length ];\r\n\t\r\n\t\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\t\r\n\t\t\treturn new THREE.Vector3(\r\n\t\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\r\n\t\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\r\n\t\t\t);\r\n\t\r\n\t\t}\r\n\t\r\n\t);\r\n\t\r\n\t// File:src/extras/geometries/BoxGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n\t */\r\n\t\r\n\tTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'BoxGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tdepth: depth,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tdepthSegments: depthSegments\r\n\t\t};\r\n\t\r\n\t\tthis.widthSegments = widthSegments || 1;\r\n\t\tthis.heightSegments = heightSegments || 1;\r\n\t\tthis.depthSegments = depthSegments || 1;\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tvar width_half = width / 2;\r\n\t\tvar height_half = height / 2;\r\n\t\tvar depth_half = depth / 2;\r\n\t\r\n\t\tbuildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px\r\n\t\tbuildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx\r\n\t\tbuildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py\r\n\t\tbuildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny\r\n\t\tbuildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz\r\n\t\tbuildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz\r\n\t\r\n\t\tfunction buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {\r\n\t\r\n\t\t\tvar w, ix, iy,\r\n\t\t\tgridX = scope.widthSegments,\r\n\t\t\tgridY = scope.heightSegments,\r\n\t\t\twidth_half = width / 2,\r\n\t\t\theight_half = height / 2,\r\n\t\t\toffset = scope.vertices.length;\r\n\t\r\n\t\t\tif ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {\r\n\t\r\n\t\t\t\tw = 'z';\r\n\t\r\n\t\t\t} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {\r\n\t\r\n\t\t\t\tw = 'y';\r\n\t\t\t\tgridY = scope.depthSegments;\r\n\t\r\n\t\t\t} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {\r\n\t\r\n\t\t\t\tw = 'x';\r\n\t\t\t\tgridX = scope.depthSegments;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar gridX1 = gridX + 1,\r\n\t\t\tgridY1 = gridY + 1,\r\n\t\t\tsegment_width = width / gridX,\r\n\t\t\tsegment_height = height / gridY,\r\n\t\t\tnormal = new THREE.Vector3();\r\n\t\r\n\t\t\tnormal[ w ] = depth > 0 ? 1 : - 1;\r\n\t\r\n\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\t\r\n\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\t\r\n\t\t\t\t\tvar vector = new THREE.Vector3();\r\n\t\t\t\t\tvector[ u ] = ( ix * segment_width - width_half ) * udir;\r\n\t\t\t\t\tvector[ v ] = ( iy * segment_height - height_half ) * vdir;\r\n\t\t\t\t\tvector[ w ] = depth;\r\n\t\r\n\t\t\t\t\tscope.vertices.push( vector );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\t\r\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\t\r\n\t\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\t\r\n\t\t\t\t\tvar uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );\r\n\t\t\t\t\tvar uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );\r\n\t\t\t\t\tvar uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );\r\n\t\t\t\t\tvar uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );\r\n\t\r\n\t\t\t\t\tvar face = new THREE.Face3( a + offset, b + offset, d + offset );\r\n\t\t\t\t\tface.normal.copy( normal );\r\n\t\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\r\n\t\t\t\t\tface.materialIndex = materialIndex;\r\n\t\r\n\t\t\t\t\tscope.faces.push( face );\r\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\t\r\n\t\t\t\t\tface = new THREE.Face3( b + offset, c + offset, d + offset );\r\n\t\t\t\t\tface.normal.copy( normal );\r\n\t\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\r\n\t\t\t\t\tface.materialIndex = materialIndex;\r\n\t\r\n\t\t\t\t\tscope.faces.push( face );\r\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.mergeVertices();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\r\n\t\r\n\tTHREE.BoxGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.BoxGeometry(\r\n\t\t\tparameters.width,\r\n\t\t\tparameters.height,\r\n\t\t\tparameters.depth,\r\n\t\t\tparameters.widthSegments,\r\n\t\t\tparameters.heightSegments,\r\n\t\t\tparameters.depthSegments\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubeGeometry = THREE.BoxGeometry; // backwards compatibility\r\n\t\r\n\t// File:src/extras/geometries/CircleGeometry.js\r\n\t\r\n\t/**\r\n\t * @author hughes\r\n\t */\r\n\t\r\n\tTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'CircleGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\r\n\t\r\n\tTHREE.CircleGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.CircleGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.segments,\r\n\t\t\tparameters.thetaStart,\r\n\t\t\tparameters.thetaLength\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/CircleBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'CircleBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 50;\r\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\t\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\t\r\n\t\tvar vertices = segments + 2;\r\n\t\r\n\t\tvar positions = new Float32Array( vertices * 3 );\r\n\t\tvar normals = new Float32Array( vertices * 3 );\r\n\t\tvar uvs = new Float32Array( vertices * 2 );\r\n\t\r\n\t\t// center data is already zero, but need to set a few extras\r\n\t\tnormals[ 2 ] = 1.0;\r\n\t\tuvs[ 0 ] = 0.5;\r\n\t\tuvs[ 1 ] = 0.5;\r\n\t\r\n\t\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\r\n\t\r\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\t\r\n\t\t\tpositions[ i ] = radius * Math.cos( segment );\r\n\t\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\r\n\t\r\n\t\t\tnormals[ i + 2 ] = 1; // normal z\r\n\t\r\n\t\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\r\n\t\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar indices = [];\r\n\t\r\n\t\tfor ( var i = 1; i <= segments; i ++ ) {\r\n\t\r\n\t\t\tindices.push( i, i + 1, 0 );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\t\r\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\r\n\t\r\n\tTHREE.CircleBufferGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.CircleBufferGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.segments,\r\n\t\t\tparameters.thetaStart,\r\n\t\t\tparameters.thetaLength\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/CylinderGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'CylinderGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\r\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\r\n\t\theight = height !== undefined ? height : 100;\r\n\t\r\n\t\tradialSegments = radialSegments || 8;\r\n\t\theightSegments = heightSegments || 1;\r\n\t\r\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : 2 * Math.PI;\r\n\t\r\n\t\tvar heightHalf = height / 2;\r\n\t\r\n\t\tvar x, y, vertices = [], uvs = [];\r\n\t\r\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\t\r\n\t\t\tvar verticesRow = [];\r\n\t\t\tvar uvsRow = [];\r\n\t\r\n\t\t\tvar v = y / heightSegments;\r\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\t\r\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\t\r\n\t\t\t\tvar u = x / radialSegments;\r\n\t\r\n\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\tvertex.y = - v * height + heightHalf;\r\n\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\r\n\t\r\n\t\t\t\tthis.vertices.push( vertex );\r\n\t\r\n\t\t\t\tverticesRow.push( this.vertices.length - 1 );\r\n\t\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvertices.push( verticesRow );\r\n\t\t\tuvs.push( uvsRow );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\r\n\t\tvar na, nb;\r\n\t\r\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\t\r\n\t\t\tif ( radiusTop !== 0 ) {\r\n\t\r\n\t\t\t\tna = this.vertices[ vertices[ 0 ][ x ] ].clone();\r\n\t\t\t\tnb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tna = this.vertices[ vertices[ 1 ][ x ] ].clone();\r\n\t\t\t\tnb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tna.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();\r\n\t\t\tnb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();\r\n\t\r\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\t\r\n\t\t\t\tvar v1 = vertices[ y ][ x ];\r\n\t\t\t\tvar v2 = vertices[ y + 1 ][ x ];\r\n\t\t\t\tvar v3 = vertices[ y + 1 ][ x + 1 ];\r\n\t\t\t\tvar v4 = vertices[ y ][ x + 1 ];\r\n\t\r\n\t\t\t\tvar n1 = na.clone();\r\n\t\t\t\tvar n2 = na.clone();\r\n\t\t\t\tvar n3 = nb.clone();\r\n\t\t\t\tvar n4 = nb.clone();\r\n\t\r\n\t\t\t\tvar uv1 = uvs[ y ][ x ].clone();\r\n\t\t\t\tvar uv2 = uvs[ y + 1 ][ x ].clone();\r\n\t\t\t\tvar uv3 = uvs[ y + 1 ][ x + 1 ].clone();\r\n\t\t\t\tvar uv4 = uvs[ y ][ x + 1 ].clone();\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// top cap\r\n\t\r\n\t\tif ( openEnded === false && radiusTop > 0 ) {\r\n\t\r\n\t\t\tthis.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );\r\n\t\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\t\r\n\t\t\t\tvar v1 = vertices[ 0 ][ x ];\r\n\t\t\t\tvar v2 = vertices[ 0 ][ x + 1 ];\r\n\t\t\t\tvar v3 = this.vertices.length - 1;\r\n\t\r\n\t\t\t\tvar n1 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\t\tvar n2 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\t\tvar n3 = new THREE.Vector3( 0, 1, 0 );\r\n\t\r\n\t\t\t\tvar uv1 = uvs[ 0 ][ x ].clone();\r\n\t\t\t\tvar uv2 = uvs[ 0 ][ x + 1 ].clone();\r\n\t\t\t\tvar uv3 = new THREE.Vector2( uv2.x, 0 );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 1 ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// bottom cap\r\n\t\r\n\t\tif ( openEnded === false && radiusBottom > 0 ) {\r\n\t\r\n\t\t\tthis.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );\r\n\t\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\t\r\n\t\t\t\tvar v1 = vertices[ heightSegments ][ x + 1 ];\r\n\t\t\t\tvar v2 = vertices[ heightSegments ][ x ];\r\n\t\t\t\tvar v3 = this.vertices.length - 1;\r\n\t\r\n\t\t\t\tvar n1 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\t\tvar n2 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\t\tvar n3 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\r\n\t\t\t\tvar uv1 = uvs[ heightSegments ][ x + 1 ].clone();\r\n\t\t\t\tvar uv2 = uvs[ heightSegments ][ x ].clone();\r\n\t\t\t\tvar uv3 = new THREE.Vector2( uv2.x, 1 );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 2 ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\r\n\t\r\n\tTHREE.CylinderGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.CylinderGeometry(\r\n\t\t\tparameters.radiusTop,\r\n\t\t\tparameters.radiusBottom,\r\n\t\t\tparameters.height,\r\n\t\t\tparameters.radialSegments,\r\n\t\t\tparameters.heightSegments,\r\n\t\t\tparameters.openEnded,\r\n\t\t\tparameters.thetaStart,\r\n\t\t\tparameters.thetaLength\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/EdgesGeometry.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\t\r\n\t\tvar thresholdDot = Math.cos( THREE.Math.degToRad( thresholdAngle ) );\r\n\t\r\n\t\tvar edge = [ 0, 0 ], hash = {};\r\n\t\r\n\t\tfunction sortFunction( a, b ) {\r\n\t\r\n\t\t\treturn a - b;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\t\r\n\t\tvar geometry2;\r\n\t\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\tgeometry2 = new THREE.Geometry();\r\n\t\t\tgeometry2.fromBufferGeometry( geometry );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tgeometry2 = geometry.clone();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tgeometry2.mergeVertices();\r\n\t\tgeometry2.computeFaceNormals();\r\n\t\r\n\t\tvar vertices = geometry2.vertices;\r\n\t\tvar faces = geometry2.faces;\r\n\t\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge.sort( sortFunction );\r\n\t\r\n\t\t\t\tvar key = edge.toString();\r\n\t\r\n\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\t\r\n\t\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\thash[ key ].face2 = i;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar coords = [];\r\n\t\r\n\t\tfor ( var key in hash ) {\r\n\t\r\n\t\t\tvar h = hash[ key ];\r\n\t\r\n\t\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\r\n\t\r\n\t\t\t\tvar vertex = vertices[ h.vert1 ];\r\n\t\t\t\tcoords.push( vertex.x );\r\n\t\t\t\tcoords.push( vertex.y );\r\n\t\t\t\tcoords.push( vertex.z );\r\n\t\r\n\t\t\t\tvertex = vertices[ h.vert2 ];\r\n\t\t\t\tcoords.push( vertex.x );\r\n\t\t\t\tcoords.push( vertex.y );\r\n\t\t\t\tcoords.push( vertex.z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\r\n\t\r\n\t// File:src/extras/geometries/ExtrudeGeometry.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Creates extruded geometry from a path shape.\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n\t *  amount: <int>, // Depth to extrude the shape\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n\t *  bevelSize: <float>, // how far from shape outline is bevel\r\n\t *  bevelSegments: <int>, // number of bevel layers\r\n\t *\r\n\t *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n\t *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n\t *\r\n\t *  uvGenerator: <Object> // object that provides UV generator functions\r\n\t *\r\n\t * }\r\n\t **/\r\n\t\r\n\tTHREE.ExtrudeGeometry = function ( shapes, options ) {\r\n\t\r\n\t\tif ( typeof( shapes ) === \"undefined\" ) {\r\n\t\r\n\t\t\tshapes = [];\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'ExtrudeGeometry';\r\n\t\r\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\t\r\n\t\tthis.addShapeList( shapes, options );\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\r\n\t\t// can't really use automatic vertex normals\r\n\t\t// as then front and back sides get smoothed too\r\n\t\t// should do separate smoothing just for sides\r\n\t\r\n\t\t//this.computeVertexNormals();\r\n\t\r\n\t\t//console.log( \"took\", ( Date.now() - startTime ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\r\n\t\r\n\tTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\t\r\n\t\tvar sl = shapes.length;\r\n\t\r\n\t\tfor ( var s = 0; s < sl; s ++ ) {\r\n\t\r\n\t\t\tvar shape = shapes[ s ];\r\n\t\t\tthis.addShape( shape, options );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\r\n\t\r\n\t\tvar amount = options.amount !== undefined ? options.amount : 100;\r\n\t\r\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\r\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\r\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\t\r\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\r\n\t\r\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\r\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\t\r\n\t\tvar extrudePath = options.extrudePath;\r\n\t\tvar extrudePts, extrudeByPath = false;\r\n\t\r\n\t\t// Use default WorldUVGenerator if no UV generators are specified.\r\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\r\n\t\r\n\t\tvar splineTube, binormal, normal, position2;\r\n\t\tif ( extrudePath ) {\r\n\t\r\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\t\r\n\t\t\textrudeByPath = true;\r\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\t\r\n\t\t\t// SETUP TNB variables\r\n\t\r\n\t\t\t// Reuse TNB from TubeGeomtry for now.\r\n\t\t\t// TODO1 - have a .isClosed in spline?\r\n\t\r\n\t\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\r\n\t\r\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\t\r\n\t\t\tbinormal = new THREE.Vector3();\r\n\t\t\tnormal = new THREE.Vector3();\r\n\t\t\tposition2 = new THREE.Vector3();\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Safeguards if bevels are not enabled\r\n\t\r\n\t\tif ( ! bevelEnabled ) {\r\n\t\r\n\t\t\tbevelSegments = 0;\r\n\t\t\tbevelThickness = 0;\r\n\t\t\tbevelSize = 0;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Variables initialization\r\n\t\r\n\t\tvar ahole, h, hl; // looping of holes\r\n\t\tvar scope = this;\r\n\t\r\n\t\tvar shapesOffset = this.vertices.length;\r\n\t\r\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\t\r\n\t\tvar vertices = shapePoints.shape;\r\n\t\tvar holes = shapePoints.holes;\r\n\t\r\n\t\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\t\r\n\t\tif ( reverse ) {\r\n\t\r\n\t\t\tvertices = vertices.reverse();\r\n\t\r\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\t\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tahole = holes[ h ];\r\n\t\r\n\t\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\r\n\t\r\n\t\t\t\t\tholes[ h ] = ahole.reverse();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\t\r\n\t\t/* Vertices */\r\n\t\r\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\t\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\tahole = holes[ h ];\r\n\t\r\n\t\t\tvertices = vertices.concat( ahole );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tfunction scalePt2 ( pt, vec, size ) {\r\n\t\r\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\r\n\t\r\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar b, bs, t, z,\r\n\t\t\tvert, vlen = vertices.length,\r\n\t\t\tface, flen = faces.length;\r\n\t\r\n\t\r\n\t\t// Find directions for point movement\r\n\t\r\n\t\r\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\t\r\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t\t//\r\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\t\r\n\t\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\r\n\t\r\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\t\r\n\t\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\r\n\t\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\r\n\t\r\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\t\r\n\t\t\t// check for collinear edges\r\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\t\r\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t// not collinear\r\n\t\r\n\t\t\t\t// length of vectors for normalizing\r\n\t\r\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\t\r\n\t\t\t\t// shift adjacent points by unit vectors to the left\r\n\t\r\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\t\r\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\t\r\n\t\t\t\t// scaling factor for v_prev to intersection point\r\n\t\r\n\t\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\r\n\t\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\t\r\n\t\t\t\t// vector from inPt to intersection point\r\n\t\r\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\t\r\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t\t//  but prevent crazy spikes\r\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\t\r\n\t\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// handle special case of collinear edges\r\n\t\r\n\t\t\t\tvar direction_eq = false;\t\t// assumes: opposite\r\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\t\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( direction_eq ) {\r\n\t\r\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\t\tv_trans_y =  v_prev_x;\r\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tvar contourMovements = [];\r\n\t\r\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\t\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\t\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\t// console.log('i,j,k', i, j , k)\r\n\t\r\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\t\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\tahole = holes[ h ];\r\n\t\r\n\t\t\toneHoleMovements = [];\r\n\t\r\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\t\r\n\t\t\t\tif ( j === il ) j = 0;\r\n\t\t\t\tif ( k === il ) k = 0;\r\n\t\r\n\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tholesMovements.push( oneHoleMovements );\r\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\t\r\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\t\r\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\t\r\n\t\t\tt = b / bevelSegments;\r\n\t\t\tz = bevelThickness * ( 1 - t );\r\n\t\r\n\t\t\t//z = bevelThickness * t;\r\n\t\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\r\n\t\t\t//bs = bevelSize * t; // linear\r\n\t\r\n\t\t\t// contract shape\r\n\t\r\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\r\n\t\t\t\tv( vert.x, vert.y,  - z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// expand holes\r\n\t\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tahole = holes[ h ];\r\n\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\t\r\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\t\r\n\t\t\t\t\tv( vert.x, vert.y,  - z );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tbs = bevelSize;\r\n\t\r\n\t\t// Back facing vertices\r\n\t\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\t\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\t\r\n\t\t\tif ( ! extrudeByPath ) {\r\n\t\r\n\t\t\t\tv( vert.x, vert.y, 0 );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\t\r\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\t\r\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\t\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Add stepped vertices...\r\n\t\t// Including front facing vertices\r\n\t\r\n\t\tvar s;\r\n\t\r\n\t\tfor ( s = 1; s <= steps; s ++ ) {\r\n\t\r\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\t\r\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\t\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\t\r\n\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\t\r\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\t\r\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\t\r\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Add bevel segments planes\r\n\t\r\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\t\r\n\t\t\tt = b / bevelSegments;\r\n\t\t\tz = bevelThickness * ( 1 - t );\r\n\t\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\r\n\t\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\r\n\t\r\n\t\t\t// contract shape\r\n\t\r\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// expand holes\r\n\t\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tahole = holes[ h ];\r\n\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\t\r\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\t\r\n\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\t\r\n\t\t\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t/* Faces */\r\n\t\r\n\t\t// Top and bottom faces\r\n\t\r\n\t\tbuildLidFaces();\r\n\t\r\n\t\t// Sides faces\r\n\t\r\n\t\tbuildSideFaces();\r\n\t\r\n\t\r\n\t\t/////  Internal functions\r\n\t\r\n\t\tfunction buildLidFaces() {\r\n\t\r\n\t\t\tif ( bevelEnabled ) {\r\n\t\r\n\t\t\t\tvar layer = 0; // steps + 1\r\n\t\t\t\tvar offset = vlen * layer;\r\n\t\r\n\t\t\t\t// Bottom faces\r\n\t\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\t\toffset = vlen * layer;\r\n\t\r\n\t\t\t\t// Top faces\r\n\t\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// Bottom faces\r\n\t\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Top faces\r\n\t\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Create faces for the z-sides of the shape\r\n\t\r\n\t\tfunction buildSideFaces() {\r\n\t\r\n\t\t\tvar layeroffset = 0;\r\n\t\t\tsidewalls( contour, layeroffset );\r\n\t\t\tlayeroffset += contour.length;\r\n\t\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tahole = holes[ h ];\r\n\t\t\t\tsidewalls( ahole, layeroffset );\r\n\t\r\n\t\t\t\t//, true\r\n\t\t\t\tlayeroffset += ahole.length;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction sidewalls( contour, layeroffset ) {\r\n\t\r\n\t\t\tvar j, k;\r\n\t\t\ti = contour.length;\r\n\t\r\n\t\t\twhile ( -- i >= 0 ) {\r\n\t\r\n\t\t\t\tj = i;\r\n\t\t\t\tk = i - 1;\r\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\t\r\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\t\r\n\t\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\r\n\t\r\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\t\r\n\t\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\t\r\n\t\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\t\td = layeroffset + j + slen2;\r\n\t\r\n\t\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tfunction v( x, y, z ) {\r\n\t\r\n\t\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction f3( a, b, c ) {\r\n\t\r\n\t\t\ta += shapesOffset;\r\n\t\t\tb += shapesOffset;\r\n\t\t\tc += shapesOffset;\r\n\t\r\n\t\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\r\n\t\r\n\t\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\r\n\t\r\n\t\t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\r\n\t\r\n\t\t\ta += shapesOffset;\r\n\t\t\tb += shapesOffset;\r\n\t\t\tc += shapesOffset;\r\n\t\t\td += shapesOffset;\r\n\t\r\n\t\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\r\n\t\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\r\n\t\r\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\r\n\t\r\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\r\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ExtrudeGeometry.WorldUVGenerator = {\r\n\t\r\n\t\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\r\n\t\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\r\n\t\t\tvar a = vertices[ indexA ];\r\n\t\t\tvar b = vertices[ indexB ];\r\n\t\t\tvar c = vertices[ indexC ];\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.x, a.y ),\r\n\t\t\t\tnew THREE.Vector2( b.x, b.y ),\r\n\t\t\t\tnew THREE.Vector2( c.x, c.y )\r\n\t\t\t];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\r\n\t\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\r\n\t\t\tvar a = vertices[ indexA ];\r\n\t\t\tvar b = vertices[ indexB ];\r\n\t\t\tvar c = vertices[ indexC ];\r\n\t\t\tvar d = vertices[ indexD ];\r\n\t\r\n\t\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\r\n\t\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\r\n\t\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\r\n\t\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\r\n\t\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\r\n\t\t\t\t];\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\r\n\t\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\r\n\t\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\r\n\t\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\r\n\t\t\t\t];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/ShapeGeometry.js\r\n\t\r\n\t/**\r\n\t * @author jonobr1 / http://jonobr1.com\r\n\t *\r\n\t * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n\t * ExtrudeGeometry.\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n\t *\r\n\t *\tmaterial: <int> // material index for front and back faces\r\n\t *\tuvGenerator: <Object> // object that provides UV generator functions\r\n\t *\r\n\t * }\r\n\t **/\r\n\t\r\n\tTHREE.ShapeGeometry = function ( shapes, options ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'ShapeGeometry';\r\n\t\r\n\t\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\r\n\t\r\n\t\tthis.addShapeList( shapes, options );\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\r\n\t\r\n\t/**\r\n\t * Add an array of shapes to THREE.ShapeGeometry.\r\n\t */\r\n\tTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\t\r\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tthis.addShape( shapes[ i ], options );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t/**\r\n\t * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n\t */\r\n\tTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\r\n\t\r\n\t\tif ( options === undefined ) options = {};\r\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\r\n\t\tvar material = options.material;\r\n\t\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar i, l, hole;\r\n\t\r\n\t\tvar shapesOffset = this.vertices.length;\r\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\t\r\n\t\tvar vertices = shapePoints.shape;\r\n\t\tvar holes = shapePoints.holes;\r\n\t\r\n\t\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\t\r\n\t\tif ( reverse ) {\r\n\t\r\n\t\t\tvertices = vertices.reverse();\r\n\t\r\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\r\n\t\r\n\t\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\thole = holes[ i ];\r\n\t\r\n\t\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\r\n\t\r\n\t\t\t\t\tholes[ i ] = hole.reverse();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treverse = false;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\t\r\n\t\t// Vertices\r\n\t\r\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\thole = holes[ i ];\r\n\t\t\tvertices = vertices.concat( hole );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar vert, vlen = vertices.length;\r\n\t\tvar face, flen = faces.length;\r\n\t\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\t\r\n\t\t\tvert = vertices[ i ];\r\n\t\r\n\t\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\tface = faces[ i ];\r\n\t\r\n\t\t\tvar a = face[ 0 ] + shapesOffset;\r\n\t\t\tvar b = face[ 1 ] + shapesOffset;\r\n\t\t\tvar c = face[ 2 ] + shapesOffset;\r\n\t\r\n\t\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/LatheGeometry.js\r\n\t\r\n\t/**\r\n\t * @author astrodud / http://astrodud.isgreat.org/\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\t// points - to create a closed torus, one must use a set of points \r\n\t//    like so: [ a, b, c, d, a ], see first is the same as last.\r\n\t// segments - the number of circumference segments to create\r\n\t// phiStart - the starting radian\r\n\t// phiLength - the radian (0 to 2*PI) range of the lathed section\r\n\t//    2*pi is a closed lathe, less than 2PI is a portion.\r\n\t\r\n\tTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'LatheGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\t\r\n\t\tsegments = segments || 12;\r\n\t\tphiStart = phiStart || 0;\r\n\t\tphiLength = phiLength || 2 * Math.PI;\r\n\t\r\n\t\tvar inversePointLength = 1.0 / ( points.length - 1 );\r\n\t\tvar inverseSegments = 1.0 / segments;\r\n\t\r\n\t\tfor ( var i = 0, il = segments; i <= il; i ++ ) {\r\n\t\r\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\t\r\n\t\t\tvar c = Math.cos( phi ),\r\n\t\t\t\ts = Math.sin( phi );\r\n\t\r\n\t\t\tfor ( var j = 0, jl = points.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\tvar pt = points[ j ];\r\n\t\r\n\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\r\n\t\t\t\tvertex.x = c * pt.x - s * pt.y;\r\n\t\t\t\tvertex.y = s * pt.x + c * pt.y;\r\n\t\t\t\tvertex.z = pt.z;\r\n\t\r\n\t\t\t\tthis.vertices.push( vertex );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar np = points.length;\r\n\t\r\n\t\tfor ( var i = 0, il = segments; i < il; i ++ ) {\r\n\t\r\n\t\t\tfor ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\tvar base = j + np * i;\r\n\t\t\t\tvar a = base;\r\n\t\t\t\tvar b = base + np;\r\n\t\t\t\tvar c = base + 1 + np;\r\n\t\t\t\tvar d = base + 1;\r\n\t\r\n\t\t\t\tvar u0 = i * inverseSegments;\r\n\t\t\t\tvar v0 = j * inversePointLength;\r\n\t\t\t\tvar u1 = u0 + inverseSegments;\r\n\t\t\t\tvar v1 = v0 + inversePointLength;\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\t\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\t\r\n\t\t\t\t\tnew THREE.Vector2( u0, v0 ),\r\n\t\t\t\t\tnew THREE.Vector2( u1, v0 ),\r\n\t\t\t\t\tnew THREE.Vector2( u0, v1 )\r\n\t\r\n\t\t\t\t] );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\t\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\t\r\n\t\t\t\t\tnew THREE.Vector2( u1, v0 ),\r\n\t\t\t\t\tnew THREE.Vector2( u1, v1 ),\r\n\t\t\t\t\tnew THREE.Vector2( u0, v1 )\r\n\t\r\n\t\t\t\t] );\r\n\t\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.mergeVertices();\r\n\t\tthis.computeFaceNormals();\r\n\t\tthis.computeVertexNormals();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\r\n\t\r\n\t// File:src/extras/geometries/PlaneGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n\t */\r\n\t\r\n\tTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'PlaneGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\r\n\t\r\n\tTHREE.PlaneGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.PlaneGeometry(\r\n\t\t\tparameters.width,\r\n\t\t\tparameters.height,\r\n\t\t\tparameters.widthSegments,\r\n\t\t\tparameters.heightSegments\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/PlaneBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n\t */\r\n\t\r\n\tTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'PlaneBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\t\r\n\t\tvar width_half = width / 2;\r\n\t\tvar height_half = height / 2;\r\n\t\r\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\t\r\n\t\tvar gridX1 = gridX + 1;\r\n\t\tvar gridY1 = gridY + 1;\r\n\t\r\n\t\tvar segment_width = width / gridX;\r\n\t\tvar segment_height = height / gridY;\r\n\t\r\n\t\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\r\n\t\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\r\n\t\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\r\n\t\r\n\t\tvar offset = 0;\r\n\t\tvar offset2 = 0;\r\n\t\r\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\t\r\n\t\t\tvar y = iy * segment_height - height_half;\r\n\t\r\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\t\r\n\t\t\t\tvar x = ix * segment_width - width_half;\r\n\t\r\n\t\t\t\tvertices[ offset ] = x;\r\n\t\t\t\tvertices[ offset + 1 ] = - y;\r\n\t\r\n\t\t\t\tnormals[ offset + 2 ] = 1;\r\n\t\r\n\t\t\t\tuvs[ offset2 ] = ix / gridX;\r\n\t\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\r\n\t\r\n\t\t\t\toffset += 3;\r\n\t\t\t\toffset2 += 2;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\toffset = 0;\r\n\t\r\n\t\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\r\n\t\r\n\t\tfor ( var iy = 0; iy < gridY; iy ++ ) {\r\n\t\r\n\t\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\r\n\t\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\t\r\n\t\t\t\tindices[ offset ] = a;\r\n\t\t\t\tindices[ offset + 1 ] = b;\r\n\t\t\t\tindices[ offset + 2 ] = d;\r\n\t\r\n\t\t\t\tindices[ offset + 3 ] = b;\r\n\t\t\t\tindices[ offset + 4 ] = c;\r\n\t\t\t\tindices[ offset + 5 ] = d;\r\n\t\r\n\t\t\t\toffset += 6;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\r\n\t\r\n\tTHREE.PlaneBufferGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.PlaneBufferGeometry(\r\n\t\t\tparameters.width,\r\n\t\t\tparameters.height,\r\n\t\t\tparameters.widthSegments,\r\n\t\t\tparameters.heightSegments\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/RingGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Kaleb Murphy\r\n\t */\r\n\t\r\n\tTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'RingGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tinnerRadius = innerRadius || 0;\r\n\t\touterRadius = outerRadius || 50;\r\n\t\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\t\r\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 8;\r\n\t\r\n\t\tvar i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\t\r\n\t\tfor ( i = 0; i < phiSegments + 1; i ++ ) {\r\n\t\r\n\t\t\t// concentric circles inside ring\r\n\t\r\n\t\t\tfor ( o = 0; o < thetaSegments + 1; o ++ ) {\r\n\t\r\n\t\t\t\t// number of segments per circle\r\n\t\r\n\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\tvar segment = thetaStart + o / thetaSegments * thetaLength;\r\n\t\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\t\tvertex.y = radius * Math.sin( segment );\r\n\t\r\n\t\t\t\tthis.vertices.push( vertex );\r\n\t\t\t\tuvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tradius += radiusStep;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar n = new THREE.Vector3( 0, 0, 1 );\r\n\t\r\n\t\tfor ( i = 0; i < phiSegments; i ++ ) {\r\n\t\r\n\t\t\t// concentric circles inside ring\r\n\t\r\n\t\t\tvar thetaSegment = i * ( thetaSegments + 1 );\r\n\t\r\n\t\t\tfor ( o = 0; o < thetaSegments ; o ++ ) {\r\n\t\r\n\t\t\t\t// number of segments per circle\r\n\t\r\n\t\t\t\tvar segment = o + thetaSegment;\r\n\t\r\n\t\t\t\tvar v1 = segment;\r\n\t\t\t\tvar v2 = segment + thetaSegments + 1;\r\n\t\t\t\tvar v3 = segment + thetaSegments + 2;\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );\r\n\t\r\n\t\t\t\tv1 = segment;\r\n\t\t\t\tv2 = segment + thetaSegments + 2;\r\n\t\t\t\tv3 = segment + 1;\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\r\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\r\n\t\r\n\tTHREE.RingGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.RingGeometry(\r\n\t\t\tparameters.innerRadius,\r\n\t\t\tparameters.outerRadius,\r\n\t\t\tparameters.thetaSegments,\r\n\t\t\tparameters.phiSegments,\r\n\t\t\tparameters.thetaStart,\r\n\t\t\tparameters.thetaLength\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/SphereGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'SphereGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\r\n\t\r\n\tTHREE.SphereGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.SphereGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.widthSegments,\r\n\t\t\tparameters.heightSegments,\r\n\t\t\tparameters.phiStart,\r\n\t\t\tparameters.phiLength,\r\n\t\t\tparameters.thetaStart,\r\n\t\t\tparameters.thetaLength\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/SphereBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * based on THREE.SphereGeometry\r\n\t */\r\n\t\r\n\tTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'SphereBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 50;\r\n\t\r\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\t\r\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\t\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\t\r\n\t\tvar thetaEnd = thetaStart + thetaLength;\r\n\t\r\n\t\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\r\n\t\r\n\t\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\t\r\n\t\tvar index = 0, vertices = [], normal = new THREE.Vector3();\r\n\t\r\n\t\tfor ( var y = 0; y <= heightSegments; y ++ ) {\r\n\t\r\n\t\t\tvar verticesRow = [];\r\n\t\r\n\t\t\tvar v = y / heightSegments;\r\n\t\r\n\t\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\r\n\t\r\n\t\t\t\tvar u = x / widthSegments;\r\n\t\r\n\t\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\r\n\t\t\t\tnormal.set( px, py, pz ).normalize();\r\n\t\r\n\t\t\t\tpositions.setXYZ( index, px, py, pz );\r\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\t\t\t\tuvs.setXY( index, u, 1 - v );\r\n\t\r\n\t\t\t\tverticesRow.push( index );\r\n\t\r\n\t\t\t\tindex ++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvertices.push( verticesRow );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar indices = [];\r\n\t\r\n\t\tfor ( var y = 0; y < heightSegments; y ++ ) {\r\n\t\r\n\t\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\r\n\t\r\n\t\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\t\tvar v3 = vertices[ y + 1 ][ x ];\r\n\t\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\r\n\t\r\n\t\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\r\n\t\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\r\n\t\tthis.addAttribute( 'position', positions );\r\n\t\tthis.addAttribute( 'normal', normals );\r\n\t\tthis.addAttribute( 'uv', uvs );\r\n\t\r\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\r\n\t\r\n\tTHREE.SphereBufferGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.SphereBufferGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.widthSegments,\r\n\t\t\tparameters.heightSegments,\r\n\t\t\tparameters.phiStart,\r\n\t\t\tparameters.phiLength,\r\n\t\t\tparameters.thetaStart,\r\n\t\t\tparameters.thetaLength\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/TorusGeometry.js\r\n\t\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n\t */\r\n\t\r\n\tTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'TorusGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 100;\r\n\t\ttube = tube || 40;\r\n\t\tradialSegments = radialSegments || 8;\r\n\t\ttubularSegments = tubularSegments || 6;\r\n\t\tarc = arc || Math.PI * 2;\r\n\t\r\n\t\tvar center = new THREE.Vector3(), uvs = [], normals = [];\r\n\t\r\n\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\r\n\t\r\n\t\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\r\n\t\r\n\t\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\r\n\t\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\t\tcenter.y = radius * Math.sin( u );\r\n\t\r\n\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\t\tvertex.z = tube * Math.sin( v );\r\n\t\r\n\t\t\t\tthis.vertices.push( vertex );\r\n\t\r\n\t\t\t\tuvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );\r\n\t\t\t\tnormals.push( vertex.clone().sub( center ).normalize() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfor ( var j = 1; j <= radialSegments; j ++ ) {\r\n\t\r\n\t\t\tfor ( var i = 1; i <= tubularSegments; i ++ ) {\r\n\t\r\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\t\r\n\t\t\t\tvar face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );\r\n\t\t\t\tthis.faces.push( face );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );\r\n\t\r\n\t\t\t\tface = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );\r\n\t\t\t\tthis.faces.push( face );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\r\n\t\r\n\tTHREE.TorusGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.TorusGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.tube,\r\n\t\t\tparameters.radialSegments,\r\n\t\t\tparameters.tubularSegments,\r\n\t\t\tparameters.arc\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/TorusKnotGeometry.js\r\n\t\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n\t */\r\n\t\r\n\tTHREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'TorusKnotGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q,\r\n\t\t\theightScale: heightScale\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 100;\r\n\t\ttube = tube || 40;\r\n\t\tradialSegments = radialSegments || 64;\r\n\t\ttubularSegments = tubularSegments || 8;\r\n\t\tp = p || 2;\r\n\t\tq = q || 3;\r\n\t\theightScale = heightScale || 1;\r\n\t\r\n\t\tvar grid = new Array( radialSegments );\r\n\t\tvar tang = new THREE.Vector3();\r\n\t\tvar n = new THREE.Vector3();\r\n\t\tvar bitan = new THREE.Vector3();\r\n\t\r\n\t\tfor ( var i = 0; i < radialSegments; ++ i ) {\r\n\t\r\n\t\t\tgrid[ i ] = new Array( tubularSegments );\r\n\t\t\tvar u = i / radialSegments * 2 * p * Math.PI;\r\n\t\t\tvar p1 = getPos( u, q, p, radius, heightScale );\r\n\t\t\tvar p2 = getPos( u + 0.01, q, p, radius, heightScale );\r\n\t\t\ttang.subVectors( p2, p1 );\r\n\t\t\tn.addVectors( p2, p1 );\r\n\t\r\n\t\t\tbitan.crossVectors( tang, n );\r\n\t\t\tn.crossVectors( bitan, tang );\r\n\t\t\tbitan.normalize();\r\n\t\t\tn.normalize();\r\n\t\r\n\t\t\tfor ( var j = 0; j < tubularSegments; ++ j ) {\r\n\t\r\n\t\t\t\tvar v = j / tubularSegments * 2 * Math.PI;\r\n\t\t\t\tvar cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\t\tvar cy = tube * Math.sin( v );\r\n\t\r\n\t\t\t\tvar pos = new THREE.Vector3();\r\n\t\t\t\tpos.x = p1.x + cx * n.x + cy * bitan.x;\r\n\t\t\t\tpos.y = p1.y + cx * n.y + cy * bitan.y;\r\n\t\t\t\tpos.z = p1.z + cx * n.z + cy * bitan.z;\r\n\t\r\n\t\t\t\tgrid[ i ][ j ] = this.vertices.push( pos ) - 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfor ( var i = 0; i < radialSegments; ++ i ) {\r\n\t\r\n\t\t\tfor ( var j = 0; j < tubularSegments; ++ j ) {\r\n\t\r\n\t\t\t\tvar ip = ( i + 1 ) % radialSegments;\r\n\t\t\t\tvar jp = ( j + 1 ) % tubularSegments;\r\n\t\r\n\t\t\t\tvar a = grid[ i ][ j ];\r\n\t\t\t\tvar b = grid[ ip ][ j ];\r\n\t\t\t\tvar c = grid[ ip ][ jp ];\r\n\t\t\t\tvar d = grid[ i ][ jp ];\r\n\t\r\n\t\t\t\tvar uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );\r\n\t\t\t\tvar uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );\r\n\t\t\t\tvar uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );\r\n\t\t\t\tvar uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\tthis.computeVertexNormals();\r\n\t\r\n\t\tfunction getPos( u, in_q, in_p, radius, heightScale ) {\r\n\t\r\n\t\t\tvar cu = Math.cos( u );\r\n\t\t\tvar su = Math.sin( u );\r\n\t\t\tvar quOverP = in_q / in_p * u;\r\n\t\t\tvar cs = Math.cos( quOverP );\r\n\t\r\n\t\t\tvar tx = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\t\tvar ty = radius * ( 2 + cs ) * su * 0.5;\r\n\t\t\tvar tz = heightScale * radius * Math.sin( quOverP ) * 0.5;\r\n\t\r\n\t\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\r\n\t\r\n\tTHREE.TorusKnotGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.TorusKnotGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.tube,\r\n\t\t\tparameters.radialSegments,\r\n\t\t\tparameters.tubularSegments,\r\n\t\t\tparameters.p,\r\n\t\t\tparameters.q,\r\n\t\t\tparameters.heightScale\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/TubeGeometry.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / https://github.com/WestLangley\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author miningold / https://github.com/miningold\r\n\t * @author jonobr1 / https://github.com/jonobr1\r\n\t *\r\n\t * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n\t *\r\n\t * Creates a tube which extrudes along a 3d spline\r\n\t *\r\n\t * Uses parallel transport frames as described in\r\n\t * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n\t */\r\n\t\r\n\tTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'TubeGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\tsegments: segments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed,\r\n\t\t\ttaper: taper\r\n\t\t};\r\n\t\r\n\t\tsegments = segments || 64;\r\n\t\tradius = radius || 1;\r\n\t\tradialSegments = radialSegments || 8;\r\n\t\tclosed = closed || false;\r\n\t\ttaper = taper || THREE.TubeGeometry.NoTaper;\r\n\t\r\n\t\tvar grid = [];\r\n\t\r\n\t\tvar scope = this,\r\n\t\r\n\t\t\ttangent,\r\n\t\t\tnormal,\r\n\t\t\tbinormal,\r\n\t\r\n\t\t\tnumpoints = segments + 1,\r\n\t\r\n\t\t\tu, v, r,\r\n\t\r\n\t\t\tcx, cy,\r\n\t\t\tpos, pos2 = new THREE.Vector3(),\r\n\t\t\ti, j,\r\n\t\t\tip, jp,\r\n\t\t\ta, b, c, d,\r\n\t\t\tuva, uvb, uvc, uvd;\r\n\t\r\n\t\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\r\n\t\t\ttangents = frames.tangents,\r\n\t\t\tnormals = frames.normals,\r\n\t\t\tbinormals = frames.binormals;\r\n\t\r\n\t\t// proxy internals\r\n\t\tthis.tangents = tangents;\r\n\t\tthis.normals = normals;\r\n\t\tthis.binormals = binormals;\r\n\t\r\n\t\tfunction vert( x, y, z ) {\r\n\t\r\n\t\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// construct the grid\r\n\t\r\n\t\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\t\r\n\t\t\tgrid[ i ] = [];\r\n\t\r\n\t\t\tu = i / ( numpoints - 1 );\r\n\t\r\n\t\t\tpos = path.getPointAt( u );\r\n\t\r\n\t\t\ttangent = tangents[ i ];\r\n\t\t\tnormal = normals[ i ];\r\n\t\t\tbinormal = binormals[ i ];\r\n\t\r\n\t\t\tr = radius * taper( u );\r\n\t\r\n\t\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\t\r\n\t\t\t\tv = j / radialSegments * 2 * Math.PI;\r\n\t\r\n\t\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\t\tcy = r * Math.sin( v );\r\n\t\r\n\t\t\t\tpos2.copy( pos );\r\n\t\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\r\n\t\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\r\n\t\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\r\n\t\r\n\t\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// construct the mesh\r\n\t\r\n\t\tfor ( i = 0; i < segments; i ++ ) {\r\n\t\r\n\t\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\t\r\n\t\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\r\n\t\t\t\tjp = ( j + 1 ) % radialSegments;\r\n\t\r\n\t\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\r\n\t\t\t\tb = grid[ ip ][ j ];\r\n\t\t\t\tc = grid[ ip ][ jp ];\r\n\t\t\t\td = grid[ i ][ jp ];\r\n\t\r\n\t\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\r\n\t\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\r\n\t\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\r\n\t\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\tthis.computeVertexNormals();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\r\n\tTHREE.TubeGeometry.prototype.clone = function() {\r\n\t\r\n\t\treturn new this.constructor( this.parameters.path,\r\n\t\t\tthis.parameters.segments, this.parameters.radius, this.parameters.radialSegments,\r\n\t\t\tthis.parameters.closed, this.parameters.taper\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TubeGeometry.NoTaper = function ( u ) {\r\n\t\r\n\t\treturn 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\r\n\t\r\n\t\treturn Math.sin( Math.PI * u );\r\n\t\r\n\t};\r\n\t\r\n\t// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\r\n\tTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\r\n\t\r\n\t\tvar\tnormal = new THREE.Vector3(),\r\n\t\r\n\t\t\ttangents = [],\r\n\t\t\tnormals = [],\r\n\t\t\tbinormals = [],\r\n\t\r\n\t\t\tvec = new THREE.Vector3(),\r\n\t\t\tmat = new THREE.Matrix4(),\r\n\t\r\n\t\t\tnumpoints = segments + 1,\r\n\t\t\ttheta,\r\n\t\t\tsmallest,\r\n\t\r\n\t\t\ttx, ty, tz,\r\n\t\t\ti, u;\r\n\t\r\n\t\r\n\t\t// expose internals\r\n\t\tthis.tangents = tangents;\r\n\t\tthis.normals = normals;\r\n\t\tthis.binormals = binormals;\r\n\t\r\n\t\t// compute the tangent vectors for each segment on the path\r\n\t\r\n\t\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\t\r\n\t\t\tu = i / ( numpoints - 1 );\r\n\t\r\n\t\t\ttangents[ i ] = path.getTangentAt( u );\r\n\t\t\ttangents[ i ].normalize();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tinitialNormal3();\r\n\t\r\n\t\t/*\r\n\t\tfunction initialNormal1(lastBinormal) {\r\n\t\t\t// fixed start binormal. Has dangers of 0 vectors\r\n\t\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n\t\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t\t}\r\n\t\r\n\t\tfunction initialNormal2() {\r\n\t\r\n\t\t\t// This uses the Frenet-Serret formula for deriving binormal\r\n\t\t\tvar t2 = path.getTangentAt( epsilon );\r\n\t\r\n\t\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n\t\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\t\r\n\t\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t\r\n\t\t}\r\n\t\t*/\r\n\t\r\n\t\tfunction initialNormal3() {\r\n\t\r\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t\t// and in the direction of the smallest tangent xyz component\r\n\t\r\n\t\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\t\tsmallest = Number.MAX_VALUE;\r\n\t\t\ttx = Math.abs( tangents[ 0 ].x );\r\n\t\t\tty = Math.abs( tangents[ 0 ].y );\r\n\t\t\ttz = Math.abs( tangents[ 0 ].z );\r\n\t\r\n\t\t\tif ( tx <= smallest ) {\r\n\t\r\n\t\t\t\tsmallest = tx;\r\n\t\t\t\tnormal.set( 1, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ty <= smallest ) {\r\n\t\r\n\t\t\t\tsmallest = ty;\r\n\t\t\t\tnormal.set( 0, 1, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( tz <= smallest ) {\r\n\t\r\n\t\t\t\tnormal.set( 0, 0, 1 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\t\r\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the path\r\n\t\r\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\t\r\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\t\r\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\t\r\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\t\r\n\t\t\tif ( vec.length() > Number.EPSILON ) {\r\n\t\r\n\t\t\t\tvec.normalize();\r\n\t\r\n\t\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\t\r\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\t\r\n\t\tif ( closed ) {\r\n\t\r\n\t\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\r\n\t\t\ttheta /= ( numpoints - 1 );\r\n\t\r\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\r\n\t\r\n\t\t\t\ttheta = - theta;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\t\r\n\t\t\t\t// twist a little...\r\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/PolyhedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author clockworkgeek / https://github.com/clockworkgeek\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'PolyhedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 1;\r\n\t\tdetail = detail || 0;\r\n\t\r\n\t\tvar that = this;\r\n\t\r\n\t\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar p = this.vertices;\r\n\t\r\n\t\tvar faces = [];\r\n\t\r\n\t\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\r\n\t\r\n\t\t\tvar v1 = p[ indices[ i ] ];\r\n\t\t\tvar v2 = p[ indices[ i + 1 ] ];\r\n\t\t\tvar v3 = p[ indices[ i + 2 ] ];\r\n\t\r\n\t\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar centroid = new THREE.Vector3();\r\n\t\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tsubdivide( faces[ i ], detail );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Handle case when face straddles the seam\r\n\t\r\n\t\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\r\n\t\r\n\t\t\tvar x0 = uvs[ 0 ].x;\r\n\t\t\tvar x1 = uvs[ 1 ].x;\r\n\t\t\tvar x2 = uvs[ 2 ].x;\r\n\t\r\n\t\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\t\tvar min = Math.min( x0, x1, x2 );\r\n\t\r\n\t\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\t\r\n\t\t\t\t// 0.9 is somewhat arbitrary\r\n\t\r\n\t\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\r\n\t\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\r\n\t\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Apply radius\r\n\t\r\n\t\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tthis.vertices[ i ].multiplyScalar( radius );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Merge vertices\r\n\t\r\n\t\tthis.mergeVertices();\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\r\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\t\r\n\t\r\n\t\t// Project vector onto sphere's surface\r\n\t\r\n\t\tfunction prepare( vector ) {\r\n\t\r\n\t\t\tvar vertex = vector.normalize().clone();\r\n\t\t\tvertex.index = that.vertices.push( vertex ) - 1;\r\n\t\r\n\t\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\t\r\n\t\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n\t\t\tvar v = inclination( vector ) / Math.PI + 0.5;\r\n\t\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\r\n\t\r\n\t\t\treturn vertex;\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Approximate a curved face with recursively sub-divided triangles.\r\n\t\r\n\t\tfunction make( v1, v2, v3, materialIndex ) {\r\n\t\r\n\t\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );\r\n\t\t\tthat.faces.push( face );\r\n\t\r\n\t\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\t\r\n\t\t\tvar azi = azimuth( centroid );\r\n\t\r\n\t\t\tthat.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\tcorrectUV( v1.uv, v1, azi ),\r\n\t\t\t\tcorrectUV( v2.uv, v2, azi ),\r\n\t\t\t\tcorrectUV( v3.uv, v3, azi )\r\n\t\t\t] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Analytically subdivide a face to the required detail level.\r\n\t\r\n\t\tfunction subdivide( face, detail ) {\r\n\t\r\n\t\t\tvar cols = Math.pow( 2, detail );\r\n\t\t\tvar a = prepare( that.vertices[ face.a ] );\r\n\t\t\tvar b = prepare( that.vertices[ face.b ] );\r\n\t\t\tvar c = prepare( that.vertices[ face.c ] );\r\n\t\t\tvar v = [];\r\n\t\r\n\t\t\tvar materialIndex = face.materialIndex;\r\n\t\r\n\t\t\t// Construct all of the vertices for this subdivision.\r\n\t\r\n\t\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\r\n\t\r\n\t\t\t\tv[ i ] = [];\r\n\t\r\n\t\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\r\n\t\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\r\n\t\t\t\tvar rows = cols - i;\r\n\t\r\n\t\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\r\n\t\r\n\t\t\t\t\tif ( j === 0 && i === cols ) {\r\n\t\r\n\t\t\t\t\t\tv[ i ][ j ] = aj;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Construct all of the faces.\r\n\t\r\n\t\t\tfor ( var i = 0; i < cols ; i ++ ) {\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar k = Math.floor( j / 2 );\r\n\t\r\n\t\t\t\t\tif ( j % 2 === 0 ) {\r\n\t\r\n\t\t\t\t\t\tmake(\r\n\t\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\t\tv[ i ][ k ],\r\n\t\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tmake(\r\n\t\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\r\n\t\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\t\r\n\t\tfunction azimuth( vector ) {\r\n\t\r\n\t\t\treturn Math.atan2( vector.z, - vector.x );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Angle above the XZ plane.\r\n\t\r\n\t\tfunction inclination( vector ) {\r\n\t\r\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Texture fixing helper. Spheres have some odd behaviours.\r\n\t\r\n\t\tfunction correctUV( uv, vector, azimuth ) {\r\n\t\r\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n\t\t\treturn uv.clone();\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\r\n\t\r\n\tTHREE.PolyhedronGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.PolyhedronGeometry(\r\n\t\t\tparameters.vertices,\r\n\t\t\tparameters.indices,\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.detail\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/DodecahedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Abe Pazos / https://hamoid.com\r\n\t */\r\n\t\r\n\tTHREE.DodecahedronGeometry = function ( radius, detail ) {\r\n\t\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\t\tvar r = 1 / t;\r\n\t\r\n\t\tvar vertices = [\r\n\t\r\n\t\t\t// (±1, ±1, ±1)\r\n\t\t\t- 1, - 1, - 1,    - 1, - 1,  1,\r\n\t\t\t- 1,  1, - 1,    - 1,  1,  1,\r\n\t\t\t 1, - 1, - 1,     1, - 1,  1,\r\n\t\t\t 1,  1, - 1,     1,  1,  1,\r\n\t\r\n\t\t\t// (0, ±1/φ, ±φ)\r\n\t\t\t 0, - r, - t,     0, - r,  t,\r\n\t\t\t 0,  r, - t,     0,  r,  t,\r\n\t\r\n\t\t\t// (±1/φ, ±φ, 0)\r\n\t\t\t- r, - t,  0,    - r,  t,  0,\r\n\t\t\t r, - t,  0,     r,  t,  0,\r\n\t\r\n\t\t\t// (±φ, 0, ±1/φ)\r\n\t\t\t- t,  0, - r,     t,  0, - r,\r\n\t\t\t- t,  0,  r,     t,  0,  r\r\n\t\t];\r\n\t\r\n\t\tvar indices = [\r\n\t\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\r\n\t\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\r\n\t\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\r\n\t\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\r\n\t\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\r\n\t\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\r\n\t\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\r\n\t\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\r\n\t\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\r\n\t\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\r\n\t\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\r\n\t\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\r\n\t\t];\r\n\t\r\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\t\r\n\t\tthis.type = 'DodecahedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\n\tTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\r\n\t\r\n\tTHREE.DodecahedronGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.DodecahedronGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.detail\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/IcosahedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t */\r\n\t\r\n\tTHREE.IcosahedronGeometry = function ( radius, detail ) {\r\n\t\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\t\r\n\t\tvar vertices = [\r\n\t\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\r\n\t\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\r\n\t\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\r\n\t\t];\r\n\t\r\n\t\tvar indices = [\r\n\t\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\r\n\t\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\r\n\t\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\r\n\t\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\r\n\t\t];\r\n\t\r\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\t\r\n\t\tthis.type = 'IcosahedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\n\tTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\r\n\t\r\n\tTHREE.IcosahedronGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.IcosahedronGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.detail\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/OctahedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t */\r\n\t\r\n\tTHREE.OctahedronGeometry = function ( radius, detail ) {\r\n\t\r\n\t\tvar vertices = [\r\n\t\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\r\n\t\t];\r\n\t\r\n\t\tvar indices = [\r\n\t\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\r\n\t\t];\r\n\t\r\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\t\r\n\t\tthis.type = 'OctahedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\n\tTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\r\n\t\r\n\tTHREE.OctahedronGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.OctahedronGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.detail\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/TetrahedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t */\r\n\t\r\n\tTHREE.TetrahedronGeometry = function ( radius, detail ) {\r\n\t\r\n\t\tvar vertices = [\r\n\t\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\r\n\t\t];\r\n\t\r\n\t\tvar indices = [\r\n\t\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\r\n\t\t];\r\n\t\r\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\t\r\n\t\tthis.type = 'TetrahedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\n\tTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\r\n\t\r\n\tTHREE.TetrahedronGeometry.prototype.clone = function () {\r\n\t\r\n\t\tvar parameters = this.parameters;\r\n\t\r\n\t\treturn new THREE.TetrahedronGeometry(\r\n\t\t\tparameters.radius,\r\n\t\t\tparameters.detail\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/ParametricGeometry.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * Parametric Surfaces Geometry\r\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n\t *\r\n\t * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\r\n\t *\r\n\t */\r\n\t\r\n\tTHREE.ParametricGeometry = function ( func, slices, stacks ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'ParametricGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\t\r\n\t\tvar verts = this.vertices;\r\n\t\tvar faces = this.faces;\r\n\t\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\t\r\n\t\tvar i, j, p;\r\n\t\tvar u, v;\r\n\t\r\n\t\tvar sliceCount = slices + 1;\r\n\t\r\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\t\r\n\t\t\tv = i / stacks;\r\n\t\r\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\t\r\n\t\t\t\tu = j / slices;\r\n\t\r\n\t\t\t\tp = func( u, v );\r\n\t\t\t\tverts.push( p );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar a, b, c, d;\r\n\t\tvar uva, uvb, uvc, uvd;\r\n\t\r\n\t\tfor ( i = 0; i < stacks; i ++ ) {\r\n\t\r\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\t\r\n\t\t\t\ta = i * sliceCount + j;\r\n\t\t\t\tb = i * sliceCount + j + 1;\r\n\t\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\t\td = ( i + 1 ) * sliceCount + j;\r\n\t\r\n\t\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\r\n\t\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\r\n\t\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\r\n\t\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\r\n\t\r\n\t\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\t\tuvs.push( [ uva, uvb, uvd ] );\r\n\t\r\n\t\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// console.log(this);\r\n\t\r\n\t\t// magic bullet\r\n\t\t// var diff = this.mergeVertices();\r\n\t\t// console.log('removed ', diff, ' vertices by merging');\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\tthis.computeVertexNormals();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\r\n\t\r\n\t// File:src/extras/geometries/WireframeGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.WireframeGeometry = function ( geometry ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tvar edge = [ 0, 0 ], hash = {};\r\n\t\r\n\t\tfunction sortFunction( a, b ) {\r\n\t\r\n\t\t\treturn a - b;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\t\r\n\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar numEdges = 0;\r\n\t\r\n\t\t\t// allocate maximal size\r\n\t\t\tvar edges = new Uint32Array( 6 * faces.length );\r\n\t\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\t\tedge.sort( sortFunction );\r\n\t\r\n\t\t\t\t\tvar key = edge.toString();\r\n\t\r\n\t\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\t\tnumEdges ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\t\r\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\r\n\t\r\n\t\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\t\tcoords[ index + 0 ] = vertex.x;\r\n\t\t\t\t\tcoords[ index + 1 ] = vertex.y;\r\n\t\t\t\t\tcoords[ index + 2 ] = vertex.z;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\t\r\n\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\tif ( geometry.index !== null ) {\r\n\t\r\n\t\t\t\t// Indexed BufferGeometry\r\n\t\r\n\t\t\t\tvar indices = geometry.index.array;\r\n\t\t\t\tvar vertices = geometry.attributes.position;\r\n\t\t\t\tvar drawcalls = geometry.drawcalls;\r\n\t\t\t\tvar numEdges = 0;\r\n\t\r\n\t\t\t\tif ( drawcalls.length === 0 ) {\r\n\t\r\n\t\t\t\t\tgeometry.addGroup( 0, indices.length );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// allocate maximal size\r\n\t\t\t\tvar edges = new Uint32Array( 2 * indices.length );\r\n\t\r\n\t\t\t\tfor ( var o = 0, ol = drawcalls.length; o < ol; ++ o ) {\r\n\t\r\n\t\t\t\t\tvar drawcall = drawcalls[ o ];\r\n\t\r\n\t\t\t\t\tvar start = drawcall.start;\r\n\t\t\t\t\tvar count = drawcall.count;\r\n\t\r\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\r\n\t\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\r\n\t\t\t\t\t\t\tedge.sort( sortFunction );\r\n\t\r\n\t\t\t\t\t\t\tvar key = edge.toString();\r\n\t\r\n\t\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\t\t\t\tnumEdges ++;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\r\n\t\r\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\r\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\r\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// non-indexed BufferGeometry\r\n\t\r\n\t\t\t\tvar vertices = geometry.attributes.position.array;\r\n\t\t\t\tvar numEdges = vertices.length / 3;\r\n\t\t\t\tvar numTris = numEdges / 3;\r\n\t\r\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar index = 18 * i + 6 * j;\r\n\t\r\n\t\t\t\t\t\tvar index1 = 9 * i + 3 * j;\r\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\r\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\r\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\r\n\t\r\n\t\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\r\n\t\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\r\n\t\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\r\n\t\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\r\n\t\r\n\t// File:src/extras/helpers/AxisHelper.js\r\n\t\r\n\t/**\r\n\t * @author sroucheray / http://sroucheray.org/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.AxisHelper = function ( size ) {\r\n\t\r\n\t\tsize = size || 1;\r\n\t\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t0, 0, 0,  size, 0, 0,\r\n\t\t\t0, 0, 0,  0, size, 0,\r\n\t\t\t0, 0, 0,  0, 0, size\r\n\t\t] );\r\n\t\r\n\t\tvar colors = new Float32Array( [\r\n\t\t\t1, 0, 0,  1, 0.6, 0,\r\n\t\t\t0, 1, 0,  0.6, 1, 0,\r\n\t\t\t0, 0, 1,  0, 0.6, 1\r\n\t\t] );\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\r\n\t\r\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, material );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\r\n\t\r\n\t// File:src/extras/helpers/ArrowHelper.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author zz85 / http://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t *\r\n\t * Creates an arrow for visualizing directions\r\n\t *\r\n\t * Parameters:\r\n\t *  dir - Vector3\r\n\t *  origin - Vector3\r\n\t *  length - Number\r\n\t *  color - color in hex value\r\n\t *  headLength - Number\r\n\t *  headWidth - Number\r\n\t */\r\n\t\r\n\tTHREE.ArrowHelper = ( function () {\r\n\t\r\n\t\tvar lineGeometry = new THREE.Geometry();\r\n\t\tlineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );\r\n\t\r\n\t\tvar coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );\r\n\t\tconeGeometry.translate( 0, - 0.5, 0 );\r\n\t\r\n\t\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\t\r\n\t\t\t// dir is assumed to be normalized\r\n\t\r\n\t\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\t\tif ( color === undefined ) color = 0xffff00;\r\n\t\t\tif ( length === undefined ) length = 1;\r\n\t\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\t\r\n\t\t\tthis.position.copy( origin );\r\n\t\t\t\r\n\t\t\tif ( headLength < length ) {\r\n\t\t\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\t\t\tthis.line.matrixAutoUpdate = false;\r\n\t\t\t\tthis.add( this.line );\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\r\n\t\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\t\tthis.add( this.cone );\r\n\t\r\n\t\t\tthis.setDirection( dir );\r\n\t\t\tthis.setLength( length, headLength, headWidth );\r\n\t\r\n\t\t}\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\r\n\t\r\n\tTHREE.ArrowHelper.prototype.setDirection = ( function () {\r\n\t\r\n\t\tvar axis = new THREE.Vector3();\r\n\t\tvar radians;\r\n\t\r\n\t\treturn function setDirection( dir ) {\r\n\t\r\n\t\t\t// dir is assumed to be normalized\r\n\t\r\n\t\t\tif ( dir.y > 0.99999 ) {\r\n\t\r\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\t\r\n\t\t\t} else if ( dir.y < - 0.99999 ) {\r\n\t\r\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\r\n\t\r\n\t\t\t\tradians = Math.acos( dir.y );\r\n\t\r\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\t\r\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\t\r\n\t\tif ( headLength < length ){\r\n\t\t\tthis.line.scale.set( 1, length - headLength, 1 );\r\n\t\t\tthis.line.updateMatrix();\r\n\t\t}\r\n\t\r\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\t\tthis.cone.position.y = length;\r\n\t\tthis.cone.updateMatrix();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ArrowHelper.prototype.setColor = function ( color ) {\r\n\t\r\n\t\tif ( this.line !== undefined ) this.line.material.color.set( color );\r\n\t\tthis.cone.material.color.set( color );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/BoxHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.BoxHelper = function ( object ) {\r\n\t\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\t\tvar positions = new Float32Array( 8 * 3 );\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );\r\n\t\r\n\t\tif ( object !== undefined ) {\r\n\t\r\n\t\t\tthis.update( object );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\r\n\t\r\n\tTHREE.BoxHelper.prototype.update = ( function () {\r\n\t\r\n\t\tvar box = new THREE.Box3();\r\n\t\r\n\t\treturn function ( object ) {\r\n\t\r\n\t\t\tbox.setFromObject( object );\r\n\t\r\n\t\t\tif ( box.empty() ) return;\r\n\t\r\n\t\t\tvar min = box.min;\r\n\t\t\tvar max = box.max;\r\n\t\r\n\t\t\t/*\r\n\t\t\t  5____4\r\n\t\t\t1/___0/|\r\n\t\t\t| 6__|_7\r\n\t\t\t2/___3/\r\n\t\r\n\t\t\t0: max.x, max.y, max.z\r\n\t\t\t1: min.x, max.y, max.z\r\n\t\t\t2: min.x, min.y, max.z\r\n\t\t\t3: max.x, min.y, max.z\r\n\t\t\t4: max.x, max.y, min.z\r\n\t\t\t5: min.x, max.y, min.z\r\n\t\t\t6: min.x, min.y, min.z\r\n\t\t\t7: max.x, min.y, min.z\r\n\t\t\t*/\r\n\t\r\n\t\t\tvar position = this.geometry.attributes.position;\r\n\t\t\tvar array = position.array;\r\n\t\r\n\t\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\r\n\t\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\r\n\t\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\r\n\t\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\t\r\n\t\t\tposition.needsUpdate = true;\r\n\t\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\t\r\n\t\t}\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/extras/helpers/BoundingBoxHelper.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\t// a helper to show the world-axis-aligned bounding box for an object\r\n\t\r\n\tTHREE.BoundingBoxHelper = function ( object, hex ) {\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0x888888;\r\n\t\r\n\t\tthis.object = object;\r\n\t\r\n\t\tthis.box = new THREE.Box3();\r\n\t\r\n\t\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\r\n\tTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\r\n\t\r\n\tTHREE.BoundingBoxHelper.prototype.update = function () {\r\n\t\r\n\t\tthis.box.setFromObject( this.object );\r\n\t\r\n\t\tthis.box.size( this.scale );\r\n\t\r\n\t\tthis.box.center( this.position );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/CameraHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t *\t- shows frustum, line of sight and up of the camera\r\n\t *\t- suitable for fast updates\r\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\r\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n\t */\r\n\t\r\n\tTHREE.CameraHelper = function ( camera ) {\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\r\n\t\r\n\t\tvar pointMap = {};\r\n\t\r\n\t\t// colors\r\n\t\r\n\t\tvar hexFrustum = 0xffaa00;\r\n\t\tvar hexCone = 0xff0000;\r\n\t\tvar hexUp = 0x00aaff;\r\n\t\tvar hexTarget = 0xffffff;\r\n\t\tvar hexCross = 0x333333;\r\n\t\r\n\t\t// near\r\n\t\r\n\t\taddLine( \"n1\", \"n2\", hexFrustum );\r\n\t\taddLine( \"n2\", \"n4\", hexFrustum );\r\n\t\taddLine( \"n4\", \"n3\", hexFrustum );\r\n\t\taddLine( \"n3\", \"n1\", hexFrustum );\r\n\t\r\n\t\t// far\r\n\t\r\n\t\taddLine( \"f1\", \"f2\", hexFrustum );\r\n\t\taddLine( \"f2\", \"f4\", hexFrustum );\r\n\t\taddLine( \"f4\", \"f3\", hexFrustum );\r\n\t\taddLine( \"f3\", \"f1\", hexFrustum );\r\n\t\r\n\t\t// sides\r\n\t\r\n\t\taddLine( \"n1\", \"f1\", hexFrustum );\r\n\t\taddLine( \"n2\", \"f2\", hexFrustum );\r\n\t\taddLine( \"n3\", \"f3\", hexFrustum );\r\n\t\taddLine( \"n4\", \"f4\", hexFrustum );\r\n\t\r\n\t\t// cone\r\n\t\r\n\t\taddLine( \"p\", \"n1\", hexCone );\r\n\t\taddLine( \"p\", \"n2\", hexCone );\r\n\t\taddLine( \"p\", \"n3\", hexCone );\r\n\t\taddLine( \"p\", \"n4\", hexCone );\r\n\t\r\n\t\t// up\r\n\t\r\n\t\taddLine( \"u1\", \"u2\", hexUp );\r\n\t\taddLine( \"u2\", \"u3\", hexUp );\r\n\t\taddLine( \"u3\", \"u1\", hexUp );\r\n\t\r\n\t\t// target\r\n\t\r\n\t\taddLine( \"c\", \"t\", hexTarget );\r\n\t\taddLine( \"p\", \"c\", hexCross );\r\n\t\r\n\t\t// cross\r\n\t\r\n\t\taddLine( \"cn1\", \"cn2\", hexCross );\r\n\t\taddLine( \"cn3\", \"cn4\", hexCross );\r\n\t\r\n\t\taddLine( \"cf1\", \"cf2\", hexCross );\r\n\t\taddLine( \"cf3\", \"cf4\", hexCross );\r\n\t\r\n\t\tfunction addLine( a, b, hex ) {\r\n\t\r\n\t\t\taddPoint( a, hex );\r\n\t\t\taddPoint( b, hex );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction addPoint( id, hex ) {\r\n\t\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.colors.push( new THREE.Color( hex ) );\r\n\t\r\n\t\t\tif ( pointMap[ id ] === undefined ) {\r\n\t\r\n\t\t\t\tpointMap[ id ] = [];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, material );\r\n\t\r\n\t\tthis.camera = camera;\r\n\t\tthis.camera.updateProjectionMatrix();\r\n\t\r\n\t\tthis.matrix = camera.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tthis.pointMap = pointMap;\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\r\n\t\r\n\tTHREE.CameraHelper.prototype.update = function () {\r\n\t\r\n\t\tvar geometry, pointMap;\r\n\t\r\n\t\tvar vector = new THREE.Vector3();\r\n\t\tvar camera = new THREE.Camera();\r\n\t\r\n\t\tfunction setPoint( point, x, y, z ) {\r\n\t\r\n\t\t\tvector.set( x, y, z ).unproject( camera );\r\n\t\r\n\t\t\tvar points = pointMap[ point ];\r\n\t\r\n\t\t\tif ( points !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn function () {\r\n\t\r\n\t\t\tgeometry = this.geometry;\r\n\t\t\tpointMap = this.pointMap;\r\n\t\r\n\t\t\tvar w = 1, h = 1;\r\n\t\r\n\t\t\t// we need just camera projection matrix\r\n\t\t\t// world matrix must be identity\r\n\t\r\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\t\r\n\t\t\t// center / target\r\n\t\r\n\t\t\tsetPoint( \"c\", 0, 0, - 1 );\r\n\t\t\tsetPoint( \"t\", 0, 0,  1 );\r\n\t\r\n\t\t\t// near\r\n\t\r\n\t\t\tsetPoint( \"n1\", - w, - h, - 1 );\r\n\t\t\tsetPoint( \"n2\",   w, - h, - 1 );\r\n\t\t\tsetPoint( \"n3\", - w,   h, - 1 );\r\n\t\t\tsetPoint( \"n4\",   w,   h, - 1 );\r\n\t\r\n\t\t\t// far\r\n\t\r\n\t\t\tsetPoint( \"f1\", - w, - h, 1 );\r\n\t\t\tsetPoint( \"f2\",   w, - h, 1 );\r\n\t\t\tsetPoint( \"f3\", - w,   h, 1 );\r\n\t\t\tsetPoint( \"f4\",   w,   h, 1 );\r\n\t\r\n\t\t\t// up\r\n\t\r\n\t\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\r\n\t\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\r\n\t\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\r\n\t\r\n\t\t\t// cross\r\n\t\r\n\t\t\tsetPoint( \"cf1\", - w,   0, 1 );\r\n\t\t\tsetPoint( \"cf2\",   w,   0, 1 );\r\n\t\t\tsetPoint( \"cf3\",   0, - h, 1 );\r\n\t\t\tsetPoint( \"cf4\",   0,   h, 1 );\r\n\t\r\n\t\t\tsetPoint( \"cn1\", - w,   0, - 1 );\r\n\t\t\tsetPoint( \"cn2\",   w,   0, - 1 );\r\n\t\t\tsetPoint( \"cn3\",   0, - h, - 1 );\r\n\t\t\tsetPoint( \"cn4\",   0,   h, - 1 );\r\n\t\r\n\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\t// File:src/extras/helpers/DirectionalLightHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.DirectionalLightHelper = function ( light, size ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\t\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tsize = size || 1;\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\tgeometry.vertices.push(\r\n\t\t\tnew THREE.Vector3( - size,   size, 0 ),\r\n\t\t\tnew THREE.Vector3(   size,   size, 0 ),\r\n\t\t\tnew THREE.Vector3(   size, - size, 0 ),\r\n\t\t\tnew THREE.Vector3( - size, - size, 0 ),\r\n\t\t\tnew THREE.Vector3( - size,   size, 0 )\r\n\t\t);\r\n\t\r\n\t\tvar material = new THREE.LineBasicMaterial( { fog: false } );\r\n\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\tthis.lightPlane = new THREE.Line( geometry, material );\r\n\t\tthis.add( this.lightPlane );\r\n\t\r\n\t\tgeometry = new THREE.Geometry();\r\n\t\tgeometry.vertices.push(\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3()\r\n\t\t);\r\n\t\r\n\t\tmaterial = new THREE.LineBasicMaterial( { fog: false } );\r\n\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\tthis.targetLine = new THREE.Line( geometry, material );\r\n\t\tthis.add( this.targetLine );\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\r\n\t\r\n\tTHREE.DirectionalLightHelper.prototype.dispose = function () {\r\n\t\r\n\t\tthis.lightPlane.geometry.dispose();\r\n\t\tthis.lightPlane.material.dispose();\r\n\t\tthis.targetLine.geometry.dispose();\r\n\t\tthis.targetLine.material.dispose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DirectionalLightHelper.prototype.update = function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\tvar v3 = new THREE.Vector3();\r\n\t\r\n\t\treturn function () {\r\n\t\r\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\t\tv3.subVectors( v2, v1 );\r\n\t\r\n\t\t\tthis.lightPlane.lookAt( v3 );\r\n\t\t\tthis.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\t\tthis.targetLine.geometry.vertices[ 1 ].copy( v3 );\r\n\t\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\t\t\tthis.targetLine.material.color.copy( this.lightPlane.material.color );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\t// File:src/extras/helpers/EdgesHelper.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @param object THREE.Mesh whose geometry will be used\r\n\t * @param hex line color\r\n\t * @param thresholdAngle the minimum angle (in degrees),\r\n\t * between the face normals of adjacent faces,\r\n\t * that is required to render an edge. A value of 10 means\r\n\t * an edge is only rendered if the angle is at least 10 degrees.\r\n\t */\r\n\t\r\n\tTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\t\r\n\t\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\r\n\t\r\n\t// File:src/extras/helpers/FaceNormalsHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\t\r\n\t\t// FaceNormalsHelper only supports THREE.Geometry\r\n\t\r\n\t\tthis.object = object;\r\n\t\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\t\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar nNormals = 0;\r\n\t\r\n\t\tvar objGeometry = this.object.geometry;\r\n\t\r\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\tnNormals = objGeometry.faces.length;\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\r\n\t\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\t\r\n\t\tgeometry.addAttribute( 'position', positions );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\t\r\n\t\t//\r\n\t\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\r\n\t\r\n\tTHREE.FaceNormalsHelper.prototype.update = ( function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\tvar normalMatrix = new THREE.Matrix3();\r\n\t\r\n\t\treturn function update() {\r\n\t\r\n\t\t\tthis.object.updateMatrixWorld( true );\r\n\t\r\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\t\r\n\t\t\tvar matrixWorld = this.object.matrixWorld;\r\n\t\r\n\t\t\tvar position = this.geometry.attributes.position;\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar objGeometry = this.object.geometry;\r\n\t\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\t\r\n\t\t\tvar faces = objGeometry.faces;\r\n\t\r\n\t\t\tvar idx = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\tvar normal = face.normal;\r\n\t\r\n\t\t\t\tv1.copy( vertices[ face.a ] )\r\n\t\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t\t.applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\t\r\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\t\r\n\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tposition.needsUpdate = true;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t}() );\r\n\t\r\n\t// File:src/extras/helpers/GridHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.GridHelper = function ( size, step ) {\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\t\r\n\t\tthis.color1 = new THREE.Color( 0x444444 );\r\n\t\tthis.color2 = new THREE.Color( 0x888888 );\r\n\t\r\n\t\tfor ( var i = - size; i <= size; i += step ) {\r\n\t\r\n\t\t\tgeometry.vertices.push(\r\n\t\t\t\tnew THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),\r\n\t\t\t\tnew THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )\r\n\t\t\t);\r\n\t\r\n\t\t\tvar color = i === 0 ? this.color1 : this.color2;\r\n\t\r\n\t\t\tgeometry.colors.push( color, color, color, color );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, material );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\r\n\t\r\n\tTHREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {\r\n\t\r\n\t\tthis.color1.set( colorCenterLine );\r\n\t\tthis.color2.set( colorGrid );\r\n\t\r\n\t\tthis.geometry.colorsNeedUpdate = true;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/HemisphereLightHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\t\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\r\n\t\r\n\t\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\t\tgeometry.rotateX( - Math.PI / 2 );\r\n\t\r\n\t\tfor ( var i = 0, il = 8; i < il; i ++ ) {\r\n\t\r\n\t\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\r\n\t\r\n\t\tthis.lightSphere = new THREE.Mesh( geometry, material );\r\n\t\tthis.add( this.lightSphere );\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\r\n\t\r\n\tTHREE.HemisphereLightHelper.prototype.dispose = function () {\r\n\t\r\n\t\tthis.lightSphere.geometry.dispose();\r\n\t\tthis.lightSphere.material.dispose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.HemisphereLightHelper.prototype.update = function () {\r\n\t\r\n\t\tvar vector = new THREE.Vector3();\r\n\t\r\n\t\treturn function () {\r\n\t\r\n\t\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\t\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\r\n\t\r\n\t\t}\r\n\t\r\n\t}();\r\n\t\r\n\t// File:src/extras/helpers/PointLightHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.PointLightHelper = function ( light, sphereSize ) {\r\n\t\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\t\r\n\t\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\t\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\tTHREE.Mesh.call( this, geometry, material );\r\n\t\r\n\t\tthis.matrix = this.light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\t/*\r\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\t\r\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\t\r\n\t\tvar d = light.distance;\r\n\t\r\n\t\tif ( d === 0.0 ) {\r\n\t\r\n\t\t\tthis.lightDistance.visible = false;\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.add( this.lightDistance );\r\n\t\t*/\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\r\n\tTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\r\n\t\r\n\tTHREE.PointLightHelper.prototype.dispose = function () {\r\n\t\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PointLightHelper.prototype.update = function () {\r\n\t\r\n\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\t/*\r\n\t\tvar d = this.light.distance;\r\n\t\r\n\t\tif ( d === 0.0 ) {\r\n\t\r\n\t\t\tthis.lightDistance.visible = false;\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.lightDistance.visible = true;\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\t\r\n\t\t}\r\n\t\t*/\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/SkeletonHelper.js\r\n\t\r\n\t/**\r\n\t * @author Sean Griffin / http://twitter.com/sgrif\r\n\t * @author Michael Guerrero / http://realitymeltdown.com\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\t\r\n\tTHREE.SkeletonHelper = function ( object ) {\r\n\t\r\n\t\tthis.bones = this.getBoneList( object );\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\r\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\t\r\n\t\t\tvar bone = this.bones[ i ];\r\n\t\r\n\t\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\t\r\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\r\n\t\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tgeometry.dynamic = true;\r\n\t\r\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, material );\r\n\t\r\n\t\tthis.root = object;\r\n\t\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\r\n\t\r\n\tTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\r\n\t\r\n\t\tvar boneList = [];\r\n\t\r\n\t\tif ( object instanceof THREE.Bone ) {\r\n\t\r\n\t\t\tboneList.push( object );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\t\r\n\t\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn boneList;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkeletonHelper.prototype.update = function () {\r\n\t\r\n\t\tvar geometry = this.geometry;\r\n\t\r\n\t\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\r\n\t\r\n\t\tvar boneMatrix = new THREE.Matrix4();\r\n\t\r\n\t\tvar j = 0;\r\n\t\r\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\t\r\n\t\t\tvar bone = this.bones[ i ];\r\n\t\r\n\t\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\t\r\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\r\n\t\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\r\n\t\r\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\r\n\t\r\n\t\t\t\tj += 2;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tgeometry.verticesNeedUpdate = true;\r\n\t\r\n\t\tgeometry.computeBoundingSphere();\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/SpotLightHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.SpotLightHelper = function ( light ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\t\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tvar geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );\r\n\t\r\n\t\tgeometry.translate( 0, - 0.5, 0 );\r\n\t\tgeometry.rotateX( - Math.PI / 2 );\r\n\t\r\n\t\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\t\r\n\t\tthis.cone = new THREE.Mesh( geometry, material );\r\n\t\tthis.add( this.cone );\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\r\n\t\r\n\tTHREE.SpotLightHelper.prototype.dispose = function () {\r\n\t\r\n\t\tthis.cone.geometry.dispose();\r\n\t\tthis.cone.material.dispose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SpotLightHelper.prototype.update = function () {\r\n\t\r\n\t\tvar vector = new THREE.Vector3();\r\n\t\tvar vector2 = new THREE.Vector3();\r\n\t\r\n\t\treturn function () {\r\n\t\r\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 10000;\r\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\t\r\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\t\r\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\r\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\r\n\t\r\n\t\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\t// File:src/extras/helpers/VertexNormalsHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\t\r\n\t\tthis.object = object;\r\n\t\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\t\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar nNormals = 0;\r\n\t\r\n\t\tvar objGeometry = this.object.geometry;\r\n\t\r\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\tnNormals = objGeometry.faces.length * 3;\r\n\t\r\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\tnNormals = objGeometry.attributes.normal.count\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\r\n\t\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\t\r\n\t\tgeometry.addAttribute( 'position', positions );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\t\r\n\t\t//\r\n\t\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\r\n\t\r\n\tTHREE.VertexNormalsHelper.prototype.update = ( function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\tvar normalMatrix = new THREE.Matrix3();\r\n\t\r\n\t\treturn function update() {\r\n\t\r\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\t\r\n\t\t\tthis.object.updateMatrixWorld( true );\r\n\t\r\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\t\r\n\t\t\tvar matrixWorld = this.object.matrixWorld;\r\n\t\r\n\t\t\tvar position = this.geometry.attributes.position;\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar objGeometry = this.object.geometry;\r\n\t\r\n\t\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tvar vertices = objGeometry.vertices;\r\n\t\r\n\t\t\t\tvar faces = objGeometry.faces;\r\n\t\r\n\t\t\t\tvar idx = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\r\n\t\r\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\t\r\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\t\r\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\t\r\n\t\t\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tvar objPos = objGeometry.attributes.position;\r\n\t\r\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\t\r\n\t\t\t\tvar idx = 0;\r\n\t\r\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\t\r\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\t\r\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\t\r\n\t\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tposition.needsUpdate = true;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t}() );\r\n\t\r\n\t// File:src/extras/helpers/WireframeHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.WireframeHelper = function ( object, hex ) {\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\t\r\n\t\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\r\n\t\r\n\t// File:src/extras/objects/ImmediateRenderObject.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.ImmediateRenderObject = function ( material ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.material = material;\r\n\t\tthis.render = function ( renderCallback ) {};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\r\n\t\r\n\t// File:src/extras/objects/MorphBlendMesh.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.MorphBlendMesh = function( geometry, material ) {\r\n\t\r\n\t\tTHREE.Mesh.call( this, geometry, material );\r\n\t\r\n\t\tthis.animationsMap = {};\r\n\t\tthis.animationsList = [];\r\n\t\r\n\t\t// prepare default animation\r\n\t\t// (all frames played together in 1 second)\r\n\t\r\n\t\tvar numFrames = this.geometry.morphTargets.length;\r\n\t\r\n\t\tvar name = \"__default\";\r\n\t\r\n\t\tvar startFrame = 0;\r\n\t\tvar endFrame = numFrames - 1;\r\n\t\r\n\t\tvar fps = numFrames / 1;\r\n\t\r\n\t\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t\tthis.setAnimationWeight( name, 1 );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\tTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\t\r\n\t\tvar animation = {\r\n\t\r\n\t\t\tstart: start,\r\n\t\t\tend: end,\r\n\t\r\n\t\t\tlength: end - start + 1,\r\n\t\r\n\t\t\tfps: fps,\r\n\t\t\tduration: ( end - start ) / fps,\r\n\t\r\n\t\t\tlastFrame: 0,\r\n\t\t\tcurrentFrame: 0,\r\n\t\r\n\t\t\tactive: false,\r\n\t\r\n\t\t\ttime: 0,\r\n\t\t\tdirection: 1,\r\n\t\t\tweight: 1,\r\n\t\r\n\t\t\tdirectionBackwards: false,\r\n\t\t\tmirroredLoop: false\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.animationsMap[ name ] = animation;\r\n\t\tthis.animationsList.push( animation );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\t\r\n\t\tvar pattern = /([a-z]+)_?(\\d+)/;\r\n\t\r\n\t\tvar firstAnimation, frameRanges = {};\r\n\t\r\n\t\tvar geometry = this.geometry;\r\n\t\r\n\t\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\t\tvar chunks = morph.name.match( pattern );\r\n\t\r\n\t\t\tif ( chunks && chunks.length > 1 ) {\r\n\t\r\n\t\t\t\tvar name = chunks[ 1 ];\r\n\t\r\n\t\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\t\r\n\t\t\t\tvar range = frameRanges[ name ];\r\n\t\r\n\t\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\t\tif ( i > range.end ) range.end = i;\r\n\t\r\n\t\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfor ( var name in frameRanges ) {\r\n\t\r\n\t\t\tvar range = frameRanges[ name ];\r\n\t\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.firstAnimation = firstAnimation;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.direction = 1;\r\n\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.direction = - 1;\r\n\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.fps = fps;\r\n\t\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.duration = duration;\r\n\t\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.weight = weight;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.time = time;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\t\r\n\t\tvar time = 0;\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\ttime = animation.time;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn time;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\t\r\n\t\tvar duration = - 1;\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tduration = animation.duration;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn duration;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.time = 0;\r\n\t\t\tanimation.active = true;\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.active = false;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\r\n\t\r\n\t\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\t\r\n\t\t\tvar animation = this.animationsList[ i ];\r\n\t\r\n\t\t\tif ( ! animation.active ) continue;\r\n\t\r\n\t\t\tvar frameTime = animation.duration / animation.length;\r\n\t\r\n\t\t\tanimation.time += animation.direction * delta;\r\n\t\r\n\t\t\tif ( animation.mirroredLoop ) {\r\n\t\r\n\t\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\t\r\n\t\t\t\t\tanimation.direction *= - 1;\r\n\t\r\n\t\t\t\t\tif ( animation.time > animation.duration ) {\r\n\t\r\n\t\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( animation.time < 0 ) {\r\n\t\r\n\t\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tanimation.time = animation.time % animation.duration;\r\n\t\r\n\t\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\t\tvar weight = animation.weight;\r\n\t\r\n\t\t\tif ( keyframe !== animation.currentFrame ) {\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\t\r\n\t\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\t\tanimation.currentFrame = keyframe;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\t\r\n\t\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\t\r\n\t\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t// Export the THREE object for **Node.js**, with\r\n\t// backwards-compatibility for the old `require()` API. If we're in\r\n\t// the browser, add `_` as a global object via a string identifier,\r\n\t// for Closure Compiler \"advanced\" mode.\r\n\tif (true) {\r\n\t  if (typeof module !== 'undefined' && module.exports) {\r\n\t    exports = module.exports = THREE;\r\n\t  }\r\n\t  exports.THREE = THREE;\r\n\t} else {\r\n\t  this['THREE'] = THREE;\r\n\t}\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// This can be imported from anywhere and will still reference the same scene,\n\t// though there is a helper reference in Engine.scene\n\t\n\texports['default'] = (function () {\n\t  var scene = new _three2['default'].Scene();\n\t  scene.fog = new _three2['default'].Fog(0xffffff, 1, 15000);\n\t  return scene;\n\t})();\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _Scene = __webpack_require__(5);\n\t\n\tvar _Scene2 = _interopRequireDefault(_Scene);\n\t\n\t// This can only be accessed from Engine.renderer if you want to reference the\n\t// same scene in multiple places\n\t\n\texports['default'] = function (container) {\n\t  var renderer = new _three2['default'].WebGLRenderer({\n\t    antialias: true\n\t  });\n\t\n\t  renderer.setClearColor(_Scene2['default'].fog.color, 1);\n\t\n\t  // Gamma settings make things look nicer\n\t  renderer.gammaInput = true;\n\t  renderer.gammaOutput = true;\n\t\n\t  container.appendChild(renderer.domElement);\n\t\n\t  var updateSize = function updateSize() {\n\t    renderer.setSize(container.clientWidth, container.clientHeight);\n\t  };\n\t\n\t  window.addEventListener('resize', updateSize, false);\n\t  updateSize();\n\t\n\t  return renderer;\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// This can only be accessed from Engine.camera if you want to reference the\n\t// same scene in multiple places\n\t\n\texports['default'] = function (container) {\n\t  var camera = new _three2['default'].PerspectiveCamera(40, 1, 1, 40000);\n\t  camera.position.z = 400;\n\t\n\t  var updateSize = function updateSize() {\n\t    camera.aspect = container.clientWidth / container.clientHeight;\n\t    camera.updateProjectionMatrix();\n\t  };\n\t\n\t  window.addEventListener('resize', updateSize, false);\n\t  updateSize();\n\t\n\t  return camera;\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5fc75d7dff44ed97a876\n **/","import World from './World';\n\nconst VIZI = {\n  version: '0.3',\n\n  // Public API\n  World: World\n};\n\nexport default VIZI;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/vizicities.js\n **/","import EventEmitter from 'eventemitter3';\nimport Engine from './Engine/Engine';\n\n// Pretty much any event someone using ViziCities would need will be emitted or\n// proxied by World (eg. render events, etc)\n\nclass World extends EventEmitter {\n  constructor(domId) {\n    super();\n\n    this._initContainer(domId);\n    this._initEngine();\n\n    // Kick off the update and render loop\n    this._update();\n  }\n\n  _initContainer(domId) {\n    this._container = document.getElementById(domId);\n  }\n\n  _initEngine() {\n    this._engine = Engine(this._container);\n\n    // Engine events\n    //\n    // Consider proxying these through events on World for public access\n    // this._engine.on('preRender', () => {});\n    // this._engine.on('postRender', () => {});\n  }\n\n  _update() {\n    var delta = this._engine.clock.getDelta();\n\n    // Once _update is called it will run forever, for now\n    window.requestAnimationFrame(this._update.bind(this));\n\n    this.emit('preUpdate');\n    this._engine._update(delta);\n    this.emit('postUpdate');\n  }\n\n  addLayer(layer) {}\n  removeLayer(layer) {}\n}\n\n// Initialise without requiring new keyword\nexport default function(domId) {\n  return new World(domId);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/World.js\n **/","'use strict';\n\n//\n// We store our EE objects in a plain object whose properties are event names.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// `~` to make sure that the built-in object properties are not overridden or\n// used as an attack vector.\n// We also assume that `Object.create(null)` is available when the event name\n// is an ES6 Symbol.\n//\nvar prefix = typeof Object.create !== 'function' ? '~' : false;\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} once Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Holds the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @param {Boolean} exists We only need to know if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events && this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Mixed} context Only remove listeners matching this context.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return this;\n\n  var listeners = this._events[evt]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn) {\n      if (\n           listeners.fn !== fn\n        || (once && !listeners.once)\n        || (context && listeners.context !== context)\n      ) {\n        events.push(listeners);\n      }\n    } else {\n      for (var i = 0, length = listeners.length; i < length; i++) {\n        if (\n             listeners[i].fn !== fn\n          || (once && !listeners[i].once)\n          || (context && listeners[i].context !== context)\n        ) {\n          events.push(listeners[i]);\n        }\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[evt] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[prefix ? prefix + event : event];\n  else this._events = prefix ? {} : Object.create(null);\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/eventemitter3/index.js\n ** module id = 2\n ** module chunks = 0\n **/","import EventEmitter from 'eventemitter3';\nimport THREE from 'three';\nimport Scene from './Scene';\nimport Renderer from './Renderer';\nimport Camera from './Camera';\n\nclass Engine extends EventEmitter {\n  constructor(container) {\n    console.log('Init Engine');\n\n    super();\n\n    this.scene = Scene;\n    this.renderer = Renderer(container);\n    this.camera = Camera(container);\n    this.clock = new THREE.Clock();\n  }\n\n  _update(delta) {\n    this.emit('preRender');\n    this.renderer.render(this.scene, this.camera);\n    this.emit('postRender');\n  }\n}\n\n// Initialise without requiring new keyword\nexport default function(container) {\n  return new Engine(container);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Engine/Engine.js\n **/","var self = self || {};// File:src/Three.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = { REVISION: '73' };\r\n\r\n//\r\n\r\nif ( typeof define === 'function' && define.amd ) {\r\n\r\n\t\tdefine( 'three', THREE );\r\n\r\n} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\r\n\r\n\t\tmodule.exports = THREE;\r\n\r\n}\r\n\r\n\r\n// polyfills\r\n\r\nif ( self.requestAnimationFrame === undefined || self.cancelAnimationFrame === undefined ) {\r\n\r\n\t// Missing in Android stock browser.\r\n\r\n\t( function () {\r\n\r\n\t\tvar lastTime = 0;\r\n\t\tvar vendors = [ 'ms', 'moz', 'webkit', 'o' ];\r\n\r\n\t\tfor ( var x = 0; x < vendors.length && ! self.requestAnimationFrame; ++ x ) {\r\n\r\n\t\t\tself.requestAnimationFrame = self[ vendors[ x ] + 'RequestAnimationFrame' ];\r\n\t\t\tself.cancelAnimationFrame = self[ vendors[ x ] + 'CancelAnimationFrame' ] || self[ vendors[ x ] + 'CancelRequestAnimationFrame' ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( self.requestAnimationFrame === undefined && self.setTimeout !== undefined ) {\r\n\r\n\t\t\tself.requestAnimationFrame = function ( callback ) {\r\n\r\n\t\t\t\tvar currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );\r\n\t\t\t\tvar id = self.setTimeout( function () {\r\n\r\n\t\t\t\t\tcallback( currTime + timeToCall );\r\n\r\n\t\t\t\t}, timeToCall );\r\n\t\t\t\tlastTime = currTime + timeToCall;\r\n\t\t\t\treturn id;\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tif ( self.cancelAnimationFrame === undefined && self.clearTimeout !== undefined ) {\r\n\r\n\t\t\tself.cancelAnimationFrame = function ( id ) {\r\n\r\n\t\t\t\tself.clearTimeout( id );\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} )();\r\n\r\n}\r\n\r\n//\r\n\r\nif ( self.performance === undefined ) {\r\n\r\n\tself.performance = {};\r\n\r\n}\r\n\r\nif ( self.performance.now === undefined ) {\r\n\r\n\t( function () {\r\n\r\n\t\tvar start = Date.now();\r\n\r\n\t\tself.performance.now = function () {\r\n\r\n\t\t\treturn Date.now() - start;\r\n\r\n\t\t}\r\n\r\n\t} )();\r\n\r\n}\r\n\r\n//\r\n\r\nif ( Number.EPSILON === undefined ) {\r\n\r\n\tNumber.EPSILON = Math.pow( 2, -52 );\r\n\r\n}\r\n\r\n//\r\n\r\nif ( Math.sign === undefined ) {\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\r\n\tMath.sign = function ( x ) {\r\n\r\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\r\n\t};\r\n\r\n}\r\n\r\nif ( Function.prototype.name === undefined && Object.defineProperty !== undefined ) {\r\n\r\n\t// Missing in IE9-11.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\r\n\tObject.defineProperty( Function.prototype, 'name', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n}\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\r\n\r\nTHREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\r\n\r\n// GL STATE CONSTANTS\r\n\r\nTHREE.CullFaceNone = 0;\r\nTHREE.CullFaceBack = 1;\r\nTHREE.CullFaceFront = 2;\r\nTHREE.CullFaceFrontBack = 3;\r\n\r\nTHREE.FrontFaceDirectionCW = 0;\r\nTHREE.FrontFaceDirectionCCW = 1;\r\n\r\n// SHADOWING TYPES\r\n\r\nTHREE.BasicShadowMap = 0;\r\nTHREE.PCFShadowMap = 1;\r\nTHREE.PCFSoftShadowMap = 2;\r\n\r\n// MATERIAL CONSTANTS\r\n\r\n// side\r\n\r\nTHREE.FrontSide = 0;\r\nTHREE.BackSide = 1;\r\nTHREE.DoubleSide = 2;\r\n\r\n// shading\r\n\r\nTHREE.FlatShading = 1;\r\nTHREE.SmoothShading = 2;\r\n\r\n// colors\r\n\r\nTHREE.NoColors = 0;\r\nTHREE.FaceColors = 1;\r\nTHREE.VertexColors = 2;\r\n\r\n// blending modes\r\n\r\nTHREE.NoBlending = 0;\r\nTHREE.NormalBlending = 1;\r\nTHREE.AdditiveBlending = 2;\r\nTHREE.SubtractiveBlending = 3;\r\nTHREE.MultiplyBlending = 4;\r\nTHREE.CustomBlending = 5;\r\n\r\n// custom blending equations\r\n// (numbers start from 100 not to clash with other\r\n// mappings to OpenGL constants defined in Texture.js)\r\n\r\nTHREE.AddEquation = 100;\r\nTHREE.SubtractEquation = 101;\r\nTHREE.ReverseSubtractEquation = 102;\r\nTHREE.MinEquation = 103;\r\nTHREE.MaxEquation = 104;\r\n\r\n// custom blending destination factors\r\n\r\nTHREE.ZeroFactor = 200;\r\nTHREE.OneFactor = 201;\r\nTHREE.SrcColorFactor = 202;\r\nTHREE.OneMinusSrcColorFactor = 203;\r\nTHREE.SrcAlphaFactor = 204;\r\nTHREE.OneMinusSrcAlphaFactor = 205;\r\nTHREE.DstAlphaFactor = 206;\r\nTHREE.OneMinusDstAlphaFactor = 207;\r\n\r\n// custom blending source factors\r\n\r\n//THREE.ZeroFactor = 200;\r\n//THREE.OneFactor = 201;\r\n//THREE.SrcAlphaFactor = 204;\r\n//THREE.OneMinusSrcAlphaFactor = 205;\r\n//THREE.DstAlphaFactor = 206;\r\n//THREE.OneMinusDstAlphaFactor = 207;\r\nTHREE.DstColorFactor = 208;\r\nTHREE.OneMinusDstColorFactor = 209;\r\nTHREE.SrcAlphaSaturateFactor = 210;\r\n\r\n// depth modes\r\n\r\nTHREE.NeverDepth = 0;\r\nTHREE.AlwaysDepth = 1;\r\nTHREE.LessDepth = 2;\r\nTHREE.LessEqualDepth = 3;\r\nTHREE.EqualDepth = 4;\r\nTHREE.GreaterEqualDepth = 5;\r\nTHREE.GreaterDepth = 6;\r\nTHREE.NotEqualDepth = 7;\r\n\r\n\r\n// TEXTURE CONSTANTS\r\n\r\nTHREE.MultiplyOperation = 0;\r\nTHREE.MixOperation = 1;\r\nTHREE.AddOperation = 2;\r\n\r\n// Mapping modes\r\n\r\nTHREE.UVMapping = 300;\r\n\r\nTHREE.CubeReflectionMapping = 301;\r\nTHREE.CubeRefractionMapping = 302;\r\n\r\nTHREE.EquirectangularReflectionMapping = 303;\r\nTHREE.EquirectangularRefractionMapping = 304;\r\n\r\nTHREE.SphericalReflectionMapping = 305;\r\n\r\n// Wrapping modes\r\n\r\nTHREE.RepeatWrapping = 1000;\r\nTHREE.ClampToEdgeWrapping = 1001;\r\nTHREE.MirroredRepeatWrapping = 1002;\r\n\r\n// Filters\r\n\r\nTHREE.NearestFilter = 1003;\r\nTHREE.NearestMipMapNearestFilter = 1004;\r\nTHREE.NearestMipMapLinearFilter = 1005;\r\nTHREE.LinearFilter = 1006;\r\nTHREE.LinearMipMapNearestFilter = 1007;\r\nTHREE.LinearMipMapLinearFilter = 1008;\r\n\r\n// Data types\r\n\r\nTHREE.UnsignedByteType = 1009;\r\nTHREE.ByteType = 1010;\r\nTHREE.ShortType = 1011;\r\nTHREE.UnsignedShortType = 1012;\r\nTHREE.IntType = 1013;\r\nTHREE.UnsignedIntType = 1014;\r\nTHREE.FloatType = 1015;\r\nTHREE.HalfFloatType = 1025;\r\n\r\n// Pixel types\r\n\r\n//THREE.UnsignedByteType = 1009;\r\nTHREE.UnsignedShort4444Type = 1016;\r\nTHREE.UnsignedShort5551Type = 1017;\r\nTHREE.UnsignedShort565Type = 1018;\r\n\r\n// Pixel formats\r\n\r\nTHREE.AlphaFormat = 1019;\r\nTHREE.RGBFormat = 1020;\r\nTHREE.RGBAFormat = 1021;\r\nTHREE.LuminanceFormat = 1022;\r\nTHREE.LuminanceAlphaFormat = 1023;\r\n// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\r\nTHREE.RGBEFormat = THREE.RGBAFormat; //1024;\r\n\r\n// DDS / ST3C Compressed texture formats\r\n\r\nTHREE.RGB_S3TC_DXT1_Format = 2001;\r\nTHREE.RGBA_S3TC_DXT1_Format = 2002;\r\nTHREE.RGBA_S3TC_DXT3_Format = 2003;\r\nTHREE.RGBA_S3TC_DXT5_Format = 2004;\r\n\r\n\r\n// PVRTC compressed texture formats\r\n\r\nTHREE.RGB_PVRTC_4BPPV1_Format = 2100;\r\nTHREE.RGB_PVRTC_2BPPV1_Format = 2101;\r\nTHREE.RGBA_PVRTC_4BPPV1_Format = 2102;\r\nTHREE.RGBA_PVRTC_2BPPV1_Format = 2103;\r\n\r\n// Loop styles for AnimationAction\r\n\r\nTHREE.LoopOnce = 2200;\r\nTHREE.LoopRepeat = 2201;\r\nTHREE.LoopPingPong = 2202;\r\n\r\n// DEPRECATED\r\n\r\nTHREE.Projector = function () {\r\n\r\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\r\n\r\n\tthis.projectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\r\n\t\tvector.project( camera );\r\n\r\n\t};\r\n\r\n\tthis.unprojectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\r\n\t\tvector.unproject( camera );\r\n\r\n\t};\r\n\r\n\tthis.pickingRay = function ( vector, camera ) {\r\n\r\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.CanvasRenderer = function () {\r\n\r\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\r\n\r\n\tthis.domElement = document.createElement( 'canvas' );\r\n\tthis.clear = function () {};\r\n\tthis.render = function () {};\r\n\tthis.setClearColor = function () {};\r\n\tthis.setSize = function () {};\r\n\r\n};\r\n\r\n// File:src/math/Color.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Color = function ( color ) {\r\n\r\n\tif ( arguments.length === 3 ) {\r\n\r\n\t\treturn this.fromArray( arguments );\r\n\r\n\t}\r\n\r\n\treturn this.set( color );\r\n\r\n};\r\n\r\nTHREE.Color.prototype = {\r\n\r\n\tconstructor: THREE.Color,\r\n\r\n\tr: 1, g: 1, b: 1,\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tif ( value instanceof THREE.Color ) {\r\n\r\n\t\t\tthis.copy( value );\r\n\r\n\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\tthis.setHex( value );\r\n\r\n\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\tthis.setStyle( value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHex: function ( hex ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHSL: function () {\r\n\r\n\t\tfunction hue2rgb( p, q, t ) {\r\n\r\n\t\t\tif ( t < 0 ) t += 1;\r\n\t\t\tif ( t > 1 ) t -= 1;\r\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\t\t\tif ( t < 1 / 2 ) return q;\r\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\t\t\treturn p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( h, s, l ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\th = THREE.Math.euclideanModulo( h, 1 );\r\n\t\t\ts = THREE.Math.clamp( s, 0, 1 );\r\n\t\t\tl = THREE.Math.clamp( l, 0, 1 );\r\n\r\n\t\t\tif ( s === 0 ) {\r\n\r\n\t\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\tvar q = ( 2 * l ) - p;\r\n\r\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetStyle: function ( style ) {\r\n\r\n\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar m;\r\n\r\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t// rgb / hsl\r\n\r\n\t\t\tvar color;\r\n\t\t\tvar name = m[ 1 ];\r\n\t\t\tvar components = m[ 2 ];\r\n\r\n\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\tcase 'rgb':\r\n\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'hsl':\r\n\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\r\n\t\t\t// hex color\r\n\r\n\t\t\tvar hex = m[ 1 ];\r\n\t\t\tvar size = hex.length;\r\n\r\n\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t// #ff0\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t// #ff0000\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\t// color keywords\r\n\t\t\tvar hex = THREE.ColorKeywords[ style ];\r\n\r\n\t\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t\t// red\r\n\t\t\t\tthis.setHex( hex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// unknown color\r\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t},\r\n\r\n\tcopy: function ( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertGammaToLinear: function () {\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tthis.r = r * r;\r\n\t\tthis.g = g * g;\r\n\t\tthis.b = b * b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertLinearToGamma: function () {\r\n\r\n\t\tthis.r = Math.sqrt( this.r );\r\n\t\tthis.g = Math.sqrt( this.g );\r\n\t\tthis.b = Math.sqrt( this.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetHex: function () {\r\n\r\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t},\r\n\r\n\tgetHexString: function () {\r\n\r\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t},\r\n\r\n\tgetHSL: function ( optionalTarget ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tvar max = Math.max( r, g, b );\r\n\t\tvar min = Math.min( r, g, b );\r\n\r\n\t\tvar hue, saturation;\r\n\t\tvar lightness = ( min + max ) / 2.0;\r\n\r\n\t\tif ( min === max ) {\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar delta = max - min;\r\n\r\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t}\r\n\r\n\t\thsl.h = hue;\r\n\t\thsl.s = saturation;\r\n\t\thsl.l = lightness;\r\n\r\n\t\treturn hsl;\r\n\r\n\t},\r\n\r\n\tgetStyle: function () {\r\n\r\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t},\r\n\r\n\toffsetHSL: function ( h, s, l ) {\r\n\r\n\t\tvar hsl = this.getHSL();\r\n\r\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\r\n\r\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddColors: function ( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( c ) {\r\n\r\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.r = array[ offset ];\r\n\t\tthis.g = array[ offset + 1 ];\r\n\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.r;\r\n\t\tarray[ offset + 1 ] = this.g;\r\n\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\n// File:src/math/Quaternion.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Quaternion = function ( x, y, z, w ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Quaternion.prototype = {\r\n\r\n\tconstructor: THREE.Quaternion,\r\n\r\n\tget x () {\r\n\r\n\t\treturn this._x;\r\n\r\n\t},\r\n\r\n\tset x ( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget y () {\r\n\r\n\t\treturn this._y;\r\n\r\n\t},\r\n\r\n\tset y ( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget z () {\r\n\r\n\t\treturn this._z;\r\n\r\n\t},\r\n\r\n\tset z ( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget w () {\r\n\r\n\t\treturn this._w;\r\n\r\n\t},\r\n\r\n\tset w ( value ) {\r\n\r\n\t\tthis._w = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tvar c1 = Math.cos( euler._x / 2 );\r\n\t\tvar c2 = Math.cos( euler._y / 2 );\r\n\t\tvar c3 = Math.cos( euler._z / 2 );\r\n\t\tvar s1 = Math.sin( euler._x / 2 );\r\n\t\tvar s2 = Math.sin( euler._y / 2 );\r\n\t\tvar s3 = Math.sin( euler._z / 2 );\r\n\r\n\t\tvar order = euler.order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t}\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\ts;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromUnitVectors: function () {\r\n\r\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tvar v1, r;\r\n\r\n\t\tvar EPS = 0.000001;\r\n\r\n\t\treturn function ( vFrom, vTo ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tr = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tv1.crossVectors( vFrom, vTo );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._x = v1.x;\r\n\t\t\tthis._y = v1.y;\r\n\t\t\tthis._z = v1.z;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t\tthis.normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t}(),\r\n\r\n\tinverse: function () {\r\n\r\n\t\tthis.conjugate().normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconjugate: function () {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tvar l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t},\r\n\r\n\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\r\n\t},\r\n\r\n\tslerp: function ( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar halfTheta = Math.acos( cosHalfTheta );\r\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\r\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\r\n\t\t\tthis._w = 0.5 * ( w + this._w );\r\n\t\t\tthis._x = 0.5 * ( x + this._x );\r\n\t\t\tthis._y = 0.5 * ( y + this._y );\r\n\t\t\tthis._z = 0.5 * ( z + this._z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n};\r\n\r\nTHREE.Quaternion.slerp = function ( qa, qb, qm, t ) {\r\n\r\n\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n};\r\n\r\n// File:src/math/Vector2.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.Vector2 = function ( x, y ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\r\n};\r\n\r\nTHREE.Vector2.prototype = {\r\n\r\n\tconstructor: THREE.Vector2,\r\n\r\n\tget width() { return this.x },\r\n\tset width( value ) { this.x = value },\r\n\r\n\tget height() { return this.y },\r\n\tset height( value ) { this.y = value },\r\n\r\n\t//\r\n\r\n\tset: function ( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t} else {\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector2();\r\n\t\t\t\tmax = new THREE.Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateAround: function ( center, angle ) {\r\n\r\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tvar x = this.x - center.x;\r\n\t\tvar y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Vector3.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author *kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector3 = function ( x, y, z ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\r\n};\r\n\r\nTHREE.Vector3.prototype = {\r\n\r\n\tconstructor: THREE.Vector3,\r\n\r\n\tset: function ( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t} else {\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyEuler: function () {\r\n\r\n\t\tvar quaternion;\r\n\r\n\t\treturn function applyEuler( euler ) {\r\n\r\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\r\n\t\t\tthis.applyQuaternion( quaternion.setFromEuler( euler ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyAxisAngle: function () {\r\n\r\n\t\tvar quaternion;\r\n\r\n\t\treturn function applyAxisAngle( axis, angle ) {\r\n\r\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\r\n\t\t\tthis.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyProjection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 projection matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar qx = q.x;\r\n\t\tvar qy = q.y;\r\n\t\tvar qz = q.z;\r\n\t\tvar qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tvar ix =  qw * x + qy * z - qz * y;\r\n\t\tvar iy =  qw * y + qz * x - qx * z;\r\n\t\tvar iz =  qw * z + qx * y - qy * x;\r\n\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tproject: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function project( camera ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\r\n\t\t\treturn this.applyProjection( matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tunproject: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function unproject( camera ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\r\n\t\t\treturn this.applyProjection( matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttransformDirection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\tthis.normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector3();\r\n\t\t\t\tmax = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcross: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tthis.x = y * v.z - z * v.y;\r\n\t\tthis.y = z * v.x - x * v.z;\r\n\t\tthis.z = x * v.y - y * v.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossVectors: function ( a, b ) {\r\n\r\n\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tprojectOnVector: function () {\r\n\r\n\t\tvar v1, dot;\r\n\r\n\t\treturn function projectOnVector( vector ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tv1.copy( vector ).normalize();\r\n\r\n\t\t\tdot = this.dot( v1 );\r\n\r\n\t\t\treturn this.copy( v1 ).multiplyScalar( dot );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tprojectOnPlane: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function projectOnPlane( planeNormal ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( v1 );\r\n\r\n\t\t}\r\n\r\n\t}(),\r\n\r\n\treflect: function () {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function reflect( normal ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t}\r\n\r\n\t}(),\r\n\r\n\tangleTo: function ( v ) {\r\n\r\n\t\tvar theta = this.dot( v ) / ( this.length() * v.length() );\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x;\r\n\t\tvar dy = this.y - v.y;\r\n\t\tvar dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t},\r\n\r\n\tsetEulerFromRotationMatrix: function ( m, order ) {\r\n\r\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\r\n\t},\r\n\r\n\tsetEulerFromQuaternion: function ( q, order ) {\r\n\r\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\r\n\t},\r\n\r\n\tgetPositionFromMatrix: function ( m ) {\r\n\r\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\r\n\t\treturn this.setFromMatrixPosition( m );\r\n\r\n\t},\r\n\r\n\tgetScaleFromMatrix: function ( m ) {\r\n\r\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\r\n\t\treturn this.setFromMatrixScale( m );\r\n\r\n\t},\r\n\r\n\tgetColumnFromMatrix: function ( index, matrix ) {\r\n\r\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\r\n\t\treturn this.setFromMatrixColumn( index, matrix );\r\n\r\n\t},\r\n\r\n\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\tthis.x = m.elements[ 12 ];\r\n\t\tthis.y = m.elements[ 13 ];\r\n\t\tthis.z = m.elements[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\tvar sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[ 2 ] ).length();\r\n\t\tvar sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[ 6 ] ).length();\r\n\t\tvar sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixColumn: function ( index, matrix ) {\r\n\r\n\t\tvar offset = index * 4;\r\n\r\n\t\tvar me = matrix.elements;\r\n\r\n\t\tthis.x = me[ offset ];\r\n\t\tthis.y = me[ offset + 1 ];\r\n\t\tthis.z = me[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\tthis.z = attribute.array[ index + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Vector4.js\r\n\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector4 = function ( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Vector4.prototype = {\r\n\r\n\tconstructor: THREE.Vector4,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t\tthis.w *= scalar;\r\n\t\t} else {\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 0;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\t\tvar w = this.w;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t this.x = 1;\r\n\t\t\t this.y = 0;\r\n\t\t\t this.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t this.x = q.x / s;\r\n\t\t\t this.y = q.y / s;\r\n\t\t\t this.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon )\r\n\t\t   && ( Math.abs( m13 - m31 ) < epsilon )\r\n\t\t   && ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 )\r\n\t\t\t   && ( Math.abs( m13 + m31 ) < epsilon2 )\r\n\t\t\t   && ( Math.abs( m23 + m32 ) < epsilon2 )\r\n\t\t\t   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\r\n\t\t\t\t\t\t  + ( m13 - m31 ) * ( m13 - m31 )\r\n\t\t\t\t\t\t  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector4();\r\n\t\t\t\tmax = new THREE.Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\tthis.z = attribute.array[ index + 2 ];\r\n\t\tthis.w = attribute.array[ index + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Euler.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Euler = function ( x, y, z, order ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._order = order || THREE.Euler.DefaultOrder;\r\n\r\n};\r\n\r\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\nTHREE.Euler.DefaultOrder = 'XYZ';\r\n\r\nTHREE.Euler.prototype = {\r\n\r\n\tconstructor: THREE.Euler,\r\n\r\n\tget x () {\r\n\r\n\t\treturn this._x;\r\n\r\n\t},\r\n\r\n\tset x ( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget y () {\r\n\r\n\t\treturn this._y;\r\n\r\n\t},\r\n\r\n\tset y ( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget z () {\r\n\r\n\t\treturn this._z;\r\n\r\n\t},\r\n\r\n\tset z ( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget order () {\r\n\r\n\t\treturn this._order;\r\n\r\n\t},\r\n\r\n\tset order ( value ) {\r\n\r\n\t\tthis._order = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tset: function ( x, y, z, order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order || this._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order);\r\n\r\n\t},\r\n\r\n\tcopy: function ( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\tvar clamp = THREE.Math.clamp;\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements;\r\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\torder = order || this._order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromQuaternion: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function ( q, order, update ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\t\tmatrix.makeRotationFromQuaternion( q );\r\n\t\t\tthis.setFromRotationMatrix( matrix, order, update );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t},\r\n\r\n\treorder: function () {\r\n\r\n\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\tvar q = new THREE.Quaternion();\r\n\r\n\t\treturn function ( newOrder ) {\r\n\r\n\t\t\tq.setFromEuler( this );\r\n\t\t\tthis.setFromQuaternion( q, newOrder );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\tif ( optionalResult ) {\r\n\r\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n};\r\n\r\n// File:src/math/Line3.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Line3 = function ( start, end ) {\r\n\r\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\r\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Line3.prototype = {\r\n\r\n\tconstructor: THREE.Line3,\r\n\r\n\tset: function ( start, end ) {\r\n\r\n\t\tthis.start.copy( start );\r\n\t\tthis.end.copy( end );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( line ) {\r\n\r\n\t\tthis.start.copy( line.start );\r\n\t\tthis.end.copy( line.end );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tdelta: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.end, this.start );\r\n\r\n\t},\r\n\r\n\tdistanceSq: function () {\r\n\r\n\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t},\r\n\r\n\tdistance: function () {\r\n\r\n\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t},\r\n\r\n\tat: function ( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\r\n\t},\r\n\r\n\tclosestPointToPointParameter: function () {\r\n\r\n\t\tvar startP = new THREE.Vector3();\r\n\t\tvar startEnd = new THREE.Vector3();\r\n\r\n\t\treturn function ( point, clampToLine ) {\r\n\r\n\t\t\tstartP.subVectors( point, this.start );\r\n\t\t\tstartEnd.subVectors( this.end, this.start );\r\n\r\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\r\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\r\n\r\n\t\t\tvar t = startEnd_startP / startEnd2;\r\n\r\n\t\t\tif ( clampToLine ) {\r\n\r\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\r\n\r\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.start.applyMatrix4( matrix );\r\n\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( line ) {\r\n\r\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Box2.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Box2 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\r\n\r\n};\r\n\r\nTHREE.Box2.prototype = {\r\n\r\n\tconstructor: THREE.Box2,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] )\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector2();\r\n\r\n\t\treturn function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\t\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = Infinity;\r\n\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, optionalTarget ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\r\n\t\treturn result.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector2();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Box3.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Box3 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n};\r\n\r\nTHREE.Box3.prototype = {\r\n\r\n\tconstructor: THREE.Box3,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromObject: function () {\r\n\r\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( object ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tobject.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tobject.traverse( function ( node ) {\r\n\r\n\t\t\t\tvar geometry = node.geometry;\r\n\r\n\t\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\r\n\r\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar positions = geometry.attributes[ 'position' ].array;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\tv1.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\r\n\r\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ||\r\n\t\t     point.z < this.min.z || point.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\r\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, optionalTarget ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t     box.max.z < this.min.z || box.min.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetBoundingSphere: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\r\n\r\n\t\t\tresult.center = this.center();\r\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar points = [\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3()\r\n\t\t];\r\n\r\n\t\treturn function ( matrix ) {\r\n\r\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111\r\n\r\n\t\t\tthis.makeEmpty();\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Matrix3.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Matrix3 = function () {\r\n\r\n\tthis.elements = new Float32Array( [\r\n\r\n\t\t1, 0, 0,\r\n\t\t0, 1, 0,\r\n\t\t0, 0, 1\r\n\r\n\t] );\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix3.prototype = {\r\n\r\n\tconstructor: THREE.Matrix3,\r\n\r\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 3 ] = n12; te[ 6 ] = n13;\r\n\t\tte[ 1 ] = n21; te[ 4 ] = n22; te[ 7 ] = n23;\r\n\t\tte[ 2 ] = n31; te[ 5 ] = n32; te[ 8 ] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\r\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\r\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix3( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector3Array: function ( a ) {\r\n\r\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\treturn this.applyToVector3Array( a );\r\n\r\n\t},\r\n\r\n\tapplyToVector3Array: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( array, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = array.length;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\r\n\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\tv1.applyMatrix3( this );\r\n\t\t\t\tv1.toArray( array, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyToBuffer: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\tv1.z = buffer.getZ( j );\r\n\r\n\t\t\t\tv1.applyMatrix3( this );\r\n\r\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( matrix, throwOnInvertible ) {\r\n\r\n\t\t// input: THREE.Matrix4\r\n\t\t// ( based on http://code.google.com/p/webgl-mjs/ )\r\n\r\n\t\tvar me = matrix.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] =   me[ 10 ] * me[ 5 ] - me[ 6 ] * me[ 9 ];\r\n\t\tte[ 1 ] = - me[ 10 ] * me[ 1 ] + me[ 2 ] * me[ 9 ];\r\n\t\tte[ 2 ] =   me[ 6 ] * me[ 1 ] - me[ 2 ] * me[ 5 ];\r\n\t\tte[ 3 ] = - me[ 10 ] * me[ 4 ] + me[ 6 ] * me[ 8 ];\r\n\t\tte[ 4 ] =   me[ 10 ] * me[ 0 ] - me[ 2 ] * me[ 8 ];\r\n\t\tte[ 5 ] = - me[ 6 ] * me[ 0 ] + me[ 2 ] * me[ 4 ];\r\n\t\tte[ 6 ] =   me[ 9 ] * me[ 4 ] - me[ 5 ] * me[ 8 ];\r\n\t\tte[ 7 ] = - me[ 9 ] * me[ 0 ] + me[ 1 ] * me[ 8 ];\r\n\t\tte[ 8 ] =   me[ 5 ] * me[ 0 ] - me[ 1 ] * me[ 4 ];\r\n\r\n\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];\r\n\r\n\t\t// no inverse\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"Matrix3.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnInvertible || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.identity();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tthis.multiplyScalar( 1.0 / det );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar tmp, m = this.elements;\r\n\r\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tgetNormalMatrix: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4\r\n\r\n\t\tthis.getInverse( m ).transpose();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\tvar m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis.elements.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn [\r\n\t\t\tte[ 0 ], te[ 1 ], te[ 2 ],\r\n\t\t\tte[ 3 ], te[ 4 ], te[ 5 ],\r\n\t\t\tte[ 6 ], te[ 7 ], te[ 8 ]\r\n\t\t];\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Matrix4.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Matrix4 = function () {\r\n\r\n\tthis.elements = new Float32Array( [\r\n\r\n\t\t1, 0, 0, 0,\r\n\t\t0, 1, 0, 0,\r\n\t\t0, 0, 1, 0,\r\n\t\t0, 0, 0, 1\r\n\r\n\t] );\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix4.prototype = {\r\n\r\n\tconstructor: THREE.Matrix4,\r\n\r\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tthis.elements.set( m.elements );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractPosition: function ( m ) {\r\n\r\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\treturn this.copyPosition( m );\r\n\r\n\t},\r\n\r\n\tcopyPosition: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\txAxis.set( te[ 0 ], te[ 1 ], te[ 2 ] );\r\n\t\tyAxis.set( te[ 4 ], te[ 5 ], te[ 6 ] );\r\n\t\tzAxis.set( te[ 8 ], te[ 9 ], te[ 10 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0,       0,       0,       1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractRotation: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( m ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / v1.set( me[ 0 ], me[ 1 ], me[ 2 ] ).length();\r\n\t\t\tvar scaleY = 1 / v1.set( me[ 4 ], me[ 5 ], me[ 6 ] ).length();\r\n\t\t\tvar scaleZ = 1 / v1.set( me[ 8 ], me[ 9 ], me[ 10 ] ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// last column\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// bottom row\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\r\n\t\treturn this.makeRotationFromQuaternion( q );\r\n\r\n\t},\r\n\r\n\tmakeRotationFromQuaternion: function ( q ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\r\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\r\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tte[ 0 ] = 1 - ( yy + zz );\r\n\t\tte[ 4 ] = xy - wz;\r\n\t\tte[ 8 ] = xz + wy;\r\n\r\n\t\tte[ 1 ] = xy + wz;\r\n\t\tte[ 5 ] = 1 - ( xx + zz );\r\n\t\tte[ 9 ] = yz - wx;\r\n\r\n\t\tte[ 2 ] = xz - wy;\r\n\t\tte[ 6 ] = yz + wx;\r\n\t\tte[ 10 ] = 1 - ( xx + yy );\r\n\r\n\t\t// last column\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// bottom row\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar x, y, z;\r\n\r\n\t\treturn function ( eye, target, up ) {\r\n\r\n\t\t\tif ( x === undefined ) x = new THREE.Vector3();\r\n\t\t\tif ( y === undefined ) y = new THREE.Vector3();\r\n\t\t\tif ( z === undefined ) z = new THREE.Vector3();\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tz.subVectors( eye, target ).normalize();\r\n\r\n\t\t\tif ( z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\tz.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t\tif ( x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\tz.x += 0.0001;\r\n\t\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ty.crossVectors( z, x );\r\n\r\n\r\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\r\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\r\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiply: function ( m, n ) {\r\n\r\n\t\tif ( n !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyToArray: function ( a, b, r ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tthis.multiplyMatrices( a, b );\r\n\r\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\r\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\r\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\r\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\r\n\t\treturn vector.applyProjection( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector4: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix4( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector3Array: function ( a ) {\r\n\r\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\treturn this.applyToVector3Array( a );\r\n\r\n\t},\r\n\r\n\tapplyToVector3Array: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( array, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = array.length;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\r\n\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\t\t\t\tv1.toArray( array, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyToBuffer: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\tv1.z = buffer.getZ( j );\r\n\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\r\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateAxis: function ( v ) {\r\n\r\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\r\n\t\tv.transformDirection( this );\r\n\r\n\t},\r\n\r\n\tcrossVector: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix4( this );\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\t\tarray[ offset + 9 ]  = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tgetPosition: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\treturn v1.set( te[ 12 ], te[ 13 ], te[ 14 ] );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetPosition: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 12 ] = v.x;\r\n\t\tte[ 13 ] = v.y;\r\n\t\tte[ 14 ] = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( m, throwOnInvertible ) {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tvar n11 = me[ 0 ], n12 = me[ 4 ], n13 = me[ 8 ], n14 = me[ 12 ];\r\n\t\tvar n21 = me[ 1 ], n22 = me[ 5 ], n23 = me[ 9 ], n24 = me[ 13 ];\r\n\t\tvar n31 = me[ 2 ], n32 = me[ 6 ], n33 = me[ 10 ], n34 = me[ 14 ];\r\n\t\tvar n41 = me[ 3 ], n42 = me[ 7 ], n43 = me[ 11 ], n44 = me[ 15 ];\r\n\r\n\t\tte[ 0 ] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\r\n\t\tte[ 4 ] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\r\n\t\tte[ 8 ] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\r\n\t\tte[ 12 ] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\t\tte[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\r\n\t\tte[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\r\n\t\tte[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\r\n\t\tte[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\r\n\t\tte[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\r\n\t\tte[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\r\n\t\tte[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\r\n\t\tte[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\r\n\t\tte[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\r\n\t\tte[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\r\n\t\tte[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\r\n\t\tte[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\r\n\r\n\t\tvar det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnInvertible || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.identity();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tthis.multiplyScalar( 1 / det );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( v ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\r\n\t},\r\n\r\n\trotateX: function ( angle ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\r\n\t},\r\n\r\n\trotateY: function ( angle ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\r\n\t},\r\n\r\n\trotateZ: function ( angle ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\r\n\t},\r\n\r\n\trotateByAxis: function ( axis, angle ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\r\n\t},\r\n\r\n\tscale: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t},\r\n\r\n\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationX: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0,  0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s,  c, 0,\r\n\t\t\t0, 0,  0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationY: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts,  c, 0, 0,\r\n\t\t\t0,  0, 1, 0,\r\n\t\t\t0,  0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar t = 1 - c;\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\t return this;\r\n\r\n\t},\r\n\r\n\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\tthis.makeRotationFromQuaternion( quaternion );\r\n\t\tthis.scale( scale );\r\n\t\tthis.setPosition( position );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdecompose: function () {\r\n\r\n\t\tvar vector, matrix;\r\n\r\n\t\treturn function ( position, quaternion, scale ) {\r\n\r\n\t\t\tif ( vector === undefined ) vector = new THREE.Vector3();\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) {\r\n\r\n\t\t\t\tsx = - sx;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\r\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\tmatrix.elements[ 0 ] *= invSX;\r\n\t\t\tmatrix.elements[ 1 ] *= invSX;\r\n\t\t\tmatrix.elements[ 2 ] *= invSX;\r\n\r\n\t\t\tmatrix.elements[ 4 ] *= invSY;\r\n\t\t\tmatrix.elements[ 5 ] *= invSY;\r\n\t\t\tmatrix.elements[ 6 ] *= invSY;\r\n\r\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( matrix );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = 2 * near / ( right - left );\r\n\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\tvar a = ( right + left ) / ( right - left );\r\n\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakePerspective: function ( fov, aspect, near, far ) {\r\n\r\n\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\r\n\t\tvar ymin = - ymax;\r\n\t\tvar xmin = ymin * aspect;\r\n\t\tvar xmax = ymax * aspect;\r\n\r\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\r\n\r\n\t},\r\n\r\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar w = right - left;\r\n\t\tvar h = top - bottom;\r\n\t\tvar p = far - near;\r\n\r\n\t\tvar x = ( right + left ) / w;\r\n\t\tvar y = ( top + bottom ) / h;\r\n\t\tvar z = ( far + near ) / p;\r\n\r\n\t\tte[ 0 ] = 2 / w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 / h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 / p;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( matrix ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = matrix.elements;\r\n\r\n\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis.elements.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn [\r\n\t\t\tte[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],\r\n\t\t\tte[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],\r\n\t\t\tte[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],\r\n\t\t\tte[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]\r\n\t\t];\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Ray.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Ray = function ( origin, direction ) {\r\n\r\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\r\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Ray.prototype = {\r\n\r\n\tconstructor: THREE.Ray,\r\n\r\n\tset: function ( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tat: function ( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t},\r\n\r\n\trecast: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( t ) {\r\n\r\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclosestPointToPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.subVectors( point, this.origin );\r\n\t\tvar directionDistance = result.dot( this.direction );\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn result.copy( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t},\r\n\r\n\tdistanceSqToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t\t// point behind the ray\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t\treturn v1.distanceToSquared( point );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdistanceSqToSegment: function () {\r\n\r\n\t\tvar segCenter = new THREE.Vector3();\r\n\t\tvar segDir = new THREE.Vector3();\r\n\t\tvar diff = new THREE.Vector3();\r\n\r\n\t\treturn function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp\r\n\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t// defined by v0 and v1\r\n\t\t\t// It can also set two optional targets :\r\n\t\t\t// - The closest point on the ray\r\n\t\t\t// - The closest point on the segment\r\n\r\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\r\n\r\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\tvar a01 = - this.direction.dot( segDir );\r\n\t\t\tvar b0 = diff.dot( this.direction );\r\n\t\t\tvar b1 = - diff.dot( segDir );\r\n\t\t\tvar c = diff.lengthSq();\r\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\tvar s0, s1, sqrDist, extDet;\r\n\r\n\t\t\tif ( det > 0 ) {\r\n\r\n\t\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\textDet = segExtent * det;\r\n\r\n\t\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn sqrDist;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\r\n\tisIntersectionSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\r\n\r\n\t},\r\n\r\n\tintersectSphere: function () {\r\n\r\n\t\t// from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-sphere-intersection/\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( sphere, optionalTarget ) {\r\n\r\n\t\t\tv1.subVectors( sphere.center, this.origin );\r\n\r\n\t\t\tvar tca = v1.dot( this.direction );\r\n\r\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\r\n\r\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\tvar t0 = tca - thc;\r\n\r\n\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\tvar t1 = tca + thc;\r\n\r\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\r\n\r\n\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\r\n\r\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\treturn this.at( t0, optionalTarget );\r\n\r\n\t\t}\r\n\r\n\t}(),\r\n\r\n\tisIntersectionPlane: function ( plane ) {\r\n\r\n\t\t// check if the ray lies on the plane first\r\n\r\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t// Return if the ray never intersects the plane\r\n\r\n\t\treturn t >= 0 ? t :  null;\r\n\r\n\t},\r\n\r\n\tintersectPlane: function ( plane, optionalTarget ) {\r\n\r\n\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\tif ( t === null ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.at( t, optionalTarget );\r\n\r\n\t},\r\n\r\n\tisIntersectionBox: function () {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\r\n\t\treturn function ( box ) {\r\n\r\n\t\t\treturn this.intersectBox( box, v ) !== null;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectBox: function ( box, optionalTarget ) {\r\n\r\n\t\t// http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/\r\n\r\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\tvar origin = this.origin;\r\n\r\n\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t}\r\n\r\n\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\r\n\r\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\r\n\r\n\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t//return point closest to the ray (positive side)\r\n\r\n\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\r\n\r\n\t},\r\n\r\n\tintersectTriangle: function () {\r\n\r\n\t\t// Compute the offset origin, edges, and normal.\r\n\t\tvar diff = new THREE.Vector3();\r\n\t\tvar edge1 = new THREE.Vector3();\r\n\t\tvar edge2 = new THREE.Vector3();\r\n\t\tvar normal = new THREE.Vector3();\r\n\r\n\t\treturn function ( a, b, c, backfaceCulling, optionalTarget ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp\r\n\r\n\t\t\tedge1.subVectors( b, a );\r\n\t\t\tedge2.subVectors( c, a );\r\n\t\t\tnormal.crossVectors( edge1, edge2 );\r\n\r\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\tvar DdN = this.direction.dot( normal );\r\n\t\t\tvar sign;\r\n\r\n\t\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\t\tsign = 1;\r\n\r\n\t\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\t\tsign = - 1;\r\n\t\t\t\tDdN = - DdN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdiff.subVectors( this.origin, a );\r\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\r\n\r\n\t\t\t// b1 < 0, no intersection\r\n\t\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\r\n\r\n\t\t\t// b2 < 0, no intersection\r\n\t\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\tvar QdN = - sign * diff.dot( normal );\r\n\r\n\t\t\t// t < 0, no intersection\r\n\t\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ray intersects triangle.\r\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix4: function ( matrix4 ) {\r\n\r\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.sub( this.origin );\r\n\t\tthis.direction.normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Sphere.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Sphere = function ( center, radius ) {\r\n\r\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\r\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n};\r\n\r\nTHREE.Sphere.prototype = {\r\n\r\n\tconstructor: THREE.Sphere,\r\n\r\n\tset: function ( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function () {\r\n\r\n\t\tvar box = new THREE.Box3();\r\n\r\n\t\treturn function ( points, optionalCenter ) {\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbox.setFromPoints( points ).center( center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\treturn ( this.radius <= 0 );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\tresult.sub( this.center ).normalize();\r\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tgetBoundingBox: function ( optionalTarget ) {\r\n\r\n\t\tvar box = optionalTarget || new THREE.Box3();\r\n\r\n\t\tbox.set( this.center, this.center );\r\n\t\tbox.expandByScalar( this.radius );\r\n\r\n\t\treturn box;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Frustum.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\tthis.planes = [\r\n\r\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\r\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\r\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\r\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\r\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\r\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\r\n\r\n\t];\r\n\r\n};\r\n\r\nTHREE.Frustum.prototype = {\r\n\r\n\tconstructor: THREE.Frustum,\r\n\r\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tplanes[ 0 ].copy( p0 );\r\n\t\tplanes[ 1 ].copy( p1 );\r\n\t\tplanes[ 2 ].copy( p2 );\r\n\t\tplanes[ 3 ].copy( p3 );\r\n\t\tplanes[ 4 ].copy( p4 );\r\n\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( frustum ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix: function ( m ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar me = m.elements;\r\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tintersectsObject: function () {\r\n\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = sphere.center;\r\n\t\tvar negRadius = - sphere.radius;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsBox: function () {\r\n\r\n\t\tvar p1 = new THREE.Vector3(),\r\n\t\t\tp2 = new THREE.Vector3();\r\n\r\n\t\treturn function ( box ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\r\n\r\n\t\t\t\tvar plane = planes[ i ];\r\n\r\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\r\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\r\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\r\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\r\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\r\n\r\n\t\t\t\t// if both outside plane, no intersection\r\n\r\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Plane.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Plane = function ( normal, constant ) {\r\n\r\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\r\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n};\r\n\r\nTHREE.Plane.prototype = {\r\n\r\n\tconstructor: THREE.Plane,\r\n\r\n\tset: function ( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCoplanarPoints: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\r\n\t\treturn function ( a, b, c ) {\r\n\r\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.constant *= - 1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t},\r\n\r\n\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t},\r\n\r\n\tprojectPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\r\n\r\n\t},\r\n\r\n\torthoPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\r\n\r\n\t},\r\n\r\n\tisIntersectionLine: function ( line ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\tvar endSign = this.distanceToPoint( line.end );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t},\r\n\r\n\tintersectLine: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( line, optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tvar direction = line.delta( v1 );\r\n\r\n\t\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\t\treturn result.copy( line.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\r\n\tcoplanarPoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\tvar m1 = new THREE.Matrix3();\r\n\r\n\t\treturn function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t\t// compute new normal based on theory here:\r\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\r\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\r\n\t\t\tvar newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );\r\n\r\n\t\t\tvar newCoplanarPoint = this.coplanarPoint( v2 );\r\n\t\t\tnewCoplanarPoint.applyMatrix4( matrix );\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.constant = this.constant - offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Math.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Math = {\r\n\r\n\tgenerateUUID: function () {\r\n\r\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\r\n\r\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\r\n\t\tvar uuid = new Array( 36 );\r\n\t\tvar rnd = 0, r;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\r\n\r\n\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\r\n\r\n\t\t\t\t\tuuid[ i ] = '-';\r\n\r\n\t\t\t\t} else if ( i === 14 ) {\r\n\r\n\t\t\t\t\tuuid[ i ] = '4';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\r\n\t\t\t\t\tr = rnd & 0xf;\r\n\t\t\t\t\trnd = rnd >> 4;\r\n\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn uuid.join( '' );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclamp: function ( value, min, max ) {\r\n\r\n\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t},\r\n\r\n\t// compute euclidian modulo of m % n\r\n\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t},\r\n\r\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t},\r\n\r\n\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t},\r\n\r\n\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t},\r\n\r\n\t// Random float from <0, 1> with 16 bits of randomness\r\n\t// (standard Math.random() creates repetitive patterns when applied over larger space)\r\n\r\n\trandom16: function () {\r\n\r\n\t\treturn ( 65280 * Math.random() + 255 * Math.random() ) / 65535;\r\n\r\n\t},\r\n\r\n\t// Random integer from <low, high> interval\r\n\r\n\trandInt: function ( low, high ) {\r\n\r\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t},\r\n\r\n\t// Random float from <low, high> interval\r\n\r\n\trandFloat: function ( low, high ) {\r\n\r\n\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t},\r\n\r\n\t// Random float from <-range/2, range/2> interval\r\n\r\n\trandFloatSpread: function ( range ) {\r\n\r\n\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t},\r\n\r\n\tdegToRad: function () {\r\n\r\n\t\tvar degreeToRadiansFactor = Math.PI / 180;\r\n\r\n\t\treturn function ( degrees ) {\r\n\r\n\t\t\treturn degrees * degreeToRadiansFactor;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tradToDeg: function () {\r\n\r\n\t\tvar radianToDegreesFactor = 180 / Math.PI;\r\n\r\n\t\treturn function ( radians ) {\r\n\r\n\t\t\treturn radians * radianToDegreesFactor;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t},\r\n\r\n\tnearestPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t},\r\n\r\n\tnextPowerOfTwo: function ( value ) {\r\n\r\n\t\tvalue --;\r\n\t\tvalue |= value >> 1;\r\n\t\tvalue |= value >> 2;\r\n\t\tvalue |= value >> 4;\r\n\t\tvalue |= value >> 8;\r\n\t\tvalue |= value >> 16;\r\n\t\tvalue ++;\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Spline.js\r\n\r\n/**\r\n * Spline from Tween.js, slightly optimized (and trashed)\r\n * http://sole.github.com/tween.js/examples/05_spline.html\r\n *\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Spline = function ( points ) {\r\n\r\n\tthis.points = points;\r\n\r\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tthis.initFromArray = function ( a ) {\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\r\n\r\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getPoint = function ( k ) {\r\n\r\n\t\tpoint = ( this.points.length - 1 ) * k;\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\r\n\r\n\t\tpa = this.points[ c[ 0 ] ];\r\n\t\tpb = this.points[ c[ 1 ] ];\r\n\t\tpc = this.points[ c[ 2 ] ];\r\n\t\tpd = this.points[ c[ 3 ] ];\r\n\r\n\t\tw2 = weight * weight;\r\n\t\tw3 = weight * w2;\r\n\r\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\r\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\r\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\r\n\r\n\t\treturn v3;\r\n\r\n\t};\r\n\r\n\tthis.getControlPointsArray = function () {\r\n\r\n\t\tvar i, p, l = this.points.length,\r\n\t\t\tcoords = [];\r\n\r\n\t\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\t\tp = this.points[ i ];\r\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\r\n\r\n\t\t}\r\n\r\n\t\treturn coords;\r\n\r\n\t};\r\n\r\n\t// approximate length by summing linear segments\r\n\r\n\tthis.getLength = function ( nSubDivisions ) {\r\n\r\n\t\tvar i, index, nSamples, position,\r\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\r\n\t\t\toldPosition = new THREE.Vector3(),\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tchunkLengths = [],\r\n\t\t\ttotalLength = 0;\r\n\r\n\t\t// first point has 0 length\r\n\r\n\t\tchunkLengths[ 0 ] = 0;\r\n\r\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\r\n\r\n\t\tnSamples = this.points.length * nSubDivisions;\r\n\r\n\t\toldPosition.copy( this.points[ 0 ] );\r\n\r\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\r\n\r\n\t\t\tindex = i / nSamples;\r\n\r\n\t\t\tposition = this.getPoint( index );\r\n\t\t\ttmpVec.copy( position );\r\n\r\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\r\n\r\n\t\t\toldPosition.copy( position );\r\n\r\n\t\t\tpoint = ( this.points.length - 1 ) * index;\r\n\t\t\tintPoint = Math.floor( point );\r\n\r\n\t\t\tif ( intPoint !== oldIntPoint ) {\r\n\r\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\r\n\t\t\t\toldIntPoint = intPoint;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// last point ends with total length\r\n\r\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\r\n\r\n\t\treturn { chunks: chunkLengths, total: totalLength };\r\n\r\n\t};\r\n\r\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\r\n\r\n\t\tvar i, j,\r\n\t\t\tindex, indexCurrent, indexNext,\r\n\t\t\trealDistance,\r\n\t\t\tsampling, position,\r\n\t\t\tnewpoints = [],\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tsl = this.getLength();\r\n\r\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\r\n\r\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\r\n\r\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\r\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\r\n\r\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\r\n\r\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\r\n\r\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\r\n\t\t\tindexNext = i / ( this.points.length - 1 );\r\n\r\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\r\n\r\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\r\n\r\n\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.points = newpoints;\r\n\r\n\t};\r\n\r\n\t// Catmull-Rom\r\n\r\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Triangle.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Triangle = function ( a, b, c ) {\r\n\r\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\r\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\r\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Triangle.normal = function () {\r\n\r\n\tvar v0 = new THREE.Vector3();\r\n\r\n\treturn function ( a, b, c, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tresult.subVectors( c, b );\r\n\t\tv0.subVectors( a, b );\r\n\t\tresult.cross( v0 );\r\n\r\n\t\tvar resultLengthSq = result.lengthSq();\r\n\t\tif ( resultLengthSq > 0 ) {\r\n\r\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn result.set( 0, 0, 0 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// static/instance method to calculate barycentric coordinates\r\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\nTHREE.Triangle.barycoordFromPoint = function () {\r\n\r\n\tvar v0 = new THREE.Vector3();\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\r\n\treturn function ( point, a, b, c, optionalTarget ) {\r\n\r\n\t\tv0.subVectors( c, a );\r\n\t\tv1.subVectors( b, a );\r\n\t\tv2.subVectors( point, a );\r\n\r\n\t\tvar dot00 = v0.dot( v0 );\r\n\t\tvar dot01 = v0.dot( v1 );\r\n\t\tvar dot02 = v0.dot( v2 );\r\n\t\tvar dot11 = v1.dot( v1 );\r\n\t\tvar dot12 = v1.dot( v2 );\r\n\r\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t// collinear or singular triangle\r\n\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\treturn result.set( - 2, - 1, - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar invDenom = 1 / denom;\r\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t// barycentric coordinates must always sum to 1\r\n\t\treturn result.set( 1 - u - v, v, u );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Triangle.containsPoint = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\r\n\treturn function ( point, a, b, c ) {\r\n\r\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\r\n\r\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Triangle.prototype = {\r\n\r\n\tconstructor: THREE.Triangle,\r\n\r\n\tset: function ( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tarea: function () {\r\n\r\n\t\tvar v0 = new THREE.Vector3();\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tv0.subVectors( this.c, this.b );\r\n\t\t\tv1.subVectors( this.a, this.b );\r\n\r\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmidpoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t},\r\n\r\n\tnormal: function ( optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tplane: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Plane();\r\n\r\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tequals: function ( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Channels.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Channels = function () {\r\n\r\n\tthis.mask = 1;\r\n\r\n};\r\n\r\nTHREE.Channels.prototype = {\r\n\r\n\tconstructor: THREE.Channels,\r\n\r\n\tset: function ( channel ) {\r\n\r\n\t\tthis.mask = 1 << channel;\r\n\r\n\t},\r\n\r\n\tenable: function ( channel ) {\r\n\r\n\t\tthis.mask |= 1 << channel;\r\n\r\n\t},\r\n\r\n\ttoggle: function ( channel ) {\r\n\r\n\t\tthis.mask ^= 1 << channel;\r\n\r\n\t},\r\n\r\n\tdisable: function ( channel ) {\r\n\r\n\t\tthis.mask &= ~ ( 1 << channel );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Clock.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Clock = function ( autoStart ) {\r\n\r\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.oldTime = 0;\r\n\tthis.elapsedTime = 0;\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype = {\r\n\r\n\tconstructor: THREE.Clock,\r\n\r\n\tstart: function () {\r\n\r\n\t\tthis.startTime = self.performance.now();\r\n\r\n\t\tthis.oldTime = this.startTime;\r\n\t\tthis.running = true;\r\n\r\n\t},\r\n\r\n\tstop: function () {\r\n\r\n\t\tthis.getElapsedTime();\r\n\t\tthis.running = false;\r\n\r\n\t},\r\n\r\n\tgetElapsedTime: function () {\r\n\r\n\t\tthis.getDelta();\r\n\t\treturn this.elapsedTime;\r\n\r\n\t},\r\n\r\n\tgetDelta: function () {\r\n\r\n\t\tvar diff = 0;\r\n\r\n\t\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\t\tthis.start();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.running ) {\r\n\r\n\t\t\tvar newTime = self.performance.now();\r\n\r\n\t\t\tdiff = 0.001 * ( newTime - this.oldTime );\r\n\t\t\tthis.oldTime = newTime;\r\n\r\n\t\t\tthis.elapsedTime += diff;\r\n\r\n\t\t}\r\n\r\n\t\treturn diff;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/EventDispatcher.js\r\n\r\n/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nTHREE.EventDispatcher = function () {};\r\n\r\nTHREE.EventDispatcher.prototype = {\r\n\r\n\tconstructor: THREE.EventDispatcher,\r\n\r\n\tapply: function ( object ) {\r\n\r\n\t\tobject.addEventListener = THREE.EventDispatcher.prototype.addEventListener;\r\n\t\tobject.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;\r\n\t\tobject.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;\r\n\t\tobject.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;\r\n\r\n\t},\r\n\r\n\taddEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\thasEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return false;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tdispatchEvent: function ( event ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tvar array = [];\r\n\t\t\tvar length = listenerArray.length;\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ] = listenerArray[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Raycaster.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author bhouston / http://clara.io/\r\n * @author stephomi / http://stephaneginier.com/\r\n */\r\n\r\n( function ( THREE ) {\r\n\r\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new THREE.Ray( origin, direction );\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\r\n\t\tthis.params = {\r\n\t\t\tMesh: {},\r\n\t\t\tLine: {},\r\n\t\t\tLOD: {},\r\n\t\t\tPoints: { threshold: 1 },\r\n\t\t\tSprite: {}\r\n\t\t};\r\n\r\n\t\tObject.defineProperties( this.params, {\r\n\t\t\tPointCloud: {\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\treturn this.Points;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t};\r\n\r\n\tfunction descSort( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t}\r\n\r\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tobject.raycast( raycaster, intersects );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tTHREE.Raycaster.prototype = {\r\n\r\n\t\tconstructor: THREE.Raycaster,\r\n\r\n\t\tlinePrecision: 1,\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCamera: function ( coords, camera ) {\r\n\r\n\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\r\n\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );\r\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tintersectObject: function ( object, recursive ) {\r\n\r\n\t\t\tvar intersects = [];\r\n\r\n\t\t\tintersectObject( object, this, intersects, recursive );\r\n\r\n\t\t\tintersects.sort( descSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t},\r\n\r\n\t\tintersectObjects: function ( objects, recursive ) {\r\n\r\n\t\t\tvar intersects = [];\r\n\r\n\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.sort( descSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}( THREE ) );\r\n\r\n// File:src/core/Object3D.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author elephantatwork / www.elephantatwork.ch\r\n */\r\n\r\nTHREE.Object3D = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Object3D';\r\n\r\n\tthis.parent = null;\r\n\tthis.channels = new THREE.Channels();\r\n\tthis.children = [];\r\n\r\n\tthis.up = THREE.Object3D.DefaultUp.clone();\r\n\r\n\tvar position = new THREE.Vector3();\r\n\tvar rotation = new THREE.Euler();\r\n\tvar quaternion = new THREE.Quaternion();\r\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tfunction onRotationChange() {\r\n\r\n\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t}\r\n\r\n\tfunction onQuaternionChange() {\r\n\r\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t}\r\n\r\n\trotation.onChange( onRotationChange );\r\n\tquaternion.onChange( onQuaternionChange );\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tposition: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: position\r\n\t\t},\r\n\t\trotation: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: rotation\r\n\t\t},\r\n\t\tquaternion: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: quaternion\r\n\t\t},\r\n\t\tscale: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: scale\r\n\t\t},\r\n\t\tmodelViewMatrix: {\r\n\t\t\tvalue: new THREE.Matrix4()\r\n\t\t},\r\n\t\tnormalMatrix: {\r\n\t\t\tvalue: new THREE.Matrix3()\r\n\t\t}\r\n\t} );\r\n\r\n\tthis.rotationAutoUpdate = true;\r\n\r\n\tthis.matrix = new THREE.Matrix4();\r\n\tthis.matrixWorld = new THREE.Matrix4();\r\n\r\n\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\r\n\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.receiveShadow = false;\r\n\r\n\tthis.frustumCulled = true;\r\n\tthis.renderOrder = 0;\r\n\r\n\tthis.userData = {};\r\n\r\n};\r\n\r\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\r\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\r\n\r\nTHREE.Object3D.prototype = {\r\n\r\n\tconstructor: THREE.Object3D,\r\n\r\n\tget eulerOrder () {\r\n\r\n\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\r\n\t\treturn this.rotation.order;\r\n\r\n\t},\r\n\r\n\tset eulerOrder ( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\r\n\t\tthis.rotation.order = value;\r\n\r\n\t},\r\n\r\n\tget useQuaternion () {\r\n\r\n\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t},\r\n\r\n\tset useQuaternion ( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t},\r\n\r\n\tset renderDepth ( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\r\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t},\r\n\r\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t},\r\n\r\n\tsetRotationFromEuler: function ( euler ) {\r\n\r\n\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t},\r\n\r\n\tsetRotationFromMatrix: function ( m ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t},\r\n\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t// assumes q is normalized\r\n\r\n\t\tthis.quaternion.copy( q );\r\n\r\n\t},\r\n\r\n\trotateOnAxis: function () {\r\n\r\n\t\t// rotate object on axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar q1 = new THREE.Quaternion();\r\n\r\n\t\treturn function ( axis, angle ) {\r\n\r\n\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.multiply( q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateX: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateOnAxis: function () {\r\n\r\n\t\t// translate object by distance along axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( axis, distance ) {\r\n\r\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( distance, axis ) {\r\n\r\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\treturn this.translateOnAxis( axis, distance );\r\n\r\n\t},\r\n\r\n\ttranslateX: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateY: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateZ: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlocalToWorld: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tworldToLocal: function () {\r\n\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\r\n\t\treturn function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\r\n\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\r\n\t\treturn function ( vector ) {\r\n\r\n\t\t\tm1.lookAt( vector, this.position, this.up );\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tadd: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object instanceof THREE.Object3D ) {\r\n\r\n\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.parent = this;\r\n\t\t\tobject.dispatchEvent( { type: 'added' } );\r\n\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tremove: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = null;\r\n\r\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\r\n\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetChildByName: function ( name ) {\r\n\r\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\treturn this.getObjectByName( name );\r\n\r\n\t},\r\n\r\n\tgetObjectById: function ( id ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t},\r\n\r\n\tgetObjectByName: function ( name ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t},\r\n\r\n\tgetObjectByProperty: function ( name, value ) {\r\n\r\n\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\treturn object;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t},\r\n\r\n\tgetWorldPosition: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tgetWorldQuaternion: function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar scale = new THREE.Vector3();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldRotation: function () {\r\n\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Euler();\r\n\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldScale: function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldDirection: function () {\r\n\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\traycast: function () {},\r\n\r\n\ttraverse: function ( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseVisible: function ( callback ) {\r\n\r\n\t\tif ( this.visible === false ) return;\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseAncestors: function ( callback ) {\r\n\r\n\t\tvar parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tcallback( parent );\r\n\r\n\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdateMatrix: function () {\r\n\r\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar isRootObject = ( meta === undefined );\r\n\r\n\t\tvar output = {};\r\n\r\n\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t// not providing it implies that this is the root object\r\n\t\t// being serialized.\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\t// initialize meta obj\r\n\t\t\tmeta = {\r\n\t\t\t\tgeometries: {},\r\n\t\t\t\tmaterials: {},\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t\toutput.metadata = {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Object',\r\n\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// standard Object3D serialization\r\n\r\n\t\tvar object = {};\r\n\r\n\t\tobject.uuid = this.uuid;\r\n\t\tobject.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\r\n\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\tif ( this.visible === false ) object.visible = false;\r\n\r\n\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.geometry !== undefined ) {\r\n\r\n\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.geometry = this.geometry.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.material = this.material.uuid;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\tobject.children = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\tif ( images.length > 0 ) output.images = images;\r\n\r\n\t\t}\r\n\r\n\t\toutput.object = object;\r\n\r\n\t\treturn output;\r\n\r\n\t\t// extract data from the cache hash\r\n\t\t// remove metadata on each item\r\n\t\t// and return as array\r\n\t\tfunction extractFromCache ( cache ) {\r\n\r\n\t\t\tvar values = [];\r\n\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function ( recursive ) {\r\n\r\n\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source, recursive ) {\r\n\r\n\t\tif ( recursive === undefined ) recursive = true;\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.up.copy( source.up );\r\n\r\n\t\tthis.position.copy( source.position );\r\n\t\tthis.quaternion.copy( source.quaternion );\r\n\t\tthis.scale.copy( source.scale );\r\n\r\n\t\tthis.rotationAutoUpdate = source.rotationAutoUpdate;\r\n\r\n\t\tthis.matrix.copy( source.matrix );\r\n\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.castShadow = source.castShadow;\r\n\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );\r\n\r\nTHREE.Object3DIdCount = 0;\r\n\r\n// File:src/core/Face3.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n};\r\n\r\nTHREE.Face3.prototype = {\r\n\r\n\tconstructor: THREE.Face3,\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.a = source.a;\r\n\t\tthis.b = source.b;\r\n\t\tthis.c = source.c;\r\n\r\n\t\tthis.normal.copy( source.normal );\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Face4.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\r\n\r\n\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\r\n\r\n};\r\n\r\n// File:src/core/BufferAttribute.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferAttribute = function ( array, itemSize ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.array = array;\r\n\tthis.itemSize = itemSize;\r\n\r\n\tthis.dynamic = false;\r\n\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\tthis.version = 0;\r\n\r\n};\r\n\r\nTHREE.BufferAttribute.prototype = {\r\n\r\n\tconstructor: THREE.BufferAttribute,\r\n\r\n\tget length() {\r\n\r\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\treturn this.array.length;\r\n\r\n\t},\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.array.length / this.itemSize;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tsetDynamic: function ( value ) {\r\n\r\n\t\tthis.dynamic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.itemSize = source.itemSize;\r\n\r\n\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.itemSize;\r\n\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyArray: function ( array ) {\r\n\r\n\t\tthis.array.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyColorsArray: function ( colors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar color = colors[ i ];\r\n\r\n\t\t\tif ( color === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\tcolor = new THREE.Color();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\tarray[ offset ++ ] = color.b;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyIndicesArray: function ( indices ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar index = indices[ i ];\r\n\r\n\t\t\tarray[ offset ++ ] = index.a;\r\n\t\t\tarray[ offset ++ ] = index.b;\r\n\t\t\tarray[ offset ++ ] = index.c;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector2sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector3sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector4sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\tarray[ offset ++ ] = vector.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tset: function ( value, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetX: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize ];\r\n\r\n\t},\r\n\r\n\tsetX: function ( index, x ) {\r\n\r\n\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetY: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\r\n\t},\r\n\r\n\tsetY: function ( index, y ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetZ: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\r\n\t},\r\n\r\n\tsetZ: function ( index, z ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetW: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\r\n\t},\r\n\r\n\tsetW: function ( index, w ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXY: function ( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.Int8Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint8Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Int16Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint16Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Int32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Float32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Float64Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\r\n\r\n};\r\n\r\n\r\n// Deprecated\r\n\r\nTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\r\n\r\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\r\n\r\n};\r\n\r\n// File:src/core/InstancedBufferAttribute.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\r\n\r\n\tTHREE.BufferAttribute.call( this, array, itemSize );\r\n\r\n\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n};\r\n\r\nTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\r\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\r\n\r\nTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.BufferAttribute.prototype.copy.call( this, source );\r\n\r\n\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/InterleavedBuffer.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InterleavedBuffer = function ( array, stride ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.array = array;\r\n\tthis.stride = stride;\r\n\r\n\tthis.dynamic = false;\r\n\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\tthis.version = 0;\r\n\r\n};\r\n\r\nTHREE.InterleavedBuffer.prototype = {\r\n\r\n\tconstructor: THREE.InterleavedBuffer,\r\n\r\n\tget length () {\r\n\r\n\t\treturn this.array.length;\r\n\r\n\t},\r\n\r\n\tget count () {\r\n\r\n\t\treturn this.array.length / this.stride;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tsetDynamic: function ( value ) {\r\n\r\n\t\tthis.dynamic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.stride = source.stride;\r\n\t\tthis.dynamic = source.dynamic;\r\n\r\n\t},\r\n\r\n\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.stride;\r\n\t\tindex2 *= attribute.stride;\r\n\r\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tset: function ( value, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/InstancedInterleavedBuffer.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\r\n\r\n\tTHREE.InterleavedBuffer.call( this, array, stride );\r\n\r\n\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n};\r\n\r\nTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\r\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\r\n\r\nTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\r\n\r\n\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/InterleavedBufferAttribute.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.data = interleavedBuffer;\r\n\tthis.itemSize = itemSize;\r\n\tthis.offset = offset;\r\n\r\n};\r\n\r\n\r\nTHREE.InterleavedBufferAttribute.prototype = {\r\n\r\n\tconstructor: THREE.InterleavedBufferAttribute,\r\n\r\n\tget length() {\r\n\r\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\treturn this.array.length;\r\n\r\n\t},\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.data.array.length / this.data.stride;\r\n\r\n\t},\r\n\r\n\tsetX: function ( index, x ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( index, y ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( index, z ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( index, w ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetX: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t},\r\n\r\n\tgetY: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t},\r\n\r\n\tgetZ: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t},\r\n\r\n\tgetW: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t},\r\n\r\n\tsetXY: function ( index, x, y ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Geometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Geometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Geometry';\r\n\r\n\tthis.vertices = [];\r\n\tthis.colors = [];\r\n\tthis.faces = [];\r\n\tthis.faceVertexUvs = [ [] ];\r\n\r\n\tthis.morphTargets = [];\r\n\tthis.morphNormals = [];\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\tthis.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.elementsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.lineDistancesNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n};\r\n\r\nTHREE.Geometry.prototype = {\r\n\r\n\tconstructor: THREE.Geometry,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.verticesNeedUpdate = true;\r\n\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj;\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tfromBufferGeometry: function ( geometry ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tvar vertices = attributes.position.array;\r\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\r\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\r\n\r\n\t\tvar tempNormals = [];\r\n\t\tvar tempUVs = [];\r\n\t\tvar tempUVs2 = [];\r\n\r\n\t\tfor ( var i = 0, j = 0, k = 0; i < vertices.length; i += 3, j += 2, k += 4 ) {\r\n\r\n\t\t\tscope.vertices.push( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\r\n\r\n\t\t\tif ( normals !== undefined ) {\r\n\r\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( colors !== undefined ) {\r\n\r\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction addFace( a, b, c ) {\r\n\r\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\r\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\r\n\r\n\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors );\r\n\r\n\t\t\tscope.faces.push( face );\r\n\r\n\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( var i = 0; i < vertices.length / 3; i += 3 ) {\r\n\r\n\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeFaceNormals();\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcenter: function () {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tvar offset = this.boundingBox.center().negate();\r\n\r\n\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tthis.computeBoundingSphere();\r\n\r\n\t\tvar center = this.boundingSphere.center;\r\n\t\tvar radius = this.boundingSphere.radius;\r\n\r\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\r\n\t\tvar matrix = new THREE.Matrix4();\r\n\t\tmatrix.set(\r\n\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\tthis.applyMatrix( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ f ];\r\n\r\n\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\tvar vC = this.vertices[ face.c ];\r\n\r\n\t\t\tcb.subVectors( vC, vB );\r\n\t\t\tab.subVectors( vA, vB );\r\n\t\t\tcb.cross( ab );\r\n\r\n\t\t\tcb.normalize();\r\n\r\n\t\t\tface.normal.copy( cb );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\tvertices = new Array( this.vertices.length );\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\tvar vA, vB, vC;\r\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeMorphNormals: function () {\r\n\r\n\t\tvar i, il, f, fl, face;\r\n\r\n\t\t// save original normals\r\n\t\t// - create temp variables on first access\r\n\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\r\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\tvar tmpGeo = new THREE.Geometry();\r\n\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t// create on first access\r\n\r\n\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\r\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\r\n\r\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t// set vertices to morph target\r\n\r\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t// compute morph normals\r\n\r\n\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t// store morph normals\r\n\r\n\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore original normals\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\r\n\t},\r\n\r\n\tcomputeLineDistances: function () {\r\n\r\n\t\tvar d = 0;\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tif ( i > 0 ) {\r\n\r\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.lineDistances[ i ] = d;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\r\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar normalMatrix,\r\n\t\tvertexOffset = this.vertices.length,\r\n\t\tvertices1 = this.vertices,\r\n\t\tvertices2 = geometry.vertices,\r\n\t\tfaces1 = this.faces,\r\n\t\tfaces2 = geometry.faces,\r\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\r\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\r\n\r\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\r\n\r\n\t\tif ( matrix !== undefined ) {\r\n\r\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\r\n\r\n\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// faces\r\n\r\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\r\n\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// uvs\r\n\r\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\r\n\t\t\tif ( uv === undefined ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvs1.push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmergeMesh: function ( mesh ) {\r\n\r\n\t\tif ( mesh instanceof THREE.Mesh === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\r\n\r\n\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Checks for duplicate vertices with hashmap.\r\n\t * Duplicated vertices are removed\r\n\t * and faces' vertices are updated.\r\n\t */\r\n\r\n\tmergeVertices: function () {\r\n\r\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\tvar unique = [], changes = [];\r\n\r\n\t\tvar v, key;\r\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\tvar i, il, face;\r\n\t\tvar indices, j, jl;\r\n\r\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tv = this.vertices[ i ];\r\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\r\n\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t// have to remove them from the geometry.\r\n\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\tface.a = changes[ face.a ];\r\n\t\t\tface.b = changes[ face.b ];\r\n\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\tvar dupIndex = - 1;\r\n\r\n\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\r\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\tdupIndex = n;\r\n\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\r\n\t\t\tthis.faces.splice( idx, 1 );\r\n\r\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Use unique set of vertices\r\n\r\n\t\tvar diff = this.vertices.length - unique.length;\r\n\t\tthis.vertices = unique;\r\n\t\treturn diff;\r\n\r\n\t},\r\n\r\n\tsortFacesByMaterialIndex: function () {\r\n\r\n\t\tvar faces = this.faces;\r\n\t\tvar length = faces.length;\r\n\r\n\t\t// tag faces\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tfaces[ i ]._id = i;\r\n\r\n\t\t}\r\n\r\n\t\t// sort faces\r\n\r\n\t\tfunction materialIndexSort( a, b ) {\r\n\r\n\t\t\treturn a.materialIndex - b.materialIndex;\r\n\r\n\t\t}\r\n\r\n\t\tfaces.sort( materialIndexSort );\r\n\r\n\t\t// sort uvs\r\n\r\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\r\n\t\tvar newUvs1, newUvs2;\r\n\r\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\r\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tvar id = faces[ i ]._id;\r\n\r\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\r\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\r\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Geometry',\r\n\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Geometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = [];\r\n\t\tvar normals = [];\r\n\t\tvar normalsHash = {};\r\n\t\tvar colors = [];\r\n\t\tvar colorsHash = {};\r\n\t\tvar uvs = [];\r\n\t\tvar uvsHash = {};\r\n\r\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\tvar hasMaterial = false; // face.materialIndex !== undefined;\r\n\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\r\n\t\t\tvar faceType = 0;\r\n\r\n\t\t\tfaceType = setBit( faceType, 0, 0 );\r\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\r\n\t\t\tfaces.push( faceType );\r\n\t\t\tfaces.push( face.a, face.b, face.c );\r\n\r\n\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setBit( value, position, enabled ) {\r\n\r\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getNormalIndex( normal ) {\r\n\r\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\r\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getColorIndex( color ) {\r\n\r\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\r\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\tcolors.push( color.getHex() );\r\n\r\n\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getUvIndex( uv ) {\r\n\r\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\r\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = {};\r\n\r\n\t\tdata.data.vertices = vertices;\r\n\t\tdata.data.normals = normals;\r\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\r\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\r\n\t\tdata.data.faces = faces;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [ [] ];\r\n\r\n\t\tvar vertices = source.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = source.faces;\r\n\r\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\r\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\r\n\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\tvar uv = uvs[ k ];\r\n\r\n\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );\r\n\r\nTHREE.GeometryIdCount = 0;\r\n\r\n// File:src/core/DirectGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.DirectGeometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'DirectGeometry';\r\n\r\n\tthis.indices = [];\r\n\tthis.vertices = [];\r\n\tthis.normals = [];\r\n\tthis.colors = [];\r\n\tthis.uvs = [];\r\n\tthis.uvs2 = [];\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.morphTargets = {};\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\t// this.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n};\r\n\r\nTHREE.DirectGeometry.prototype = {\r\n\r\n\tconstructor: THREE.DirectGeometry,\r\n\r\n\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\r\n\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\r\n\r\n\t},\r\n\r\n\tcomputeGroups: function ( geometry ) {\r\n\r\n\t\tvar group;\r\n\t\tvar groups = [];\r\n\t\tvar materialIndex;\r\n\r\n\t\tvar faces = geometry.faces;\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t// materials\r\n\r\n\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\r\n\t\t\t\tmaterialIndex = face.materialIndex;\r\n\r\n\t\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroup = {\r\n\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( group !== undefined ) {\r\n\r\n\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\tgroups.push( group );\r\n\r\n\t\t}\r\n\r\n\t\tthis.groups = groups;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar vertices = geometry.vertices;\r\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\r\n\t\t// morphs\r\n\r\n\t\tvar morphTargets = geometry.morphTargets;\r\n\t\tvar morphTargetsLength = morphTargets.length;\r\n\r\n\t\tif ( morphTargetsLength > 0 ) {\r\n\r\n\t\t\tvar morphTargetsPosition = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsPosition[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\r\n\t\t}\r\n\r\n\t\tvar morphNormals = geometry.morphNormals;\r\n\t\tvar morphNormalsLength = morphNormals.length;\r\n\r\n\t\tif ( morphNormalsLength > 0 ) {\r\n\r\n\t\t\tvar morphTargetsNormal = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsNormal[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\r\n\t\t}\r\n\r\n\t\t// skins\r\n\r\n\t\tvar skinIndices = geometry.skinIndices;\r\n\t\tvar skinWeights = geometry.skinWeights;\r\n\r\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\r\n\t\t//\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\tif ( vertexColors.length === 3 ) {\r\n\r\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar color = face.color;\r\n\r\n\t\t\t\tthis.colors.push( color, color, color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\r\n\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\r\n\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\r\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\r\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skins\r\n\r\n\t\t\tif ( hasSkinIndices ) {\r\n\r\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasSkinWeights ) {\r\n\r\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeGroups( geometry );\r\n\r\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.DirectGeometry.prototype );\r\n\r\n// File:src/core/BufferGeometry.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferGeometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'BufferGeometry';\r\n\r\n\tthis.index = null;\r\n\tthis.attributes = {};\r\n\r\n\tthis.morphAttributes = {};\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n};\r\n\r\nTHREE.BufferGeometry.prototype = {\r\n\r\n\tconstructor: THREE.BufferGeometry,\r\n\r\n\taddIndex: function ( index ) {\r\n\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\tthis.setIndex( index );\r\n\r\n\t},\r\n\r\n\tgetIndex: function () {\r\n\r\n\t\treturn this.index;\r\n\r\n\t},\r\n\r\n\tsetIndex: function ( index ) {\r\n\r\n\t\tthis.index = index;\r\n\r\n\t},\r\n\r\n\taddAttribute: function ( name, attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\r\n\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( name === 'index' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\tthis.setIndex( attribute );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t},\r\n\r\n\tgetAttribute: function ( name ) {\r\n\r\n\t\treturn this.attributes[ name ];\r\n\r\n\t},\r\n\r\n\tremoveAttribute: function ( name ) {\r\n\r\n\t\tdelete this.attributes[ name ];\r\n\r\n\t},\r\n\r\n\tget drawcalls() {\r\n\r\n\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\treturn this.groups;\r\n\r\n\t},\r\n\r\n\tget offsets() {\r\n\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\treturn this.groups;\r\n\r\n\t},\r\n\r\n\taddDrawCall: function ( start, count, indexOffset ) {\r\n\r\n\t\tif ( indexOffset !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\r\n\t\t}\r\n\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\tthis.addGroup( start, count );\r\n\r\n\t},\r\n\r\n\tclearDrawCalls: function () {\r\n\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\tthis.clearGroups();\r\n\r\n\t},\r\n\r\n\taddGroup: function ( start, count, materialIndex ) {\r\n\r\n\t\tthis.groups.push( {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tclearGroups: function () {\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t},\r\n\r\n\tsetDrawRange: function ( start, count ) {\r\n\r\n\t\tthis.drawRange.start = start;\r\n\t\tthis.drawRange.count = count;\r\n\r\n\t},\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar position = this.attributes.position;\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tmatrix.applyToVector3Array( position.array );\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tvar normal = this.attributes.normal;\r\n\r\n\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\r\n\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj;\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcenter: function () {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tvar offset = this.boundingBox.center().negate();\r\n\r\n\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\tsetFromObject: function ( object ) {\r\n\r\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\r\n\r\n\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\r\n\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\r\n\r\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\r\n\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\r\n\r\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\tthis.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdateFromObject: function ( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tvar direct = geometry.__directGeometry;\r\n\r\n\t\t\tif ( direct === undefined ) {\r\n\r\n\t\t\t\treturn this.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\tgeometry = direct;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.position;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.normal;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.color;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvsNeedUpdate ) {\r\n\r\n\t\t\t\tvar attribute = this.attributes.uv;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\r\n\t\t\tvar attribute = this.attributes.lineDistance;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.groupsNeedUpdate ) {\r\n\r\n\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\r\n\r\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\r\n\t},\r\n\r\n\tfromDirectGeometry: function ( geometry ) {\r\n\r\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\r\n\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs.length > 0 ) {\r\n\r\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs2.length > 0 ) {\r\n\r\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.indices.length > 0 ) {\r\n\r\n\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\r\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\r\n\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\r\n\r\n\t\t}\r\n\r\n\t\t// groups\r\n\r\n\t\tthis.groups = geometry.groups;\r\n\r\n\t\t// morphs\r\n\r\n\t\tfor ( var name in geometry.morphTargets ) {\r\n\r\n\t\t\tvar array = [];\r\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\r\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\r\n\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\r\n\r\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t}\r\n\r\n\t\t// skinning\r\n\r\n\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\r\n\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\r\n\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = this.attributes.position.array;\r\n\r\n\t\t\tif ( positions ) {\r\n\r\n\t\t\t\tvar bb = this.boundingBox;\r\n\t\t\t\tbb.makeEmpty();\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\tbb.expandByPoint( vector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( positions === undefined || positions.length === 0 ) {\r\n\r\n\t\t\t\tthis.boundingBox.min.set( 0, 0, 0 );\r\n\t\t\t\tthis.boundingBox.max.set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tvar box = new THREE.Box3();\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = this.attributes.position.array;\r\n\r\n\t\t\tif ( positions ) {\r\n\r\n\t\t\t\tbox.makeEmpty();\r\n\r\n\t\t\t\tvar center = this.boundingSphere.center;\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\tbox.expandByPoint( vector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbox.center( center );\r\n\r\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\t// backwards compatibility\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tvar index = this.index;\r\n\t\tvar attributes = this.attributes;\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tif ( attributes.position ) {\r\n\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( attributes.normal === undefined ) {\r\n\r\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\t\tfor ( var i = 0, il = normals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tnormals[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\tvar vA, vB, vC,\r\n\r\n\t\t\tpA = new THREE.Vector3(),\r\n\t\t\tpB = new THREE.Vector3(),\r\n\t\t\tpC = new THREE.Vector3(),\r\n\r\n\t\t\tcb = new THREE.Vector3(),\r\n\t\t\tab = new THREE.Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\t\tthis.addGroup( 0, indices.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\r\n\r\n\t\t\t\t\tvar group = groups[ j ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tattributes.normal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\r\n\t},\r\n\r\n\tcomputeOffsets: function ( size ) {\r\n\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.')\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, offset ) {\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\r\n\r\n\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\tvar attributeArray1 = attribute1.array;\r\n\r\n\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\tvar attributeArray2 = attribute2.array;\r\n\r\n\t\t\tvar attributeSize = attribute2.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\r\n\r\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalizeNormals: function () {\r\n\r\n\t\tvar normals = this.attributes.normal.array;\r\n\r\n\t\tvar x, y, z, n;\r\n\r\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\r\n\r\n\t\t\tx = normals[ i ];\r\n\t\t\ty = normals[ i + 1 ];\r\n\t\t\tz = normals[ i + 2 ];\r\n\r\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tnormals[ i ] *= n;\r\n\t\t\tnormals[ i + 1 ] *= n;\r\n\t\t\tnormals[ i + 2 ] *= n;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard BufferGeometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = { attributes: {} };\r\n\r\n\t\tvar index = this.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( index.array );\r\n\r\n\t\t\tdata.data.index = {\r\n\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\tarray: array\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ key ];\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\r\n\r\n\t\t\tdata.data.attributes[ key ] = {\r\n\t\t\t\titemSize: attribute.itemSize,\r\n\t\t\t\ttype: attribute.array.constructor.name,\r\n\t\t\t\tarray: array\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar boundingSphere = this.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tvar index = source.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = source.attributes;\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ name ];\r\n\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = source.groups;\r\n\r\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );\r\n\r\nTHREE.BufferGeometry.MaxIndex = 65535;\r\n\r\n// File:src/core/InstancedBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedBufferGeometry = function () {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'InstancedBufferGeometry';\r\n\tthis.maxInstancedCount = undefined;\r\n\r\n};\r\n\r\nTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\r\n\r\nTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\r\n\r\n\tthis.groups.push( {\r\n\r\n\t\tstart: start,\r\n\t\tcount: count,\r\n\t\tinstances: instances\r\n\r\n\t} );\r\n\r\n};\r\n\r\nTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\r\n\r\n\tvar index = source.index;\r\n\r\n\tif ( index !== null ) {\r\n\r\n\t\tthis.setIndex( index.clone() );\r\n\r\n\t}\r\n\r\n\tvar attributes = source.attributes;\r\n\r\n\tfor ( var name in attributes ) {\r\n\r\n\t\tvar attribute = attributes[ name ];\r\n\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t}\r\n\r\n\tvar groups = source.groups;\r\n\r\n\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\tvar group = groups[ i ];\r\n\t\tthis.addGroup( group.start, group.count, group.instances );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.InstancedBufferGeometry.prototype );\r\n\r\n// File:src/animation/AnimationAction.js\r\n\r\n/**\r\n *\r\n * A clip that has been explicitly scheduled.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationAction = function ( clip, startTime, timeScale, weight, loop ) {\r\n\r\n\tif ( clip === undefined ) throw new Error( 'clip is null' );\r\n\tthis.clip = clip;\r\n\tthis.localRoot = null;\r\n\tthis.startTime = startTime || 0;\r\n\tthis.timeScale = timeScale || 1;\r\n\tthis.weight = weight || 1;\r\n\tthis.loop = loop || THREE.LoopRepeat;\r\n\tthis.loopCount = 0;\r\n\tthis.enabled = true;\t// allow for easy disabling of the action.\r\n\r\n\tthis.actionTime = - this.startTime;\r\n\tthis.clipTime = 0;\r\n\r\n\tthis.propertyBindings = [];\r\n};\r\n\r\n/*\r\nTHREE.LoopOnce = 2200;\r\nTHREE.LoopRepeat = 2201;\r\nTHREE.LoopPingPing = 2202;\r\n*/\r\n\r\nTHREE.AnimationAction.prototype = {\r\n\r\n\tconstructor: THREE.AnimationAction,\r\n\r\n\tsetLocalRoot: function( localRoot ) {\r\n\r\n\t\tthis.localRoot = localRoot;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdateTime: function( clipDeltaTime ) {\r\n\r\n\t\tvar previousClipTime = this.clipTime;\r\n   \t\tvar previousLoopCount = this.loopCount;\r\n   \t\tvar previousActionTime = this.actionTime;\r\n\r\n\t\tvar duration = this.clip.duration;\r\n\r\n\t\tthis.actionTime = this.actionTime + clipDeltaTime;\r\n\r\n\t\tif ( this.loop === THREE.LoopOnce ) {\r\n\r\n\t\t\tthis.loopCount = 0;\r\n\t\t\tthis.clipTime = Math.min( Math.max( this.actionTime, 0 ), duration );\r\n\r\n\t\t\t// if time is changed since last time, see if we have hit a start/end limit\r\n\t\t\tif ( this.clipTime !== previousClipTime ) {\r\n\r\n\t\t\t\tif ( this.clipTime === duration ) {\r\n\r\n\t\t\t\t\tthis.mixer.dispatchEvent( { type: 'finished', action: this, direction: 1 } );\r\n\r\n\t\t\t\t} else if ( this.clipTime === 0 ) {\r\n\r\n\t\t\t\t\tthis.mixer.dispatchEvent( { type: 'finished', action: this, direction: -1 } );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\treturn this.clipTime;\r\n\r\n\t\t}\r\n\r\n\t\tthis.loopCount = Math.floor( this.actionTime / duration );\r\n\r\n\t\tvar newClipTime = this.actionTime - this.loopCount * duration;\r\n\t\tnewClipTime = newClipTime % duration;\r\n\r\n\t\t// if we are ping pong looping, ensure that we go backwards when appropriate\r\n\t\tif ( this.loop == THREE.LoopPingPong ) {\r\n\r\n\t\t\tif ( Math.abs( this.loopCount % 2 ) === 1 ) {\r\n\r\n\t\t\t\tnewClipTime = duration - newClipTime;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.clipTime = newClipTime;\r\n\r\n\t\tif ( this.loopCount !== previousLoopCount ) {\r\n\r\n   \t\t\tthis.mixer.dispatchEvent( { type: 'loop', action: this, loopDelta: ( this.loopCount - this.loopCount ) } );\r\n\r\n   \t\t}\r\n\r\n\t   \treturn this.clipTime;\r\n\r\n\t},\r\n\r\n\tsyncWith: function( action ) {\r\n\r\n\t\tthis.actionTime = action.actionTime;\r\n\t\tthis.timeScale = action.timeScale;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\twarpToDuration: function( duration ) {\r\n\r\n\t\tthis.timeScale = this.clip.duration / duration;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tinit: function( time ) {\r\n\r\n\t\tthis.clipTime = time - this.startTime;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdate: function( clipDeltaTime ) {\r\n\r\n\t\tthis.updateTime( clipDeltaTime );\r\n\r\n\t\tvar clipResults = this.clip.getAt( this.clipTime );\r\n\r\n\t\treturn clipResults;\r\n\r\n\t},\r\n\r\n\tgetTimeScaleAt: function( time ) {\r\n\r\n\t\tif ( this.timeScale.getAt ) {\r\n\t\t\t// pass in time, not clip time, allows for fadein/fadeout across multiple loops of the clip\r\n\t\t\treturn this.timeScale.getAt( time );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.timeScale;\r\n\r\n\t},\r\n\r\n\tgetWeightAt: function( time ) {\r\n\r\n\t\tif ( this.weight.getAt ) {\r\n\t\t\t// pass in time, not clip time, allows for fadein/fadeout across multiple loops of the clip\r\n\t\t\treturn this.weight.getAt( time );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.weight;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/AnimationClip.js\r\n\r\n/**\r\n *\r\n * Reusable set of Tracks that represent an animation.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationClip = function ( name, duration, tracks ) {\r\n\r\n\tthis.name = name;\r\n\tthis.tracks = tracks;\r\n\tthis.duration = ( duration !== undefined ) ? duration : -1;\r\n\r\n\t// this means it should figure out its duration by scanning the tracks\r\n\tif ( this.duration < 0 ) {\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\t\t\tvar track = this.tracks[i];\r\n\t\t\tthis.duration = Math.max( track.keys[ track.keys.length - 1 ].time );\r\n\t\t}\r\n\t}\r\n\r\n\t// maybe only do these on demand, as doing them here could potentially slow down loading\r\n\t// but leaving these here during development as this ensures a lot of testing of these functions\r\n\tthis.trim();\r\n\tthis.optimize();\r\n\r\n\tthis.results = [];\r\n\r\n};\r\n\r\nTHREE.AnimationClip.prototype = {\r\n\r\n\tconstructor: THREE.AnimationClip,\r\n\r\n\tgetAt: function( clipTime ) {\r\n\r\n\t\tclipTime = Math.max( 0, Math.min( clipTime, this.duration ) );\r\n\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tvar track = this.tracks[ i ];\r\n\r\n\t\t\tthis.results[ i ] = track.getAt( clipTime );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.results;\r\n\t},\r\n\r\n\ttrim: function() {\r\n\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\toptimize: function() {\r\n\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].optimize();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\nTHREE.AnimationClip.CreateFromMorphTargetSequence = function( name, morphTargetSequence, fps ) {\r\n\r\n\r\n\tvar numMorphTargets = morphTargetSequence.length;\r\n\tvar tracks = [];\r\n\r\n\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\r\n\t\tvar keys = [];\r\n\r\n\t\tkeys.push( { time: ( i + numMorphTargets - 1 ) % numMorphTargets, value: 0 } );\r\n\t\tkeys.push( { time: i, value: 1 } );\r\n\t\tkeys.push( { time: ( i + 1 ) % numMorphTargets, value: 0 } );\r\n\r\n\t\tkeys.sort( THREE.KeyframeTrack.keyComparer );\r\n\r\n\t\t// if there is a key at the first frame, duplicate it as the last frame as well for perfect loop.\r\n\t\tif ( keys[0].time === 0 ) {\r\n\t\t\tkeys.push( {\r\n\t\t\t\ttime: numMorphTargets,\r\n\t\t\t\tvalue: keys[0].value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\ttracks.push( new THREE.NumberKeyframeTrack( '.morphTargetInfluences[' + morphTargetSequence[i].name + ']', keys ).scale( 1.0 / fps ) );\r\n\t}\r\n\r\n\treturn new THREE.AnimationClip( name, -1, tracks );\r\n\r\n};\r\n\r\nTHREE.AnimationClip.findByName = function( clipArray, name ) {\r\n\r\n\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\r\n\t\tif ( clipArray[i].name === name ) {\r\n\r\n\t\t\treturn clipArray[i];\r\n\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n\r\n};\r\n\r\nTHREE.AnimationClip.CreateClipsFromMorphTargetSequences = function( morphTargets, fps ) {\r\n\r\n\tvar animationToMorphTargets = {};\r\n\r\n\t// tested with https://regex101.com/ on trick sequences such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\r\n\t// sort morph target names into animation groups based patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morphTarget = morphTargets[ i ];\r\n\t\tvar parts = morphTarget.name.match( pattern );\r\n\r\n\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\tvar name = parts[ 1 ];\r\n\r\n\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\tif ( ! animationMorphTargets ) {\r\n\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\t\t\t}\r\n\r\n\t\t\tanimationMorphTargets.push( morphTarget );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar clips = [];\r\n\r\n\tfor ( var name in animationToMorphTargets ) {\r\n\r\n\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps ) );\r\n\t}\r\n\r\n\treturn clips;\r\n\r\n};\r\n\r\n// parse the standard JSON format for clips\r\nTHREE.AnimationClip.parse = function( json ) {\r\n\r\n\tvar tracks = [];\r\n\r\n\tfor ( var i = 0; i < json.tracks.length; i ++ ) {\r\n\r\n\t\ttracks.push( THREE.KeyframeTrack.parse( json.tracks[i] ).scale( 1.0 / json.fps ) );\r\n\r\n\t}\r\n\r\n\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\r\n\r\n};\r\n\r\n\r\n// parse the animation.hierarchy format\r\nTHREE.AnimationClip.parseAnimation = function( animation, bones, nodeName ) {\r\n\r\n\tif ( ! animation ) {\r\n\t\tconsole.error( \"  no animation in JSONLoader data\" );\r\n\t\treturn null;\r\n\t}\r\n\r\n\tvar convertTrack = function( trackName, animationKeys, propertyName, trackType, animationKeyToValueFunc ) {\r\n\r\n\t\tvar keys = [];\r\n\r\n\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\tvar animationKey = animationKeys[k];\r\n\r\n\t\t\tif ( animationKey[propertyName] !== undefined ) {\r\n\r\n\t\t\t\tkeys.push( { time: animationKey.time, value: animationKeyToValueFunc( animationKey ) } );\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// only return track if there are actually keys.\r\n\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\treturn new trackType( trackName, keys );\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t};\r\n\r\n\tvar tracks = [];\r\n\r\n\tvar clipName = animation.name || 'default';\r\n\tvar duration = animation.length || -1; // automatic length determination in AnimationClip.\r\n\tvar fps = animation.fps || 30;\r\n\r\n\tvar hierarchyTracks = animation.hierarchy || [];\r\n\r\n\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\r\n\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\r\n\t\t// skip empty tracks\r\n\t\tif ( ! animationKeys || animationKeys.length == 0 ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t// process morph targets in a way exactly compatible with AnimationHandler.init( animation )\r\n\t\tif ( animationKeys[0].morphTargets ) {\r\n\r\n\t\t\t// figure out all morph targets used in this track\r\n\t\t\tvar morphTargetNames = {};\r\n\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\t\tif ( animationKeys[k].morphTargets ) {\r\n\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// create a track for each morph target with all zero morphTargetInfluences except for the keys in which the morphTarget is named.\r\n\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\r\n\t\t\t\tvar keys = [];\r\n\r\n\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\tvar animationKey = animationKeys[k];\r\n\r\n\t\t\t\t\tkeys.push( {\r\n\t\t\t\t\t\t\ttime: animationKey.time,\r\n\t\t\t\t\t\t\tvalue: (( animationKey.morphTarget === morphTargetName ) ? 1 : 0 )\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack( nodeName + '.morphTargetInfluence[' + morphTargetName + ']', keys ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar boneName = nodeName + '.bones[' + bones[ h ].name + ']';\r\n\r\n\t\t\t// track contains positions...\r\n\t\t\tvar positionTrack = convertTrack( boneName + '.position', animationKeys, 'pos', THREE.VectorKeyframeTrack, function( animationKey ) {\r\n\t\t\t\t\treturn new THREE.Vector3().fromArray( animationKey.pos )\r\n\t\t\t\t} );\r\n\r\n\t\t\tif ( positionTrack ) tracks.push( positionTrack );\r\n\r\n\t\t\t// track contains quaternions...\r\n\t\t\tvar quaternionTrack = convertTrack( boneName + '.quaternion', animationKeys, 'rot', THREE.QuaternionKeyframeTrack, function( animationKey ) {\r\n\t\t\t\t\tif ( animationKey.rot.slerp ) {\r\n\t\t\t\t\t\treturn animationKey.rot.clone();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn new THREE.Quaternion().fromArray( animationKey.rot );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\r\n\t\t\tif ( quaternionTrack ) tracks.push( quaternionTrack );\r\n\r\n\t\t\t// track contains quaternions...\r\n\t\t\tvar scaleTrack = convertTrack( boneName + '.scale', animationKeys, 'scl', THREE.VectorKeyframeTrack, function( animationKey ) {\r\n\t\t\t\t\treturn new THREE.Vector3().fromArray( animationKey.scl )\r\n\t\t\t\t} );\r\n\r\n\t\t\tif ( scaleTrack ) tracks.push( scaleTrack );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tif ( tracks.length === 0 ) {\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\r\n\r\n\treturn clip;\r\n\r\n};\r\n\r\n// File:src/animation/AnimationMixer.js\r\n\r\n/**\r\n *\r\n * Mixes together the AnimationClips scheduled by AnimationActions and applies them to the root and subtree\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationMixer = function( root ) {\r\n\r\n\tthis.root = root;\r\n\tthis.time = 0;\r\n\tthis.timeScale = 1.0;\r\n\tthis.actions = [];\r\n\tthis.propertyBindingMap = {};\r\n\r\n};\r\n\r\nTHREE.AnimationMixer.prototype = {\r\n\r\n\tconstructor: THREE.AnimationMixer,\r\n\r\n\taddAction: function( action ) {\r\n\r\n\t\t// TODO: check for duplicate action names?  Or provide each action with a UUID?\r\n\r\n\t\tthis.actions.push( action );\r\n\t\taction.init( this.time );\r\n\t\taction.mixer = this;\r\n\r\n\t\tvar tracks = action.clip.tracks;\r\n\r\n\t\tvar root = action.localRoot || this.root;\r\n\r\n\t\tfor ( var i = 0; i < tracks.length; i ++ ) {\r\n\r\n\t\t\tvar track = tracks[ i ];\r\n\r\n\t\t\tvar propertyBindingKey = root.uuid + '-' + track.name;\r\n\t\t\tvar propertyBinding = this.propertyBindingMap[ propertyBindingKey ];\r\n\r\n\t\t\tif ( propertyBinding === undefined ) {\r\n\r\n\t\t\t\tpropertyBinding = new THREE.PropertyBinding( root, track.name );\r\n\t\t\t\tthis.propertyBindingMap[ propertyBindingKey ] = propertyBinding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// push in the same order as the tracks.\r\n\t\t\taction.propertyBindings.push( propertyBinding );\r\n\r\n\t\t\t// track usages of shared property bindings, because if we leave too many around, the mixer can get slow\r\n\t\t\tpropertyBinding.referenceCount += 1;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tremoveAllActions: function() {\r\n\r\n\t\tfor ( var i = 0; i < this.actions.length; i ++ ) {\r\n\r\n\t\t\tthis.actions[i].mixer = null;\r\n\r\n\t\t}\r\n\r\n\t\t// unbind all property bindings\r\n\t\tfor ( var properyBindingKey in this.propertyBindingMap ) {\r\n\r\n\t\t\tthis.propertyBindingMap[ properyBindingKey ].unbind();\r\n\r\n\t\t}\r\n\r\n\t\tthis.actions = [];\r\n\t\tthis.propertyBindingMap = {};\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tremoveAction: function( action ) {\r\n\r\n\t\tvar index = this.actions.indexOf( action );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tthis.actions.splice( index, 1 );\r\n\t\t\taction.mixer = null;\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// remove unused property bindings because if we leave them around the mixer can get slow\r\n\t\tvar root = action.localRoot || this.root;\r\n\t\tvar tracks = action.clip.tracks;\r\n\r\n\t\tfor ( var i = 0; i < tracks.length; i ++ ) {\r\n\r\n\t\t\tvar track = tracks[ i ];\r\n\r\n\t\t\tvar propertyBindingKey = root.uuid + '-' + track.name;\r\n\t\t\tvar propertyBinding = this.propertyBindingMap[ propertyBindingKey ];\r\n\r\n\t\t\tpropertyBinding.referenceCount -= 1;\r\n\r\n\t\t\tif ( propertyBinding.referenceCount <= 0 ) {\r\n\r\n\t\t\t\tpropertyBinding.unbind();\r\n\r\n\t\t\t\tdelete this.propertyBindingMap[ propertyBindingKey ];\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// can be optimized if needed\r\n\tfindActionByName: function( name ) {\r\n\r\n\t\tfor ( var i = 0; i < this.actions.length; i ++ ) {\r\n\r\n\t\t\tif ( this.actions[i].name === name ) return this.actions[i];\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\tplay: function( action, optionalFadeInDuration ) {\r\n\r\n\t\taction.startTime = this.time;\r\n\t\tthis.addAction( action );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfadeOut: function( action, duration ) {\r\n\r\n\t\tvar keys = [];\r\n\r\n\t\tkeys.push( { time: this.time, value: 1 } );\r\n\t\tkeys.push( { time: this.time + duration, value: 0 } );\r\n\r\n\t\taction.weight = new THREE.NumberKeyframeTrack( \"weight\", keys );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfadeIn: function( action, duration ) {\r\n\r\n\t\tvar keys = [];\r\n\r\n\t\tkeys.push( { time: this.time, value: 0 } );\r\n\t\tkeys.push( { time: this.time + duration, value: 1 } );\r\n\r\n\t\taction.weight = new THREE.NumberKeyframeTrack( \"weight\", keys );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\twarp: function( action, startTimeScale, endTimeScale, duration ) {\r\n\r\n\t\tvar keys = [];\r\n\r\n\t\tkeys.push( { time: this.time, value: startTimeScale } );\r\n\t\tkeys.push( { time: this.time + duration, value: endTimeScale } );\r\n\r\n\t\taction.timeScale = new THREE.NumberKeyframeTrack( \"timeScale\", keys );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossFade: function( fadeOutAction, fadeInAction, duration, warp ) {\r\n\r\n\t\tthis.fadeOut( fadeOutAction, duration );\r\n\t\tthis.fadeIn( fadeInAction, duration );\r\n\r\n\t\tif ( warp ) {\r\n\r\n\t\t\tvar startEndRatio = fadeOutAction.clip.duration / fadeInAction.clip.duration;\r\n\t\t\tvar endStartRatio = 1.0 / startEndRatio;\r\n\r\n\t\t\tthis.warp( fadeOutAction, 1.0, startEndRatio, duration );\r\n\t\t\tthis.warp( fadeInAction, endStartRatio, 1.0, duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdate: function( deltaTime ) {\r\n\r\n\t\tvar mixerDeltaTime = deltaTime * this.timeScale;\r\n\t\tthis.time += mixerDeltaTime;\r\n\r\n\t\tfor ( var i = 0; i < this.actions.length; i ++ ) {\r\n\r\n\t\t\tvar action = this.actions[i];\r\n\r\n\t\t\tvar weight = action.getWeightAt( this.time );\r\n\r\n\t\t\tvar actionTimeScale = action.getTimeScaleAt( this.time );\r\n\t\t\tvar actionDeltaTime = mixerDeltaTime * actionTimeScale;\r\n\r\n\t\t\tvar actionResults = action.update( actionDeltaTime );\r\n\r\n\t\t\tif ( action.weight <= 0 || ! action.enabled ) continue;\r\n\r\n\t\t\tfor ( var j = 0; j < actionResults.length; j ++ ) {\r\n\r\n\t\t\t\tvar name = action.clip.tracks[j].name;\r\n\r\n\t\t\t\taction.propertyBindings[ j ].accumulate( actionResults[j], weight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// apply to nodes\r\n\t\tfor ( var propertyBindingKey in this.propertyBindingMap ) {\r\n\r\n\t\t\tthis.propertyBindingMap[ propertyBindingKey ].apply();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.AnimationMixer.prototype );\r\n\r\n// File:src/animation/AnimationUtils.js\r\n\r\n/**\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationUtils = {\r\n\r\n\tgetEqualsFunc: function( exemplarValue ) {\r\n\r\n\t\tif ( exemplarValue.equals ) {\r\n\t\t\treturn function equals_object( a, b ) {\r\n\t\t\t\treturn a.equals( b );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn function equals_primitive( a, b ) {\r\n\t\t\treturn ( a === b );\r\n\t\t};\r\n\r\n\t},\r\n\r\n\tclone: function( exemplarValue ) {\r\n\r\n\t\tvar typeName = typeof exemplarValue;\r\n\t\tif ( typeName === \"object\" ) {\r\n\t\t\tif ( exemplarValue.clone ) {\r\n\t\t\t\treturn exemplarValue.clone();\r\n\t\t\t}\r\n\t\t\tconsole.error( \"can not figure out how to copy exemplarValue\", exemplarValue );\r\n\t\t}\r\n\r\n\t\treturn exemplarValue;\r\n\r\n\t},\r\n\r\n\tlerp: function( a, b, alpha, interTrack ) {\r\n\r\n\t\tvar lerpFunc = THREE.AnimationUtils.getLerpFunc( a, interTrack );\r\n\r\n\t\treturn lerpFunc( a, b, alpha );\r\n\r\n\t},\r\n\r\n\tlerp_object: function( a, b, alpha ) {\r\n\t\treturn a.lerp( b, alpha );\r\n\t},\r\n\r\n\tslerp_object: function( a, b, alpha ) {\r\n\t\treturn a.slerp( b, alpha );\r\n\t},\r\n\r\n\tlerp_number: function( a, b, alpha ) {\r\n\t\treturn a * ( 1 - alpha ) + b * alpha;\r\n\t},\r\n\r\n\tlerp_boolean: function( a, b, alpha ) {\r\n\t\treturn ( alpha < 0.5 ) ? a : b;\r\n\t},\r\n\r\n\tlerp_boolean_immediate: function( a, b, alpha ) {\r\n\t\treturn a;\r\n\t},\r\n\r\n\tlerp_string: function( a, b, alpha ) {\r\n\t\treturn ( alpha < 0.5 ) ? a : b;\r\n\t},\r\n\r\n\tlerp_string_immediate: function( a, b, alpha ) {\r\n \t\treturn a;\r\n \t},\r\n\r\n\t// NOTE: this is an accumulator function that modifies the first argument (e.g. a).\tThis is to minimize memory alocations.\r\n\tgetLerpFunc: function( exemplarValue, interTrack ) {\r\n\r\n\t\tif ( exemplarValue === undefined || exemplarValue === null ) throw new Error( \"examplarValue is null\" );\r\n\r\n\t\tvar typeName = typeof exemplarValue;\r\n\r\n\t\tswitch( typeName ) {\r\n\r\n\t\t\tcase \"object\":\r\n\t\t\t\tif ( exemplarValue.lerp ) {\r\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_object;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( exemplarValue.slerp ) {\r\n\t\t\t\t\treturn THREE.AnimationUtils.slerp_object;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"number\":\r\n\t\t\t\treturn THREE.AnimationUtils.lerp_number;\r\n\r\n\t\t\tcase \"boolean\":\r\n\t\t\t\tif ( interTrack ) {\r\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_boolean;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_boolean_immediate;\r\n\t\t\t\t}\r\n\r\n\t\t\tcase \"string\":\r\n\t\t\t\tif ( interTrack ) {\r\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_string;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn THREE.AnimationUtils.lerp_string_immediate;\r\n\t\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/KeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track that returns a keyframe interpolated value, currently linearly interpolated\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.KeyframeTrack = function ( name, keys ) {\r\n\r\n\tif ( name === undefined ) throw new Error( \"track name is undefined\" );\r\n\tif ( keys === undefined || keys.length === 0 ) throw new Error( \"no keys in track named \" + name );\r\n\r\n\tthis.name = name;\r\n\tthis.keys = keys;\t// time in seconds, value as value\r\n\r\n\t// the index of the last result, used as a starting point for local search.\r\n\tthis.lastIndex = 0;\r\n\r\n\tthis.validate();\r\n\tthis.optimize();\r\n\r\n};\r\n\r\nTHREE.KeyframeTrack.prototype = {\r\n\r\n\tconstructor: THREE.KeyframeTrack,\r\n\r\n\tgetAt: function( time ) {\r\n\r\n\r\n\t\t// this can not go higher than this.keys.length.\r\n\t\twhile( ( this.lastIndex < this.keys.length ) && ( time >= this.keys[this.lastIndex].time ) ) {\r\n\t\t\tthis.lastIndex ++;\r\n\t\t};\r\n\r\n\t\t// this can not go lower than 0.\r\n\t\twhile( ( this.lastIndex > 0 ) && ( time < this.keys[this.lastIndex - 1].time ) ) {\r\n\t\t\tthis.lastIndex --;\r\n\t\t}\r\n\r\n\t\tif ( this.lastIndex >= this.keys.length ) {\r\n\r\n\t\t\tthis.setResult( this.keys[ this.keys.length - 1 ].value );\r\n\r\n\t\t\treturn this.result;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.lastIndex === 0 ) {\r\n\r\n\t\t\tthis.setResult( this.keys[ 0 ].value );\r\n\r\n\t\t\treturn this.result;\r\n\r\n\t\t}\r\n\r\n\t\tvar prevKey = this.keys[ this.lastIndex - 1 ];\r\n\t\tthis.setResult( prevKey.value );\r\n\r\n\t\t// if true, means that prev/current keys are identical, thus no interpolation required.\r\n\t\tif ( prevKey.constantToNext ) {\r\n\r\n\t\t\treturn this.result;\r\n\r\n\t\t}\r\n\r\n\t\t// linear interpolation to start with\r\n\t\tvar currentKey = this.keys[ this.lastIndex ];\r\n\t\tvar alpha = ( time - prevKey.time ) / ( currentKey.time - prevKey.time );\r\n\t\tthis.result = this.lerpValues( this.result, currentKey.value, alpha );\r\n\r\n\t\treturn this.result;\r\n\r\n\t},\r\n\r\n\t// move all keyframes either forwards or backwards in time\r\n\tshift: function( timeOffset ) {\r\n\r\n\t\tif ( timeOffset !== 0.0 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\t\t\tthis.keys[i].time += timeOffset;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\tscale: function( timeScale ) {\r\n\r\n\t\tif ( timeScale !== 1.0 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\t\t\t\tthis.keys[i].time *= timeScale;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n \ttrim: function( startTime, endTime ) {\r\n\r\n\t\tvar firstKeysToRemove = 0;\r\n\t\tfor ( var i = 1; i < this.keys.length; i ++ ) {\r\n\t\t\tif ( this.keys[i] <= startTime ) {\r\n\t\t\t\tfirstKeysToRemove ++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar lastKeysToRemove = 0;\r\n\t\tfor ( var i = this.keys.length - 2; i > 0; i ++ ) {\r\n\t\t\tif ( this.keys[i] >= endTime ) {\r\n\t\t\t\tlastKeysToRemove ++;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// remove last keys first because it doesn't affect the position of the first keys (the otherway around doesn't work as easily)\r\n\t\tif ( ( firstKeysToRemove + lastKeysToRemove ) > 0 ) {\r\n\t\t\tthis.keys = this.keys.splice( firstKeysToRemove, this.keys.length - lastKeysToRemove - firstKeysToRemove );;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t/* NOTE: This is commented out because we really shouldn't have to handle unsorted key lists\r\n\t         Tracks with out of order keys should be considered to be invalid.  - bhouston\r\n\tsort: function() {\r\n\r\n\t\tthis.keys.sort( THREE.KeyframeTrack.keyComparer );\r\n\r\n\t\treturn this;\r\n\r\n\t},*/\r\n\r\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\t// One could eventually ensure that all key.values in a track are all of the same type (otherwise interpolation makes no sense.)\r\n\tvalidate: function() {\r\n\r\n\t\tvar prevKey = null;\r\n\r\n\t\tif ( this.keys.length === 0 ) {\r\n\t\t\tconsole.error( \"  track is empty, no keys\", this );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\r\n\t\t\tvar currKey = this.keys[i];\r\n\r\n\t\t\tif ( ! currKey ) {\r\n\t\t\t\tconsole.error( \"  key is null in track\", this, i );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( typeof currKey.time ) !== 'number' || isNaN( currKey.time ) ) {\r\n\t\t\t\tconsole.error( \"  key.time is not a valid number\", this, i, currKey );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( currKey.value === undefined || currKey.value === null) {\r\n\t\t\t\tconsole.error( \"  key.value is null in track\", this, i, currKey );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( prevKey && prevKey.time > currKey.time ) {\r\n\t\t\t\tconsole.error( \"  key.time is less than previous key time, out of order keys\", this, i, currKey, prevKey );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tprevKey = currKey;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// currently only removes equivalent sequential keys (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0), which are common in morph target animations\r\n\toptimize: function() {\r\n\r\n\t\tvar newKeys = [];\r\n\t\tvar prevKey = this.keys[0];\r\n\t\tnewKeys.push( prevKey );\r\n\r\n\t\tvar equalsFunc = THREE.AnimationUtils.getEqualsFunc( prevKey.value );\r\n\r\n\t\tfor ( var i = 1; i < this.keys.length - 1; i ++ ) {\r\n\t\t\tvar currKey = this.keys[i];\r\n\t\t\tvar nextKey = this.keys[i+1];\r\n\r\n\t\t\t// if prevKey & currKey are the same time, remove currKey.  If you want immediate adjacent keys, use an epsilon offset\r\n\t\t\t// it is not possible to have two keys at the same time as we sort them.  The sort is not stable on keys with the same time.\r\n\t\t\tif ( ( prevKey.time === currKey.time ) ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// remove completely unnecessary keyframes that are the same as their prev and next keys\r\n\t\t\tif ( this.compareValues( prevKey.value, currKey.value ) && this.compareValues( currKey.value, nextKey.value ) ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// determine if interpolation is required\r\n\t\t\tprevKey.constantToNext = this.compareValues( prevKey.value, currKey.value );\r\n\r\n\t\t\tnewKeys.push( currKey );\r\n\t\t\tprevKey = currKey;\r\n\t\t}\r\n\t\tnewKeys.push( this.keys[ this.keys.length - 1 ] );\r\n\r\n\t\tthis.keys = newKeys;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.KeyframeTrack.keyComparer = function keyComparator(key0, key1) {\r\n\treturn key0.time - key1.time;\r\n};\r\n\r\nTHREE.KeyframeTrack.parse = function( json ) {\r\n\r\n\tif ( json.type === undefined ) throw new Error( \"track type undefined, can not parse\" );\r\n\r\n\tvar trackType = THREE.KeyframeTrack.GetTrackTypeForTypeName( json.type );\r\n\r\n\treturn trackType.parse( json );\r\n\r\n};\r\n\r\nTHREE.KeyframeTrack.GetTrackTypeForTypeName = function( typeName ) {\r\n\tswitch( typeName.toLowerCase() ) {\r\n\t \tcase \"vector\":\r\n\t \tcase \"vector2\":\r\n\t \tcase \"vector3\":\r\n\t \tcase \"vector4\":\r\n\t\t\treturn THREE.VectorKeyframeTrack;\r\n\r\n\t \tcase \"quaternion\":\r\n\t\t\treturn THREE.QuaternionKeyframeTrack;\r\n\r\n\t \tcase \"integer\":\r\n\t \tcase \"scalar\":\r\n\t \tcase \"double\":\r\n\t \tcase \"float\":\r\n\t \tcase \"number\":\r\n\t\t\treturn THREE.NumberKeyframeTrack;\r\n\r\n\t \tcase \"bool\":\r\n\t \tcase \"boolean\":\r\n\t\t\treturn THREE.BooleanKeyframeTrack;\r\n\r\n\t \tcase \"string\":\r\n\t \t\treturn THREE.StringKeyframeTrack;\r\n\t};\r\n\r\n\tthrow new Error( \"Unsupported typeName: \" + typeName );\r\n};\r\n\r\n// File:src/animation/PropertyBinding.js\r\n\r\n/**\r\n *\r\n * A track bound to a real value in the scene graph.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.PropertyBinding = function ( rootNode, trackName ) {\r\n\r\n\tthis.rootNode = rootNode;\r\n\tthis.trackName = trackName;\r\n\tthis.referenceCount = 0;\r\n\tthis.originalValue = null; // the value of the property before it was controlled by this binding\r\n\r\n\tvar parseResults = THREE.PropertyBinding.parseTrackName( trackName );\r\n\r\n\tthis.directoryName = parseResults.directoryName;\r\n\tthis.nodeName = parseResults.nodeName;\r\n\tthis.objectName = parseResults.objectName;\r\n\tthis.objectIndex = parseResults.objectIndex;\r\n\tthis.propertyName = parseResults.propertyName;\r\n\tthis.propertyIndex = parseResults.propertyIndex;\r\n\r\n\tthis.node = THREE.PropertyBinding.findNode( rootNode, this.nodeName ) || rootNode;\r\n\r\n\tthis.cumulativeValue = null;\r\n\tthis.cumulativeWeight = 0;\r\n};\r\n\r\nTHREE.PropertyBinding.prototype = {\r\n\r\n\tconstructor: THREE.PropertyBinding,\r\n\r\n\treset: function() {\r\n\r\n\t\tthis.cumulativeValue = null;\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t},\r\n\r\n\taccumulate: function( value, weight ) {\r\n\r\n\t\tif ( ! this.isBound ) this.bind();\r\n\r\n\t\tif ( this.cumulativeWeight === 0 ) {\r\n\r\n\t\t\tif ( weight > 0 ) {\r\n\r\n\t\t\t\tif ( this.cumulativeValue === null ) {\r\n\t\t\t\t\tthis.cumulativeValue = THREE.AnimationUtils.clone( value );\r\n\t\t\t\t}\r\n\t\t\t\tthis.cumulativeWeight = weight;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar lerpAlpha = weight / ( this.cumulativeWeight + weight );\r\n\t\t\tthis.cumulativeValue = this.lerpValue( this.cumulativeValue, value, lerpAlpha );\r\n\t\t\tthis.cumulativeWeight += weight;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tunbind: function() {\r\n\r\n\t\tif ( ! this.isBound ) return;\r\n\r\n\t\tthis.setValue( this.originalValue );\r\n\r\n\t\tthis.setValue = null;\r\n\t\tthis.getValue = null;\r\n\t\tthis.lerpValue = null;\r\n\t\tthis.equalsValue = null;\r\n\t\tthis.triggerDirty = null;\r\n\t\tthis.isBound = false;\r\n\r\n\t},\r\n\r\n\t// bind to the real property in the scene graph, remember original value, memorize various accessors for speed/inefficiency\r\n\tbind: function() {\r\n\r\n\t\tif ( this.isBound ) return;\r\n\r\n\t\tvar targetObject = this.node;\r\n\r\n \t\t// ensure there is a value node\r\n\t\tif ( ! targetObject ) {\r\n\t\t\tconsole.error( \"  trying to update node for track: \" + this.trackName + \" but it wasn't found.\" );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( this.objectName ) {\r\n\t\t\t// special case were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\tif ( this.objectName === \"materials\" ) {\r\n\t\t\t\tif ( ! targetObject.material ) {\r\n\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif ( ! targetObject.material.materials ) {\r\n\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\ttargetObject = targetObject.material.materials;\r\n\t\t\t} else if ( this.objectName === \"bones\" ) {\r\n\t\t\t\tif ( ! targetObject.skeleton ) {\r\n\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\r\n\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\t\t\t\t\tif ( targetObject[i].name === this.objectIndex ) {\r\n\t\t\t\t\t\tthis.objectIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( targetObject[ this.objectName ] === undefined ) {\r\n\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\ttargetObject = targetObject[ this.objectName ];\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.objectIndex !== undefined ) {\r\n\t\t\t\tif ( targetObject[ this.objectIndex ] === undefined ) {\r\n\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject = targetObject[ this.objectIndex ];\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n \t\t// special case mappings\r\n \t\tvar nodeProperty = targetObject[ this.propertyName ];\r\n\t\tif ( ! nodeProperty ) {\r\n\t\t\tconsole.error( \"  trying to update property for track: \" + this.nodeName + '.' + this.propertyName + \" but it wasn't found.\", targetObject );\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\t\tif ( this.propertyIndex !== undefined ) {\r\n\r\n\t\t\tif ( this.propertyName === \"morphTargetInfluences\" ) {\r\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\tif ( ! targetObject.geometry ) {\r\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\r\n\t\t\t\t}\r\n\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\t\t\t\t\tif ( targetObject.geometry.morphTargets[i].name === this.propertyIndex ) {\r\n\t\t\t\t\t\tthis.propertyIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.setValue = function setValue_propertyIndexed( value ) {\r\n\t\t\t\tif ( ! this.equalsValue( nodeProperty[ this.propertyIndex ], value ) ) {\r\n\t\t\t\t\tnodeProperty[ this.propertyIndex ] = value;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t};\r\n\r\n\t\t\tthis.getValue = function getValue_propertyIndexed() {\r\n\t\t\t\treturn nodeProperty[ this.propertyIndex ];\r\n\t\t\t};\r\n\r\n\t\t}\r\n\t\t// must use copy for Object3D.Euler/Quaternion\r\n\t\telse if ( nodeProperty.copy ) {\r\n\r\n\t\t\tthis.setValue = function setValue_propertyObject( value ) {\r\n\t\t\t\tif ( ! this.equalsValue( nodeProperty, value ) ) {\r\n\t\t\t\t\tnodeProperty.copy( value );\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.getValue = function getValue_propertyObject() {\r\n\t\t\t\treturn nodeProperty;\r\n\t\t\t};\r\n\r\n\t\t}\r\n\t\t// otherwise just set the property directly on the node (do not use nodeProperty as it may not be a reference object)\r\n\t\telse {\r\n\r\n\t\t\tthis.setValue = function setValue_property( value ) {\r\n\t\t\t\tif ( ! this.equalsValue( targetObject[ this.propertyName ], value ) ) {\r\n\t\t\t\t\ttargetObject[ this.propertyName ] = value;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.getValue = function getValue_property() {\r\n\t\t\t\treturn targetObject[ this.propertyName ];\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// trigger node dirty\r\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\r\n\t\t\tthis.triggerDirty = function triggerDirty_needsUpdate() {\r\n\t\t\t\tthis.node.needsUpdate = true;\r\n\t\t\t}\r\n\r\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\r\n\t\t\tthis.triggerDirty = function triggerDirty_matrixWorldNeedsUpdate() {\r\n\t\t\t\ttargetObject.matrixWorldNeedsUpdate = true;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.originalValue = this.getValue();\r\n\r\n\t\tthis.equalsValue = THREE.AnimationUtils.getEqualsFunc( this.originalValue );\r\n\t\tthis.lerpValue = THREE.AnimationUtils.getLerpFunc( this.originalValue, true );\r\n\r\n\t\tthis.isBound = true;\r\n\r\n\t},\r\n\r\n\tapply: function() {\r\n\r\n\t\t// for speed capture the setter pattern as a closure (sort of a memoization pattern: https://en.wikipedia.org/wiki/Memoization)\r\n\t\tif ( ! this.isBound ) this.bind();\r\n\r\n\t\t// early exit if there is nothing to apply.\r\n\t\tif ( this.cumulativeWeight > 0 ) {\r\n\r\n\t\t\t// blend with original value\r\n\t\t\tif ( this.cumulativeWeight < 1 ) {\r\n\r\n\t\t\t\tvar remainingWeight = 1 - this.cumulativeWeight;\r\n\t\t\t\tvar lerpAlpha = remainingWeight / ( this.cumulativeWeight + remainingWeight );\r\n\t\t\t\tthis.cumulativeValue = this.lerpValue( this.cumulativeValue, this.originalValue, lerpAlpha );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar valueChanged = this.setValue( this.cumulativeValue );\r\n\r\n\t\t\tif ( valueChanged && this.triggerDirty ) {\r\n\t\t\t\tthis.triggerDirty();\r\n\t\t\t}\r\n\r\n\t\t\t// reset accumulator\r\n\t\t\tthis.cumulativeValue = null;\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\t}\r\n\t}\r\n\r\n};\r\n\r\n\r\nTHREE.PropertyBinding.parseTrackName = function( trackName ) {\r\n\r\n\t// matches strings in the form of:\r\n\t//    nodeName.property\r\n\t//    nodeName.property[accessor]\r\n\t//    nodeName.material.property[accessor]\r\n\t//    uuid.property[accessor]\r\n\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\r\n\t//    parentName/nodeName.property\r\n\t//    parentName/parentName/nodeName.property[index]\r\n\t//\t  .bone[Armature.DEF_cog].position\r\n\t// created and tested via https://regex101.com/#javascript\r\n\r\n\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\r\n\tvar matches = re.exec(trackName);\r\n\r\n\tif ( ! matches ) {\r\n\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\r\n\t}\r\n\r\n    if (matches.index === re.lastIndex) {\r\n        re.lastIndex++;\r\n    }\r\n\r\n\tvar results = {\r\n\t\tdirectoryName: matches[1],\r\n\t\tnodeName: matches[3], \t// allowed to be null, specified root node.\r\n\t\tobjectName: matches[5],\r\n\t\tobjectIndex: matches[7],\r\n\t\tpropertyName: matches[9],\r\n\t\tpropertyIndex: matches[11]\t// allowed to be null, specifies that the whole property is set.\r\n\t};\r\n\r\n\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\r\n\t}\r\n\r\n\treturn results;\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.findNode = function( root, nodeName ) {\r\n\r\n\tfunction searchSkeleton( skeleton ) {\r\n\r\n\t\tfor ( var i = 0; i < skeleton.bones.length; i ++ ) {\r\n\r\n\t\t\tvar bone = skeleton.bones[i];\r\n\r\n\t\t\tif ( bone.name === nodeName ) {\r\n\r\n\t\t\t\treturn bone;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\tfunction searchNodeSubtree( children ) {\r\n\r\n\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\tvar childNode = children[i];\r\n\r\n\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\r\n\t\t\t\treturn childNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\r\n\t\t\tif ( result ) return result;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\r\n\t\treturn root;\r\n\r\n\t}\r\n\r\n\t// search into skeleton bones.\r\n\tif ( root.skeleton ) {\r\n\r\n\t\tvar bone = searchSkeleton( root.skeleton );\r\n\r\n\t\tif ( bone ) {\r\n\r\n\t\t\treturn bone;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// search into node subtree.\r\n\tif ( root.children ) {\r\n\r\n\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\r\n\t\tif ( subTreeNode ) {\r\n\r\n\t\t\treturn subTreeNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n// File:src/animation/tracks/VectorKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track that interpolates Vectors\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.VectorKeyframeTrack = function ( name, keys ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\r\n\t// local cache of value type to avoid allocations during runtime.\r\n\tthis.result = this.keys[0].value.clone();\r\n\r\n};\r\n\r\nTHREE.VectorKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\r\nTHREE.VectorKeyframeTrack.prototype.constructor = THREE.VectorKeyframeTrack;\r\n\r\nTHREE.VectorKeyframeTrack.prototype.setResult = function( value ) {\r\n\r\n\tthis.result.copy( value );\r\n\r\n};\r\n\r\n// memoization of the lerp function for speed.\r\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\nTHREE.VectorKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\r\n\treturn value0.lerp( value1, alpha );\r\n\r\n};\r\n\r\nTHREE.VectorKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\r\n\treturn value0.equals( value1 );\r\n\r\n};\r\n\r\nTHREE.VectorKeyframeTrack.prototype.clone = function() {\r\n\r\n\tvar clonedKeys = [];\r\n\r\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\r\n\t\tvar key = this.keys[i];\r\n\t\tclonedKeys.push( {\r\n\t\t\ttime: key.time,\r\n\t\t\tvalue: key.value.clone()\r\n\t\t} );\r\n\t}\r\n\r\n\treturn new THREE.VectorKeyframeTrack( this.name, clonedKeys );\r\n\r\n};\r\n\r\nTHREE.VectorKeyframeTrack.parse = function( json ) {\r\n\r\n\tvar elementCount = json.keys[0].value.length;\r\n\tvar valueType = THREE[ 'Vector' + elementCount ];\r\n\r\n\tvar keys = [];\r\n\r\n\tfor ( var i = 0; i < json.keys.length; i ++ ) {\r\n\t\tvar jsonKey = json.keys[i];\r\n\t\tkeys.push( {\r\n\t\t\tvalue: new valueType().fromArray( jsonKey.value ),\r\n\t\t\ttime: jsonKey.time\r\n\t\t} );\r\n\t}\r\n\r\n\treturn new THREE.VectorKeyframeTrack( json.name, keys );\r\n\r\n};\r\n\r\n// File:src/animation/tracks/QuaternionKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track that interpolates Quaternion\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.QuaternionKeyframeTrack = function ( name, keys ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\r\n\t// local cache of value type to avoid allocations during runtime.\r\n\tthis.result = this.keys[0].value.clone();\r\n\r\n};\r\n\r\nTHREE.QuaternionKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\r\nTHREE.QuaternionKeyframeTrack.prototype.constructor = THREE.QuaternionKeyframeTrack;\r\n\r\nTHREE.QuaternionKeyframeTrack.prototype.setResult = function( value ) {\r\n\r\n\tthis.result.copy( value );\r\n\r\n};\r\n\r\n// memoization of the lerp function for speed.\r\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\nTHREE.QuaternionKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\r\n\treturn value0.slerp( value1, alpha );\r\n\r\n};\r\n\r\nTHREE.QuaternionKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\r\n\treturn value0.equals( value1 );\r\n\r\n};\r\n\r\nTHREE.QuaternionKeyframeTrack.prototype.multiply = function( quat ) {\r\n\r\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\r\n\t\tthis.keys[i].value.multiply( quat );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.QuaternionKeyframeTrack.prototype.clone = function() {\r\n\r\n\tvar clonedKeys = [];\r\n\r\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\r\n\t\tvar key = this.keys[i];\r\n\t\tclonedKeys.push( {\r\n\t\t\ttime: key.time,\r\n\t\t\tvalue: key.value.clone()\r\n\t\t} );\r\n\t}\r\n\r\n\treturn new THREE.QuaternionKeyframeTrack( this.name, clonedKeys );\r\n\r\n};\r\n\r\nTHREE.QuaternionKeyframeTrack.parse = function( json ) {\r\n\r\n\tvar keys = [];\r\n\r\n\tfor ( var i = 0; i < json.keys.length; i ++ ) {\r\n\t\tvar jsonKey = json.keys[i];\r\n\t\tkeys.push( {\r\n\t\t\tvalue: new THREE.Quaternion().fromArray( jsonKey.value ),\r\n\t\t\ttime: jsonKey.time\r\n\t\t} );\r\n\t}\r\n\r\n\treturn new THREE.QuaternionKeyframeTrack( json.name, keys );\r\n\r\n};\r\n\r\n// File:src/animation/tracks/StringKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track that interpolates Strings\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.StringKeyframeTrack = function ( name, keys ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\r\n\t// local cache of value type to avoid allocations during runtime.\r\n\tthis.result = this.keys[0].value;\r\n\r\n};\r\n\r\nTHREE.StringKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\r\nTHREE.StringKeyframeTrack.prototype.constructor = THREE.StringKeyframeTrack;\r\n\r\nTHREE.StringKeyframeTrack.prototype.setResult = function( value ) {\r\n\r\n\tthis.result = value;\r\n\r\n};\r\n\r\n// memoization of the lerp function for speed.\r\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\nTHREE.StringKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\r\n\treturn ( alpha < 1.0 ) ? value0 : value1;\r\n\r\n};\r\n\r\nTHREE.StringKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\r\n\treturn ( value0 === value1 );\r\n\r\n};\r\n\r\nTHREE.StringKeyframeTrack.prototype.clone = function() {\r\n\r\n\tvar clonedKeys = [];\r\n\r\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\r\n\t\tvar key = this.keys[i];\r\n\t\tclonedKeys.push( {\r\n\t\t\ttime: key.time,\r\n\t\t\tvalue: key.value\r\n\t\t} );\r\n\t}\r\n\r\n\treturn new THREE.StringKeyframeTrack( this.name, clonedKeys );\r\n\r\n};\r\n\r\nTHREE.StringKeyframeTrack.parse = function( json ) {\r\n\r\n\treturn new THREE.StringKeyframeTrack( json.name, json.keys );\r\n\r\n};\r\n\r\n// File:src/animation/tracks/BooleanKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track that interpolates Boolean\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.BooleanKeyframeTrack = function ( name, keys ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\r\n\t// local cache of value type to avoid allocations during runtime.\r\n\tthis.result = this.keys[0].value;\r\n\r\n};\r\n\r\nTHREE.BooleanKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\r\nTHREE.BooleanKeyframeTrack.prototype.constructor = THREE.BooleanKeyframeTrack;\r\n\r\nTHREE.BooleanKeyframeTrack.prototype.setResult = function( value ) {\r\n\r\n\tthis.result = value;\r\n\r\n};\r\n\r\n// memoization of the lerp function for speed.\r\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\nTHREE.BooleanKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\r\n\treturn ( alpha < 1.0 ) ? value0 : value1;\r\n\r\n};\r\n\r\nTHREE.BooleanKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\r\n\treturn ( value0 === value1 );\r\n\r\n};\r\n\r\nTHREE.BooleanKeyframeTrack.prototype.clone = function() {\r\n\r\n\tvar clonedKeys = [];\r\n\r\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\r\n\t\tvar key = this.keys[i];\r\n\t\tclonedKeys.push( {\r\n\t\t\ttime: key.time,\r\n\t\t\tvalue: key.value\r\n\t\t} );\r\n\t}\r\n\r\n\treturn new THREE.BooleanKeyframeTrack( this.name, clonedKeys );\r\n\r\n};\r\n\r\nTHREE.BooleanKeyframeTrack.parse = function( json ) {\r\n\r\n\treturn new THREE.BooleanKeyframeTrack( json.name, json.keys );\r\n\r\n};\r\n\r\n// File:src/animation/tracks/NumberKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track that interpolates Numbers\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.NumberKeyframeTrack = function ( name, keys ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, keys );\r\n\r\n\t// local cache of value type to avoid allocations during runtime.\r\n\tthis.result = this.keys[0].value;\r\n\r\n};\r\n\r\nTHREE.NumberKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );\r\n\r\nTHREE.NumberKeyframeTrack.prototype.constructor = THREE.NumberKeyframeTrack;\r\n\r\nTHREE.NumberKeyframeTrack.prototype.setResult = function( value ) {\r\n\r\n\tthis.result = value;\r\n\r\n};\r\n\r\n// memoization of the lerp function for speed.\r\n// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.\r\nTHREE.NumberKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {\r\n\r\n\treturn value0 * ( 1 - alpha ) + value1 * alpha;\r\n\r\n};\r\n\r\nTHREE.NumberKeyframeTrack.prototype.compareValues = function( value0, value1 ) {\r\n\r\n\treturn ( value0 === value1 );\r\n\r\n};\r\n\r\nTHREE.NumberKeyframeTrack.prototype.clone = function() {\r\n\r\n\tvar clonedKeys = [];\r\n\r\n\tfor ( var i = 0; i < this.keys.length; i ++ ) {\r\n\r\n\t\tvar key = this.keys[i];\r\n\t\tclonedKeys.push( {\r\n\t\t\ttime: key.time,\r\n\t\t\tvalue: key.value\r\n\t\t} );\r\n\t}\r\n\r\n\treturn new THREE.NumberKeyframeTrack( this.name, clonedKeys );\r\n\r\n};\r\n\r\nTHREE.NumberKeyframeTrack.parse = function( json ) {\r\n\r\n\treturn new THREE.NumberKeyframeTrack( json.name, json.keys );\r\n\r\n};\r\n\r\n// File:src/cameras/Camera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.Camera = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Camera';\r\n\r\n\tthis.matrixWorldInverse = new THREE.Matrix4();\r\n\tthis.projectionMatrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Camera.prototype.constructor = THREE.Camera;\r\n\r\nTHREE.Camera.prototype.getWorldDirection = function () {\r\n\r\n\tvar quaternion = new THREE.Quaternion();\r\n\r\n\treturn function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Camera.prototype.lookAt = function () {\r\n\r\n\t// This routine does not support cameras with rotated and/or translated parent(s)\r\n\r\n\tvar m1 = new THREE.Matrix4();\r\n\r\n\treturn function ( vector ) {\r\n\r\n\t\tm1.lookAt( this.position, vector, this.up );\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Camera.prototype.clone = function () {\r\n\r\n\treturn new this.constructor().copy( this );\r\n\r\n};\r\n\r\nTHREE.Camera.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/cameras/CubeCamera.js\r\n\r\n/**\r\n * Camera for rendering cube maps\r\n *\t- renders scene into axis-aligned cube\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'CubeCamera';\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPX.up.set( 0, - 1, 0 );\r\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\r\n\tthis.add( cameraPX );\r\n\r\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNX.up.set( 0, - 1, 0 );\r\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\r\n\tthis.add( cameraNX );\r\n\r\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPY.up.set( 0, 0, 1 );\r\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\r\n\tthis.add( cameraPY );\r\n\r\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNY.up.set( 0, 0, - 1 );\r\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\r\n\tthis.add( cameraNY );\r\n\r\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPZ.up.set( 0, - 1, 0 );\r\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\r\n\tthis.add( cameraPZ );\r\n\r\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNZ.up.set( 0, - 1, 0 );\r\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\r\n\tthis.add( cameraNZ );\r\n\r\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );\r\n\r\n\tthis.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\r\n\r\n\t\tvar renderTarget = this.renderTarget;\r\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\r\n\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t\trenderTarget.activeCubeFace = 0;\r\n\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 1;\r\n\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 2;\r\n\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 3;\r\n\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 4;\r\n\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\r\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\r\n\t\trenderTarget.activeCubeFace = 5;\r\n\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\r\n\t\trenderer.setRenderTarget( null );\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\r\n\r\n// File:src/cameras/OrthographicCamera.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.type = 'OrthographicCamera';\r\n\r\n\tthis.zoom = 1;\r\n\r\n\tthis.left = left;\r\n\tthis.right = right;\r\n\tthis.top = top;\r\n\tthis.bottom = bottom;\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\r\nTHREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;\r\n\r\nTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\tvar cx = ( this.right + this.left ) / 2;\r\n\tvar cy = ( this.top + this.bottom ) / 2;\r\n\r\n\tthis.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype.copy = function ( source ) {\r\n\t\r\n\tTHREE.Camera.prototype.copy.call( this, source );\r\n\t\r\n\tthis.left = source.left;\r\n\tthis.right = source.right;\r\n\tthis.top = source.top;\r\n\tthis.bottom = source.bottom;\r\n\tthis.near = source.near;\r\n\tthis.far = source.far;\r\n\t\r\n\tthis.zoom = source.zoom;\r\n\t\r\n\treturn this;\r\n\t\t\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.object.zoom = this.zoom;\r\n\tdata.object.left = this.left;\r\n\tdata.object.right = this.right;\r\n\tdata.object.top = this.top;\r\n\tdata.object.bottom = this.bottom;\r\n\tdata.object.near = this.near;\r\n\tdata.object.far = this.far;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/cameras/PerspectiveCamera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author greggman / http://games.greggman.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.type = 'PerspectiveCamera';\r\n\r\n\tthis.zoom = 1;\r\n\r\n\tthis.fov = fov !== undefined ? fov : 50;\r\n\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\tthis.near = near !== undefined ? near : 0.1;\r\n\tthis.far = far !== undefined ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\r\nTHREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;\r\n\r\n\r\n/**\r\n * Uses Focal Length (in mm) to estimate and set FOV\r\n * 35mm (full-frame) camera is used if frame size is not specified;\r\n * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\r\n\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\r\n\tthis.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\n\r\n/**\r\n * Sets an offset in a larger frustum. This is useful for multi-window or\r\n * multi-monitor/multi-machine setups.\r\n *\r\n * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n * the monitors are in grid like this\r\n *\r\n *   +---+---+---+\r\n *   | A | B | C |\r\n *   +---+---+---+\r\n *   | D | E | F |\r\n *   +---+---+---+\r\n *\r\n * then for each monitor you would call it like this\r\n *\r\n *   var w = 1920;\r\n *   var h = 1080;\r\n *   var fullWidth = w * 3;\r\n *   var fullHeight = h * 2;\r\n *\r\n *   --A--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n *   --B--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n *   --C--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n *   --D--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n *   --E--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n *   --F--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n *\r\n *   Note there is no reason monitors have to be the same size or in a grid.\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\tthis.fullWidth = fullWidth;\r\n\tthis.fullHeight = fullHeight;\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\n\r\nTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tvar fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );\r\n\r\n\tif ( this.fullWidth ) {\r\n\r\n\t\tvar aspect = this.fullWidth / this.fullHeight;\r\n\t\tvar top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;\r\n\t\tvar bottom = - top;\r\n\t\tvar left = aspect * bottom;\r\n\t\tvar right = aspect * top;\r\n\t\tvar width = Math.abs( right - left );\r\n\t\tvar height = Math.abs( top - bottom );\r\n\r\n\t\tthis.projectionMatrix.makeFrustum(\r\n\t\t\tleft + this.x * width / this.fullWidth,\r\n\t\t\tleft + ( this.x + this.width ) * width / this.fullWidth,\r\n\t\t\ttop - ( this.y + this.height ) * height / this.fullHeight,\r\n\t\t\ttop - this.y * height / this.fullHeight,\r\n\t\t\tthis.near,\r\n\t\t\tthis.far\r\n\t\t);\r\n\r\n\t} else {\r\n\r\n\t\tthis.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype.copy = function ( source ) {\r\n\t\r\n\tTHREE.Camera.prototype.copy.call( this, source );\r\n\t\r\n\tthis.fov = source.fov;\r\n\tthis.aspect = source.aspect;\r\n\tthis.near = source.near;\r\n\tthis.far = source.far;\r\n\t\r\n\tthis.zoom = source.zoom;\r\n\t\r\n\treturn this;\r\n\t\t\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.object.zoom = this.zoom;\r\n\tdata.object.fov = this.fov;\r\n\tdata.object.aspect = this.aspect;\r\n\tdata.object.near = this.near;\r\n\tdata.object.far = this.far;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/lights/Light.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Light = function ( color ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Light';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\r\n\tthis.receiveShadow = undefined;\r\n\r\n};\r\n\r\nTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Light.prototype.constructor = THREE.Light;\r\n\r\nObject.defineProperties( THREE.Light.prototype, {\r\n\tonlyShadow: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\t\t}\r\n\t},\r\n\tshadowCameraFov: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.camera.fov = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraLeft: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.camera.left = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraRight: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.camera.right = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraTop: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.camera.top = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraBottom: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.camera.bottom = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraNear: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.camera.near = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraFar: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.camera.far = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraVisible: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow ) instead.' );\r\n\t\t}\r\n\t},\r\n\tshadowBias: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.bias = value;\r\n\t\t}\r\n\t},\r\n\tshadowDarkness: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.darkness = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapWidth: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.mapSize.width = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapHeight: {\r\n\t\tset: function ( value ) {\r\n\t\t\tthis.shadow.mapSize.height = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nTHREE.Light.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Light.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.object.color = this.color.getHex();\r\n\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\r\n\r\n\tif ( this.intensity !== undefined ) data.object.intensity = this.intensity;\r\n\tif ( this.distance !== undefined ) data.object.distance = this.distance;\r\n\tif ( this.angle !== undefined ) data.object.angle = this.angle;\r\n\tif ( this.decay !== undefined ) data.object.decay = this.decay;\r\n\tif ( this.exponent !== undefined ) data.object.exponent = this.exponent;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/lights/LightShadow.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LightShadow = function ( camera ) {\r\n\r\n\tthis.camera = camera;\r\n\r\n\tthis.bias = 0;\r\n\tthis.darkness = 1;\r\n\r\n\tthis.mapSize = new THREE.Vector2( 512, 512 );\r\n\r\n\tthis.map = null;\r\n\tthis.matrix = null;\r\n\r\n};\r\n\r\nTHREE.LightShadow.prototype = {\r\n\r\n\tconstructor: THREE.LightShadow,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.camera = source.camera.clone();\r\n\r\n\t\tthis.bias = source.bias;\r\n\t\tthis.darkness = source.darkness;\r\n\r\n\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/lights/AmbientLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AmbientLight = function ( color ) {\r\n\r\n\tTHREE.Light.call( this, color );\r\n\r\n\tthis.type = 'AmbientLight';\r\n\r\n\tthis.castShadow = undefined;\r\n\r\n};\r\n\r\nTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.AmbientLight.prototype.constructor = THREE.AmbientLight;\r\n\r\n// File:src/lights/DirectionalLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DirectionalLight = function ( color, intensity ) {\r\n\r\n\tTHREE.Light.call( this, color );\r\n\r\n\tthis.type = 'DirectionalLight';\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n\tthis.shadow = new THREE.LightShadow( new THREE.OrthographicCamera( - 500, 500, 500, - 500, 50, 5000 ) );\r\n\r\n};\r\n\r\nTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;\r\n\r\nTHREE.DirectionalLight.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\tthis.intensity = source.intensity;\r\n\tthis.target = source.target.clone();\r\n\r\n\tthis.shadow = source.shadow.clone();\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/lights/HemisphereLight.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\r\n\r\n\tTHREE.Light.call( this, skyColor );\r\n\r\n\tthis.type = 'HemisphereLight';\r\n\r\n\tthis.castShadow = undefined;\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.groundColor = new THREE.Color( groundColor );\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n};\r\n\r\nTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;\r\n\r\nTHREE.HemisphereLight.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\tthis.groundColor.copy( source.groundColor );\r\n\tthis.intensity = source.intensity;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/lights/PointLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\n\r\nTHREE.PointLight = function ( color, intensity, distance, decay ) {\r\n\r\n\tTHREE.Light.call( this, color );\r\n\r\n\tthis.type = 'PointLight';\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 1, 500 ) );\r\n\r\n};\r\n\r\nTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.PointLight.prototype.constructor = THREE.PointLight;\r\n\r\nTHREE.PointLight.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\tthis.intensity = source.intensity;\r\n\tthis.distance = source.distance;\r\n\tthis.decay = source.decay;\r\n\r\n\tthis.shadow = source.shadow.clone();\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/lights/SpotLight.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpotLight = function ( color, intensity, distance, angle, exponent, decay ) {\r\n\r\n\tTHREE.Light.call( this, color );\r\n\r\n\tthis.type = 'SpotLight';\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\tthis.exponent = ( exponent !== undefined ) ? exponent : 10;\r\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 50, 1, 50, 5000 ) );\r\n\r\n};\r\n\r\nTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.SpotLight.prototype.constructor = THREE.SpotLight;\r\n\r\nTHREE.SpotLight.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\tthis.intensity = source.intensity;\r\n\tthis.distance = source.distance;\r\n\tthis.angle = source.angle;\r\n\tthis.exponent = source.exponent;\r\n\tthis.decay = source.decay;\r\n\r\n\tthis.target = source.target.clone();\r\n\r\n\tthis.shadow = source.shadow.clone();\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/loaders/Cache.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Cache = {\r\n\r\n\tenabled: false,\r\n\r\n\tfiles: {},\r\n\r\n\tadd: function ( key, file ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\tthis.files[ key ] = file;\r\n\r\n\t},\r\n\r\n\tget: function ( key ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\treturn this.files[ key ];\r\n\r\n\t},\r\n\r\n\tremove: function ( key ) {\r\n\r\n\t\tdelete this.files[ key ];\r\n\r\n\t},\r\n\r\n\tclear: function () {\r\n\r\n\t\tthis.files = {};\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/Loader.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Loader = function () {\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function () {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n};\r\n\r\nTHREE.Loader.prototype = {\r\n\r\n\tconstructor: THREE.Loader,\r\n\r\n\tcrossOrigin: undefined,\r\n\r\n\textractUrlBase: function ( url ) {\r\n\r\n\t\tvar parts = url.split( '/' );\r\n\r\n\t\tif ( parts.length === 1 ) return './';\r\n\r\n\t\tparts.pop();\r\n\r\n\t\treturn parts.join( '/' ) + '/';\r\n\r\n\t},\r\n\r\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\r\n\r\n\t\tvar array = [];\r\n\r\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\r\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tcreateMaterial: ( function () {\r\n\r\n\t\tvar color, textureLoader, materialLoader;\r\n\r\n\t\treturn function ( m, texturePath, crossOrigin ) {\r\n\r\n\t\t\tif ( color === undefined ) color = new THREE.Color();\r\n\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\r\n\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\r\n\r\n\t\t\t// convert from old material format\r\n\r\n\t\t\tvar textures = {};\r\n\r\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\r\n\r\n\t\t\t\tvar fullPath = texturePath + path;\r\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\r\n\r\n\t\t\t\tvar texture;\r\n\r\n\t\t\t\tif ( loader !== null ) {\r\n\r\n\t\t\t\t\ttexture = loader.load( fullPath );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\r\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( repeat !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\r\n\r\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.offset.fromArray( offset );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrap !== undefined ) {\r\n\r\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\r\n\r\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( anisotropy !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.anisotropy = anisotropy;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uuid = THREE.Math.generateUUID();\r\n\r\n\t\t\t\ttextures[ uuid ] = texture;\r\n\r\n\t\t\t\treturn uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar json = {\r\n\t\t\t\tuuid: THREE.Math.generateUUID(),\r\n\t\t\t\ttype: 'MeshLambertMaterial'\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var name in m ) {\r\n\r\n\t\t\t\tvar value = m[ name ];\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\t\t\t\t\tcase 'DbgColor':\r\n\t\t\t\t\t\tjson.color = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'DbgIndex':\r\n\t\t\t\t\tcase 'opticalDensity':\r\n\t\t\t\t\tcase 'illumination':\r\n\t\t\t\t\t\t// These were never supported\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'DbgName':\r\n\t\t\t\t\t\tjson.name = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'blending':\r\n\t\t\t\t\t\tjson.blending = THREE[ value ];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorDiffuse':\r\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorSpecular':\r\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorEmissive':\r\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'specularCoef':\r\n\t\t\t\t\t\tjson.shininess = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'shading':\r\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\r\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapDiffuse':\r\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapDiffuseRepeat':\r\n\t\t\t\t\tcase 'mapDiffuseOffset':\r\n\t\t\t\t\tcase 'mapDiffuseWrap':\r\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapLight':\r\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapLightRepeat':\r\n\t\t\t\t\tcase 'mapLightOffset':\r\n\t\t\t\t\tcase 'mapLightWrap':\r\n\t\t\t\t\tcase 'mapLightAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAO':\r\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAORepeat':\r\n\t\t\t\t\tcase 'mapAOOffset':\r\n\t\t\t\t\tcase 'mapAOWrap':\r\n\t\t\t\t\tcase 'mapAOAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBump':\r\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBumpScale':\r\n\t\t\t\t\t\tjson.bumpScale = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBumpRepeat':\r\n\t\t\t\t\tcase 'mapBumpOffset':\r\n\t\t\t\t\tcase 'mapBumpWrap':\r\n\t\t\t\t\tcase 'mapBumpAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormal':\r\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormalFactor':\r\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormalRepeat':\r\n\t\t\t\t\tcase 'mapNormalOffset':\r\n\t\t\t\t\tcase 'mapNormalWrap':\r\n\t\t\t\t\tcase 'mapNormalAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapSpecular':\r\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapSpecularRepeat':\r\n\t\t\t\t\tcase 'mapSpecularOffset':\r\n\t\t\t\t\tcase 'mapSpecularWrap':\r\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAlpha':\r\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAlphaRepeat':\r\n\t\t\t\t\tcase 'mapAlphaOffset':\r\n\t\t\t\t\tcase 'mapAlphaWrap':\r\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'flipSided':\r\n\t\t\t\t\t\tjson.side = THREE.BackSide;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'doubleSided':\r\n\t\t\t\t\t\tjson.side = THREE.DoubleSide;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'transparency':\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader: transparency has been renamed to opacity' );\r\n\t\t\t\t\t\tjson.opacity = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'opacity':\r\n\t\t\t\t\tcase 'transparent':\r\n\t\t\t\t\tcase 'depthTest':\r\n\t\t\t\t\tcase 'depthWrite':\r\n\t\t\t\t\tcase 'transparent':\r\n\t\t\t\t\tcase 'visible':\r\n\t\t\t\t\tcase 'wireframe':\r\n\t\t\t\t\t\tjson[ name ] = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'vertexColors':\r\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\r\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error( 'Loader.createMaterial: Unsupported', name, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\r\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\r\n\r\n\t\t\tmaterialLoader.setTextures( textures );\r\n\r\n\t\t\treturn materialLoader.parse( json );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n};\r\n\r\nTHREE.Loader.Handlers = {\r\n\r\n\thandlers: [],\r\n\r\n\tadd: function ( regex, loader ) {\r\n\r\n\t\tthis.handlers.push( regex, loader );\r\n\r\n\t},\r\n\r\n\tget: function ( file ) {\r\n\r\n\t\tvar handlers = this.handlers;\r\n\r\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\tvar regex = handlers[ i ];\r\n\t\t\tvar loader  = handlers[ i + 1 ];\r\n\r\n\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\treturn loader;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/XHRLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.XHRLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.XHRLoader.prototype = {\r\n\r\n\tconstructor: THREE.XHRLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar cached = THREE.Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tif ( onLoad ) {\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tonLoad( cached );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tvar request = new XMLHttpRequest();\r\n\t\trequest.open( 'GET', url, true );\r\n\r\n\t\trequest.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\tvar response = event.target.response;\r\n\r\n\t\t\tTHREE.Cache.add( url, response );\r\n\r\n\t\t\tif ( onLoad ) onLoad( response );\r\n\r\n\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( onProgress !== undefined ) {\r\n\r\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\tonProgress( event );\r\n\r\n\t\t\t}, false );\r\n\r\n\t\t}\r\n\r\n\t\trequest.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;\r\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\r\n\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\r\n\r\n\t\trequest.send( null );\r\n\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t\treturn request;\r\n\r\n\t},\r\n\r\n\tsetResponseType: function ( value ) {\r\n\r\n\t\tthis.responseType = value;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetWithCredentials: function ( value ) {\r\n\r\n\t\tthis.withCredentials = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/ImageLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.ImageLoader.prototype = {\r\n\r\n\tconstructor: THREE.ImageLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar cached = THREE.Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\tif ( onLoad ) {\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tonLoad( cached );\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tvar image = document.createElement( 'img' );\r\n\r\n\t\timage.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\tTHREE.Cache.add( url, this );\r\n\r\n\t\t\tif ( onLoad ) onLoad( this );\r\n\r\n\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( onProgress !== undefined ) {\r\n\r\n\t\t\timage.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\tonProgress( event );\r\n\r\n\t\t\t}, false );\r\n\r\n\t\t}\r\n\r\n\t\timage.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\r\n\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t\timage.src = url;\r\n\r\n\t\treturn image;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/JSONLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.JSONLoader = function ( manager ) {\r\n\r\n\tif ( typeof manager === 'boolean' ) {\r\n\r\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\r\n\t\tmanager = undefined;\r\n\r\n\t}\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\tthis.withCredentials = false;\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype = {\r\n\r\n\tconstructor: THREE.JSONLoader,\r\n\r\n\t// Deprecated\r\n\r\n\tget statusDomElement () {\r\n\r\n\t\tif ( this._statusDomElement === undefined ) {\r\n\r\n\t\t\tthis._statusDomElement = document.createElement( 'div' );\r\n\r\n\t\t}\r\n\r\n\t\tconsole.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );\r\n\t\treturn this._statusDomElement;\r\n\r\n\t},\r\n\r\n\tload: function( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tvar json = JSON.parse( text );\r\n\t\t\tvar metadata = json.metadata;\r\n\r\n\t\t\tif ( metadata !== undefined ) {\r\n\r\n\t\t\t\tif ( metadata.type === 'object' ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( metadata.type === 'scene' ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar object = scope.parse( json, texturePath );\r\n\t\t\tonLoad( object.geometry, object.materials );\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetTexturePath: function ( value ) {\r\n\r\n\t\tthis.texturePath = value;\r\n\r\n\t},\r\n\r\n\tparse: function ( json, texturePath ) {\r\n\r\n\t\tvar geometry = new THREE.Geometry(),\r\n\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\r\n\r\n\t\tparseModel( scale );\r\n\r\n\t\tparseSkin();\r\n\t\tparseMorphing( scale );\r\n\t\tparseAnimations();\r\n\r\n\t\tgeometry.computeFaceNormals();\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tfunction parseModel( scale ) {\r\n\r\n\t\t\tfunction isBitSet( value, position ) {\r\n\r\n\t\t\t\treturn value & ( 1 << position );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar i, j, fi,\r\n\r\n\t\t\toffset, zLength,\r\n\r\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\r\n\t\t\ttype,\r\n\t\t\tisQuad,\r\n\t\t\thasMaterial,\r\n\t\t\thasFaceVertexUv,\r\n\t\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\t\thasFaceColor, hasFaceVertexColor,\r\n\r\n\t\tvertex, face, faceA, faceB, hex, normal,\r\n\r\n\t\t\tuvLayer, uv, u, v,\r\n\r\n\t\t\tfaces = json.faces,\r\n\t\t\tvertices = json.vertices,\r\n\t\t\tnormals = json.normals,\r\n\t\t\tcolors = json.colors,\r\n\r\n\t\t\tnUvLayers = 0;\r\n\r\n\t\t\tif ( json.uvs !== undefined ) {\r\n\r\n\t\t\t\t// disregard empty arrays\r\n\r\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset = 0;\r\n\t\t\tzLength = vertices.length;\r\n\r\n\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\tvertex = new THREE.Vector3();\r\n\r\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\r\n\t\t\t\tgeometry.vertices.push( vertex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset = 0;\r\n\t\t\tzLength = faces.length;\r\n\r\n\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\ttype = faces[ offset ++ ];\r\n\r\n\r\n\t\t\t\tisQuad              = isBitSet( type, 0 );\r\n\t\t\t\thasMaterial         = isBitSet( type, 1 );\r\n\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\r\n\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\r\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\r\n\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\r\n\r\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\r\n\t\t\t\tif ( isQuad ) {\r\n\r\n\t\t\t\t\tfaceA = new THREE.Face3();\r\n\t\t\t\t\tfaceA.a = faces[ offset ];\r\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\r\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\tfaceB = new THREE.Face3();\r\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\r\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\r\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\r\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\r\n\r\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\tfaceA.normal.set(\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\r\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\r\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\tfaceA.color.setHex( hex );\r\n\t\t\t\t\t\tfaceB.color.setHex( hex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\r\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faces.push( faceA );\r\n\t\t\t\t\tgeometry.faces.push( faceB );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface = new THREE.Face3();\r\n\t\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\t\tface.c = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\r\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\tface.normal.set(\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faces.push( face );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction parseSkin() {\r\n\r\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\r\n\r\n\t\t\tif ( json.skinWeights ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\tvar x =                               json.skinWeights[ i ];\r\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\r\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\r\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.skinIndices ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\tvar a =                               json.skinIndices[ i ];\r\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\r\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\r\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.bones = json.bones;\r\n\r\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\r\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction parseMorphing( scale ) {\r\n\r\n\t\t\tif ( json.morphTargets !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\r\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\r\n\r\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\r\n\t\t\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\r\n\t\t\t\t\t\tdstVertices.push( vertex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\r\n\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\r\n\r\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseAnimations() {\r\n\r\n\t\t\tvar outputAnimations = [];\r\n\r\n\t\t\t// parse old style Bone/Hierarchy animations\r\n\t\t\tvar animations = [];\r\n\t\t\tif ( json.animation !== undefined ) {\r\n\t\t\t\tanimations.push( json.animation );\r\n\t\t\t}\r\n\t\t\tif ( json.animations !== undefined ) {\r\n\t\t\t\tif ( json.animations.length ) {\r\n\t\t\t\t\tanimations = animations.concat( json.animations );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tanimations.push( json.animations );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\r\n\r\n\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[i], geometry.bones );\r\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// parse implicit morph animations\r\n\t\t\tif ( geometry.morphTargets ) {\r\n\r\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\r\n\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\r\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\r\n\r\n\t\t};\r\n\r\n\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\r\n\r\n\t\t\treturn { geometry: geometry };\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\r\n\r\n\t\t\treturn { geometry: geometry, materials: materials };\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/LoadingManager.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\r\n\r\n\tthis.onStart = undefined;\r\n\tthis.onLoad = onLoad;\r\n\tthis.onProgress = onProgress;\r\n\tthis.onError = onError;\r\n\r\n\tthis.itemStart = function ( url ) {\r\n\r\n\t\titemsTotal ++;\r\n\r\n\t\tif ( isLoading === false ) {\r\n\r\n\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tisLoading = true;\r\n\r\n\t};\r\n\r\n\tthis.itemEnd = function ( url ) {\r\n\r\n\t\titemsLoaded ++;\r\n\r\n\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t}\r\n\r\n\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\tisLoading = false;\r\n\r\n\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.itemError = function ( url ) {\r\n\r\n\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\tscope.onError( url );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\r\n\r\n// File:src/loaders/BufferGeometryLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferGeometryLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.BufferGeometryLoader.prototype = {\r\n\r\n\tconstructor: THREE.BufferGeometryLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\t\tvar index = json.data.index;\r\n\r\n\t\tif ( index !== undefined ) {\r\n\r\n\t\t\tvar typedArray = new self[ index.type ]( index.array );\r\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = json.data.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ key ];\r\n\t\t\tvar typedArray = new self[ attribute.type ]( attribute.array );\r\n\r\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n\t\tif ( groups !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\tgeometry.addGroup( group.start, group.count );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar boundingSphere = json.data.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== undefined ) {\r\n\r\n\t\t\tvar center = new THREE.Vector3();\r\n\r\n\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\r\n\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/MaterialLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MaterialLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\tthis.textures = {};\r\n\r\n};\r\n\r\nTHREE.MaterialLoader.prototype = {\r\n\r\n\tconstructor: THREE.MaterialLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetTextures: function ( value ) {\r\n\r\n\t\tthis.textures = value;\r\n\r\n\t},\r\n\r\n\tgetTexture: function ( name ) {\r\n\r\n\t\tvar textures = this.textures;\r\n\r\n\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t}\r\n\r\n\t\treturn textures[ name ];\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\tvar material = new THREE[ json.type ];\r\n\t\tmaterial.uuid = json.uuid;\r\n\r\n\t\tif ( json.name !== undefined ) material.name = json.name;\r\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\r\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\r\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\r\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\r\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\r\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\r\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\r\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\r\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\r\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\r\n\t\tif ( json.side !== undefined ) material.side = json.side;\r\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\r\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\r\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\r\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\r\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\r\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\r\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\r\n\r\n\t\t// for PointsMaterial\r\n\t\tif ( json.size !== undefined ) material.size = json.size;\r\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\r\n\r\n\t\t// maps\r\n\r\n\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\r\n\r\n\t\tif ( json.alphaMap !== undefined ) {\r\n\r\n\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\r\n\t\t\tmaterial.transparent = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\r\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\r\n\r\n\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\r\n\t\tif ( json.normalScale )\tmaterial.normalScale = new THREE.Vector2( json.normalScale, json.normalScale );\r\n\r\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\r\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\r\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\r\n\r\n\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\r\n\r\n\t\tif ( json.envMap !== undefined ) {\r\n\r\n\t\t\tmaterial.envMap = this.getTexture( json.envMap );\r\n\t\t\tmaterial.combine = THREE.MultiplyOperation;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.reflectivity ) material.reflectivity = json.reflectivity;\r\n\r\n\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\r\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\r\n\r\n\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\r\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\r\n\r\n\t\t// MeshFaceMaterial\r\n\r\n\t\tif ( json.materials !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/ObjectLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ObjectLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\tthis.texturePath = '';\r\n\r\n};\r\n\r\nTHREE.ObjectLoader.prototype = {\r\n\r\n\tconstructor: THREE.ObjectLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.texturePath === '' ) {\r\n\r\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tscope.parse( JSON.parse( text ), onLoad );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTexturePath: function ( value ) {\r\n\r\n\t\tthis.texturePath = value;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tparse: function ( json, onLoad ) {\r\n\r\n\t\tvar geometries = this.parseGeometries( json.geometries );\r\n\r\n\t\tvar images = this.parseImages( json.images, function () {\r\n\r\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t} );\r\n\r\n\t\tvar textures  = this.parseTextures( json.textures, images );\r\n\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\r\n\t\tif ( json.animations ) {\r\n\r\n\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\r\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\r\n\t},\r\n\r\n\tparseGeometries: function ( json ) {\r\n\r\n\t\tvar geometries = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\r\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar geometry;\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.BoxGeometry(\r\n\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.CircleBufferGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'CircleGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.CircleGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'CylinderGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.CylinderGeometry(\r\n\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SphereGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.SphereGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.SphereBufferGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.DodecahedronGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.IcosahedronGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'OctahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.OctahedronGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.TetrahedronGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RingGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.RingGeometry(\r\n\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TorusGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.TorusGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.TorusKnotGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\tdata.q,\r\n\t\t\t\t\t\t\tdata.heightScale\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'BufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'Geometry':\r\n\r\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\r\n\r\n\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometries;\r\n\r\n\t},\r\n\r\n\tparseMaterials: function ( json, textures ) {\r\n\r\n\t\tvar materials = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tvar loader = new THREE.MaterialLoader();\r\n\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar material = loader.parse( json[ i ] );\r\n\t\t\t\tmaterials[ material.uuid ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn materials;\r\n\r\n\t},\r\n\r\n\tparseAnimations: function ( json ) {\r\n\r\n\t\tvar animations = [];\r\n\r\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\tvar clip = THREE.AnimationClip.parse( json[i] );\r\n\r\n\t\t\tanimations.push( clip );\r\n\r\n\t\t}\r\n\r\n\t\treturn animations;\r\n\r\n\t},\r\n\r\n\tparseImages: function ( json, onLoad ) {\r\n\r\n\t\tvar scope = this;\r\n\t\tvar images = {};\r\n\r\n\t\tfunction loadImage( url ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\treturn loader.load( url, function () {\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\tvar manager = new THREE.LoadingManager( onLoad );\r\n\r\n\t\t\tvar loader = new THREE.ImageLoader( manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar image = json[ i ];\r\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\r\n\r\n\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn images;\r\n\r\n\t},\r\n\r\n\tparseTextures: function ( json, images ) {\r\n\r\n\t\tfunction parseConstant( value ) {\r\n\r\n\t\t\tif ( typeof( value ) === 'number' ) return value;\r\n\r\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\r\n\t\t\treturn THREE[ value ];\r\n\r\n\t\t}\r\n\r\n\t\tvar textures = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tif ( data.image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\ttexture.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\r\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\r\n\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\r\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\r\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\r\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\r\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\r\n\t\t\t\tif ( Array.isArray( data.wrap ) ) {\r\n\r\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\r\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextures[ data.uuid ] = texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn textures;\r\n\r\n\t},\r\n\r\n\tparseObject: function () {\r\n\r\n\t\tvar matrix = new THREE.Matrix4();\r\n\r\n\t\treturn function ( data, geometries, materials ) {\r\n\r\n\t\t\tvar object;\r\n\r\n\t\t\tfunction getGeometry( name ) {\r\n\r\n\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn geometries[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMaterial( name ) {\r\n\r\n\t\t\t\tif ( name === undefined ) return undefined;\r\n\r\n\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn materials[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\tcase 'Scene':\r\n\r\n\t\t\t\t\tobject = new THREE.Scene();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PerspectiveCamera':\r\n\r\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'OrthographicCamera':\r\n\r\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'AmbientLight':\r\n\r\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\r\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\r\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\r\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'HemisphereLight':\r\n\r\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Mesh':\r\n\r\n\t\t\t\t\tobject = new THREE.Mesh( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LOD':\r\n\r\n\t\t\t\t\tobject = new THREE.LOD();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Line':\r\n\r\n\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointCloud':\r\n\t\t\t\tcase 'Points':\r\n\r\n\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Sprite':\r\n\r\n\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Group':\r\n\r\n\t\t\t\t\tobject = new THREE.Group();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tobject = new THREE.Object3D();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.uuid = data.uuid;\r\n\r\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\r\n\t\t\tif ( data.matrix !== undefined ) {\r\n\r\n\t\t\t\tmatrix.fromArray( data.matrix );\r\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\r\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\r\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\r\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\r\n\r\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\r\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\r\n\r\n\t\t\tif ( data.children !== undefined ) {\r\n\r\n\t\t\t\tfor ( var child in data.children ) {\r\n\r\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.type === 'LOD' ) {\r\n\r\n\t\t\t\tvar levels = data.levels;\r\n\r\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\r\n\t\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t}()\r\n\r\n};\r\n\r\n// File:src/loaders/TextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.TextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.TextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.TextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture = new THREE.Texture();\r\n\r\n\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.load( url, function ( image ) {\r\n\r\n\t\t\ttexture.image = image;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\t\tonLoad( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/CubeTextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CubeTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.CubeTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.CubeTextureLoader,\r\n\r\n\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture = new THREE.CubeTexture( [] );\r\n\r\n\t\tvar loader = new THREE.ImageLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar loaded = 0;\r\n\r\n\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\r\n\t\t\t\ttexture.images[ i ] = image;\r\n\r\n\t\t\t\tloaded ++;\r\n\r\n\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, onError );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\r\n\t\t\tloadTexture( i );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/BinaryTextureLoader.js\r\n\r\n/**\r\n * @author Nikos M. / https://github.com/foo123/\r\n *\r\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n */\r\n\r\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\t// override in sub classes\r\n\tthis._parser = null;\r\n\r\n};\r\n\r\nTHREE.BinaryTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.BinaryTextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar texture = new THREE.DataTexture();\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\tvar texData = scope._parser( buffer );\r\n\r\n\t\t\tif ( ! texData ) return;\r\n\r\n\t\t\tif ( undefined !== texData.image ) {\r\n\r\n\t\t\t\ttexture.image = texData.image;\r\n\r\n\t\t\t} else if ( undefined !== texData.data ) {\r\n\r\n\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\ttexture.image.data = texData.data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\r\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\r\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\r\n\r\n\t\t\tif ( undefined !== texData.format ) {\r\n\r\n\t\t\t\ttexture.format = texData.format;\r\n\r\n\t\t\t}\r\n\t\t\tif ( undefined !== texData.type ) {\r\n\r\n\t\t\t\ttexture.type = texData.type;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( undefined !== texData.mipmaps ) {\r\n\r\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( 1 === texData.mipmapCount ) {\r\n\r\n\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/CompressedTextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n */\r\n\r\nTHREE.CompressedTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\t// override in sub classes\r\n\tthis._parser = null;\r\n\r\n};\r\n\r\n\r\nTHREE.CompressedTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.CompressedTextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar images = [];\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.image = images;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\tvar loaded = 0;\r\n\r\n\t\t\tvar loadTexture = function ( i ) {\r\n\r\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\r\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\t\timages[ i ] = {\r\n\t\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tloaded += 1;\r\n\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n \t\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, onProgress, onError );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\r\n\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\tif ( texDatas.isCubemap ) {\r\n\r\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/materials/Material.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Material = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Material';\r\n\r\n\tthis.side = THREE.FrontSide;\r\n\r\n\tthis.opacity = 1;\r\n\tthis.transparent = false;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.blendSrc = THREE.SrcAlphaFactor;\r\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\r\n\tthis.blendEquation = THREE.AddEquation;\r\n\tthis.blendSrcAlpha = null;\r\n\tthis.blendDstAlpha = null;\r\n\tthis.blendEquationAlpha = null;\r\n\r\n\tthis.depthFunc = THREE.LessEqualDepth;\r\n\tthis.depthTest = true;\r\n\tthis.depthWrite = true;\r\n\r\n\tthis.colorWrite = true;\r\n\r\n\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\tthis.polygonOffset = false;\r\n\tthis.polygonOffsetFactor = 0;\r\n\tthis.polygonOffsetUnits = 0;\r\n\r\n\tthis.alphaTest = 0;\r\n\r\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis._needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Material.prototype = {\r\n\r\n\tconstructor: THREE.Material,\r\n\r\n\tget needsUpdate () {\r\n\r\n\t\treturn this._needsUpdate;\r\n\r\n\t},\r\n\r\n\tset needsUpdate ( value ) {\r\n\r\n\t\tif ( value === true ) this.update();\r\n\r\n\t\tthis._needsUpdate = value;\r\n\r\n\t},\r\n\r\n\tsetValues: function ( values ) {\r\n\r\n\t\tif ( values === undefined ) return;\r\n\r\n\t\tfor ( var key in values ) {\r\n\r\n\t\t\tvar newValue = values[ key ];\r\n\r\n\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else if ( key === 'overdraw' ) {\r\n\r\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\r\n\t\t\t\tthis[ key ] = Number( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Material',\r\n\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Material serialization\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\r\n\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\r\n\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\r\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\r\n\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\tif ( this.bumpMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t}\r\n\t\tif ( this.normalMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.normalScale = this.normalScale; // Removed for now, causes issue in editor ui.js\r\n\r\n\t\t}\r\n\t\tif ( this.displacementMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t}\r\n\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\t\tif ( this.envMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\tif ( this.vertexColors !== undefined && this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\r\n\t\tif ( this.shading !== undefined && this.shading !== THREE.SmoothShading ) data.shading = this.shading;\r\n\t\tif ( this.blending !== undefined && this.blending !== THREE.NormalBlending ) data.blending = this.blending;\r\n\t\tif ( this.side !== undefined && this.side !== THREE.FrontSide ) data.side = this.side;\r\n\r\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\r\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\r\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.side = source.side;\r\n\r\n\t\tthis.opacity = source.opacity;\r\n\t\tthis.transparent = source.transparent;\r\n\r\n\t\tthis.blending = source.blending;\r\n\r\n\t\tthis.blendSrc = source.blendSrc;\r\n\t\tthis.blendDst = source.blendDst;\r\n\t\tthis.blendEquation = source.blendEquation;\r\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\r\n\t\tthis.depthFunc = source.depthFunc;\r\n\t\tthis.depthTest = source.depthTest;\r\n\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\tthis.precision = source.precision;\r\n\r\n\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\tthis.alphaTest = source.alphaTest;\r\n\r\n\t\tthis.overdraw = source.overdraw;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdate: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'update' } );\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t},\r\n\r\n\t// Deprecated\r\n\r\n\tget wrapAround () {\r\n\r\n\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\r\n\t},\r\n\r\n\tset wrapAround ( boolean ) {\r\n\r\n\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\r\n\t},\r\n\r\n\tget wrapRGB () {\r\n\r\n\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\r\n\t\treturn new THREE.Color();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.Material.prototype );\r\n\r\nTHREE.MaterialIdCount = 0;\r\n\r\n// File:src/materials/LineBasicMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  linewidth: <float>,\r\n *  linecap: \"round\",\r\n *  linejoin: \"round\",\r\n *\r\n *  vertexColors: <bool>\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'LineBasicMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\tthis.linecap = 'round';\r\n\tthis.linejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\r\n\r\nTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.linewidth = source.linewidth;\r\n\tthis.linecap = source.linecap;\r\n\tthis.linejoin = source.linejoin;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/LineDashedMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  linewidth: <float>,\r\n *\r\n *  scale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>,\r\n *\r\n *  vertexColors: <bool>\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineDashedMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'LineDashedMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.scale = 1;\r\n\tthis.dashSize = 3;\r\n\tthis.gapSize = 1;\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\r\n\r\nTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\t\r\n\tthis.linewidth = source.linewidth;\r\n\r\n\tthis.scale = source.scale;\r\n\tthis.dashSize = source.dashSize;\r\n\tthis.gapSize = source.gapSize;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshBasicMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshBasicMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\r\n\r\nTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\tthis.shading = source.shading;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\t\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshLambertMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  emissive: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshLambertMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshLambertMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\r\n\r\nTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.emissive.copy( source.emissive );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshPhongMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  emissive: <hex>,\r\n *  specular: <hex>,\r\n *  shininess: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshPhongMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshPhongMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.specular = new THREE.Color( 0x111111 );\r\n\tthis.shininess = 30;\r\n\r\n\tthis.metal = false;\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.displacementMap = null;\r\n\tthis.displacementScale = 1;\r\n\tthis.displacementBias = 0;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\r\n\r\nTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.specular.copy( source.specular );\r\n\tthis.shininess = source.shininess;\r\n\r\n\tthis.metal = source.metal;\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\r\n\tthis.bumpMap = source.bumpMap;\r\n\tthis.bumpScale = source.bumpScale;\r\n\r\n\tthis.normalMap = source.normalMap;\r\n\tthis.normalScale.copy( source.normalScale );\r\n\r\n\tthis.displacementMap = source.displacementMap;\r\n\tthis.displacementScale = source.displacementScale;\r\n\tthis.displacementBias = source.displacementBias;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\tthis.shading = source.shading;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshDepthMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshDepthMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshDepthMaterial';\r\n\r\n\tthis.morphTargets = false;\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\r\n\r\nTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshNormalMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  shading: THREE.FlatShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshNormalMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this, parameters );\r\n\r\n\tthis.type = 'MeshNormalMaterial';\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\r\n\r\nTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MultiMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MultiMaterial = function ( materials ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.type = 'MultiMaterial';\r\n\r\n\tthis.materials = materials instanceof Array ? materials : [];\r\n\r\n\tthis.visible = true;\r\n\r\n};\r\n\r\nTHREE.MultiMaterial.prototype = {\r\n\r\n\tconstructor: THREE.MultiMaterial,\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar output = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.2,\r\n\t\t\t\ttype: 'material',\r\n\t\t\t\tgenerator: 'MaterialExporter'\r\n\t\t\t},\r\n\t\t\tuuid: this.uuid,\r\n\t\t\ttype: this.type,\r\n\t\t\tmaterials: []\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0, l = this.materials.length; i < l; i ++ ) {\r\n\r\n\t\t\toutput.materials.push( this.materials[ i ].toJSON() );\r\n\r\n\t\t}\r\n\r\n\t\toutput.visible = this.visible;\r\n\r\n\t\treturn output;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar material = new this.constructor();\r\n\r\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\r\n\r\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.visible = this.visible;\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// backwards compatibility\r\n\r\nTHREE.MeshFaceMaterial = THREE.MultiMaterial;\r\n\r\n// File:src/materials/PointsMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  size: <float>,\r\n *  sizeAttenuation: <bool>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  vertexColors: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.PointsMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'PointsMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.size = 1;\r\n\tthis.sizeAttenuation = true;\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\r\n\r\nTHREE.PointsMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.size = source.size;\r\n\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// backwards compatibility\r\n\r\nTHREE.PointCloudMaterial = function ( parameters ) {\r\n\r\n\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\treturn new THREE.PointsMaterial( parameters );\r\n\r\n};\r\n\r\nTHREE.ParticleBasicMaterial = function ( parameters ) {\r\n\r\n\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\treturn new THREE.PointsMaterial( parameters );\r\n\r\n};\r\n\r\nTHREE.ParticleSystemMaterial = function ( parameters ) {\r\n\r\n\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\treturn new THREE.PointsMaterial( parameters );\r\n\r\n};\r\n\r\n// File:src/materials/ShaderMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  defines: { \"label\" : \"value\" },\r\n *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\r\n *\r\n *  fragmentShader: <string>,\r\n *  vertexShader: <string>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  lights: <bool>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'ShaderMaterial';\r\n\r\n\tthis.defines = {};\r\n\tthis.uniforms = {};\r\n\r\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\r\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false; // set to use scene fog\r\n\r\n\tthis.lights = false; // set to use scene lights\r\n\r\n\tthis.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\r\n\r\n\tthis.skinning = false; // set to use skinning attribute streams\r\n\r\n\tthis.morphTargets = false; // set to use morph targets\r\n\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\tthis.derivatives = false; // set to use derivatives\r\n\r\n\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\tthis.defaultAttributeValues = {\r\n\t\t'color': [ 1, 1, 1 ],\r\n\t\t'uv': [ 0, 0 ],\r\n\t\t'uv2': [ 0, 0 ]\r\n\t};\r\n\r\n\tthis.index0AttributeName = undefined;\r\n\r\n\tif ( parameters !== undefined ) {\r\n\r\n\t\tif ( parameters.attributes !== undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\r\n\r\nTHREE.ShaderMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.fragmentShader = source.fragmentShader;\r\n\tthis.vertexShader = source.vertexShader;\r\n\r\n\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\r\n\r\n\tthis.attributes = source.attributes;\r\n\tthis.defines = source.defines;\r\n\r\n\tthis.shading = source.shading;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\tthis.lights = source.lights;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.skinning = source.skinning;\r\n\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\tthis.derivatives = source.derivatives;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.uniforms = this.uniforms;\r\n\tdata.attributes = this.attributes;\r\n\tdata.vertexShader = this.vertexShader;\r\n\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/materials/RawShaderMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RawShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.ShaderMaterial.call( this, parameters );\r\n\r\n\tthis.type = 'RawShaderMaterial';\r\n\r\n};\r\n\r\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\r\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\r\n// File:src/materials/SpriteMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *\tuvOffset: new THREE.Vector2(),\r\n *\tuvScale: new THREE.Vector2(),\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.SpriteMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'SpriteMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.map = null;\r\n\r\n\tthis.rotation = 0;\r\n\r\n\tthis.fog = false;\r\n\r\n\t// set parameters\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\r\n\r\nTHREE.SpriteMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.map = source.map;\r\n\r\n\tthis.rotation = source.rotation;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/textures/Texture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.sourceFile = '';\r\n\r\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\r\n\tthis.mipmaps = [];\r\n\r\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\r\n\r\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\r\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.generateMipmaps = true;\r\n\tthis.premultiplyAlpha = false;\r\n\tthis.flipY = true;\r\n\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\tthis.version = 0;\r\n\tthis.onUpdate = null;\r\n\r\n};\r\n\r\nTHREE.Texture.DEFAULT_IMAGE = undefined;\r\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\r\n\r\nTHREE.Texture.prototype = {\r\n\r\n\tconstructor: THREE.Texture,\r\n\r\n\tset needsUpdate ( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.image = source.image;\r\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\tthis.mapping = source.mapping;\r\n\r\n\t\tthis.wrapS = source.wrapS;\r\n\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\tthis.magFilter = source.magFilter;\r\n\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\tthis.format = source.format;\r\n\t\tthis.type = source.type;\r\n\r\n\t\tthis.offset.copy( source.offset );\r\n\t\tthis.repeat.copy( source.repeat );\r\n\r\n\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\tthis.flipY = source.flipY;\r\n\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDataURL( image ) {\r\n\r\n\t\t\tvar canvas;\r\n\r\n\t\t\tif ( image.toDataURL !== undefined ) {\r\n\r\n\t\t\t\tcanvas = image;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcanvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = image.width;\r\n\t\t\t\tcanvas.height = image.height;\r\n\r\n\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar output = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Texture',\r\n\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t},\r\n\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tname: this.name,\r\n\r\n\t\t\tmapping: this.mapping,\r\n\r\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\tminFilter: this.minFilter,\r\n\t\t\tmagFilter: this.magFilter,\r\n\t\t\tanisotropy: this.anisotropy\r\n\t\t};\r\n\r\n\t\tif ( this.image !== undefined ) {\r\n\r\n\t\t\t// TODO: Move to THREE.Image\r\n\r\n\t\t\tvar image = this.image;\r\n\r\n\t\t\tif ( image.uuid === undefined ) {\r\n\r\n\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\turl: getDataURL( image )\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.image = image.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\treturn output;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t},\r\n\r\n\ttransformUv: function ( uv ) {\r\n\r\n\t\tif ( this.mapping !== THREE.UVMapping )  return;\r\n\r\n\t\tuv.multiply( this.repeat );\r\n\t\tuv.add( this.offset );\r\n\r\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\tcase THREE.RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\tcase THREE.RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.flipY ) {\r\n\r\n\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );\r\n\r\nTHREE.TextureIdCount = 0;\r\n\r\n// File:src/textures/CanvasTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\r\n\r\n// File:src/textures/CubeTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\r\n\r\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.images = images;\r\n\tthis.flipY = false;\r\n\r\n};\r\n\r\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\r\n\r\nTHREE.CubeTexture.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Texture.prototype.copy.call( this, source );\r\n\t\r\n\tthis.images = source.images;\r\n\t\r\n\treturn this;\r\n\r\n};\r\n// File:src/textures/CompressedTexture.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { width: width, height: height };\r\n\tthis.mipmaps = mipmaps;\r\n\r\n\t// no flipping for cube textures\r\n\t// (also flipping doesn't work for compressed textures )\r\n\r\n\tthis.flipY = false;\r\n\r\n\t// can't generate mipmaps for compressed textures\r\n\t// mips must be embedded in DDS files\r\n\r\n\tthis.generateMipmaps = false;\r\n\r\n};\r\n\r\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\r\n\r\n// File:src/textures/DataTexture.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { data: data, width: width, height: height };\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\r\n\t\r\n\tthis.flipY = false;\r\n\tthis.generateMipmaps  = false;\r\n\r\n};\r\n\r\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\r\n\r\n// File:src/textures/VideoTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.generateMipmaps = false;\r\n\r\n\tvar scope = this;\r\n\r\n\tfunction update() {\r\n\r\n\t\trequestAnimationFrame( update );\r\n\r\n\t\tif ( video.readyState === video.HAVE_ENOUGH_DATA ) {\r\n\r\n\t\t\tscope.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate();\r\n\r\n};\r\n\r\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\r\n\r\n// File:src/objects/Group.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Group = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Group';\r\n\r\n};\r\n\r\nTHREE.Group.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Group.prototype.constructor = THREE.Group;\r\n// File:src/objects/Points.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Points = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Points';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n};\r\n\r\nTHREE.Points.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Points.prototype.constructor = THREE.Points;\r\n\r\nTHREE.Points.prototype.raycast = ( function () {\r\n\r\n\tvar inverseMatrix = new THREE.Matrix4();\r\n\tvar ray = new THREE.Ray();\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tvar object = this;\r\n\t\tvar geometry = object.geometry;\r\n\t\tvar threshold = raycaster.params.Points.threshold;\r\n\r\n\t\tinverseMatrix.getInverse( this.matrixWorld );\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tif ( ray.isIntersectionBox( geometry.boundingBox ) === false ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\t\tvar position = new THREE.Vector3();\r\n\r\n\t\tfunction testPoint( point, index ) {\r\n\r\n\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\r\n\r\n\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\r\n\t\t\t\tintersectPoint.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\t\tpoint: intersectPoint.clone(),\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\tface: null,\r\n\t\t\t\t\tobject: object\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar a = indices[ i ];\r\n\r\n\t\t\t\t\tposition.fromArray( positions, a * 3 );\r\n\r\n\t\t\t\t\ttestPoint( position, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tposition.fromArray( positions, i * 3 );\r\n\r\n\t\t\t\t\ttestPoint( position, i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\ttestPoint( vertices[ i ], i );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.Points.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n};\r\n\r\n// Backwards compatibility\r\n\r\nTHREE.PointCloud = function ( geometry, material ) {\r\n\r\n\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\treturn new THREE.Points( geometry, material );\r\n\r\n};\r\n\r\nTHREE.ParticleSystem = function ( geometry, material ) {\r\n\r\n\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\treturn new THREE.Points( geometry, material );\r\n\r\n};\r\n\r\n// File:src/objects/Line.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Line = function ( geometry, material, mode ) {\r\n\r\n\tif ( mode === 1 ) {\r\n\r\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\r\n\t\treturn new THREE.LineSegments( geometry, material );\r\n\r\n\t}\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Line';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n};\r\n\r\nTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Line.prototype.constructor = THREE.Line;\r\n\r\nTHREE.Line.prototype.raycast = ( function () {\r\n\r\n\tvar inverseMatrix = new THREE.Matrix4();\r\n\tvar ray = new THREE.Ray();\r\n\tvar sphere = new THREE.Sphere();\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tvar precision = raycaster.linePrecision;\r\n\t\tvar precisionSq = precision * precision;\r\n\r\n\t\tvar geometry = this.geometry;\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\tsphere.copy( geometry.boundingSphere );\r\n\t\tsphere.applyMatrix4( this.matrixWorld );\r\n\r\n\t\tif ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tinverseMatrix.getInverse( this.matrixWorld );\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\tvar vStart = new THREE.Vector3();\r\n\t\tvar vEnd = new THREE.Vector3();\r\n\t\tvar interSegment = new THREE.Vector3();\r\n\t\tvar interRay = new THREE.Vector3();\r\n\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\r\n\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\r\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\r\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar nbVertices = vertices.length;\r\n\r\n\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\r\n\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\r\n\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\tindex: i,\r\n\t\t\t\t\tface: null,\r\n\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.Line.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n};\r\n\r\n// DEPRECATED\r\n\r\nTHREE.LineStrip = 0;\r\nTHREE.LinePieces = 1;\r\n\r\n// File:src/objects/LineSegments.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LineSegments = function ( geometry, material ) {\r\n\r\n\tTHREE.Line.call( this, geometry, material );\r\n\r\n\tthis.type = 'LineSegments';\r\n\r\n};\r\n\r\nTHREE.LineSegments.prototype = Object.create( THREE.Line.prototype );\r\nTHREE.LineSegments.prototype.constructor = THREE.LineSegments;\r\n\r\n// File:src/objects/Mesh.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author jonobr1 / http://jonobr1.com/\r\n */\r\n\r\nTHREE.Mesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Mesh';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\tthis.updateMorphTargets();\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Mesh.prototype.constructor = THREE.Mesh;\r\n\r\nTHREE.Mesh.prototype.updateMorphTargets = function () {\r\n\r\n\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\r\n\r\n\t\tthis.morphTargetBase = - 1;\r\n\t\tthis.morphTargetInfluences = [];\r\n\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\r\n\r\n\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\r\n\r\n\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\r\n\r\n\t\treturn this.morphTargetDictionary[ name ];\r\n\r\n\t}\r\n\r\n\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\r\n\r\n\treturn 0;\r\n\r\n};\r\n\r\n\r\nTHREE.Mesh.prototype.raycast = ( function () {\r\n\r\n\tvar inverseMatrix = new THREE.Matrix4();\r\n\tvar ray = new THREE.Ray();\r\n\tvar sphere = new THREE.Sphere();\r\n\r\n\tvar vA = new THREE.Vector3();\r\n\tvar vB = new THREE.Vector3();\r\n\tvar vC = new THREE.Vector3();\r\n\r\n\tvar tempA = new THREE.Vector3();\r\n\tvar tempB = new THREE.Vector3();\r\n\tvar tempC = new THREE.Vector3();\r\n\r\n\tvar uvA = new THREE.Vector2();\r\n\tvar uvB = new THREE.Vector2();\r\n\tvar uvC = new THREE.Vector2();\r\n\r\n\tvar barycoord = new THREE.Vector3();\r\n\r\n\tvar intersectionPoint = new THREE.Vector3();\r\n\tvar intersectionPointWorld = new THREE.Vector3();\r\n\r\n\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\r\n\r\n\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\r\n\r\n\t\tuv1.multiplyScalar( barycoord.x );\r\n\t\tuv2.multiplyScalar( barycoord.y );\r\n\t\tuv3.multiplyScalar( barycoord.z );\r\n\r\n\t\tuv1.add( uv2 ).add( uv3 );\r\n\r\n\t\treturn uv1.clone();\r\n\r\n\t}\r\n\r\n\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ){\r\n\r\n\t\tvar intersect;\r\n\t\tvar material = object.material;\r\n\r\n\t\tif ( material.side === THREE.BackSide ) {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\r\n\r\n\t\t}\r\n\r\n\t\tif ( intersect === null ) return null;\r\n\r\n\t\tintersectionPointWorld.copy( point );\r\n\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\t\treturn {\r\n\t\t\tdistance: distance,\r\n\t\t\tpoint: intersectionPointWorld.clone(),\r\n\t\t\tobject: object\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\r\n\r\n\t\tvA.fromArray( positions, a * 3 );\r\n\t\tvB.fromArray( positions, b * 3 );\r\n\t\tvC.fromArray( positions, c * 3 );\r\n\r\n\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\r\n\t\tif ( intersection ) {\r\n\r\n\t\t\tif ( uvs ) {\r\n\r\n\t\t\t\tuvA.fromArray( uvs, a * 2 );\r\n\t\t\t\tuvB.fromArray( uvs, b * 2 );\r\n\t\t\t\tuvC.fromArray( uvs, c * 2 );\r\n\r\n\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\r\n\t\t\tintersection.faceIndex = a;\r\n\r\n\t\t}\r\n\r\n\t\treturn intersection;\r\n\r\n\t}\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar material = this.material;\r\n\r\n\t\tif ( material === undefined ) return;\r\n\r\n\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\tsphere.copy( geometry.boundingSphere );\r\n\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\tif ( raycaster.ray.isIntersectionSphere( sphere ) === false ) return;\r\n\r\n\t\t// Check boundingBox before continuing\r\n\r\n\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tif ( ray.isIntersectionBox( geometry.boundingBox ) === false ) return;\r\n\r\n\t\t}\r\n\r\n\t\tvar uvs, intersection;\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar a, b, c;\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( attributes.uv !== undefined ){\r\n\r\n\t\t\t\tuvs = attributes.uv.array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\ta = indices[ i ];\r\n\t\t\t\t\tb = indices[ i + 1 ];\r\n\t\t\t\t\tc = indices[ i + 2 ];\r\n\r\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\r\n\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\r\n\r\n\t\t\t\t\ta = i / 3;\r\n\t\t\t\t\tb = a + 1;\r\n\t\t\t\t\tc = a + 2;\r\n\r\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tvar fvA, fvB, fvC;\r\n\t\t\tvar isFaceMaterial = material instanceof THREE.MeshFaceMaterial;\r\n\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\r\n\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\r\n\r\n\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\r\n\r\n\t\t\t\tif ( faceMaterial === undefined ) continue;\r\n\r\n\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\tfvC = vertices[ face.c ];\r\n\r\n\t\t\t\tif ( faceMaterial.morphTargets === true ) {\r\n\r\n\t\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\r\n\r\n\t\t\t\t\tvA.set( 0, 0, 0 );\r\n\t\t\t\t\tvB.set( 0, 0, 0 );\r\n\t\t\t\t\tvC.set( 0, 0, 0 );\r\n\r\n\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\r\n\t\t\t\t\t\tvar influence = morphInfluences[ t ];\r\n\r\n\t\t\t\t\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\r\n\r\n\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\r\n\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\r\n\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvA.add( fvA );\r\n\t\t\t\t\tvB.add( fvB );\r\n\t\t\t\t\tvC.add( fvC );\r\n\r\n\t\t\t\t\tfvA = vA;\r\n\t\t\t\t\tfvB = vB;\r\n\t\t\t\t\tfvC = vC;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\r\n\r\n\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\tif ( uvs ) {\r\n\r\n\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\r\n\r\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.Mesh.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n};\r\n\r\n// File:src/objects/Bone.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.Bone = function ( skin ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Bone';\r\n\r\n\tthis.skin = skin;\r\n\r\n};\r\n\r\nTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Bone.prototype.constructor = THREE.Bone;\r\n\r\nTHREE.Bone.prototype.copy = function ( source ) {\r\n\t\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\r\n\tthis.skin = source.skin;\r\n\t\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/objects/Skeleton.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author michael guerrero / http://realitymeltdown.com\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\r\n\r\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\r\n\r\n\tthis.identityMatrix = new THREE.Matrix4();\r\n\r\n\t// copy the bone array\r\n\r\n\tbones = bones || [];\r\n\r\n\tthis.bones = bones.slice( 0 );\r\n\r\n\t// create a bone texture or an array of floats\r\n\r\n\tif ( this.useVertexTexture ) {\r\n\r\n\t\t// layout (1 matrix = 4 pixels)\r\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\t\t\r\n\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\r\n\t\tsize = Math.max( size, 4 );\r\n\r\n\t\tthis.boneTextureWidth = size;\r\n\t\tthis.boneTextureHeight = size;\r\n\r\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\r\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\r\n\r\n\t} else {\r\n\r\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\r\n\r\n\t}\r\n\r\n\t// use the supplied bone inverses or calculate the inverses\r\n\r\n\tif ( boneInverses === undefined ) {\r\n\r\n\t\tthis.calculateInverses();\r\n\r\n\t} else {\r\n\r\n\t\tif ( this.bones.length === boneInverses.length ) {\r\n\r\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\r\n\r\n\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Skeleton.prototype.calculateInverses = function () {\r\n\r\n\tthis.boneInverses = [];\r\n\r\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\tvar inverse = new THREE.Matrix4();\r\n\r\n\t\tif ( this.bones[ b ] ) {\r\n\r\n\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tthis.boneInverses.push( inverse );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Skeleton.prototype.pose = function () {\r\n\r\n\tvar bone;\r\n\r\n\t// recover the bind-time world matrices\r\n\r\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\tbone = this.bones[ b ];\r\n\r\n\t\tif ( bone ) {\r\n\r\n\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// compute the local matrices, positions, rotations and scales\r\n\r\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\tbone = this.bones[ b ];\r\n\r\n\t\tif ( bone ) {\r\n\r\n\t\t\tif ( bone.parent ) {\r\n\r\n\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Skeleton.prototype.update = ( function () {\r\n\r\n\tvar offsetMatrix = new THREE.Matrix4();\r\n\r\n\treturn function update() {\r\n\r\n\t\t// flatten bone matrices to array\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\r\n\r\n\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\r\n\t\t\toffsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.useVertexTexture ) {\r\n\r\n\t\t\tthis.boneTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nTHREE.Skeleton.prototype.clone = function () {\r\n\r\n\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\r\n\r\n};\r\n\r\n// File:src/objects/SkinnedMesh.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.type = 'SkinnedMesh';\r\n\r\n\tthis.bindMode = \"attached\";\r\n\tthis.bindMatrix = new THREE.Matrix4();\r\n\tthis.bindMatrixInverse = new THREE.Matrix4();\r\n\r\n\t// init bones\r\n\r\n\t// TODO: remove bone creation as there is no reason (other than\r\n\t// convenience) for THREE.SkinnedMesh to do this.\r\n\r\n\tvar bones = [];\r\n\r\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\r\n\t\tvar bone, gbone;\r\n\r\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tbone = new THREE.Bone( this );\r\n\t\t\tbones.push( bone );\r\n\r\n\t\t\tbone.name = gbone.name;\r\n\t\t\tbone.position.fromArray( gbone.pos );\r\n\t\t\tbone.quaternion.fromArray( gbone.rotq );\r\n\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null) {\r\n\r\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.add( bones[ b ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.normalizeSkinWeights();\r\n\r\n\tthis.updateMatrixWorld( true );\r\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\r\n\r\n};\r\n\r\n\r\nTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;\r\n\r\nTHREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {\r\n\r\n\tthis.skeleton = skeleton;\r\n\r\n\tif ( bindMatrix === undefined ) {\r\n\r\n\t\tthis.updateMatrixWorld( true );\r\n\t\t\r\n\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t}\r\n\r\n\tthis.bindMatrix.copy( bindMatrix );\r\n\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.pose = function () {\r\n\r\n\tthis.skeleton.pose();\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {\r\n\r\n\tif ( this.geometry instanceof THREE.Geometry ) {\r\n\r\n\t\tfor ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {\r\n\r\n\t\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\r\n\t\t\tvar scale = 1.0 / sw.lengthManhattan();\r\n\r\n\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\tsw.multiplyScalar( scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsw.set( 1 ); // this will be normalized by the shader anyway\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// skinning weights assumed to be normalized for THREE.BufferGeometry\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {\r\n\r\n\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\r\n\r\n\tif ( this.bindMode === \"attached\" ) {\r\n\r\n\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\r\n\t} else if ( this.bindMode === \"detached\" ) {\r\n\r\n\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.clone = function() {\r\n\r\n\treturn new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );\r\n\r\n};\r\n\r\n// File:src/objects/LOD.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LOD = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'LOD';\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tlevels: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: []\r\n\t\t},\r\n\t\tobjects: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\t\treturn this.levels;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n};\r\n\r\n\r\nTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.LOD.prototype.constructor = THREE.LOD;\r\n\r\nTHREE.LOD.prototype.addLevel = function ( object, distance ) {\r\n\r\n\tif ( distance === undefined ) distance = 0;\r\n\r\n\tdistance = Math.abs( distance );\r\n\r\n\tvar levels = this.levels;\r\n\r\n\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\r\n\tthis.add( object );\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.getObjectForDistance = function ( distance ) {\r\n\r\n\tvar levels = this.levels;\r\n\r\n\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\tif ( distance < levels[ i ].distance ) {\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn levels[ i - 1 ].object;\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.raycast = ( function () {\r\n\r\n\tvar matrixPosition = new THREE.Vector3();\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\r\n\r\n\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.LOD.prototype.update = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\r\n\treturn function update( camera ) {\r\n\r\n\t\tvar levels = this.levels;\r\n\r\n\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tvar distance = v1.distanceTo( v2 );\r\n\r\n\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\r\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.LOD.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source, false );\r\n\r\n\tvar levels = source.levels;\r\n\r\n\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\tvar level = levels[ i ];\r\n\r\n\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.object.levels = [];\r\n\r\n\tvar levels = this.levels;\r\n\r\n\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\tvar level = levels[ i ];\r\n\r\n\t\tdata.object.levels.push( {\r\n\t\t\tobject: level.object.uuid,\r\n\t\t\tdistance: level.distance\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/objects/Sprite.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Sprite = ( function () {\r\n\r\n\tvar indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );\r\n\tvar vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );\r\n\tvar uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tgeometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n\treturn function Sprite( material ) {\r\n\r\n\t\tTHREE.Object3D.call( this );\r\n\r\n\t\tthis.type = 'Sprite';\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Sprite.prototype.constructor = THREE.Sprite;\r\n\r\nTHREE.Sprite.prototype.raycast = ( function () {\r\n\r\n\tvar matrixPosition = new THREE.Vector3();\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\r\n\t\tvar guessSizeSq = this.scale.x * this.scale.y;\r\n\r\n\t\tif ( distanceSq > guessSizeSq ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tintersects.push( {\r\n\r\n\t\t\tdistance: Math.sqrt( distanceSq ),\r\n\t\t\tpoint: this.position,\r\n\t\t\tface: null,\r\n\t\t\tobject: this\r\n\r\n\t\t} );\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.Sprite.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.material ).copy( this );\r\n\r\n};\r\n\r\n// Backwards compatibility\r\n\r\nTHREE.Particle = THREE.Sprite;\r\n\r\n// File:src/objects/LensFlare.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.lensFlares = [];\r\n\r\n\tthis.positionScreen = new THREE.Vector3();\r\n\tthis.customUpdateCallback = undefined;\r\n\r\n\tif ( texture !== undefined ) {\r\n\r\n\t\tthis.add( texture, size, distance, blending, color );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.LensFlare.prototype.constructor = THREE.LensFlare;\r\n\r\n\r\n/*\r\n * Add: adds another flare\r\n */\r\n\r\nTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\r\n\r\n\tif ( size === undefined ) size = - 1;\r\n\tif ( distance === undefined ) distance = 0;\r\n\tif ( opacity === undefined ) opacity = 1;\r\n\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\r\n\tif ( blending === undefined ) blending = THREE.NormalBlending;\r\n\r\n\tdistance = Math.min( distance, Math.max( 0, distance ) );\r\n\r\n\tthis.lensFlares.push( {\r\n\t\ttexture: texture,\t// THREE.Texture\r\n\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\r\n\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\r\n\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\r\n\t\tscale: 1, \t\t// scale\r\n\t\trotation: 0, \t\t// rotation\r\n\t\topacity: opacity,\t// opacity\r\n\t\tcolor: color,\t\t// color\r\n\t\tblending: blending\t// blending\r\n\t} );\r\n\r\n};\r\n\r\n/*\r\n * Update lens flares update positions on all flares based on the screen position\r\n * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n */\r\n\r\nTHREE.LensFlare.prototype.updateLensFlares = function () {\r\n\r\n\tvar f, fl = this.lensFlares.length;\r\n\tvar flare;\r\n\tvar vecX = - this.positionScreen.x * 2;\r\n\tvar vecY = - this.positionScreen.y * 2;\r\n\r\n\tfor ( f = 0; f < fl; f ++ ) {\r\n\r\n\t\tflare = this.lensFlares[ f ];\r\n\r\n\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\r\n\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\r\n\r\n\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\r\n\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LensFlare.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tthis.positionScreen.copy( source.positionScreen );\r\n\tthis.customUpdateCallback = source.customUpdateCallback;\r\n\r\n\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\r\n\r\n\t\tthis.lensFlares.push( source.lensFlares[ i ] );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/scenes/Scene.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Scene = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Scene';\r\n\r\n\tthis.fog = null;\r\n\tthis.overrideMaterial = null;\r\n\r\n\tthis.autoUpdate = true; // checked by the renderer\r\n\r\n};\r\n\r\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Scene.prototype.constructor = THREE.Scene;\r\n\r\nTHREE.Scene.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tif ( source.fog !== null ) this.fog = source.fog.clone();\r\n\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\r\n\r\n\tthis.autoUpdate = source.autoUpdate;\r\n\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/scenes/Fog.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Fog = function ( color, near, far ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 1;\r\n\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n};\r\n\r\nTHREE.Fog.prototype.clone = function () {\r\n\r\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\r\n\r\n};\r\n\r\n// File:src/scenes/FogExp2.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.FogExp2 = function ( color, density ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n};\r\n\r\nTHREE.FogExp2.prototype.clone = function () {\r\n\r\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/ShaderChunk.js\r\n\r\nTHREE.ShaderChunk = {};\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphamap_fragment'] = \"#ifdef USE_ALPHAMAP\\n\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphamap_pars_fragment'] = \"#ifdef USE_ALPHAMAP\\n\\n\tuniform sampler2D alphaMap;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphatest_fragment'] = \"#ifdef ALPHATEST\\n\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'aomap_fragment'] = \"#ifdef USE_AOMAP\\n\\n\ttotalAmbientLight *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'aomap_pars_fragment'] = \"#ifdef USE_AOMAP\\n\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'begin_vertex'] = \"\\nvec3 transformed = vec3( position );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'beginnormal_vertex'] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment'] = \"#ifdef USE_BUMPMAP\\n\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\\n\\n\\n\tvec2 dHdxy_fwd() {\\n\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\n\t\treturn vec2( dBx, dBy );\\n\\n\t}\\n\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\n\t}\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_fragment'] = \"#ifdef USE_COLOR\\n\\n\tdiffuseColor.rgb *= vColor;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_pars_fragment'] = \"#ifdef USE_COLOR\\n\\n\tvarying vec3 vColor;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_pars_vertex'] = \"#ifdef USE_COLOR\\n\\n\tvarying vec3 vColor;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_vertex'] = \"#ifdef USE_COLOR\\n\\n\tvColor.xyz = color.xyz;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/common.glsl\r\n\r\nTHREE.ShaderChunk[ 'common'] = \"#define PI 3.14159\\n#define PI2 6.28318\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\n\\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\\n\\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\\n\\n}\\n\\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\\n\\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\\n\\n}\\n\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\n\treturn - distance * planeNormal + point;\\n\\n}\\n\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n\\n}\\n\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n\\n}\\n\\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\\n\\n\tif ( decayExponent > 0.0 ) {\\n\\n\t  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\n\t}\\n\\n\treturn 1.0;\\n\\n}\\n\\nvec3 F_Schlick( in vec3 specularColor, in float dotLH ) {\\n\\n\\n\tfloat fresnel = exp2( ( -5.55437 * dotLH - 6.98316 ) * dotLH );\\n\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n\\n}\\n\\nfloat G_BlinnPhong_Implicit( /* in float dotNL, in float dotNV */ ) {\\n\\n\\n\treturn 0.25;\\n\\n}\\n\\nfloat D_BlinnPhong( in float shininess, in float dotNH ) {\\n\\n\\n\treturn ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n\\n}\\n\\nvec3 BRDF_BlinnPhong( in vec3 specularColor, in float shininess, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {\\n\\n\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( lightDir, halfDir ) );\\n\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\\n\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\n\treturn F * G * D;\\n\\n}\\n\\nvec3 inputToLinear( in vec3 a ) {\\n\\n\t#ifdef GAMMA_INPUT\\n\\n\t\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\\n\\n\t#else\\n\\n\t\treturn a;\\n\\n\t#endif\\n\\n}\\n\\nvec3 linearToOutput( in vec3 a ) {\\n\\n\t#ifdef GAMMA_OUTPUT\\n\\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\\n\\n\t#else\\n\\n\t\treturn a;\\n\\n\t#endif\\n\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'defaultnormal_vertex'] = \"#ifdef FLIP_SIDED\\n\\n\tobjectNormal = -objectNormal;\\n\\n#endif\\n\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'displacementmap_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'displacementmap_pars_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'emissivemap_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\n\temissiveColor.rgb = inputToLinear( emissiveColor.rgb );\\n\\n\ttotalEmissiveLight *= emissiveColor.rgb;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'emissivemap_pars_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\\n\tuniform sampler2D emissiveMap;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_fragment'] = \"#ifdef USE_ENVMAP\\n\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\n\t\t#else\\n\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\t\t#endif\\n\\n\t#else\\n\\n\t\tvec3 reflectVec = vReflect;\\n\\n\t#endif\\n\\n\t#ifdef DOUBLE_SIDED\\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t#else\\n\t\tfloat flipNormal = 1.0;\\n\t#endif\\n\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\\n\tenvColor.xyz = inputToLinear( envColor.xyz );\\n\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_pars_fragment'] = \"#ifdef USE_ENVMAP\\n\\n\tuniform float reflectivity;\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\t\tuniform float refractionRatio;\\n\\n\t#else\\n\\n\t\tvarying vec3 vReflect;\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_pars_vertex'] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\\n\\n\tvarying vec3 vReflect;\\n\\n\tuniform float refractionRatio;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_vertex'] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\\n\\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\n\t#ifdef ENVMAP_MODE_REFLECTION\\n\\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\n\t#else\\n\\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'fog_fragment'] = \"#ifdef USE_FOG\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\n\t#else\\n\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\n\t#endif\\n\\n\t#ifdef FOG_EXP2\\n\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\\n\t#else\\n\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\n\t#endif\\n\t\\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'fog_pars_fragment'] = \"#ifdef USE_FOG\\n\\n\tuniform vec3 fogColor;\\n\\n\t#ifdef FOG_EXP2\\n\\n\t\tuniform float fogDensity;\\n\\n\t#else\\n\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/hemilight_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'hemilight_fragment'] = \"#if MAX_HEMI_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\\n\\n\t\tvec3 lightColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\\n\\n\t\ttotalAmbientLight += lightColor;\\n\\n\t}\\n\\n#endif\\n\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lightmap_fragment'] = \"#ifdef USE_LIGHTMAP\\n\\n\ttotalAmbientLight += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lightmap_pars_fragment'] = \"#ifdef USE_LIGHTMAP\\n\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_lambert_pars_vertex'] = \"#if MAX_DIR_LIGHTS > 0\\n\\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_lambert_vertex'] = \"vLightFront = vec3( 0.0 );\\n\\n#ifdef DOUBLE_SIDED\\n\\n\tvLightBack = vec3( 0.0 );\\n\\n#endif\\n\\nvec3 normal = normalize( transformedNormal );\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = pointLightColor[ i ];\\n\\n\t\tvec3 lVector = pointLightPosition[ i ] - mvPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\\n\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = spotLightColor[ i ];\\n\\n\t\tvec3 lightPosition = spotLightPosition[ i ];\\n\t\tvec3 lVector = lightPosition - mvPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\\n\\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\\n\\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\\n\\n\\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\\n\\n\t\t\tattenuation *= spotEffect;\\n\\n\\n\t\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\t\tvLightFront += lightColor * attenuation * saturate( dotProduct );\\n\\n\t\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\t\tvLightBack += lightColor * attenuation * saturate( - dotProduct );\\n\\n\t\t\t#endif\\n\\n\t\t}\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = directionalLightColor[ i ];\\n\\n\t\tvec3 lightDir = directionalLightDirection[ i ];\\n\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tvLightFront += lightColor * saturate( dotProduct );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tvLightBack += lightColor * saturate( - dotProduct );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightDir = hemisphereLightDirection[ i ];\\n\\n\\n\t\tfloat dotProduct = dot( normal, lightDir );\\n\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\\n\\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tfloat hemiDiffuseWeightBack = - 0.5 * dotProduct + 0.5;\\n\\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_fragment'] = \"vec3 viewDir = normalize( vViewPosition );\\n\\nvec3 totalDiffuseLight = vec3( 0.0 );\\nvec3 totalSpecularLight = vec3( 0.0 );\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = pointLightColor[ i ];\\n\\n\t\tvec3 lightPosition = pointLightPosition[ i ];\\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\\n\\n\\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\\n\\n\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\\n\\n\\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\\n\\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\\n\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = spotLightColor[ i ];\\n\\n\t\tvec3 lightPosition = spotLightPosition[ i ];\\n\t\tvec3 lVector = lightPosition + vViewPosition.xyz;\\n\t\tvec3 lightDir = normalize( lVector );\\n\\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], lightDir );\\n\\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\\n\\n\t\t\tspotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\\n\\n\\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\\n\\n\t\t\tattenuation *= spotEffect;\\n\\n\\n\t\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\\n\\n\t\t\ttotalDiffuseLight += lightColor * attenuation * cosineTerm;\\n\\n\\n\t\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\\n\\n\t\t\ttotalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\\n\\n\t\t}\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tfor ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\t\tvec3 lightColor = directionalLightColor[ i ];\\n\\n\t\tvec3 lightDir = directionalLightDirection[ i ];\\n\\n\\n\t\tfloat cosineTerm = saturate( dot( normal, lightDir ) );\\n\\n\t\ttotalDiffuseLight += lightColor * cosineTerm;\\n\\n\\n\t\tvec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\\n\\n\t\ttotalSpecularLight += brdf * specularStrength * lightColor * cosineTerm;\\n\\n\t}\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment'] = \"uniform vec3 ambientLightColor;\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\\n\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\\n\\n\tvarying vec3 vWorldPosition;\\n\\n#endif\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\tvarying vec3 vNormal;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_pars_vertex'] = \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\\n\\n\tvarying vec3 vWorldPosition;\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_vertex'] = \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\\n\\n\tvWorldPosition = worldPosition.xyz;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/linear_to_gamma_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'linear_to_gamma_fragment'] = \"\\n\toutgoingLight = linearToOutput( outgoingLight );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_fragment'] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\tuniform float logDepthBufFC;\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvarying float vFragDepth;\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvarying float vFragDepth;\\n\\n\t#endif\\n\\n\tuniform float logDepthBufFC;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\\n#else\\n\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\n\t#endif\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_fragment'] = \"#ifdef USE_MAP\\n\\n\tvec4 texelColor = texture2D( map, vUv );\\n\\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\\n\\n\tdiffuseColor *= texelColor;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_pars_fragment'] = \"#ifdef USE_MAP\\n\\n\tuniform sampler2D map;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_particle_fragment'] = \"#ifdef USE_MAP\\n\\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_particle_pars_fragment'] = \"#ifdef USE_MAP\\n\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphnormal_vertex'] = \"#ifdef USE_MORPHNORMALS\\n\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\\n\t#ifndef USE_MORPHNORMALS\\n\\n\tuniform float morphTargetInfluences[ 8 ];\\n\\n\t#else\\n\\n\tuniform float morphTargetInfluences[ 4 ];\\n\\n\t#endif\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphtarget_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\n\t#ifndef USE_MORPHNORMALS\\n\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/normal_phong_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_phong_fragment'] = \"#ifndef FLAT_SHADED\\n\\n\tvec3 normal = normalize( vNormal );\\n\\n\t#ifdef DOUBLE_SIDED\\n\\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\\n\t#endif\\n\\n#else\\n\\n\tvec3 fdx = dFdx( vViewPosition );\\n\tvec3 fdy = dFdy( vViewPosition );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n\\n#endif\\n\\n#ifdef USE_NORMALMAP\\n\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\n#elif defined( USE_BUMPMAP )\\n\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n\\n#endif\\n\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'normalmap_pars_fragment'] = \"#ifdef USE_NORMALMAP\\n\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\\n\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\\n\t}\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'project_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n\\n#else\\n\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n\\n#endif\\n\\ngl_Position = projectionMatrix * mvPosition;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_fragment'] = \"#ifdef USE_SHADOWMAP\\n\\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\\n\\n\t\tfloat texelSizeY =  1.0 / shadowMapSize[ i ].y;\\n\\n\t\tfloat shadow = 0.0;\\n\\n#if defined( POINT_LIGHT_SHADOWS )\\n\\n\t\tbool isPointLight = shadowDarkness[ i ] < 0.0;\\n\\n\t\tif ( isPointLight ) {\\n\\n\t\t\tfloat realShadowDarkness = abs( shadowDarkness[ i ] );\\n\\n\t\t\tvec3 lightToPosition = vShadowCoord[ i ].xyz;\\n\\n\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\t\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\t\tfloat dp = length( lightToPosition );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\\n\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tconst float Dr = 1.25;\\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tconst float Dr = 2.25;\\n\t#endif\\n\\n\t\t\tfloat os = Dr *  2.0 * texelSizeY;\\n\\n\t\t\tconst vec3 Gsd = vec3( - 1, 0, 1 );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\t\t\tshadow *= realShadowDarkness * ( 1.0 / 21.0 );\\n\\n\t#else \\n\t\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\t\tfloat dp = length( lightToPosition );\\n\\n\t\t\tadjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\\n\\n\t\t\tshadow *= realShadowDarkness;\\n\\n\t#endif\\n\\n\t\t} else {\\n\\n#endif \\n\t\t\tfloat texelSizeX =  1.0 / shadowMapSize[ i ].x;\\n\\n\t\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\\n\\n\\n\t\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\t\tbool inFrustum = all( inFrustumVec );\\n\\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\n\t\t\tbool frustumTest = all( frustumTestVec );\\n\\n\t\t\tif ( frustumTest ) {\\n\\n\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\n\\n\t\t\t\t/*\\n\t\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\\n\t\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\\n\t\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\\n\t\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\\n\t\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\\n\t\t\t\t\t\t\t\tshadow += 1.0;\\n\t\t\t\t\t}\\n\t\t\t\t\tshadow /= 9.0;\\n\t\t\t\t*/\\n\\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t\tconst float ShadowDelta = 1.0 / 9.0;\\n\\n\t\t\t\tfloat xPixelOffset = texelSizeX;\\n\t\t\t\tfloat yPixelOffset = texelSizeY;\\n\\n\t\t\t\tfloat dx0 = - 1.25 * xPixelOffset;\\n\t\t\t\tfloat dy0 = - 1.25 * yPixelOffset;\\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\\n\\n\t\t\t\tfloat fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\\n\\n\t\t\t\tshadow *= shadowDarkness[ i ];\\n\\n\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t\tfloat xPixelOffset = texelSizeX;\\n\t\t\t\tfloat yPixelOffset = texelSizeY;\\n\\n\t\t\t\tfloat dx0 = - 1.0 * xPixelOffset;\\n\t\t\t\tfloat dy0 = - 1.0 * yPixelOffset;\\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\\n\\n\t\t\t\tmat3 shadowKernel;\\n\t\t\t\tmat3 depthKernel;\\n\\n\t\t\t\tdepthKernel[ 0 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\\n\t\t\t\tdepthKernel[ 0 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\\n\t\t\t\tdepthKernel[ 0 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\\n\t\t\t\tdepthKernel[ 1 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\\n\t\t\t\tdepthKernel[ 1 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\\n\t\t\t\tdepthKernel[ 1 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\\n\t\t\t\tdepthKernel[ 2 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\\n\t\t\t\tdepthKernel[ 2 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\\n\t\t\t\tdepthKernel[ 2 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\\n\\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\\n\t\t\t\tshadowKernel[ 0 ] = vec3( lessThan( depthKernel[ 0 ], shadowZ ) );\\n\t\t\t\tshadowKernel[ 0 ] *= vec3( 0.25 );\\n\\n\t\t\t\tshadowKernel[ 1 ] = vec3( lessThan( depthKernel[ 1 ], shadowZ ) );\\n\t\t\t\tshadowKernel[ 1 ] *= vec3( 0.25 );\\n\\n\t\t\t\tshadowKernel[ 2 ] = vec3( lessThan( depthKernel[ 2 ], shadowZ ) );\\n\t\t\t\tshadowKernel[ 2 ] *= vec3( 0.25 );\\n\\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[ i ].xy );\\n\\n\t\t\t\tshadowKernel[ 0 ] = mix( shadowKernel[ 1 ], shadowKernel[ 0 ], fractionalCoord.x );\\n\t\t\t\tshadowKernel[ 1 ] = mix( shadowKernel[ 2 ], shadowKernel[ 1 ], fractionalCoord.x );\\n\\n\t\t\t\tvec4 shadowValues;\\n\t\t\t\tshadowValues.x = mix( shadowKernel[ 0 ][ 1 ], shadowKernel[ 0 ][ 0 ], fractionalCoord.y );\\n\t\t\t\tshadowValues.y = mix( shadowKernel[ 0 ][ 2 ], shadowKernel[ 0 ][ 1 ], fractionalCoord.y );\\n\t\t\t\tshadowValues.z = mix( shadowKernel[ 1 ][ 1 ], shadowKernel[ 1 ][ 0 ], fractionalCoord.y );\\n\t\t\t\tshadowValues.w = mix( shadowKernel[ 1 ][ 2 ], shadowKernel[ 1 ][ 1 ], fractionalCoord.y );\\n\\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) ) * shadowDarkness[ i ];\\n\\n\t#else \\n\t\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\\n\\n\t\t\t\tif ( fDepth < shadowCoord.z )\\n\t\t\t\t\tshadow = shadowDarkness[ i ];\\n\\n\t#endif\\n\\n\t\t\t}\\n\\n#ifdef SHADOWMAP_DEBUG\\n\\n\t\t\tif ( inFrustum ) {\\n\\n\t\t\t\tif ( i == 0 ) {\\n\\n\t\t\t\t\toutgoingLight *= vec3( 1.0, 0.5, 0.0 );\\n\\n\t\t\t\t} else if ( i == 1 ) {\\n\\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 1.0, 0.8 );\\n\\n\t\t\t\t} else {\\n\\n\t\t\t\t\toutgoingLight *= vec3( 0.0, 0.5, 1.0 );\\n\\n\t\t\t\t}\\n\\n\t\t\t}\\n\\n#endif\\n\\n#if defined( POINT_LIGHT_SHADOWS )\\n\\n\t\t}\\n\\n#endif\\n\\n\t\tshadowMask = shadowMask * vec3( 1.0 - shadow );\\n\\n\t}\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment'] = \"#ifdef USE_SHADOWMAP\\n\\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\\n\\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\\n\tuniform float shadowBias[ MAX_SHADOWS ];\\n\\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\\n\\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\\n\\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\t\tfloat depth = dot( rgba_depth, bit_shift );\\n\t\treturn depth;\\n\\n\t}\\n\\n\t#if defined(POINT_LIGHT_SHADOWS)\\n\\n\\n\t\tvoid adjustShadowValue1K( const float testDepth, const vec4 textureData, const float bias, inout float shadowValue ) {\\n\\n\t\t\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\t\t\tif ( testDepth >= dot( textureData, bitSh ) * 1000.0 + bias )\\n\t\t\t\tshadowValue += 1.0;\\n\\n\t\t}\\n\\n\\n\t\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\n\\n\t\t\tvec3 absV = abs( v );\\n\\n\\n\t\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\t\tabsV *= scaleToCube;\\n\\n\\n\t\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\n\\n\\n\t\t\tvec2 planar = v.xy;\\n\\n\t\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\t\tfloat almostOne = 1.0 - almostATexel;\\n\\n\t\t\tif ( absV.z >= almostOne ) {\\n\\n\t\t\t\tif ( v.z > 0.0 )\\n\t\t\t\t\tplanar.x = 4.0 - v.x;\\n\\n\t\t\t} else if ( absV.x >= almostOne ) {\\n\\n\t\t\t\tfloat signX = sign( v.x );\\n\t\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\\n\t\t\t} else if ( absV.y >= almostOne ) {\\n\\n\t\t\t\tfloat signY = sign( v.y );\\n\t\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\t\tplanar.y = v.z * signY - 2.0;\\n\\n\t\t\t}\\n\\n\\n\t\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\n\t\t}\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex'] = \"#ifdef USE_SHADOWMAP\\n\\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_vertex'] = \"#ifdef USE_SHADOWMAP\\n\\n\tfor ( int i = 0; i < MAX_SHADOWS; i ++ ) {\\n\\n\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\\n\\n\t}\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinbase_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinning_pars_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\\n\t#ifdef BONE_TEXTURE\\n\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\n\t\t\ty = dy * ( y + 0.5 );\\n\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\n\t\t\treturn bone;\\n\\n\t\t}\\n\\n\t#else\\n\\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\\n\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\\n\t\t}\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinning_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinnormal_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'specularmap_fragment'] = \"float specularStrength;\\n\\n#ifdef USE_SPECULARMAP\\n\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n\\n#else\\n\\n\tspecularStrength = 1.0;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'specularmap_pars_fragment'] = \"#ifdef USE_SPECULARMAP\\n\\n\tuniform sampler2D specularMap;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_pars_fragment'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\tvarying vec2 vUv2;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_pars_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\n\tvUv2 = uv2;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_pars_fragment'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\\n\\n\tvarying vec2 vUv;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_pars_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\\n\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\\n\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'worldpos_vertex'] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\n\t#ifdef USE_SKINNING\\n\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\\n\t#else\\n\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\n\t#endif\\n\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/UniformsUtils.js\r\n\r\n/**\r\n * Uniform Utilities\r\n */\r\n\r\nTHREE.UniformsUtils = {\r\n\r\n\tmerge: function ( uniforms ) {\r\n\r\n\t\tvar merged = {};\r\n\r\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\r\n\r\n\t\t\tfor ( var p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t},\r\n\r\n\tclone: function ( uniforms_src ) {\r\n\r\n\t\tvar uniforms_dst = {};\r\n\r\n\t\tfor ( var u in uniforms_src ) {\r\n\r\n\t\t\tuniforms_dst[ u ] = {};\r\n\r\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\r\n\r\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\r\n\r\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\r\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms_dst;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/UniformsLib.js\r\n\r\n/**\r\n * Uniforms library for shared webgl shaders\r\n */\r\n\r\nTHREE.UniformsLib = {\r\n\r\n\tcommon: {\r\n\r\n\t\t\"diffuse\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\r\n\t\t\"map\" : { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\r\n\t\t\"specularMap\" : { type: \"t\", value: null },\r\n\t\t\"alphaMap\" : { type: \"t\", value: null },\r\n\r\n\t\t\"envMap\" : { type: \"t\", value: null },\r\n\t\t\"flipEnvMap\" : { type: \"f\", value: - 1 },\r\n\t\t\"reflectivity\" : { type: \"f\", value: 1.0 },\r\n\t\t\"refractionRatio\" : { type: \"f\", value: 0.98 }\r\n\r\n\t},\r\n\r\n\taomap: {\r\n\r\n\t\t\"aoMap\" : { type: \"t\", value: null },\r\n\t\t\"aoMapIntensity\" : { type: \"f\", value: 1 },\r\n\r\n\t},\r\n\r\n\tlightmap: {\r\n\r\n\t\t\"lightMap\" : { type: \"t\", value: null },\r\n\t\t\"lightMapIntensity\" : { type: \"f\", value: 1 },\r\n\r\n\t},\r\n\r\n\temissivemap: {\r\n\r\n\t\t\"emissiveMap\" : { type: \"t\", value: null },\r\n\r\n\t},\r\n\r\n\tbumpmap: {\r\n\r\n\t\t\"bumpMap\" : { type: \"t\", value: null },\r\n\t\t\"bumpScale\" : { type: \"f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tnormalmap: {\r\n\r\n\t\t\"normalMap\" : { type: \"t\", value: null },\r\n\t\t\"normalScale\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\r\n\r\n\t},\r\n\r\n\tdisplacementmap: {\r\n\r\n\t\t\"displacementMap\" : { type: \"t\", value: null },\r\n\t\t\"displacementScale\" : { type: \"f\", value: 1 },\r\n\t\t\"displacementBias\" : { type: \"f\", value: 0 }\r\n\r\n\t},\r\n\r\n\tfog : {\r\n\r\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tlights: {\r\n\r\n\t\t\"ambientLightColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"directionalLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"directionalLightColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"hemisphereLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"hemisphereLightSkyColor\" : { type: \"fv\", value: [] },\r\n\t\t\"hemisphereLightGroundColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"pointLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\"pointLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\"pointLightDistance\" : { type: \"fv1\", value: [] },\r\n\t\t\"pointLightDecay\" : { type: \"fv1\", value: [] },\r\n\r\n\t\t\"spotLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightDistance\" : { type: \"fv1\", value: [] },\r\n\t\t\"spotLightAngleCos\" : { type: \"fv1\", value: [] },\r\n\t\t\"spotLightExponent\" : { type: \"fv1\", value: [] },\r\n\t\t\"spotLightDecay\" : { type: \"fv1\", value: [] }\r\n\r\n\t},\r\n\r\n\tpoints: {\r\n\r\n\t\t\"psColor\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\t\t\"size\" : { type: \"f\", value: 1.0 },\r\n\t\t\"scale\" : { type: \"f\", value: 1.0 },\r\n\t\t\"map\" : { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\r\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tshadowmap: {\r\n\r\n\t\t\"shadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"shadowMapSize\": { type: \"v2v\", value: [] },\r\n\r\n\t\t\"shadowBias\" : { type: \"fv1\", value: [] },\r\n\t\t\"shadowDarkness\": { type: \"fv1\", value: [] },\r\n\r\n\t\t\"shadowMatrix\" : { type: \"m4v\", value: [] }\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/ShaderLib.js\r\n\r\n/**\r\n * Webgl Shader Library for three.js\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\n\r\nTHREE.ShaderLib = {\r\n\r\n\t'basic': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\r\n\t\t\t\"\t#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"beginnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\"\t#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"aomap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\r\n\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\r\n\t\t\t\"\tvec3 totalAmbientLight = vec3( 1.0 );\", // hardwired\r\n\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"aomap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\"\toutgoingLight = diffuseColor.rgb * totalAmbientLight * shadowMask;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\t'lambert': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"#define LAMBERT\",\r\n\r\n\t\t\t\"varying vec3 vLightFront;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"\tvarying vec3 vLightBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_lambert_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"beginnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_lambert_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform vec3 emissive;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\t\"varying vec3 vLightFront;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"\tvarying vec3 vLightBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\t// outgoing light does not have an alpha, the surface does\r\n\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\r\n\t\t\t\"\tvec3 totalAmbientLight = ambientLightColor;\",\r\n\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\"\t#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"\t\tif ( gl_FrontFacing )\",\r\n\t\t\t\"\t\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\",\r\n\t\t\t\"\t\telse\",\r\n\t\t\t\"\t\t\toutgoingLight += diffuseColor.rgb * ( vLightBack * shadowMask + totalAmbientLight ) + emissive;\",\r\n\r\n\t\t\t\"\t#else\",\r\n\r\n\t\t\t\"\t\toutgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;\",\r\n\r\n\t\t\t\"\t#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\t'phong': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lightmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"emissivemap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"bumpmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"displacementmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\t\"shininess\": { type: \"f\", value: 30 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"#define PHONG\",\r\n\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\r\n\t\t\t\"#ifndef FLAT_SHADED\",\r\n\r\n\t\t\t\"\tvarying vec3 vNormal;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"displacementmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"uv2_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"beginnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\"#ifndef FLAT_SHADED\", // Normal computed with derivatives when FLAT_SHADED\r\n\r\n\t\t\t\"\tvNormal = normalize( transformedNormal );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"displacementmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n\t\t\t\"\tvViewPosition = - mvPosition.xyz;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"#define PHONG\",\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform vec3 emissive;\",\r\n\t\t\t\"uniform vec3 specular;\",\r\n\t\t\t\"uniform float shininess;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"uv2_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"aomap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"emissivemap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"bumpmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"normalmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\r\n\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\r\n\t\t\t\"\tvec3 totalAmbientLight = ambientLightColor;\",\r\n\t\t\t\"\tvec3 totalEmissiveLight = emissive;\",\r\n\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"normal_phong_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"hemilight_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"aomap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"emissivemap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\t\"totalDiffuseLight *= shadowMask;\",\r\n\t\t\t\t\"totalSpecularLight *= shadowMask;\",\r\n\r\n\t\t\t\t\"#ifdef METAL\",\r\n\r\n\t\t\t\t\"\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) * specular + totalSpecularLight + totalEmissiveLight;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) + totalSpecularLight + totalEmissiveLight;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\t'points': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"points\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform float size;\",\r\n\t\t\t\"uniform float scale;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"\t#ifdef USE_SIZEATTENUATION\",\r\n\t\t\t\"\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\",\r\n\t\t\t\"\t#else\",\r\n\t\t\t\"\t\tgl_PointSize = size;\",\r\n\t\t\t\"\t#endif\",\r\n\r\n\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 psColor;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_particle_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\r\n\t\t\t\"\tvec4 diffuseColor = vec4( psColor, opacity );\",\r\n\t\t\t\"\tvec3 shadowMask = vec3( 1.0 );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_particle_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\"\toutgoingLight = diffuseColor.rgb * shadowMask;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\t'dashed': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"scale\"    : { type: \"f\", value: 1 },\r\n\t\t\t\t\"dashSize\" : { type: \"f\", value: 1 },\r\n\t\t\t\t\"totalSize\": { type: \"f\", value: 2 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform float scale;\",\r\n\t\t\t\"attribute float lineDistance;\",\r\n\r\n\t\t\t\"varying float vLineDistance;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\"\tvLineDistance = scale * lineDistance;\",\r\n\r\n\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform float dashSize;\",\r\n\t\t\t\"uniform float totalSize;\",\r\n\r\n\t\t\t\"varying float vLineDistance;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\",\r\n\r\n\t\t\t\"\t\tdiscard;\",\r\n\r\n\t\t\t\"\t}\",\r\n\r\n\t\t\t\"\tvec3 outgoingLight = vec3( 0.0 );\",\r\n\t\t\t\"\tvec4 diffuseColor = vec4( diffuse, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\r\n\t\t\t\"\toutgoingLight = diffuseColor.rgb;\", // simple shader\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\t'depth': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"mNear\": { type: \"f\", value: 1.0 },\r\n\t\t\t\"mFar\" : { type: \"f\", value: 2000.0 },\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float mNear;\",\r\n\t\t\t\"uniform float mFar;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\r\n\t\t\t\"\t#ifdef USE_LOGDEPTHBUF_EXT\",\r\n\r\n\t\t\t\"\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\",\r\n\r\n\t\t\t\"\t#else\",\r\n\r\n\t\t\t\"\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\r\n\t\t\t\"\t#endif\",\r\n\r\n\t\t\t\"\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\",\r\n\t\t\t\"\tgl_FragColor = vec4( vec3( color ), opacity );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\t'normal': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'cube': {\r\n\r\n\t\tuniforms: { \"tCube\": { type: \"t\", value: null },\r\n\t\t\t\t\t\"tFlip\": { type: \"f\", value: - 1 } },\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tvWorldPosition = transformDirection( position, modelMatrix );\",\r\n\r\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform samplerCube tCube;\",\r\n\t\t\t\"uniform float tFlip;\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'equirect': {\r\n\r\n\t\tuniforms: { \"tEquirect\": { type: \"t\", value: null },\r\n\t\t\t\t\t\"tFlip\": { type: \"f\", value: - 1 } },\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\"\tvWorldPosition = transformDirection( position, modelMatrix );\",\r\n\r\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform sampler2D tEquirect;\",\r\n\t\t\t\"uniform float tFlip;\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t// \"\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\r\n\t\t\t\t\"vec3 direction = normalize( vWorldPosition );\",\r\n\t\t\t\t\"vec2 sampleUV;\",\r\n\t\t\t\t\"sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\",\r\n\t\t\t\t\"sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\r\n\t\t\t\t\"gl_FragColor = texture2D( tEquirect, sampleUV );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\t/* Depth encoding into RGBA texture\r\n\t *\r\n\t * based on SpiderGL shadow map example\r\n\t * http://spidergl.org/example.php?id=6\r\n\t *\r\n\t * originally from\r\n\t * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\r\n\t *\r\n\t * see also\r\n\t * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n\t */\r\n\r\n\t'depthRGBA': {\r\n\r\n\t\tuniforms: {},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\r\n\r\n\t\t\t\"vec4 pack_depth( const in float depth ) {\",\r\n\r\n\t\t\t\"\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\r\n\t\t\t\"\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\r\n\t\t\t\"\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\", // \"\tvec4 res = fract( depth * bit_shift );\",\r\n\t\t\t\"\tres -= res.xxyz * bit_mask;\",\r\n\t\t\t\"\treturn res;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\r\n\r\n\t\t\t\"\t#ifdef USE_LOGDEPTHBUF_EXT\",\r\n\r\n\t\t\t\"\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\",\r\n\r\n\t\t\t\"\t#else\",\r\n\r\n\t\t\t\"\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\",\r\n\r\n\t\t\t\"\t#endif\",\r\n\r\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );\",\r\n\t\t\t\t//\"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );\",\r\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( z );\",\r\n\t\t\t\t//\"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\r\n\t'distanceRGBA': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"lightPos\": { type: \"v3\", value: new THREE.Vector3( 0, 0, 0 ) }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec4 vWorldPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"begin_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"project_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\r\n\t\t\t\t\"vWorldPosition = worldPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 lightPos;\",\r\n\t\t\t\"varying vec4 vWorldPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"common\" ],\r\n\r\n\t\t\t\"vec4 pack1K ( float depth ) {\",\r\n\r\n\t\t\t\"   depth /= 1000.0;\",\r\n\t\t\t\"   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\r\n  \t\t\t\"\tconst vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\r\n   \t\t\t\"\tvec4 res = fract( depth * bitSh );\",\r\n   \t\t\t\"\tres -= res.xxyz * bitMsk;\",\r\n   \t\t\t\"\treturn res; \",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"float unpack1K ( vec4 color ) {\",\r\n\r\n\t\t\t\"\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\r\n\t\t\t\"\treturn dot( color, bitSh ) * 1000.0;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"void main () {\",\r\n\r\n\t\t\t\"\tgl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/WebGLRenderer.js\r\n\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.WebGLRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\r\n\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\r\n\t_width = _canvas.width,\r\n\t_height = _canvas.height,\r\n\r\n\tpixelRatio = 1,\r\n\r\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n\r\n\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t_clearAlpha = 0;\r\n\r\n\tvar lights = [];\r\n\r\n\tvar opaqueObjects = [];\r\n\tvar opaqueObjectsLastIndex = - 1;\r\n\tvar transparentObjects = [];\r\n\tvar transparentObjectsLastIndex = - 1;\r\n\r\n\tvar morphInfluences = new Float32Array( 8 );\r\n\r\n\r\n\tvar sprites = [];\r\n\tvar lensFlares = [];\r\n\r\n\t// public properties\r\n\r\n\tthis.domElement = _canvas;\r\n\tthis.context = null;\r\n\r\n\t// clearing\r\n\r\n\tthis.autoClear = true;\r\n\tthis.autoClearColor = true;\r\n\tthis.autoClearDepth = true;\r\n\tthis.autoClearStencil = true;\r\n\r\n\t// scene graph\r\n\r\n\tthis.sortObjects = true;\r\n\r\n\t// physically based shading\r\n\r\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\tthis.gammaInput = false;\r\n\tthis.gammaOutput = false;\r\n\r\n\t// morphs\r\n\r\n\tthis.maxMorphTargets = 8;\r\n\tthis.maxMorphNormals = 4;\r\n\r\n\t// flags\r\n\r\n\tthis.autoScaleCubemaps = true;\r\n\r\n\t// internal properties\r\n\r\n\tvar _this = this,\r\n\r\n\t// internal state cache\r\n\r\n\t_currentProgram = null,\r\n\t_currentFramebuffer = null,\r\n\t_currentMaterialId = - 1,\r\n\t_currentGeometryProgram = '',\r\n\t_currentCamera = null,\r\n\r\n\t_usedTextureUnits = 0,\r\n\r\n\t_viewportX = 0,\r\n\t_viewportY = 0,\r\n\t_viewportWidth = _canvas.width,\r\n\t_viewportHeight = _canvas.height,\r\n\t_currentWidth = 0,\r\n\t_currentHeight = 0,\r\n\r\n\t// frustum\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t // camera matrices cache\r\n\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\r\n\t// light arrays cache\r\n\r\n\t_direction = new THREE.Vector3(),\r\n\r\n\t_lightsNeedUpdate = true,\r\n\r\n\t_lights = {\r\n\r\n\t\tambient: [ 0, 0, 0 ],\r\n\t\tdirectional: { length: 0, colors: [], positions: [] },\r\n\t\tpoint: { length: 0, colors: [], positions: [], distances: [], decays: [] },\r\n\t\tspot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [], decays: [] },\r\n\t\themi: { length: 0, skyColors: [], groundColors: [], positions: [] }\r\n\r\n\t},\r\n\r\n\t// info\r\n\r\n\t_infoMemory = {\r\n\r\n\t\tgeometries: 0,\r\n\t\ttextures: 0\r\n\r\n\t},\r\n\r\n\t_infoRender = {\r\n\r\n\t\tcalls: 0,\r\n\t\tvertices: 0,\r\n\t\tfaces: 0,\r\n\t\tpoints: 0\r\n\r\n\t};\r\n\r\n\tthis.info = {\r\n\r\n\t\trender: _infoRender,\r\n\t\tmemory: _infoMemory,\r\n\t\tprograms: null\r\n\r\n\t};\r\n\r\n\r\n\t// initialize\r\n\r\n\tvar _gl;\r\n\r\n\ttry {\r\n\r\n\t\tvar attributes = {\r\n\t\t\talpha: _alpha,\r\n\t\t\tdepth: _depth,\r\n\t\t\tstencil: _stencil,\r\n\t\t\tantialias: _antialias,\r\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\r\n\t\t};\r\n\r\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\r\n\r\n\t\tif ( _gl === null ) {\r\n\r\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context.';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\r\n\t} catch ( error ) {\r\n\r\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\r\n\r\n\t}\r\n\r\n\tvar extensions = new THREE.WebGLExtensions( _gl );\r\n\r\n\textensions.get( 'OES_texture_float' );\r\n\textensions.get( 'OES_texture_float_linear' );\r\n\textensions.get( 'OES_texture_half_float' );\r\n\textensions.get( 'OES_texture_half_float_linear' );\r\n\textensions.get( 'OES_standard_derivatives' );\r\n\textensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\tif ( extensions.get( 'OES_element_index_uint' ) ) {\r\n\r\n\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\r\n\r\n\t}\r\n\r\n\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\r\n\r\n\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\r\n\tvar properties = new THREE.WebGLProperties();\r\n\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\r\n\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\r\n\r\n\tthis.info.programs = programCache.programs;\r\n\r\n\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\r\n\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\r\n\r\n\t//\r\n\r\n\tfunction glClearColor( r, g, b, a ) {\r\n\r\n\t\tif ( _premultipliedAlpha === true ) {\r\n\r\n\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t}\r\n\r\n\t\t_gl.clearColor( r, g, b, a );\r\n\r\n\t}\r\n\r\n\tfunction setDefaultGLState() {\r\n\r\n\t\tstate.init();\r\n\r\n\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t}\r\n\r\n\tfunction resetGLState() {\r\n\r\n\t\t_currentProgram = null;\r\n\t\t_currentCamera = null;\r\n\r\n\t\t_currentGeometryProgram = '';\r\n\t\t_currentMaterialId = - 1;\r\n\r\n\t\t_lightsNeedUpdate = true;\r\n\r\n\t\tstate.reset();\r\n\r\n\t}\r\n\r\n\tsetDefaultGLState();\r\n\r\n\tthis.context = _gl;\r\n\tthis.capabilities = capabilities;\r\n\tthis.extensions = extensions;\r\n\tthis.state = state;\r\n\r\n\t// shadow map\r\n\r\n\tvar shadowMap = new THREE.WebGLShadowMap( this, lights, objects );\r\n\r\n\tthis.shadowMap = shadowMap;\r\n\r\n\r\n\t// Plugins\r\n\r\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\r\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\r\n\r\n\t// API\r\n\r\n\tthis.getContext = function () {\r\n\r\n\t\treturn _gl;\r\n\r\n\t};\r\n\r\n\tthis.getContextAttributes = function () {\r\n\r\n\t\treturn _gl.getContextAttributes();\r\n\r\n\t};\r\n\r\n\tthis.forceContextLoss = function () {\r\n\r\n\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\r\n\r\n\t};\r\n\r\n\tthis.getMaxAnisotropy = ( function () {\r\n\r\n\t\tvar value;\r\n\r\n\t\treturn function getMaxAnisotropy() {\r\n\r\n\t\t\tif ( value !== undefined ) return value;\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tvalue = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvalue = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t} )();\r\n\r\n\tthis.getPrecision = function () {\r\n\r\n\t\treturn capabilities.precision;\r\n\r\n\t};\r\n\r\n\tthis.getPixelRatio = function () {\r\n\r\n\t\treturn pixelRatio;\r\n\r\n\t};\r\n\r\n\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\tif ( value !== undefined ) pixelRatio = value;\r\n\r\n\t};\r\n\r\n\tthis.getSize = function () {\r\n\r\n\t\treturn {\r\n\t\t\twidth: _width,\r\n\t\t\theight: _height\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height, updateStyle ) {\r\n\r\n\t\t_width = width;\r\n\t\t_height = height;\r\n\r\n\t\t_canvas.width = width * pixelRatio;\r\n\t\t_canvas.height = height * pixelRatio;\r\n\r\n\t\tif ( updateStyle !== false ) {\r\n\r\n\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t}\r\n\r\n\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t};\r\n\r\n\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t_viewportX = x * pixelRatio;\r\n\t\t_viewportY = y * pixelRatio;\r\n\r\n\t\t_viewportWidth = width * pixelRatio;\r\n\t\t_viewportHeight = height * pixelRatio;\r\n\r\n\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\r\n\r\n\t};\r\n\r\n\tthis.getViewport = function ( dimensions ) {\r\n\r\n\t\tdimensions.x = _viewportX / pixelRatio;\r\n\t\tdimensions.y = _viewportY / pixelRatio;\r\n\r\n\t\tdimensions.z = _viewportWidth / pixelRatio;\r\n\t\tdimensions.w = _viewportHeight / pixelRatio;\r\n\r\n\t};\r\n\r\n\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\t_gl.scissor(\r\n\t\t\tx * pixelRatio,\r\n\t\t\ty * pixelRatio,\r\n\t\t\twidth * pixelRatio,\r\n\t\t\theight * pixelRatio\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tthis.enableScissorTest = function ( boolean ) {\r\n\r\n\t\tstate.setScissorTest( boolean );\r\n\r\n\t};\r\n\r\n\t// Clearing\r\n\r\n\tthis.getClearColor = function () {\r\n\r\n\t\treturn _clearColor;\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, alpha ) {\r\n\r\n\t\t_clearColor.set( color );\r\n\r\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.getClearAlpha = function () {\r\n\r\n\t\treturn _clearAlpha;\r\n\r\n\t};\r\n\r\n\tthis.setClearAlpha = function ( alpha ) {\r\n\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\tvar bits = 0;\r\n\r\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t_gl.clear( bits );\r\n\r\n\t};\r\n\r\n\tthis.clearColor = function () {\r\n\r\n\t\t_gl.clear( _gl.COLOR_BUFFER_BIT );\r\n\r\n\t};\r\n\r\n\tthis.clearDepth = function () {\r\n\r\n\t\t_gl.clear( _gl.DEPTH_BUFFER_BIT );\r\n\r\n\t};\r\n\r\n\tthis.clearStencil = function () {\r\n\r\n\t\t_gl.clear( _gl.STENCIL_BUFFER_BIT );\r\n\r\n\t};\r\n\r\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\t\tthis.clear( color, depth, stencil );\r\n\r\n\t};\r\n\r\n\t// Reset\r\n\r\n\tthis.resetGLState = resetGLState;\r\n\r\n\tthis.dispose = function() {\r\n\r\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\r\n\t};\r\n\r\n\t// Events\r\n\r\n\tfunction onContextLost( event ) {\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tresetGLState();\r\n\t\tsetDefaultGLState();\r\n\r\n\t\tproperties.clear();\r\n\r\n\t};\r\n\r\n\tfunction onTextureDispose( event ) {\r\n\r\n\t\tvar texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tdeallocateTexture( texture );\r\n\r\n\t\t_infoMemory.textures --;\r\n\r\n\r\n\t}\r\n\r\n\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\tvar renderTarget = event.target;\r\n\r\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t_infoMemory.textures --;\r\n\r\n\t}\r\n\r\n\tfunction onMaterialDispose( event ) {\r\n\r\n\t\tvar material = event.target;\r\n\r\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tdeallocateMaterial( material );\r\n\r\n\t}\r\n\r\n\t// Buffer deallocation\r\n\r\n\tfunction deallocateTexture( texture ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t// cube texture\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// 2D texture\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\t// remove all webgl properties\r\n\t\tproperties.delete( texture );\r\n\r\n\t}\r\n\r\n\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\tif ( ! renderTarget || textureProperties.__webglTexture === undefined ) return;\r\n\r\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglRenderbuffer[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglRenderbuffer );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( renderTarget.texture );\r\n\t\tproperties.delete( renderTarget );\r\n\r\n\t}\r\n\r\n\tfunction deallocateMaterial( material ) {\r\n\r\n\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\tproperties.delete( material );\r\n\r\n\t}\r\n\r\n\r\n\tfunction releaseMaterialProgramReference( material ) {\r\n\r\n\t\tvar programInfo = properties.get( material ).program;\r\n\r\n\t\tmaterial.program = undefined;\r\n\r\n\t\tif ( programInfo !== undefined ) {\r\n\r\n\t\t\tprogramCache.releaseProgram( programInfo );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Buffer rendering\r\n\r\n\tthis.renderBufferImmediate = function ( object, program, material ) {\r\n\r\n\t\tstate.initAttributes();\r\n\r\n\t\tvar buffers = properties.get( object );\r\n\r\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\r\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\r\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\r\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\r\n\r\n\t\tvar attributes = program.getAttributes();\r\n\r\n\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\r\n\r\n\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.shading === THREE.FlatShading ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\r\n\r\n\t\t\t\t\tvar array = object.normalArray;\r\n\r\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\r\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\r\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\r\n\r\n\t\t\t\t\tarray[ i + 0 ] = nx;\r\n\t\t\t\t\tarray[ i + 1 ] = ny;\r\n\t\t\t\t\tarray[ i + 2 ] = nz;\r\n\r\n\t\t\t\t\tarray[ i + 3 ] = nx;\r\n\t\t\t\t\tarray[ i + 4 ] = ny;\r\n\t\t\t\t\tarray[ i + 5 ] = nz;\r\n\r\n\t\t\t\t\tarray[ i + 6 ] = nx;\r\n\t\t\t\t\tarray[ i + 7 ] = ny;\r\n\t\t\t\t\tarray[ i + 8 ] = nz;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.normal );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasUvs && material.map ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.uv );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.color );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\r\n\t\tobject.count = 0;\r\n\r\n\t};\r\n\r\n\tthis.renderBufferDirect = function ( camera, lights, fog, geometry, material, object, group ) {\r\n\r\n\t\tsetMaterial( material );\r\n\r\n\t\tvar program = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\tvar updateBuffers = false;\r\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\r\n\r\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\r\n\r\n\t\t\t_currentGeometryProgram = geometryProgram;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tvar morphTargetInfluences = object.morphTargetInfluences;\r\n\r\n\t\tif ( morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\tvar activeInfluences = [];\r\n\r\n\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar influence = morphTargetInfluences[ i ];\r\n\t\t\t\tactiveInfluences.push( [ influence, i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tactiveInfluences.sort( numericalSort );\r\n\r\n\t\t\tif ( activeInfluences.length > 8 ) {\r\n\r\n\t\t\t\tactiveInfluences.length = 8;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar influence = activeInfluences[ i ];\r\n\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\r\n\r\n\t\t\t\tif ( influence[ 0 ] !== 0 ) {\r\n\r\n\t\t\t\t\tvar index = influence[ 1 ];\r\n\r\n\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\r\n\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\r\n\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar uniforms = program.getUniforms();\r\n\r\n\t\t\tif ( uniforms.morphTargetInfluences !== null ) {\r\n\r\n\t\t\t\t_gl.uniform1fv( uniforms.morphTargetInfluences, morphInfluences );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar position = geometry.attributes.position;\r\n\r\n\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\tindex = objects.getWireframeAttribute( geometry );\r\n\r\n\t\t}\r\n\r\n\t\tvar renderer;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\trenderer.setIndex( index );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer = bufferRenderer;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tsetupVertexAttributes( material, program, geometry );\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar dataStart = 0;\r\n\t\tvar dataCount = Infinity;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tdataCount = index.count\r\n\r\n\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\tdataCount = position.count;\r\n\r\n\t\t}\r\n\r\n\t\tvar rangeStart = geometry.drawRange.start;\r\n\t\tvar rangeCount = geometry.drawRange.count;\r\n\r\n\t\tvar groupStart = group !== null ? group.start : 0;\r\n\t\tvar groupCount = group !== null ? group.count : Infinity;\r\n\r\n\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\r\n\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\r\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\r\n\t\t//\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * pixelRatio );\r\n\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry && geometry.maxInstancedCount > 0 ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tvar lineWidth = material.linewidth;\r\n\r\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\r\n\r\n\t\t\tstate.setLineWidth( lineWidth * pixelRatio );\r\n\r\n\t\t\tif ( object instanceof THREE.LineSegments ) {\r\n\r\n\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t} else if ( object instanceof THREE.Points ) {\r\n\r\n\t\t\trenderer.setMode( _gl.POINTS );\r\n\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\r\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( startIndex === undefined ) startIndex = 0;\r\n\r\n\t\tstate.initAttributes();\r\n\r\n\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n\t\tfor ( var name in programAttributes ) {\r\n\r\n\t\t\tvar programAttribute = programAttributes[ name ];\r\n\r\n\t\t\tif ( programAttribute >= 0 ) {\r\n\r\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\r\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\r\n\r\n\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\r\n\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\r\n\r\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\r\n\r\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\r\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\tswitch ( value.length ) {\r\n\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t}\r\n\r\n\t// Sorting\r\n\r\n\tfunction numericalSort ( a, b ) {\r\n\r\n\t\treturn b[ 0 ] - a[ 0 ];\r\n\r\n\t}\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\r\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\r\n\t\t} else if ( a.material.id !== b.material.id ) {\r\n\r\n\t\t\treturn a.material.id - b.material.id;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn a.z - b.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reversePainterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\r\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\r\n\t\t} if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Rendering\r\n\r\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\t// reset caching for this frame\r\n\r\n\t\t_currentGeometryProgram = '';\r\n\t\t_currentMaterialId = - 1;\r\n\t\t_currentCamera = null;\r\n\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\tlights.length = 0;\r\n\r\n\t\topaqueObjectsLastIndex = - 1;\r\n\t\ttransparentObjectsLastIndex = - 1;\r\n\r\n\t\tsprites.length = 0;\r\n\t\tlensFlares.length = 0;\r\n\r\n\t\tprojectObject( scene, camera );\r\n\r\n\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\r\n\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\r\n\r\n\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\topaqueObjects.sort( painterSortStable );\r\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tshadowMap.render( scene );\r\n\r\n\t\t//\r\n\r\n\t\t_infoRender.calls = 0;\r\n\t\t_infoRender.vertices = 0;\r\n\t\t_infoRender.faces = 0;\r\n\t\t_infoRender.points = 0;\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\tif ( this.autoClear || forceClear ) {\r\n\r\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\r\n\t\t\trenderObjects( opaqueObjects, camera, lights, fog, overrideMaterial );\r\n\t\t\trenderObjects( transparentObjects, camera, lights, fog, overrideMaterial );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\tstate.setBlending( THREE.NoBlending );\r\n\t\t\trenderObjects( opaqueObjects, camera, lights, fog );\r\n\r\n\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\trenderObjects( transparentObjects, camera, lights, fog );\r\n\r\n\t\t}\r\n\r\n\t\t// custom render plugins (post pass)\r\n\r\n\t\tspritePlugin.render( scene, camera );\r\n\t\tlensFlarePlugin.render( scene, camera, _currentWidth, _currentHeight );\r\n\r\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tvar texture = renderTarget.texture;\r\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\r\n\t\t\tif ( texture.generateMipmaps && isTargetPowerOfTwo && texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\t\t updateRenderTargetMipmap( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\tstate.setDepthTest( true );\r\n\t\tstate.setDepthWrite( true );\r\n\t\tstate.setColorWrite( true );\r\n\r\n\t\t// _gl.finish();\r\n\r\n\t};\r\n\r\n\tfunction pushRenderItem( object, geometry, material, z, group ) {\r\n\r\n\t\tvar array, index;\r\n\r\n\t\t// allocate the next position in the appropriate array\r\n\r\n\t\tif ( material.transparent ) {\r\n\r\n\t\t\tarray = transparentObjects;\r\n\t\t\tindex = ++ transparentObjectsLastIndex;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarray = opaqueObjects;\r\n\t\t\tindex = ++ opaqueObjectsLastIndex;\r\n\r\n\t\t}\r\n\r\n\t\t// recycle existing render item or grow the array\r\n\r\n\t\tvar renderItem = array[ index ];\r\n\r\n\t\tif ( renderItem !== undefined ) {\r\n\r\n\t\t\trenderItem.id = object.id;\r\n\t\t\trenderItem.object = object;\r\n\t\t\trenderItem.geometry = geometry;\r\n\t\t\trenderItem.material = material;\r\n\t\t\trenderItem.z = _vector3.z;\r\n\t\t\trenderItem.group = group;\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderItem = {\r\n\t\t\t\tid: object.id,\r\n\t\t\t\tobject: object,\r\n\t\t\t\tgeometry: geometry,\r\n\t\t\t\tmaterial: material,\r\n\t\t\t\tz: _vector3.z,\r\n\t\t\t\tgroup: group\r\n\t\t\t};\r\n\r\n\t\t\t// assert( index === array.length );\r\n\t\t\tarray.push( renderItem );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction projectObject( object, camera ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tif ( ( object.channels.mask & camera.channels.mask ) !== 0 ) {\r\n\r\n\t\t\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\t\t\tlights.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\t\tsprites.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\t\tlensFlares.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\r\n\r\n\t\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\r\n\r\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\t\tobject.skeleton.update();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( material.visible === true ) {\r\n\r\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\r\n\t\t\t\t\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\r\n\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\t\tvar materials = material.materials;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\r\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar children = object.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tprojectObject( children[ i ], camera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction renderObjects( renderList, camera, lights, fog, overrideMaterial ) {\r\n\r\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar renderItem = renderList[ i ];\r\n\r\n\t\t\tvar object = renderItem.object;\r\n\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\tvar group = renderItem.group;\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\r\n\r\n\t\t\t\tsetMaterial( material );\r\n\r\n\t\t\t\tvar program = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\t\t\t_currentGeometryProgram = '';\r\n\r\n\t\t\t\tobject.render( function ( object ) {\r\n\r\n\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.renderBufferDirect( camera, lights, fog, geometry, material, object, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction initMaterial( material, lights, fog, object ) {\r\n\r\n\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\tvar parameters = programCache.getParameters( material, lights, fog, object );\r\n\t\tvar code = programCache.getProgramCode( material, parameters );\r\n\r\n\t\tvar program = materialProperties.program;\r\n\t\tvar programChange = true;\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\t// new material\r\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t} else if ( program.code !== code ) {\r\n\r\n\t\t\t// changed glsl or parameters\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\r\n\t\t\t// same glsl and uniform list\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// only rebuild uniform list\r\n\t\t\tprogramChange = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( programChange ) {\r\n\r\n\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\r\n\r\n\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\tname: material.type,\r\n\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\r\n\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\tname: material.type,\r\n\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\r\n\r\n\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\r\n\r\n\t\t\tmaterialProperties.program = program;\r\n\t\t\tmaterial.program = program;\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = program.getAttributes();\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\tfor ( i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tmaterialProperties.uniformsList = [];\r\n\r\n\t\tvar uniformLocations = materialProperties.program.getUniforms();\r\n\r\n\t\tfor ( var u in materialProperties.__webglShader.uniforms ) {\r\n\r\n\t\t\tvar location = uniformLocations[ u ];\r\n\r\n\t\t\tif ( location ) {\r\n\r\n\t\t\t\tmaterialProperties.uniformsList.push( [ materialProperties.__webglShader.uniforms[ u ], location ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setMaterial( material ) {\r\n\r\n\t\tsetMaterialFaces( material );\r\n\r\n\t\tif ( material.transparent === true ) {\r\n\r\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.setBlending( THREE.NoBlending );\r\n\r\n\t\t}\r\n\r\n\t\tstate.setDepthFunc( material.depthFunc );\r\n\t\tstate.setDepthTest( material.depthTest );\r\n\t\tstate.setDepthWrite( material.depthWrite );\r\n\t\tstate.setColorWrite( material.colorWrite );\r\n\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t}\r\n\r\n\tfunction setMaterialFaces( material ) {\r\n\r\n\t\tmaterial.side !== THREE.DoubleSide ? state.enable( _gl.CULL_FACE ) : state.disable( _gl.CULL_FACE );\r\n\t\tstate.setFlipSided( material.side === THREE.BackSide );\r\n\r\n\t}\r\n\r\n\tfunction setProgram( camera, lights, fog, material, object ) {\r\n\r\n\t\t_usedTextureUnits = 0;\r\n\r\n\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\tif ( material.needsUpdate || ! materialProperties.program ) {\r\n\r\n\t\t\tinitMaterial( material, lights, fog, object );\r\n\t\t\tmaterial.needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar refreshProgram = false;\r\n\t\tvar refreshMaterial = false;\r\n\t\tvar refreshLights = false;\r\n\r\n\t\tvar program = materialProperties.program,\r\n\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\r\n\r\n\t\tif ( program.id !== _currentProgram ) {\r\n\r\n\t\t\t_gl.useProgram( program.program );\r\n\t\t\t_currentProgram = program.id;\r\n\r\n\t\t\trefreshProgram = true;\r\n\t\t\trefreshMaterial = true;\r\n\t\t\trefreshLights = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\tif ( _currentMaterialId === - 1 ) refreshLights = true;\r\n\t\t\t_currentMaterialId = material.id;\r\n\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\r\n\t\t\t\t_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( camera !== _currentCamera ) _currentCamera = camera;\r\n\r\n\t\t\t// load material specific uniforms\r\n\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material.envMap ) {\r\n\r\n\t\t\t\tif ( p_uniforms.cameraPosition !== undefined ) {\r\n\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t\t_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material.skinning ) {\r\n\r\n\t\t\t\tif ( p_uniforms.viewMatrix !== undefined ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\tif ( material.skinning ) {\r\n\r\n\t\t\tif ( object.bindMatrix && p_uniforms.bindMatrix !== undefined ) {\r\n\r\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== undefined ) {\r\n\r\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( capabilities.floatVertexTextures && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\r\n\t\t\t\tif ( p_uniforms.boneTexture !== undefined ) {\r\n\r\n\t\t\t\t\tvar textureUnit = getTextureUnit();\r\n\r\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTexture, textureUnit );\r\n\t\t\t\t\t_this.setTexture( object.skeleton.boneTexture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p_uniforms.boneTextureWidth !== undefined ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p_uniforms.boneTextureHeight !== undefined ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.skeleton && object.skeleton.boneMatrices ) {\r\n\r\n\t\t\t\tif ( p_uniforms.boneGlobalMatrices !== undefined ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material.lights ) {\r\n\r\n\t\t\t\tif ( _lightsNeedUpdate ) {\r\n\r\n\t\t\t\t\trefreshLights = true;\r\n\t\t\t\t\tsetupLights( lights, camera );\r\n\t\t\t\t\t_lightsNeedUpdate = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( refreshLights ) {\r\n\r\n\t\t\t\t\trefreshUniformsLights( m_uniforms, _lights );\r\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, true );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, false );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh single material specific uniforms\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsParticle( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.mNear.value = camera.near;\r\n\t\t\t\tm_uniforms.mFar.value = camera.far;\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.receiveShadow && ! material._shadowPass ) {\r\n\r\n\t\t\t\trefreshUniformsShadow( m_uniforms, lights, camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// load common uniforms\r\n\r\n\t\t\tloadUniformsGeneric( materialProperties.uniformsList );\r\n\r\n\t\t}\r\n\r\n\t\tloadUniformsMatrices( p_uniforms, object );\r\n\r\n\t\tif ( p_uniforms.modelMatrix !== undefined ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\t// Uniforms (refresh uniforms objects)\r\n\r\n\tfunction refreshUniformsCommon ( uniforms, material ) {\r\n\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\r\n\t\tif ( material.emissive ) {\r\n\r\n\t\t\tuniforms.emissive.value = material.emissive;\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\t\tuniforms.specularMap.value = material.specularMap;\r\n\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\tif ( material.aoMap ) {\r\n\r\n\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t// 1. color map\r\n\t\t// 2. specular map\r\n\t\t// 3. normal map\r\n\t\t// 4. bump map\r\n\t\t// 5. alpha map\r\n\t\t// 6. emissive map\r\n\r\n\t\tvar uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t} else if ( material.displacementMap ) {\r\n\r\n\t\t\tuvScaleMap = material.displacementMap;\r\n\r\n\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t} else if ( material.emissiveMap ) {\r\n\r\n\t\t\tuvScaleMap = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) uvScaleMap = uvScaleMap.texture;\r\n\t\t\tvar offset = uvScaleMap.offset;\r\n\t\t\tvar repeat = uvScaleMap.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.envMap.value = material.envMap;\r\n\t\tuniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;\r\n\r\n\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLine ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsDash ( uniforms, material ) {\r\n\r\n\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\tuniforms.scale.value = material.scale;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsParticle ( uniforms, material ) {\r\n\r\n\t\tuniforms.psColor.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.size.value = material.size;\r\n\t\tuniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\r\n\t\tif ( material.map !== null ) {\r\n\r\n\t\t\tvar offset = material.map.offset;\r\n\t\t\tvar repeat = material.map.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsFog ( uniforms, fog ) {\r\n\r\n\t\tuniforms.fogColor.value = fog.color;\r\n\r\n\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhong ( uniforms, material ) {\r\n\r\n\t\tuniforms.specular.value = material.specular;\r\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLights ( uniforms, lights ) {\r\n\r\n\t\tuniforms.ambientLightColor.value = lights.ambient;\r\n\r\n\t\tuniforms.directionalLightColor.value = lights.directional.colors;\r\n\t\tuniforms.directionalLightDirection.value = lights.directional.positions;\r\n\r\n\t\tuniforms.pointLightColor.value = lights.point.colors;\r\n\t\tuniforms.pointLightPosition.value = lights.point.positions;\r\n\t\tuniforms.pointLightDistance.value = lights.point.distances;\r\n\t\tuniforms.pointLightDecay.value = lights.point.decays;\r\n\r\n\t\tuniforms.spotLightColor.value = lights.spot.colors;\r\n\t\tuniforms.spotLightPosition.value = lights.spot.positions;\r\n\t\tuniforms.spotLightDistance.value = lights.spot.distances;\r\n\t\tuniforms.spotLightDirection.value = lights.spot.directions;\r\n\t\tuniforms.spotLightAngleCos.value = lights.spot.anglesCos;\r\n\t\tuniforms.spotLightExponent.value = lights.spot.exponents;\r\n\t\tuniforms.spotLightDecay.value = lights.spot.decays;\r\n\r\n\t\tuniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;\r\n\t\tuniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;\r\n\t\tuniforms.hemisphereLightDirection.value = lights.hemi.positions;\r\n\r\n\t}\r\n\r\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\r\n\r\n\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\r\n\t\tuniforms.directionalLightColor.needsUpdate = value;\r\n\t\tuniforms.directionalLightDirection.needsUpdate = value;\r\n\r\n\t\tuniforms.pointLightColor.needsUpdate = value;\r\n\t\tuniforms.pointLightPosition.needsUpdate = value;\r\n\t\tuniforms.pointLightDistance.needsUpdate = value;\r\n\t\tuniforms.pointLightDecay.needsUpdate = value;\r\n\r\n\t\tuniforms.spotLightColor.needsUpdate = value;\r\n\t\tuniforms.spotLightPosition.needsUpdate = value;\r\n\t\tuniforms.spotLightDistance.needsUpdate = value;\r\n\t\tuniforms.spotLightDirection.needsUpdate = value;\r\n\t\tuniforms.spotLightAngleCos.needsUpdate = value;\r\n\t\tuniforms.spotLightExponent.needsUpdate = value;\r\n\t\tuniforms.spotLightDecay.needsUpdate = value;\r\n\r\n\t\tuniforms.hemisphereLightSkyColor.needsUpdate = value;\r\n\t\tuniforms.hemisphereLightGroundColor.needsUpdate = value;\r\n\t\tuniforms.hemisphereLightDirection.needsUpdate = value;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsShadow ( uniforms, lights, camera ) {\r\n\r\n\t\tif ( uniforms.shadowMatrix ) {\r\n\r\n\t\t\tvar j = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\t\tif ( light.castShadow === true ) {\r\n\r\n\t\t\t\t\tif ( light instanceof THREE.PointLight || light instanceof THREE.SpotLight || light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\r\n\t\t\t\t\t\t\t// equal to inverse of the light's position\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\r\n\t\t\t\t\t\t\tshadow.matrix.identity().setPosition( _vector3 );\r\n\r\n\t\t\t\t\t\t\t// for point lights we set the sign of the shadowDarkness uniform to be negative\r\n\t\t\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = - shadow.darkness;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = shadow.darkness;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tuniforms.shadowMatrix.value[ j ] = shadow.matrix;\r\n\t\t\t\t\t\tuniforms.shadowMap.value[ j ] = shadow.map;\r\n\t\t\t\t\t\tuniforms.shadowMapSize.value[ j ] = shadow.mapSize;\r\n\t\t\t\t\t\tuniforms.shadowBias.value[ j ] = shadow.bias;\r\n\r\n\t\t\t\t\t\tj ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Uniforms (load to GPU)\r\n\r\n\tfunction loadUniformsMatrices ( uniforms, object ) {\r\n\r\n\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object.modelViewMatrix.elements );\r\n\r\n\t\tif ( uniforms.normalMatrix ) {\r\n\r\n\t\t\t_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object.normalMatrix.elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTextureUnit() {\r\n\r\n\t\tvar textureUnit = _usedTextureUnits;\r\n\r\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\r\n\r\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\r\n\r\n\t\t}\r\n\r\n\t\t_usedTextureUnits += 1;\r\n\r\n\t\treturn textureUnit;\r\n\r\n\t}\r\n\r\n\tfunction loadUniformsGeneric ( uniforms ) {\r\n\r\n\t\tvar texture, textureUnit;\r\n\r\n\t\tfor ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {\r\n\r\n\t\t\tvar uniform = uniforms[ j ][ 0 ];\r\n\r\n\t\t\t// needsUpdate property is not added to all uniforms.\r\n\t\t\tif ( uniform.needsUpdate === false ) continue;\r\n\r\n\t\t\tvar type = uniform.type;\r\n\t\t\tvar value = uniform.value;\r\n\t\t\tvar location = uniforms[ j ][ 1 ];\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase '1i':\r\n\t\t\t\t\t_gl.uniform1i( location, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '1f':\r\n\t\t\t\t\t_gl.uniform1f( location, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '2f':\r\n\t\t\t\t\t_gl.uniform2f( location, value[ 0 ], value[ 1 ] );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '3f':\r\n\t\t\t\t\t_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '4f':\r\n\t\t\t\t\t_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '1iv':\r\n\t\t\t\t\t_gl.uniform1iv( location, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '3iv':\r\n\t\t\t\t\t_gl.uniform3iv( location, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '1fv':\r\n\t\t\t\t\t_gl.uniform1fv( location, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '2fv':\r\n\t\t\t\t\t_gl.uniform2fv( location, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '3fv':\r\n\t\t\t\t\t_gl.uniform3fv( location, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '4fv':\r\n\t\t\t\t\t_gl.uniform4fv( location, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Matrix3fv':\r\n\t\t\t\t\t_gl.uniformMatrix3fv( location, false, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Matrix4fv':\r\n\t\t\t\t\t_gl.uniformMatrix4fv( location, false, value );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tcase 'i':\r\n\r\n\t\t\t\t\t// single integer\r\n\t\t\t\t\t_gl.uniform1i( location, value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'f':\r\n\r\n\t\t\t\t\t// single float\r\n\t\t\t\t\t_gl.uniform1f( location, value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'v2':\r\n\r\n\t\t\t\t\t// single THREE.Vector2\r\n\t\t\t\t\t_gl.uniform2f( location, value.x, value.y );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'v3':\r\n\r\n\t\t\t\t\t// single THREE.Vector3\r\n\t\t\t\t\t_gl.uniform3f( location, value.x, value.y, value.z );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'v4':\r\n\r\n\t\t\t\t\t// single THREE.Vector4\r\n\t\t\t\t\t_gl.uniform4f( location, value.x, value.y, value.z, value.w );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'c':\r\n\r\n\t\t\t\t\t// single THREE.Color\r\n\t\t\t\t\t_gl.uniform3f( location, value.r, value.g, value.b );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'iv1':\r\n\r\n\t\t\t\t\t// flat array of integers (JS or typed array)\r\n\t\t\t\t\t_gl.uniform1iv( location, value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'iv':\r\n\r\n\t\t\t\t\t// flat array of integers with 3 x N size (JS or typed array)\r\n\t\t\t\t\t_gl.uniform3iv( location, value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'fv1':\r\n\r\n\t\t\t\t\t// flat array of floats (JS or typed array)\r\n\t\t\t\t\t_gl.uniform1fv( location, value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'fv':\r\n\r\n\t\t\t\t\t// flat array of floats with 3 x N size (JS or typed array)\r\n\t\t\t\t\t_gl.uniform3fv( location, value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'v2v':\r\n\r\n\t\t\t\t\t// array of THREE.Vector2\r\n\r\n\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\t\tuniform._array = new Float32Array( 2 * value.length );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, i2 = 0, il = value.length; i < il; i ++, i2 += 2 ) {\r\n\r\n\t\t\t\t\t\tuniform._array[ i2 + 0 ] = value[ i ].x;\r\n\t\t\t\t\t\tuniform._array[ i2 + 1 ] = value[ i ].y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.uniform2fv( location, uniform._array );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'v3v':\r\n\r\n\t\t\t\t\t// array of THREE.Vector3\r\n\r\n\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\t\tuniform._array = new Float32Array( 3 * value.length );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, i3 = 0, il = value.length; i < il; i ++, i3 += 3 ) {\r\n\r\n\t\t\t\t\t\tuniform._array[ i3 + 0 ] = value[ i ].x;\r\n\t\t\t\t\t\tuniform._array[ i3 + 1 ] = value[ i ].y;\r\n\t\t\t\t\t\tuniform._array[ i3 + 2 ] = value[ i ].z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.uniform3fv( location, uniform._array );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'v4v':\r\n\r\n\t\t\t\t\t// array of THREE.Vector4\r\n\r\n\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\t\tuniform._array = new Float32Array( 4 * value.length );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, i4 = 0, il = value.length; i < il; i ++, i4 += 4 ) {\r\n\r\n\t\t\t\t\t\tuniform._array[ i4 + 0 ] = value[ i ].x;\r\n\t\t\t\t\t\tuniform._array[ i4 + 1 ] = value[ i ].y;\r\n\t\t\t\t\t\tuniform._array[ i4 + 2 ] = value[ i ].z;\r\n\t\t\t\t\t\tuniform._array[ i4 + 3 ] = value[ i ].w;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.uniform4fv( location, uniform._array );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'm3':\r\n\r\n\t\t\t\t\t// single THREE.Matrix3\r\n\t\t\t\t\t_gl.uniformMatrix3fv( location, false, value.elements );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'm3v':\r\n\r\n\t\t\t\t\t// array of THREE.Matrix3\r\n\r\n\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\t\tuniform._array = new Float32Array( 9 * value.length );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 9 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.uniformMatrix3fv( location, false, uniform._array );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'm4':\r\n\r\n\t\t\t\t\t// single THREE.Matrix4\r\n\t\t\t\t\t_gl.uniformMatrix4fv( location, false, value.elements );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'm4v':\r\n\r\n\t\t\t\t\t// array of THREE.Matrix4\r\n\r\n\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\t\tuniform._array = new Float32Array( 16 * value.length );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 16 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 't':\r\n\r\n\t\t\t\t\t// single THREE.Texture (2d or cube)\r\n\r\n\t\t\t\t\ttexture = value;\r\n\t\t\t\t\ttextureUnit = getTextureUnit();\r\n\r\n\t\t\t\t\t_gl.uniform1i( location, textureUnit );\r\n\r\n\t\t\t\t\tif ( ! texture ) continue;\r\n\r\n\t\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\r\n\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\r\n\r\n\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\t\t\t\t_this.setTexture( texture.texture, textureUnit );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'tv':\r\n\r\n\t\t\t\t\t// array of THREE.Texture (2d or cube)\r\n\r\n\t\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\t\tuniform._array = [];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tuniform._array[ i ] = getTextureUnit();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.uniform1iv( location, uniform._array );\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\ttexture = uniform.value[ i ];\r\n\t\t\t\t\t\ttextureUnit = uniform._array[ i ];\r\n\r\n\t\t\t\t\t\tif ( ! texture ) continue;\r\n\r\n\t\t\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t\t\t\t ( texture.image instanceof Array && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\r\n\t\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\t\t\t\t\t_this.setTexture( texture.texture, textureUnit );\r\n\r\n\t\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setColorLinear( array, offset, color, intensity ) {\r\n\r\n\t\tarray[ offset + 0 ] = color.r * intensity;\r\n\t\tarray[ offset + 1 ] = color.g * intensity;\r\n\t\tarray[ offset + 2 ] = color.b * intensity;\r\n\r\n\t}\r\n\r\n\tfunction setupLights ( lights, camera ) {\r\n\r\n\t\tvar l, ll, light,\r\n\t\tr = 0, g = 0, b = 0,\r\n\t\tcolor, skyColor, groundColor,\r\n\t\tintensity,\r\n\t\tdistance,\r\n\r\n\t\tzlights = _lights,\r\n\r\n\t\tviewMatrix = camera.matrixWorldInverse,\r\n\r\n\t\tdirColors = zlights.directional.colors,\r\n\t\tdirPositions = zlights.directional.positions,\r\n\r\n\t\tpointColors = zlights.point.colors,\r\n\t\tpointPositions = zlights.point.positions,\r\n\t\tpointDistances = zlights.point.distances,\r\n\t\tpointDecays = zlights.point.decays,\r\n\r\n\t\tspotColors = zlights.spot.colors,\r\n\t\tspotPositions = zlights.spot.positions,\r\n\t\tspotDistances = zlights.spot.distances,\r\n\t\tspotDirections = zlights.spot.directions,\r\n\t\tspotAnglesCos = zlights.spot.anglesCos,\r\n\t\tspotExponents = zlights.spot.exponents,\r\n\t\tspotDecays = zlights.spot.decays,\r\n\r\n\t\themiSkyColors = zlights.hemi.skyColors,\r\n\t\themiGroundColors = zlights.hemi.groundColors,\r\n\t\themiPositions = zlights.hemi.positions,\r\n\r\n\t\tdirLength = 0,\r\n\t\tpointLength = 0,\r\n\t\tspotLength = 0,\r\n\t\themiLength = 0,\r\n\r\n\t\tdirCount = 0,\r\n\t\tpointCount = 0,\r\n\t\tspotCount = 0,\r\n\t\themiCount = 0,\r\n\r\n\t\tdirOffset = 0,\r\n\t\tpointOffset = 0,\r\n\t\tspotOffset = 0,\r\n\t\themiOffset = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tcolor = light.color;\r\n\t\t\tintensity = light.intensity;\r\n\t\t\tdistance = light.distance;\r\n\r\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tr += color.r;\r\n\t\t\t\tg += color.g;\r\n\t\t\t\tb += color.b;\r\n\r\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\tdirCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t_direction.sub( _vector3 );\r\n\t\t\t\t_direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tdirOffset = dirLength * 3;\r\n\r\n\t\t\t\tdirPositions[ dirOffset + 0 ] = _direction.x;\r\n\t\t\t\tdirPositions[ dirOffset + 1 ] = _direction.y;\r\n\t\t\t\tdirPositions[ dirOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tsetColorLinear( dirColors, dirOffset, color, intensity );\r\n\r\n\t\t\t\tdirLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tpointCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tpointOffset = pointLength * 3;\r\n\r\n\t\t\t\tsetColorLinear( pointColors, pointOffset, color, intensity );\r\n\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_vector3.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tpointPositions[ pointOffset + 0 ] = _vector3.x;\r\n\t\t\t\tpointPositions[ pointOffset + 1 ] = _vector3.y;\r\n\t\t\t\tpointPositions[ pointOffset + 2 ] = _vector3.z;\r\n\r\n\t\t\t\t// distance is 0 if decay is 0, because there is no attenuation at all.\r\n\t\t\t\tpointDistances[ pointLength ] = distance;\r\n\t\t\t\tpointDecays[ pointLength ] = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\tpointLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\tspotCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tspotOffset = spotLength * 3;\r\n\r\n\t\t\t\tsetColorLinear( spotColors, spotOffset, color, intensity );\r\n\r\n\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_vector3.copy( _direction ).applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tspotPositions[ spotOffset + 0 ] = _vector3.x;\r\n\t\t\t\tspotPositions[ spotOffset + 1 ] = _vector3.y;\r\n\t\t\t\tspotPositions[ spotOffset + 2 ] = _vector3.z;\r\n\r\n\t\t\t\tspotDistances[ spotLength ] = distance;\r\n\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t_direction.sub( _vector3 );\r\n\t\t\t\t_direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tspotDirections[ spotOffset + 0 ] = _direction.x;\r\n\t\t\t\tspotDirections[ spotOffset + 1 ] = _direction.y;\r\n\t\t\t\tspotDirections[ spotOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tspotAnglesCos[ spotLength ] = Math.cos( light.angle );\r\n\t\t\t\tspotExponents[ spotLength ] = light.exponent;\r\n\t\t\t\tspotDecays[ spotLength ] = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\tspotLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\r\n\r\n\t\t\t\themiCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\themiOffset = hemiLength * 3;\r\n\r\n\t\t\t\themiPositions[ hemiOffset + 0 ] = _direction.x;\r\n\t\t\t\themiPositions[ hemiOffset + 1 ] = _direction.y;\r\n\t\t\t\themiPositions[ hemiOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tskyColor = light.color;\r\n\t\t\t\tgroundColor = light.groundColor;\r\n\r\n\t\t\t\tsetColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );\r\n\t\t\t\tsetColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );\r\n\r\n\t\t\t\themiLength += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// null eventual remains from removed lights\r\n\t\t// (this is to avoid if in shader)\r\n\r\n\t\tfor ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;\r\n\t\tfor ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;\r\n\t\tfor ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;\r\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;\r\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;\r\n\r\n\t\tzlights.directional.length = dirLength;\r\n\t\tzlights.point.length = pointLength;\r\n\t\tzlights.spot.length = spotLength;\r\n\t\tzlights.hemi.length = hemiLength;\r\n\r\n\t\tzlights.ambient[ 0 ] = r;\r\n\t\tzlights.ambient[ 1 ] = g;\r\n\t\tzlights.ambient[ 2 ] = b;\r\n\r\n\t}\r\n\r\n\t// GL state setting\r\n\r\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\r\n\r\n\t\tif ( cullFace === THREE.CullFaceNone ) {\r\n\r\n\t\t\tstate.disable( _gl.CULL_FACE );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cullFace === THREE.CullFaceBack ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT_AND_BACK );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.enable( _gl.CULL_FACE );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Textures\r\n\r\n\tfunction setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( isImagePowerOfTwo ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\r\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\tif ( extension ) {\r\n\r\n\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\r\n\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\r\n\r\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );\r\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t_infoMemory.textures ++;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\r\n\t\ttexture.image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\r\n\r\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false ) {\r\n\r\n\t\t\ttexture.image = makePowerOfTwo( texture.image );\r\n\r\n\t\t}\r\n\r\n\t\tvar image = texture.image,\r\n\t\tisImagePowerOfTwo = isPowerOfTwo( image ),\r\n\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );\r\n\r\n\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\tif ( texture instanceof THREE.DataTexture ) {\r\n\r\n\t\t\t// use manually created mipmaps if available\r\n\t\t\t// if there are no manual mipmaps\r\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\r\n\r\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\r\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t// use manually created mipmaps if available\r\n\t\t\t// if there are no manual mipmaps\r\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t}\r\n\r\n\tthis.setTexture = function ( texture, slot ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tvar image = texture.image;\r\n\r\n\t\t\tif ( image === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( image.complete === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t};\r\n\r\n\tfunction clampToMaxSize ( image, maxSize ) {\r\n\r\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\r\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t\t// premultiplied alpha.\r\n\r\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\r\n\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = Math.floor( image.width * scale );\r\n\t\t\tcanvas.height = Math.floor( image.height * scale );\r\n\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction isPowerOfTwo( image ) {\r\n\r\n\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\r\n\r\n\t}\r\n\r\n\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\r\n\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\r\n\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tfunction makePowerOfTwo( image ) {\r\n\r\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\r\n\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\r\n\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction setCubeTexture ( texture, slot ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.image.length === 6 ) {\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\r\n\r\n\t\t\t\t\t_infoMemory.textures ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\r\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\tisImagePowerOfTwo = isPowerOfTwo( image ),\r\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! isCompressed ) {\r\n\r\n\t\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()\" );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setCubeTextureDynamic ( texture, slot ) {\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\r\n\r\n\t}\r\n\r\n\t// Render targets\r\n\r\n\tfunction setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {\r\n\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\r\n\t}\r\n\r\n\tfunction setupRenderBuffer ( renderbuffer, renderTarget ) {\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t/* For some reason this is not working. Defaulting to RGBA4.\r\n\t\t} else if ( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\t\t*/\r\n\r\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setRenderTarget = function ( renderTarget ) {\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\r\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\t\tif ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;\r\n\t\t\tif ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;\r\n\r\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t_infoMemory.textures ++;\r\n\r\n\t\t\t// Setup texture, create render and frame buffers\r\n\r\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget ),\r\n\t\t\t\tglFormat = paramThreeToGL( renderTarget.texture.format ),\r\n\t\t\t\tglType = paramThreeToGL( renderTarget.texture.type );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\t\t\t\trenderTargetProperties.__webglRenderbuffer = [];\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\t\t\t\t\trenderTargetProperties.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\t\tsetupFrameBuffer( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\t\t\t\t\tsetupRenderBuffer( renderTargetProperties.__webglRenderbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglRenderbuffer = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\tsetupFrameBuffer( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );\r\n\r\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\r\n\t\t\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTargetProperties.__webglRenderbuffer );\r\n\r\n\t\t\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTargetProperties.__webglRenderbuffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetupRenderBuffer( renderTargetProperties.__webglRenderbuffer, renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Release everything\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t\t}\r\n\r\n\t\tvar framebuffer, width, height, vx, vy;\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twidth = renderTarget.width;\r\n\t\t\theight = renderTarget.height;\r\n\r\n\t\t\tvx = 0;\r\n\t\t\tvy = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tframebuffer = null;\r\n\r\n\t\t\twidth = _viewportWidth;\r\n\t\t\theight = _viewportHeight;\r\n\r\n\t\t\tvx = _viewportX;\r\n\t\t\tvy = _viewportY;\r\n\r\n\t\t}\r\n\r\n\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_gl.viewport( vx, vy, width, height );\r\n\r\n\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t_currentWidth = width;\r\n\t\t_currentHeight = height;\r\n\r\n\t};\r\n\r\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\tif ( framebuffer ) {\r\n\r\n\t\t\tvar restore = false;\r\n\r\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\t\trestore = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tvar texture = renderTarget.texture;\r\n\r\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat\r\n\t\t\t\t\t&& paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.type !== THREE.UnsignedByteType\r\n\t\t\t\t\t&& paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE )\r\n\t\t\t\t\t&& ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) )\r\n\t\t\t\t\t&& ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\r\n\r\n\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} finally {\r\n\r\n\t\t\t\tif ( restore ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\r\n\t\tvar texture = properties.get( renderTarget.texture ).__webglTexture;\r\n\r\n\t\tstate.bindTexture( target, texture );\r\n\t\t_gl.generateMipmap( target );\r\n\t\tstate.bindTexture( target, null );\r\n\r\n\t}\r\n\r\n\t// Fallback filters for non-power-of-2 textures\r\n\r\n\tfunction filterFallback ( f ) {\r\n\r\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\r\n\r\n\t\t\treturn _gl.NEAREST;\r\n\r\n\t\t}\r\n\r\n\t\treturn _gl.LINEAR;\r\n\r\n\t}\r\n\r\n\t// Map three.js constants to WebGL constants\r\n\r\n\tfunction paramThreeToGL ( p ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\r\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\r\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\r\n\r\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\r\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\r\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\r\n\r\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\r\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\r\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\r\n\t\tif ( p === THREE.IntType ) return _gl.INT;\r\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\r\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\r\n\r\n\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\r\n\r\n\t\t}\r\n\r\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\r\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\r\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\r\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\r\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\r\n\r\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\r\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\r\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\r\n\r\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\r\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\r\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\r\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\r\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\r\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\r\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\r\n\r\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\r\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\r\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n\t// DEPRECATED\r\n\r\n\tthis.supportsFloatTextures = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\treturn extensions.get( 'OES_texture_float' );\r\n\r\n\t};\r\n\r\n\tthis.supportsHalfFloatTextures = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\treturn extensions.get( 'OES_texture_half_float' );\r\n\r\n\t};\r\n\r\n\tthis.supportsStandardDerivatives = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\treturn extensions.get( 'OES_standard_derivatives' );\r\n\r\n\t};\r\n\r\n\tthis.supportsCompressedTextureS3TC = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\treturn extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t};\r\n\r\n\tthis.supportsCompressedTexturePVRTC = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\treturn extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t};\r\n\r\n\tthis.supportsBlendMinMax = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\treturn extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t};\r\n\r\n\tthis.supportsVertexTextures = function () {\r\n\r\n\t\treturn capabilities.vertexTextures;\r\n\r\n\t};\r\n\r\n\tthis.supportsInstancedArrays = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\treturn extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.initMaterial = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\r\n\t};\r\n\r\n\tthis.addPrePlugin = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\r\n\t};\r\n\r\n\tthis.addPostPlugin = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\r\n\t};\r\n\r\n\tthis.updateShadowMap = function () {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\r\n\t};\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tshadowMapEnabled: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn shadowMap.enabled;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\t\tshadowMap.enabled = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapType: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn shadowMap.type;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\t\tshadowMap.type = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapCullFace: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn shadowMap.cullFace;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\r\n\t\t\t\tshadowMap.cullFace = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapDebug: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn shadowMap.debug;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.' );\r\n\t\t\t\tshadowMap.debug = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n};\r\n\r\n// File:src/renderers/WebGLRenderTarget.js\r\n\r\n/**\r\n * @author szimek / https://github.com/szimek/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\toptions = options || {};\r\n\r\n\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\r\n\r\n\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy );\r\n\r\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\r\n\tthis.shareDepthFrom = options.shareDepthFrom !== undefined ? options.shareDepthFrom : null;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTarget.prototype = {\r\n\r\n\tconstructor: THREE.WebGLRenderTarget,\r\n\r\n\tget wrapS() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\r\n\t\treturn this.texture.wrapS;\r\n\r\n\t},\r\n\r\n\tset wrapS( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\r\n\t\tthis.texture.wrapS = value;\r\n\r\n\t},\r\n\r\n\tget wrapT() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\r\n\t\treturn this.texture.wrapT;\r\n\r\n\t},\r\n\r\n\tset wrapT( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\r\n\t\tthis.texture.wrapT = value;\r\n\r\n\t},\r\n\r\n\tget magFilter() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\r\n\t\treturn this.texture.magFilter;\r\n\r\n\t},\r\n\r\n\tset magFilter( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\r\n\t\tthis.texture.magFilter = value;\r\n\r\n\t},\r\n\r\n\tget minFilter() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\r\n\t\treturn this.texture.minFilter;\r\n\r\n\t},\r\n\r\n\tset minFilter( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\r\n\t\tthis.texture.minFilter = value;\r\n\r\n\t},\r\n\r\n\tget anisotropy() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\r\n\t\treturn this.texture.anisotropy;\r\n\r\n\t},\r\n\r\n\tset anisotropy( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\r\n\t\tthis.texture.anisotropy = value;\r\n\r\n\t},\r\n\r\n\tget offset() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\r\n\t\treturn this.texture.offset;\r\n\r\n\t},\r\n\r\n\tset offset( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\r\n\t\tthis.texture.offset = value;\r\n\r\n\t},\r\n\r\n\tget repeat() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\r\n\t\treturn this.texture.repeat;\r\n\r\n\t},\r\n\r\n\tset repeat( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\r\n\t\tthis.texture.repeat = value;\r\n\r\n\t},\r\n\r\n\tget format() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\r\n\t\treturn this.texture.format;\r\n\r\n\t},\r\n\r\n\tset format( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\r\n\t\tthis.texture.format = value;\r\n\r\n\t},\r\n\r\n\tget type() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\r\n\t\treturn this.texture.type;\r\n\r\n\t},\r\n\r\n\tset type( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\r\n\t\tthis.texture.type = value;\r\n\r\n\t},\r\n\r\n\tget generateMipmaps() {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\r\n\t\treturn this.texture.generateMipmaps;\r\n\r\n\t},\r\n\r\n\tset generateMipmaps( value ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\r\n\t\tthis.texture.generateMipmaps = value;\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tif ( this.width !== width || this.height !== height ) {\r\n\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\r\n\t\t\tthis.dispose();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.width = source.width;\r\n\t\tthis.height = source.height;\r\n\r\n\t\tthis.texture = source.texture.clone();\r\n\r\n\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\r\n\t\tthis.shareDepthFrom = source.shareDepthFrom;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );\r\n\r\n// File:src/renderers/WebGLRenderTargetCube.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com\r\n */\r\n\r\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\r\n\r\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\r\n\r\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\r\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\r\n\r\n// File:src/renderers/webgl/WebGLBufferRenderer.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\r\n\tvar mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\t_gl.drawArrays( mode, start, count );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( geometry ) {\r\n\r\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar position = geometry.attributes.position;\r\n\r\n\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, position.data.count, geometry.maxInstancedCount );\r\n\r\n\t\t} else {\r\n\r\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, position.count, geometry.maxInstancedCount );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\r\n\tvar mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tvar type, size;\r\n\r\n\tfunction setIndex( index ) {\r\n\r\n\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\r\n\r\n\t\t\ttype = _gl.UNSIGNED_INT;\r\n\t\t\tsize = 4;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttype = _gl.UNSIGNED_SHORT;\r\n\t\t\tsize = 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\t_gl.drawElements( mode, count, type, start * size );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( geometry ) {\r\n\r\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar index = geometry.index;\r\n\r\n\t\textension.drawElementsInstancedANGLE( mode, index.array.length, type, 0, geometry.maxInstancedCount );\r\n\r\n\t}\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.setIndex = setIndex;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLExtensions.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLExtensions = function ( gl ) {\r\n\r\n\tvar extensions = {};\r\n\r\n\tthis.get = function ( name ) {\r\n\r\n\t\tif ( extensions[ name ] !== undefined ) {\r\n\r\n\t\t\treturn extensions[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tvar extension;\r\n\r\n\t\tswitch ( name ) {\r\n\r\n\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\textension = gl.getExtension( name );\r\n\r\n\t\t}\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\textensions[ name ] = extension;\r\n\r\n\t\treturn extension;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLCapabilities.js\r\n\r\nTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\r\n\r\n\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'highp';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprecision = 'mediump';\r\n\r\n\t\t}\r\n\r\n\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn 'lowp';\r\n\r\n\t}\r\n\r\n\tthis.getMaxPrecision = getMaxPrecision;\r\n\r\n\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp',\r\n\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\r\n\r\n\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n\tthis.vertexTextures = this.maxVertexTextures > 0;\r\n\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\r\n\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\r\n\r\n\tvar _maxPrecision = getMaxPrecision( this.precision );\r\n\r\n\tif ( _maxPrecision !== this.precision ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\r\n\t\tthis.precision = _maxPrecision;\r\n\r\n\t}\r\n\r\n\tif ( this.logarithmicDepthBuffer ) {\r\n\r\n\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLGeometries.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLGeometries = function ( gl, properties, info ) {\r\n\r\n\tvar geometries = {};\r\n\r\n\tfunction get( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( geometries[ geometry.id ] !== undefined ) {\r\n\r\n\t\t\treturn geometries[ geometry.id ];\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tvar buffergeometry;\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tbuffergeometry = geometry;\r\n\r\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\r\n\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\r\n\t\t}\r\n\r\n\t\tgeometries[ geometry.id ] = buffergeometry;\r\n\r\n\t\tinfo.memory.geometries ++;\r\n\r\n\t\treturn buffergeometry;\r\n\r\n\t}\r\n\r\n\tfunction onGeometryDispose( event ) {\r\n\r\n\t\tvar geometry = event.target;\r\n\t\tvar buffergeometry = geometries[ geometry.id ];\r\n\r\n\t\tdeleteAttributes( buffergeometry.attributes );\r\n\r\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tdelete geometries[ geometry.id ];\r\n\r\n\t\tvar property = properties.get( geometry );\r\n\t\tif ( property.wireframe ) deleteAttribute( property.wireframe );\r\n\r\n\t\tinfo.memory.geometries --;\r\n\r\n\t}\r\n\r\n\tfunction getAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.get( attribute ).__webglBuffer;\r\n\r\n\t}\r\n\r\n\tfunction deleteAttribute( attribute ) {\r\n\r\n\t\tvar buffer = getAttributeBuffer( attribute );\r\n\r\n\t\tif ( buffer !== undefined ) {\r\n\r\n\t\t\tgl.deleteBuffer( buffer );\r\n\t\t\tremoveAttributeBuffer( attribute );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction deleteAttributes( attributes ) {\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tdeleteAttribute( attributes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction removeAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\tproperties.delete( attribute.data );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tproperties.delete( attribute );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.get = get;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLObjects.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLObjects = function ( gl, properties, info ) {\r\n\r\n\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\r\n\r\n\t//\r\n\r\n\tfunction update( object ) {\r\n\r\n\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\r\n\r\n\t\tvar geometry = geometries.get( object );\r\n\r\n\t\tif ( object.geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tgeometry.updateFromObject( object );\r\n\r\n\t\t}\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\tfor ( var name in morphAttributes ) {\r\n\r\n\t\t\tvar array = morphAttributes[ name ];\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n\tfunction updateAttribute( attribute, bufferType ) {\r\n\r\n\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\r\n\r\n\t\tvar attributeProperties = properties.get( data );\r\n\r\n\t\tif ( attributeProperties.__webglBuffer === undefined ) {\r\n\r\n\t\t\tcreateBuffer( attributeProperties, data, bufferType );\r\n\r\n\t\t} else if ( attributeProperties.version !== data.version ) {\r\n\r\n\t\t\tupdateBuffer( attributeProperties, data, bufferType );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction createBuffer( attributeProperties, data, bufferType ) {\r\n\r\n\t\tattributeProperties.__webglBuffer = gl.createBuffer();\r\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\r\n\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n\t\tgl.bufferData( bufferType, data.array, usage );\r\n\r\n\t\tattributeProperties.version = data.version;\r\n\r\n\t}\r\n\r\n\tfunction updateBuffer( attributeProperties, data, bufferType ) {\r\n\r\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\r\n\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\r\n\r\n\t\t\t// Not using update ranges\r\n\r\n\t\t\tgl.bufferSubData( bufferType, 0, data.array );\r\n\r\n\t\t} else if ( data.updateRange.count === 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\r\n\r\n\t\t\tdata.updateRange.count = 0; // reset range\r\n\r\n\t\t}\r\n\r\n\t\tattributeProperties.version = data.version;\r\n\r\n\t}\r\n\r\n\tfunction getAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.get( attribute ).__webglBuffer;\r\n\r\n\t}\r\n\r\n\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\tvar property = properties.get( geometry );\r\n\r\n\t\tif ( property.wireframe !== undefined ) {\r\n\r\n\t\t\treturn property.wireframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar indices = [];\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar attributes = geometry.attributes;\r\n\t\tvar position = attributes.position;\r\n\r\n\t\t// console.time( 'wireframe' );\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tvar edges = {};\r\n\t\t\tvar array = index.array;\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\tvar c = array[ i + 2 ];\r\n\r\n\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\r\n\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\r\n\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar array = attributes.position.array;\r\n\r\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar a = i + 0;\r\n\t\t\t\tvar b = i + 1;\r\n\t\t\t\tvar c = i + 2;\r\n\r\n\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// console.timeEnd( 'wireframe' );\r\n\r\n\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\r\n\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\r\n\r\n\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\tproperty.wireframe = attribute;\r\n\r\n\t\treturn attribute;\r\n\r\n\t}\r\n\r\n\tfunction checkEdge( edges, a, b ) {\r\n\r\n\t\tif ( a > b ) {\r\n\r\n\t\t\tvar tmp = a;\r\n\t\t\ta = b;\r\n\t\t\tb = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tvar list = edges[ a ];\r\n\r\n\t\tif ( list === undefined ) {\r\n\r\n\t\t\tedges[ a ] = [ b ];\r\n\t\t\treturn true;\r\n\r\n\t\t} else if ( list.indexOf( b ) === -1 ) {\r\n\r\n\t\t\tlist.push( b );\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tthis.getAttributeBuffer = getAttributeBuffer;\r\n\tthis.getWireframeAttribute = getWireframeAttribute;\r\n\r\n\tthis.update = update;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLProgram.js\r\n\r\nTHREE.WebGLProgram = ( function () {\r\n\r\n\tvar programIdCount = 0;\r\n\r\n\tfunction generateDefines( defines ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tfor ( var name in defines ) {\r\n\r\n\t\t\tvar value = defines[ name ];\r\n\r\n\t\t\tif ( value === false ) continue;\r\n\r\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction fetchUniformLocations( gl, program, identifiers ) {\r\n\r\n\t\tvar uniforms = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveUniform( program, i );\r\n\t\t\tvar name = info.name;\r\n\t\t\tvar location = gl.getUniformLocation( program, name );\r\n\r\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE UNIFORM:\", name);\r\n\r\n\t\t\tvar suffixPos = name.lastIndexOf( '[0]' );\r\n\t\t\tif ( suffixPos !== - 1 && suffixPos === name.length - 3 ) {\r\n\r\n\t\t\t\tuniforms[ name.substr( 0, suffixPos ) ] = location;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms[ name ] = location;\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms;\r\n\r\n\t}\r\n\r\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\r\n\r\n\t\tvar attributes = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\tvar name = info.name;\r\n\r\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\r\n\r\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\r\n\t}\r\n\r\n\tfunction filterEmptyLine( string ) {\r\n\r\n\t\treturn string !== '';\r\n\r\n\t}\r\n\r\n\treturn function WebGLProgram( renderer, code, material, parameters ) {\r\n\r\n\t\tvar gl = renderer.context;\r\n\r\n\t\tvar defines = material.defines;\r\n\r\n\t\tvar vertexShader = material.__webglShader.vertexShader;\r\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\r\n\r\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\r\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\r\n\t\t}\r\n\r\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase THREE.CubeReflectionMapping:\r\n\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.EquirectangularReflectionMapping:\r\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.SphericalReflectionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.combine ) {\r\n\r\n\t\t\t\tcase THREE.MultiplyOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MixOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.AddOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\r\n\t\t// console.log( 'building new program ' );\r\n\r\n\t\t//\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\t//\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar prefixVertex, prefixFragment;\r\n\r\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\r\n\r\n\t\t\tprefixVertex = '';\r\n\t\t\tprefixFragment = '';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\r\n\t\t\t\trenderer.gammaInput ? '#define GAMMA_INPUT' : '',\r\n\t\t\t\trenderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t'#define MAX_DIR_LIGHTS ' + parameters.maxDirLights,\r\n\t\t\t\t'#define MAX_POINT_LIGHTS ' + parameters.maxPointLights,\r\n\t\t\t\t'#define MAX_SPOT_LIGHTS ' + parameters.maxSpotLights,\r\n\t\t\t\t'#define MAX_HEMI_LIGHTS ' + parameters.maxHemiLights,\r\n\r\n\t\t\t\t'#define MAX_SHADOWS ' + parameters.maxShadows,\r\n\r\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\r\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\t\t\t\tparameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',\r\n\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\r\n\r\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\r\n\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t\t'#ifdef USE_COLOR',\r\n\r\n\t\t\t\t'\tattribute vec3 color;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\r\n\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\r\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_SKINNING',\r\n\r\n\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tparameters.bumpMap || parameters.normalMap || parameters.flatShading || material.derivatives ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\t'#define MAX_DIR_LIGHTS ' + parameters.maxDirLights,\r\n\t\t\t\t'#define MAX_POINT_LIGHTS ' + parameters.maxPointLights,\r\n\t\t\t\t'#define MAX_SPOT_LIGHTS ' + parameters.maxSpotLights,\r\n\t\t\t\t'#define MAX_HEMI_LIGHTS ' + parameters.maxHemiLights,\r\n\r\n\t\t\t\t'#define MAX_SHADOWS ' + parameters.maxShadows,\r\n\r\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\r\n\r\n\t\t\t\trenderer.gammaInput ? '#define GAMMA_INPUT' : '',\r\n\t\t\t\trenderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.metal ? '#define METAL' : '',\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\t\t\t\tparameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',\r\n\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t}\r\n\r\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\r\n\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\r\n\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\r\n\r\n\t\tgl.attachShader( program, glVertexShader );\r\n\t\tgl.attachShader( program, glFragmentShader );\r\n\r\n\t\t// Force a particular attribute to index 0.\r\n\r\n\t\tif ( material.index0AttributeName !== undefined ) {\r\n\r\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\r\n\t\t} else if ( parameters.morphTargets === true ) {\r\n\r\n\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\r\n\t\t}\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\tvar programLog = gl.getProgramInfoLog( program );\r\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\r\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\r\n\r\n\t\tvar runnable = true;\r\n\t\tvar haveDiagnostics = true;\r\n\r\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\r\n\r\n\t\t\trunnable = false;\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\r\n\r\n\t\t} else if ( programLog !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\r\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\r\n\t\t\thaveDiagnostics = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( haveDiagnostics ) {\r\n\r\n\t\t\tthis.diagnostics = {\r\n\r\n\t\t\t\trunnable: runnable,\r\n\t\t\t\tmaterial: material,\r\n\r\n\t\t\t\tprogramLog: programLog,\r\n\r\n\t\t\t\tvertexShader: {\r\n\r\n\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\tprefix: prefixVertex\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfragmentShader: {\r\n\r\n\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\tprefix: prefixFragment\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\tgl.deleteShader( glVertexShader );\r\n\t\tgl.deleteShader( glFragmentShader );\r\n\r\n\t\t// set up caching for uniform locations\r\n\r\n\t\tvar cachedUniforms;\r\n\r\n\t\tthis.getUniforms = function() {\r\n\r\n\t\t\tif ( cachedUniforms === undefined ) {\r\n\r\n\t\t\t\tcachedUniforms = fetchUniformLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedUniforms;\r\n\r\n\t\t};\r\n\r\n\t\t// set up caching for attribute locations\r\n\r\n\t\tvar cachedAttributes;\r\n\r\n\t\tthis.getAttributes = function() {\r\n\r\n\t\t\tif ( cachedAttributes === undefined ) {\r\n\r\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedAttributes;\r\n\r\n\t\t};\r\n\r\n\t\t// free resource\r\n\r\n\t\tthis.destroy = function() {\r\n\r\n\t\t\tgl.deleteProgram( program );\r\n\t\t\tthis.program = undefined;\r\n\r\n\t\t};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tObject.defineProperties( this, {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tget: function() {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\r\n\t\t\t\t\treturn this.getUniforms();\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tattributes: {\r\n\t\t\t\tget: function() {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\r\n\t\t\t\t\treturn this.getAttributes();\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\r\n\t\t//\r\n\r\n\t\tthis.id = programIdCount ++;\r\n\t\tthis.code = code;\r\n\t\tthis.usedTimes = 1;\r\n\t\tthis.program = program;\r\n\t\tthis.vertexShader = glVertexShader;\r\n\t\tthis.fragmentShader = glFragmentShader;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/renderers/webgl/WebGLPrograms.js\r\n\r\nTHREE.WebGLPrograms = function ( renderer, capabilities ) {\r\n\r\n\tvar programs = [];\r\n\r\n\tvar shaderIDs = {\r\n\t\tMeshDepthMaterial: 'depth',\r\n\t\tMeshNormalMaterial: 'normal',\r\n\t\tMeshBasicMaterial: 'basic',\r\n\t\tMeshLambertMaterial: 'lambert',\r\n\t\tMeshPhongMaterial: 'phong',\r\n\t\tLineBasicMaterial: 'basic',\r\n\t\tLineDashedMaterial: 'dashed',\r\n\t\tPointsMaterial: 'points'\r\n\t};\r\n\r\n\tvar parameterNames = [\r\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"envMap\", \"envMapMode\",\r\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\r\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"maxDirLights\", \"maxPointLights\",\r\n\t\t\"maxSpotLights\", \"maxHemiLights\", \"maxShadows\", \"shadowMapEnabled\", \"pointLightShadows\",\r\n\t\t\"shadowMapType\", \"shadowMapDebug\", \"alphaTest\", \"metal\", \"doubleSided\",\r\n\t\t\"flipSided\"\r\n\t];\r\n\r\n\r\n\tfunction allocateBones ( object ) {\r\n\r\n\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\r\n\t\t\treturn 1024;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// default for when object is not specified\r\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t//\r\n\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\tvar maxBones = nVertexMatrices;\r\n\r\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\r\n\r\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxBones;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction allocateLights( lights ) {\r\n\r\n\t\tvar dirLights = 0;\r\n\t\tvar pointLights = 0;\r\n\t\tvar spotLights = 0;\r\n\t\tvar hemiLights = 0;\r\n\r\n\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tvar light = lights[ l ];\r\n\r\n\t\t\tif ( light.visible === false ) continue;\r\n\r\n\t\t\tif ( light instanceof THREE.DirectionalLight ) dirLights ++;\r\n\t\t\tif ( light instanceof THREE.PointLight ) pointLights ++;\r\n\t\t\tif ( light instanceof THREE.SpotLight ) spotLights ++;\r\n\t\t\tif ( light instanceof THREE.HemisphereLight ) hemiLights ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn { 'directional': dirLights, 'point': pointLights, 'spot': spotLights, 'hemi': hemiLights };\r\n\r\n\t}\r\n\r\n\tfunction allocateShadows( lights ) {\r\n\r\n\t\tvar maxShadows = 0;\r\n\t\tvar pointLightShadows = 0;\r\n\r\n\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tvar light = lights[ l ];\r\n\r\n\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\tif ( light instanceof THREE.SpotLight || light instanceof THREE.DirectionalLight ) maxShadows ++;\r\n\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tmaxShadows ++;\r\n\t\t\t\tpointLightShadows ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { 'maxShadows': maxShadows, 'pointLightShadows': pointLightShadows };\r\n\r\n\t}\r\n\r\n\tthis.getParameters = function ( material, lights, fog, object ) {\r\n\r\n\t\tvar shaderID = shaderIDs[ material.type ];\r\n\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t// (not to blow over maxLights budget)\r\n\r\n\t\tvar maxLightCount = allocateLights( lights );\r\n\t\tvar allocatedShadows = allocateShadows( lights );\r\n\t\tvar maxBones = allocateBones( object );\r\n\t\tvar precision = renderer.getPrecision();\r\n\r\n\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.initMaterial:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar parameters = {\r\n\r\n\t\t\tshaderID: shaderID,\r\n\r\n\t\t\tprecision: precision,\r\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\r\n\r\n\t\t\tmap: !! material.map,\r\n\t\t\tenvMap: !! material.envMap,\r\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\tlightMap: !! material.lightMap,\r\n\t\t\taoMap: !! material.aoMap,\r\n\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\talphaMap: !! material.alphaMap,\r\n\r\n\t\t\tcombine: material.combine,\r\n\r\n\t\t\tvertexColors: material.vertexColors,\r\n\r\n\t\t\tfog: fog,\r\n\t\t\tuseFog: material.fog,\r\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\r\n\r\n\t\t\tflatShading: material.shading === THREE.FlatShading,\r\n\r\n\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\r\n\r\n\t\t\tskinning: material.skinning,\r\n\t\t\tmaxBones: maxBones,\r\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\r\n\r\n\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\r\n\t\t\tmaxDirLights: maxLightCount.directional,\r\n\t\t\tmaxPointLights: maxLightCount.point,\r\n\t\t\tmaxSpotLights: maxLightCount.spot,\r\n\t\t\tmaxHemiLights: maxLightCount.hemi,\r\n\r\n\t\t\tmaxShadows: allocatedShadows.maxShadows,\r\n\t\t\tpointLightShadows: allocatedShadows.pointLightShadows,\r\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && allocatedShadows.maxShadows > 0,\r\n\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\t\t\tshadowMapDebug: renderer.shadowMap.debug,\r\n\r\n\t\t\talphaTest: material.alphaTest,\r\n\t\t\tmetal: material.metal,\r\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\r\n\t\t\tflipSided: material.side === THREE.BackSide\r\n\r\n\t\t};\r\n\r\n\t\treturn parameters;\r\n\r\n\t};\r\n\r\n\tthis.getProgramCode = function ( material, parameters ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\tchunks.push( parameters.shaderID );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tchunks.push( material.fragmentShader );\r\n\t\t\tchunks.push( material.vertexShader );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.defines !== undefined ) {\r\n\r\n\t\t\tfor ( var name in material.defines ) {\r\n\r\n\t\t\t\tchunks.push( name );\r\n\t\t\t\tchunks.push( material.defines[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\r\n\t\t\tvar parameterName = parameterNames[ i ];\r\n\t\t\tchunks.push( parameterName );\r\n\t\t\tchunks.push( parameters[ parameterName ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join();\r\n\r\n\t};\r\n\r\n\tthis.acquireProgram = function ( material, parameters, code ) {\r\n\r\n\t\tvar program;\r\n\r\n\t\t// Check if code has been already compiled\r\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\tvar programInfo = programs[ p ];\r\n\r\n\t\t\tif ( programInfo.code === code ) {\r\n\r\n\t\t\t\tprogram = programInfo;\r\n\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\r\n\t\t\tprograms.push( program );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\tthis.releaseProgram = function( program ) {\r\n\r\n\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t// Remove from unordered set\r\n\t\t\tvar i = programs.indexOf( program );\r\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\tprograms.pop();\r\n\r\n\t\t\t// Free WebGL resources\r\n\t\t\tprogram.destroy();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\tthis.programs = programs;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLProperties.js\r\n\r\n/**\r\n* @author fordacious / fordacious.github.io\r\n*/\r\n\r\nTHREE.WebGLProperties = function () {\r\n\r\n\tvar properties = {};\r\n\r\n\tthis.get = function ( object ) {\r\n\r\n\t\tvar uuid = object.uuid;\r\n\t\tvar map = properties[ uuid ];\r\n\r\n\t\tif ( map === undefined ) {\r\n\r\n\t\t\tmap = {};\r\n\t\t\tproperties[ uuid ] = map;\r\n\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\r\n\t};\r\n\r\n\tthis.delete = function ( object ) {\r\n\r\n\t\tdelete properties[ object.uuid ];\r\n\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\tproperties = {};\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLShader.js\r\n\r\nTHREE.WebGLShader = ( function () {\r\n\r\n\tfunction addLineNumbers( string ) {\r\n\r\n\t\tvar lines = string.split( '\\n' );\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn lines.join( '\\n' );\r\n\r\n\t}\r\n\r\n\treturn function WebGLShader( gl, type, string ) {\r\n\r\n\t\tvar shader = gl.createShader( type );\r\n\r\n\t\tgl.shaderSource( shader, string );\r\n\t\tgl.compileShader( shader );\r\n\r\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\r\n\r\n\t\t}\r\n\r\n\t\t// --enable-privileged-webgl-extension\r\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n\t\treturn shader;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/renderers/webgl/WebGLShadowMap.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\r\n\r\n\tvar _gl = _renderer.context,\r\n\t_state = _renderer.state,\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_min = new THREE.Vector3(),\r\n\t_max = new THREE.Vector3(),\r\n\r\n\t_lookTarget = new THREE.Vector3(),\r\n\t_lightPositionWorld = new THREE.Vector3(),\r\n\r\n\t_renderList = [],\r\n\r\n\t_MorphingFlag = 1,\r\n\t_SkinningFlag = 2,\r\n\r\n\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\r\n\r\n\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\r\n\t_distanceMaterials = new Array( _NumberOfMaterialVariants );\r\n\r\n\tvar cubeDirections = [\r\n\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\r\n\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\r\n\t];\r\n\r\n\tvar cubeUps = [\r\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\r\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\r\n\t];\r\n\r\n\tvar cube2DViewPorts = [\r\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\r\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\r\n\t];\r\n\r\n\tvar _vector4 = new THREE.Vector4();\r\n\r\n\t// init\r\n\r\n\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\r\n\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\r\n\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\r\n\r\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\r\n\r\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\r\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\r\n\r\n\t\tvar depthMaterial = new THREE.ShaderMaterial( {\r\n\t\t\tuniforms: depthUniforms,\r\n\t\t\tvertexShader: depthShader.vertexShader,\r\n\t\t\tfragmentShader: depthShader.fragmentShader,\r\n\t\t\tmorphTargets: useMorphing,\r\n\t\t\tskinning: useSkinning\r\n\t\t} );\r\n\r\n\t\tdepthMaterial._shadowPass = true;\r\n\r\n\t\t_depthMaterials[ i ] = depthMaterial;\r\n\r\n\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\r\n\t\t\tuniforms: distanceUniforms,\r\n\t\t\tvertexShader: distanceShader.vertexShader,\r\n\t\t\tfragmentShader: distanceShader.fragmentShader,\r\n\t\t\tmorphTargets: useMorphing,\r\n\t\t\tskinning: useSkinning\r\n\t\t} );\r\n\r\n\t\tdistanceMaterial._shadowPass = true;\r\n\r\n\t\t_distanceMaterials[ i ] = distanceMaterial;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.enabled = false;\r\n\r\n\tthis.autoUpdate = true;\r\n\tthis.needsUpdate = false;\r\n\r\n\tthis.type = THREE.PCFShadowMap;\r\n\tthis.cullFace = THREE.CullFaceFront;\r\n\r\n\tthis.render = function ( scene ) {\r\n\r\n\t\tvar faceCount, isPointLight;\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\r\n\r\n\t\t// Set GL state for depth map.\r\n\t\t_gl.clearColor( 1, 1, 1, 1 );\r\n\t\t_state.disable( _gl.BLEND );\r\n\t\t_state.enable( _gl.CULL_FACE );\r\n\t\t_gl.frontFace( _gl.CCW );\r\n\t\t_gl.cullFace( scope.cullFace === THREE.CullFaceFront ? _gl.FRONT : _gl.BACK );\r\n\t\t_state.setDepthTest( true );\r\n\r\n\t\t// save the existing viewport so it can be restored later\r\n\t\t_renderer.getViewport( _vector4 );\r\n\r\n\t\t// render depth map\r\n\r\n\t\tfor ( var i = 0, il = _lights.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar light = _lights[ i ];\r\n\r\n\t\t\tif ( light.castShadow === true ) {\r\n\r\n\t\t\t\tvar shadow = light.shadow;\r\n\t\t\t\tvar shadowCamera = shadow.camera;\r\n\t\t\t\tvar shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\t\tfaceCount = 6;\r\n\t\t\t\t\tisPointLight = true;\r\n\r\n\t\t\t\t\tvar vpWidth = shadowMapSize.x / 4.0;\r\n\t\t\t\t\tvar vpHeight = shadowMapSize.y / 2.0;\r\n\r\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t\t\t// following orientation:\r\n\t\t\t\t\t//\r\n\t\t\t\t\t//  xzXZ\r\n\t\t\t\t\t//   y Y\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// X - Positive x direction\r\n\t\t\t\t\t// x - Negative x direction\r\n\t\t\t\t\t// Y - Positive y direction\r\n\t\t\t\t\t// y - Negative y direction\r\n\t\t\t\t\t// Z - Positive z direction\r\n\t\t\t\t\t// z - Negative z direction\r\n\r\n\t\t\t\t\t// positive X\r\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// negative X\r\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// positive Z\r\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// negative Z\r\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// positive Y\r\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\r\n\t\t\t\t\t// negative Y\r\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfaceCount = 1;\r\n\t\t\t\t\tisPointLight = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( shadow.map === null ) {\r\n\r\n\t\t\t\t\tvar shadowFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\t\tif ( scope.type === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\t\t\t\tshadowFilter = THREE.NearestFilter;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };\r\n\r\n\t\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( shadowMapSize.x, shadowMapSize.y, pars );\r\n\t\t\t\t\tshadow.matrix = new THREE.Matrix4();\r\n\r\n\t\t\t\t\t//\r\n\r\n\t\t\t\t\tif ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\t\t\tshadowCamera.aspect = shadowMapSize.x / shadowMapSize.y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar shadowMap = shadow.map;\r\n\t\t\t\tvar shadowMatrix = shadow.matrix;\r\n\r\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\r\n\r\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t\t_renderer.clear();\r\n\r\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\r\n\t\t\t\t// run a single pass if not\r\n\r\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\r\n\r\n\t\t\t\t\tif ( isPointLight ) {\r\n\r\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\r\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\r\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\r\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\r\n\t\t\t\t\t\t_renderer.setViewport( vpDimensions.x, vpDimensions.y, vpDimensions.z, vpDimensions.w );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\r\n\t\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\r\n\r\n\t\t\t\t\t// compute shadow matrix\r\n\r\n\t\t\t\t\tshadowMatrix.set(\r\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t\t\t// set object matrices & frustum culling\r\n\r\n\t\t\t\t\t_renderList.length = 0;\r\n\r\n\t\t\t\t\tprojectObject( scene, shadowCamera );\r\n\r\n\t\t\t\t\t// render shadow map\r\n\t\t\t\t\t// render regular objects\r\n\r\n\t\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tvar object = _renderList[ j ];\r\n\t\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\r\n\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\t\tvar materials = material.materials;\r\n\r\n\t\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, _lights, null, geometry, depthMaterial, object, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, _lights, null, geometry, depthMaterial, object, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// We must call _renderer.resetGLState() at the end of each iteration of\r\n\t\t\t\t// the light loop in order to force material updates for each light.\r\n\t\t\t\t_renderer.resetGLState();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_renderer.setViewport( _vector4.x, _vector4.y, _vector4.z, _vector4.w );\r\n\r\n\t\t// Restore GL state.\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\r\n\t\t_state.enable( _gl.BLEND );\r\n\r\n\t\tif ( scope.cullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t}\r\n\r\n\t\t_renderer.resetGLState();\r\n\r\n\t\tscope.needsUpdate = false;\r\n\r\n\t};\r\n\r\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tvar newMaterial = null;\r\n\r\n\t\tvar materialVariants = _depthMaterials;\r\n\t\tvar customMaterial = object.customDepthMaterial;\r\n\r\n\t\tif ( isPointLight ) {\r\n\r\n\t\t\tmaterialVariants = _distanceMaterials;\r\n\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! customMaterial ) {\r\n\r\n\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\r\n\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\r\n\r\n\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\r\n\r\n\t\t\tvar variantIndex = 0;\r\n\r\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\r\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\r\n\r\n\t\t\tnewMaterial = materialVariants[ variantIndex ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnewMaterial = customMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tnewMaterial.visible = material.visible;\r\n\t\tnewMaterial.wireframe = material.wireframe;\r\n\t\tnewMaterial.wireframeLinewidth = material.wireframeLinewidth;\r\n\r\n\t\tif ( isPointLight && newMaterial.uniforms.lightPos !== undefined ) {\r\n\r\n\t\t\tnewMaterial.uniforms.lightPos.value.copy( lightPositionWorld );\r\n\r\n\t\t}\r\n\r\n\t\treturn newMaterial;\r\n\r\n\t}\r\n\r\n\tfunction projectObject( object, camera ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tif ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\r\n\r\n\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\r\n\r\n\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\tif ( material.visible === true ) {\r\n\r\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\t\t_renderList.push( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar children = object.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tprojectObject( children[ i ], camera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLState.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\r\n\r\n\tvar _this = this;\r\n\r\n\tvar newAttributes = new Uint8Array( 16 );\r\n\tvar enabledAttributes = new Uint8Array( 16 );\r\n\tvar attributeDivisors = new Uint8Array( 16 );\r\n\r\n\tvar capabilities = {};\r\n\r\n\tvar compressedTextureFormats = null;\r\n\r\n\tvar currentBlending = null;\r\n\tvar currentBlendEquation = null;\r\n\tvar currentBlendSrc = null;\r\n\tvar currentBlendDst = null;\r\n\tvar currentBlendEquationAlpha = null;\r\n\tvar currentBlendSrcAlpha = null;\r\n\tvar currentBlendDstAlpha = null;\r\n\r\n\tvar currentDepthFunc = null;\r\n\tvar currentDepthWrite = null;\r\n\r\n\tvar currentColorWrite = null;\r\n\r\n\tvar currentFlipSided = null;\r\n\r\n\tvar currentLineWidth = null;\r\n\r\n\tvar currentPolygonOffsetFactor = null;\r\n\tvar currentPolygonOffsetUnits = null;\r\n\r\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\r\n\tvar currentTextureSlot = undefined;\r\n\tvar currentBoundTextures = {};\r\n\r\n\tthis.init = function () {\r\n\r\n\t\tgl.clearColor( 0, 0, 0, 1 );\r\n\t\tgl.clearDepth( 1 );\r\n\t\tgl.clearStencil( 0 );\r\n\r\n\t\tthis.enable( gl.DEPTH_TEST );\r\n\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\tgl.frontFace( gl.CCW );\r\n\t\tgl.cullFace( gl.BACK );\r\n\t\tthis.enable( gl.CULL_FACE );\r\n\r\n\t\tthis.enable( gl.BLEND );\r\n\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t};\r\n\r\n\tthis.initAttributes = function () {\r\n\r\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\tnewAttributes[ i ] = 0;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enableAttribute = function ( attribute ) {\r\n\r\n\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\r\n\r\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\r\n\t\t\tattributeDivisors[ attribute ] = 0;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\r\n\r\n\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\r\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\r\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.disableUnusedAttributes = function () {\r\n\r\n\t\tfor ( var i = 0, l = enabledAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\r\n\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enable = function ( id ) {\r\n\r\n\t\tif ( capabilities[ id ] !== true ) {\r\n\r\n\t\t\tgl.enable( id );\r\n\t\t\tcapabilities[ id ] = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.disable = function ( id ) {\r\n\r\n\t\tif ( capabilities[ id ] !== false ) {\r\n\r\n\t\t\tgl.disable( id );\r\n\t\t\tcapabilities[ id ] = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getCompressedTextureFormats = function () {\r\n\r\n\t\tif ( compressedTextureFormats === null ) {\r\n\r\n\t\t\tcompressedTextureFormats = [];\r\n\r\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ) {\r\n\r\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\r\n\r\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\r\n\r\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn compressedTextureFormats;\r\n\r\n\t};\r\n\r\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha ) {\r\n\r\n\t\tif ( blending !== currentBlending ) {\r\n\r\n\t\t\tif ( blending === THREE.NoBlending ) {\r\n\r\n\t\t\t\tthis.disable( gl.BLEND );\r\n\r\n\t\t\t} else if ( blending === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\tthis.enable( gl.BLEND );\r\n\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\r\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\r\n\t\t\t\tthis.enable( gl.BLEND );\r\n\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\r\n\r\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\r\n\r\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\r\n\t\t\t\tthis.enable( gl.BLEND );\r\n\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\r\n\r\n\t\t\t} else if ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\t\tthis.enable( gl.BLEND );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.enable( gl.BLEND );\r\n\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentBlending = blending;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcurrentBlendEquation = null;\r\n\t\t\tcurrentBlendSrc = null;\r\n\t\t\tcurrentBlendDst = null;\r\n\t\t\tcurrentBlendEquationAlpha = null;\r\n\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\tcurrentBlendDstAlpha = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthFunc = function ( depthFunc ) {\r\n\r\n\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\tif ( depthFunc ) {\r\n\r\n\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\tcase THREE.NeverDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.AlwaysDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.LessDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LESS );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.LessEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.EqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.GreaterDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.NotEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthTest = function ( depthTest ) {\r\n\r\n\t\tif ( depthTest ) {\r\n\r\n\t\t\tthis.enable( gl.DEPTH_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.DEPTH_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthWrite = function ( depthWrite ) {\r\n\r\n\t\tif ( currentDepthWrite !== depthWrite ) {\r\n\r\n\t\t\tgl.depthMask( depthWrite );\r\n\t\t\tcurrentDepthWrite = depthWrite;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setColorWrite = function ( colorWrite ) {\r\n\r\n\t\tif ( currentColorWrite !== colorWrite ) {\r\n\r\n\t\t\tgl.colorMask( colorWrite, colorWrite, colorWrite, colorWrite );\r\n\t\t\tcurrentColorWrite = colorWrite;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setFlipSided = function ( flipSided ) {\r\n\r\n\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\tgl.frontFace( gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.frontFace( gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setLineWidth = function ( width ) {\r\n\r\n\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\tgl.lineWidth( width );\r\n\r\n\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\r\n\r\n\t\tif ( polygonOffset ) {\r\n\r\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t}\r\n\r\n\t\tif ( polygonOffset && ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) ) {\r\n\r\n\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setScissorTest = function ( scissorTest ) {\r\n\r\n\t\tif ( scissorTest ) {\r\n\r\n\t\t\tthis.enable( gl.SCISSOR_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.SCISSOR_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// texture\r\n\r\n\tthis.activeTexture = function ( webglSlot ) {\r\n\r\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\r\n\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.bindTexture = function ( webglType, webglTexture ) {\r\n\r\n\t\tif ( currentTextureSlot === undefined ) {\r\n\r\n\t\t\t_this.activeTexture();\r\n\r\n\t\t}\r\n\r\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\r\n\t\t}\r\n\r\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\tgl.bindTexture( webglType, webglTexture );\r\n\r\n\t\t\tboundTexture.type = webglType;\r\n\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.compressedTexImage2D = function () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.texImage2D = function () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\r\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\r\n\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcapabilities = {};\r\n\r\n\t\tcompressedTextureFormats = null;\r\n\r\n\t\tcurrentBlending = null;\r\n\r\n\t\tcurrentDepthWrite = null;\r\n\t\tcurrentColorWrite = null;\r\n\r\n\t\tcurrentFlipSided = null;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\r\n\r\n\tvar gl = renderer.context;\r\n\tvar state = renderer.state;\r\n\r\n\tvar vertexBuffer, elementBuffer;\r\n\tvar program, attributes, uniforms;\r\n\tvar hasVertexTexture;\r\n\r\n\tvar tempTexture, occlusionTexture;\r\n\r\n\tfunction init() {\r\n\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t- 1, - 1,  0, 0,\r\n\t\t\t 1, - 1,  1, 0,\r\n\t\t\t 1,  1,  1, 1,\r\n\t\t\t- 1,  1,  0, 1\r\n\t\t] );\r\n\r\n\t\tvar faces = new Uint16Array( [\r\n\t\t\t0, 1, 2,\r\n\t\t\t0, 2, 3\r\n\t\t] );\r\n\r\n\t\t// buffers\r\n\r\n\t\tvertexBuffer     = gl.createBuffer();\r\n\t\telementBuffer    = gl.createBuffer();\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\r\n\t\t// textures\r\n\r\n\t\ttempTexture      = gl.createTexture();\r\n\t\tocclusionTexture = gl.createTexture();\r\n\r\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\r\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\r\n\t\thasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;\r\n\r\n\t\tvar shader;\r\n\r\n\t\tif ( hasVertexTexture ) {\r\n\r\n\t\t\tshader = {\r\n\r\n\t\t\t\tvertexShader: [\r\n\r\n\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\r\n\t\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\r\n\r\n\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\r\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\r\n\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\r\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\r\n\r\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\t\t\"}\"\r\n\r\n\t\t\t\t].join( \"\\n\" ),\r\n\r\n\t\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\t// pink square\r\n\r\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\r\n\r\n\t\t\t\t\t\t// restore\r\n\r\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t\t\t// flare\r\n\r\n\t\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\r\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"}\"\r\n\r\n\t\t\t\t].join( \"\\n\" )\r\n\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tshader = {\r\n\r\n\t\t\t\tvertexShader: [\r\n\r\n\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\t\t\"}\"\r\n\r\n\t\t\t\t].join( \"\\n\" ),\r\n\r\n\t\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t\t\"precision mediump float;\",\r\n\r\n\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\t\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\t// pink square\r\n\r\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\r\n\r\n\t\t\t\t\t\t// restore\r\n\r\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t\t\t// flare\r\n\r\n\t\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\t\"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\r\n\t\t\t\t\t\t\t\"visibility = ( 1.0 - visibility / 4.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\t\"texture.a *= opacity * visibility;\",\r\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"}\"\r\n\r\n\t\t\t\t].join( \"\\n\" )\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tprogram = createProgram( shader );\r\n\r\n\t\tattributes = {\r\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\r\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\r\n\t\t};\r\n\r\n\t\tuniforms = {\r\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\r\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\r\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\r\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\r\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\r\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\r\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\r\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Render lens flares\r\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n\t *         reads these back and calculates occlusion.\r\n\t */\r\n\r\n\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\r\n\r\n\t\tif ( flares.length === 0 ) return;\r\n\r\n\t\tvar tempPosition = new THREE.Vector3();\r\n\r\n\t\tvar invAspect = viewportHeight / viewportWidth,\r\n\t\t\thalfViewportWidth = viewportWidth * 0.5,\r\n\t\t\thalfViewportHeight = viewportHeight * 0.5;\r\n\r\n\t\tvar size = 16 / viewportHeight,\r\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\r\n\r\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\r\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tinit();\r\n\r\n\t\t}\r\n\r\n\t\tgl.useProgram( program );\r\n\r\n\t\tstate.initAttributes();\r\n\t\tstate.enableAttribute( attributes.vertex );\r\n\t\tstate.enableAttribute( attributes.uv );\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t// loop through all lens flares to update their occlusion and positions\r\n\t\t// setup gl and common used attribs/uniforms\r\n\r\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\r\n\t\tgl.uniform1i( uniforms.map, 1 );\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\r\n\t\tstate.disable( gl.CULL_FACE );\r\n\t\tgl.depthMask( false );\r\n\r\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\r\n\r\n\t\t\tsize = 16 / viewportHeight;\r\n\t\t\tscale.set( size * invAspect, size );\r\n\r\n\t\t\t// calc object screen position\r\n\r\n\t\t\tvar flare = flares[ i ];\r\n\r\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\r\n\r\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\r\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\r\n\r\n\t\t\t// setup arrays for gl programs\r\n\r\n\t\t\tscreenPosition.copy( tempPosition );\r\n\r\n\t\t\tscreenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\r\n\t\t\tscreenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\r\n\r\n\t\t\t// screen cull\r\n\r\n\t\t\tif ( hasVertexTexture || (\r\n\t\t\t\tscreenPositionPixels.x > 0 &&\r\n\t\t\t\tscreenPositionPixels.x < viewportWidth &&\r\n\t\t\t\tscreenPositionPixels.y > 0 &&\r\n\t\t\t\tscreenPositionPixels.y < viewportHeight ) ) {\r\n\r\n\t\t\t\t// save current RGB to temp texture\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// render pink quad\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\r\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\r\n\t\t\t\tstate.disable( gl.BLEND );\r\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// copy result to occlusionMap\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// restore graphics\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\r\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// update object positions\r\n\r\n\t\t\t\tflare.positionScreen.copy( screenPosition );\r\n\r\n\t\t\t\tif ( flare.customUpdateCallback ) {\r\n\r\n\t\t\t\t\tflare.customUpdateCallback( flare );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tflare.updateLensFlares();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render flares\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\r\n\t\t\t\tstate.enable( gl.BLEND );\r\n\r\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\r\n\r\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\r\n\r\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\r\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\r\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\r\n\r\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewportHeight;\r\n\r\n\t\t\t\t\t\tscale.x = size * invAspect;\r\n\t\t\t\t\t\tscale.y = size;\r\n\r\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\r\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\r\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\r\n\r\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\r\n\t\t\t\t\t\trenderer.setTexture( sprite.texture, 1 );\r\n\r\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\tstate.enable( gl.CULL_FACE );\r\n\t\tstate.enable( gl.DEPTH_TEST );\r\n\t\tgl.depthMask( true );\r\n\r\n\t\trenderer.resetGLState();\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader ) {\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\r\n\r\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\tgl.compileShader( fragmentShader );\r\n\t\tgl.compileShader( vertexShader );\r\n\r\n\t\tgl.attachShader( program, fragmentShader );\r\n\t\tgl.attachShader( program, vertexShader );\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/plugins/SpritePlugin.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpritePlugin = function ( renderer, sprites ) {\r\n\r\n\tvar gl = renderer.context;\r\n\tvar state = renderer.state;\r\n\r\n\tvar vertexBuffer, elementBuffer;\r\n\tvar program, attributes, uniforms;\r\n\r\n\tvar texture;\r\n\r\n\t// decompose matrixWorld\r\n\r\n\tvar spritePosition = new THREE.Vector3();\r\n\tvar spriteRotation = new THREE.Quaternion();\r\n\tvar spriteScale = new THREE.Vector3();\r\n\r\n\tfunction init() {\r\n\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t- 0.5, - 0.5,  0, 0,\r\n\t\t\t  0.5, - 0.5,  1, 0,\r\n\t\t\t  0.5,   0.5,  1, 1,\r\n\t\t\t- 0.5,   0.5,  0, 1\r\n\t\t] );\r\n\r\n\t\tvar faces = new Uint16Array( [\r\n\t\t\t0, 1, 2,\r\n\t\t\t0, 2, 3\r\n\t\t] );\r\n\r\n\t\tvertexBuffer  = gl.createBuffer();\r\n\t\telementBuffer = gl.createBuffer();\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\r\n\t\tprogram = createProgram();\r\n\r\n\t\tattributes = {\r\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\r\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\r\n\t\t};\r\n\r\n\t\tuniforms = {\r\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\r\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\r\n\r\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\r\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\r\n\r\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\r\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\r\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\r\n\r\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\r\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\r\n\r\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\r\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\r\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\r\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\r\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\r\n\r\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\r\n\t\t};\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = 8;\r\n\t\tcanvas.height = 8;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t\tcontext.fillStyle = 'white';\r\n\t\tcontext.fillRect( 0, 0, 8, 8 );\r\n\r\n\t\ttexture = new THREE.Texture( canvas );\r\n\t\ttexture.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( sprites.length === 0 ) return;\r\n\r\n\t\t// setup gl\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tinit();\r\n\r\n\t\t}\r\n\r\n\t\tgl.useProgram( program );\r\n\r\n\t\tstate.initAttributes();\r\n\t\tstate.enableAttribute( attributes.position );\r\n\t\tstate.enableAttribute( attributes.uv );\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\tstate.disable( gl.CULL_FACE );\r\n\t\tstate.enable( gl.BLEND );\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\r\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\tgl.uniform1i( uniforms.map, 0 );\r\n\r\n\t\tvar oldFogType = 0;\r\n\t\tvar sceneFogType = 0;\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\tif ( fog ) {\r\n\r\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\r\n\r\n\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\r\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\r\n\t\t\t\toldFogType = 1;\r\n\t\t\t\tsceneFogType = 1;\r\n\r\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\r\n\t\t\t\toldFogType = 2;\r\n\t\t\t\tsceneFogType = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\r\n\t\t\toldFogType = 0;\r\n\t\t\tsceneFogType = 0;\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// update positions and sort\r\n\r\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar sprite = sprites[ i ];\r\n\r\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\r\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\r\n\r\n\t\t}\r\n\r\n\t\tsprites.sort( painterSortStable );\r\n\r\n\t\t// render all sprites\r\n\r\n\t\tvar scale = [];\r\n\r\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar sprite = sprites[ i ];\r\n\t\t\tvar material = sprite.material;\r\n\r\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\r\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\r\n\r\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\r\n\r\n\t\t\tscale[ 0 ] = spriteScale.x;\r\n\t\t\tscale[ 1 ] = spriteScale.y;\r\n\r\n\t\t\tvar fogType = 0;\r\n\r\n\t\t\tif ( scene.fog && material.fog ) {\r\n\r\n\t\t\t\tfogType = sceneFogType;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( oldFogType !== fogType ) {\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\r\n\t\t\t\toldFogType = fogType;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\r\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\r\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\r\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\r\n\r\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\r\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\r\n\r\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\tstate.setDepthTest( material.depthTest );\r\n\t\t\tstate.setDepthWrite( material.depthWrite );\r\n\r\n\t\t\tif ( material.map && material.map.image && material.map.image.width ) {\r\n\r\n\t\t\t\trenderer.setTexture( material.map, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.setTexture( texture, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\tstate.enable( gl.CULL_FACE );\r\n\r\n\t\trenderer.resetGLState();\r\n\r\n\t};\r\n\r\n\tfunction createProgram () {\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\r\n\t\tgl.shaderSource( vertexShader, [\r\n\r\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\r\n\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t'uniform float rotation;',\r\n\t\t\t'uniform vec2 scale;',\r\n\t\t\t'uniform vec2 uvOffset;',\r\n\t\t\t'uniform vec2 uvScale;',\r\n\r\n\t\t\t'attribute vec2 position;',\r\n\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\r\n\r\n\t\t\t\t'vec2 alignedPosition = position * scale;',\r\n\r\n\t\t\t\t'vec2 rotatedPosition;',\r\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\r\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\r\n\r\n\t\t\t\t'vec4 finalPosition;',\r\n\r\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\r\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\r\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\r\n\r\n\t\t\t\t'gl_Position = finalPosition;',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ) );\r\n\r\n\t\tgl.shaderSource( fragmentShader, [\r\n\r\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\r\n\t\t\t'uniform vec3 color;',\r\n\t\t\t'uniform sampler2D map;',\r\n\t\t\t'uniform float opacity;',\r\n\r\n\t\t\t'uniform int fogType;',\r\n\t\t\t'uniform vec3 fogColor;',\r\n\t\t\t'uniform float fogDensity;',\r\n\t\t\t'uniform float fogNear;',\r\n\t\t\t'uniform float fogFar;',\r\n\t\t\t'uniform float alphaTest;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\r\n\r\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\r\n\r\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\r\n\r\n\t\t\t\t'if ( fogType > 0 ) {',\r\n\r\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\r\n\t\t\t\t\t'float fogFactor = 0.0;',\r\n\r\n\t\t\t\t\t'if ( fogType == 1 ) {',\r\n\r\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\r\n\r\n\t\t\t\t\t'} else {',\r\n\r\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\r\n\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\r\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\r\n\r\n\t\t\t\t\t'}',\r\n\r\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ) );\r\n\r\n\t\tgl.compileShader( vertexShader );\r\n\t\tgl.compileShader( fragmentShader );\r\n\r\n\t\tgl.attachShader( program, vertexShader );\r\n\t\tgl.attachShader( program, fragmentShader );\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/CurveUtils.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.CurveUtils = {\r\n\r\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\r\n\r\n\t},\r\n\r\n\t// Puay Bing, thanks for helping with this derivative!\r\n\r\n\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\r\n\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\r\n\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\r\n\t\t\t3 * t * t * p3;\r\n\r\n\t},\r\n\r\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t// To check if my formulas are correct\r\n\r\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\r\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\r\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\r\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\r\n\r\n\t\treturn h00 + h10 + h01 + h11;\r\n\r\n\t},\r\n\r\n\t// Catmull-Rom\r\n\r\n\tinterpolate: function( p0, p1, p2, p3, t ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/GeometryUtils.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.GeometryUtils = {\r\n\r\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\r\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\r\n\t\tvar matrix;\r\n\r\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\r\n\r\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\r\n\t\t\tmatrix = geometry2.matrix;\r\n\t\t\tgeometry2 = geometry2.geometry;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\r\n\t},\r\n\r\n\tcenter: function ( geometry ) {\r\n\r\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\treturn geometry.center();\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/ImageUtils.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author Daosheng Mu / https://github.com/DaoshengMu/\r\n */\r\n\r\nTHREE.ImageUtils = {\r\n\r\n\tcrossOrigin: undefined,\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture is being deprecated. Use THREE.TextureLoader() instead.' );\r\n\r\n\t\tvar loader = new THREE.TextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube is being deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\r\n\t\tvar loader = new THREE.CubeTextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTexture: function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' )\r\n\r\n\t},\r\n\r\n\tloadCompressedTextureCube: function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' )\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/SceneUtils.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneUtils = {\r\n\r\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\r\n\r\n\t\tvar group = new THREE.Group();\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn group;\r\n\r\n\t},\r\n\r\n\tdetach: function ( child, parent, scene ) {\r\n\r\n\t\tchild.applyMatrix( parent.matrixWorld );\r\n\t\tparent.remove( child );\r\n\t\tscene.add( child );\r\n\r\n\t},\r\n\r\n\tattach: function ( child, scene, parent ) {\r\n\r\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\r\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\t\tchild.applyMatrix( matrixWorldInverse );\r\n\r\n\t\tscene.remove( child );\r\n\t\tparent.add( child );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/ShapeUtils.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.ShapeUtils = {\r\n\r\n\t// calculate area of the contour polygon\r\n\r\n\tarea: function ( contour ) {\r\n\r\n\t\tvar n = contour.length;\r\n\t\tvar a = 0.0;\r\n\r\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t}\r\n\r\n\t\treturn a * 0.5;\r\n\r\n\t},\r\n\r\n\ttriangulate: ( function () {\r\n\r\n\t\t/**\r\n\t\t * This code is a quick port of code written in C++ which was submitted to\r\n\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n\t\t * See original code and more information here:\r\n\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n\t\t *\r\n\t\t * ported to actionscript by Zevan Rosser\r\n\t\t * www.actionsnippet.com\r\n\t\t *\r\n\t\t * ported to javascript by Joshua Koo\r\n\t\t * http://www.lab4games.net/zz85/blog\r\n\t\t *\r\n\t\t */\r\n\r\n\t\tfunction snip( contour, u, v, w, n, verts ) {\r\n\r\n\t\t\tvar p;\r\n\t\t\tvar ax, ay, bx, by;\r\n\t\t\tvar cx, cy, px, py;\r\n\r\n\t\t\tax = contour[ verts[ u ] ].x;\r\n\t\t\tay = contour[ verts[ u ] ].y;\r\n\r\n\t\t\tbx = contour[ verts[ v ] ].x;\r\n\t\t\tby = contour[ verts[ v ] ].y;\r\n\r\n\t\t\tcx = contour[ verts[ w ] ].x;\r\n\t\t\tcy = contour[ verts[ w ] ].y;\r\n\r\n\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\r\n\r\n\t\t\tvar aX, aY, bX, bY, cX, cY;\r\n\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\r\n\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\r\n\r\n\t\t\taX = cx - bx;  aY = cy - by;\r\n\t\t\tbX = ax - cx;  bY = ay - cy;\r\n\t\t\tcX = bx - ax;  cY = by - ay;\r\n\r\n\t\t\tfor ( p = 0; p < n; p ++ ) {\r\n\r\n\t\t\t\tpx = contour[ verts[ p ] ].x;\r\n\t\t\t\tpy = contour[ verts[ p ] ].y;\r\n\r\n\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\r\n\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\r\n\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\r\n\r\n\t\t\t\tapx = px - ax;  apy = py - ay;\r\n\t\t\t\tbpx = px - bx;  bpy = py - by;\r\n\t\t\t\tcpx = px - cx;  cpy = py - cy;\r\n\r\n\t\t\t\t// see if p is inside triangle abc\r\n\r\n\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\r\n\t\t\t\tcCROSSap = cX * apy - cY * apx;\r\n\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\r\n\r\n\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// takes in an contour array and returns\r\n\r\n\t\treturn function ( contour, indices ) {\r\n\r\n\t\t\tvar n = contour.length;\r\n\r\n\t\t\tif ( n < 3 ) return null;\r\n\r\n\t\t\tvar result = [],\r\n\t\t\t\tverts = [],\r\n\t\t\t\tvertIndices = [];\r\n\r\n\t\t\t/* we want a counter-clockwise polygon in verts */\r\n\r\n\t\t\tvar u, v, w;\r\n\r\n\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\r\n\r\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar nv = n;\r\n\r\n\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\r\n\r\n\t\t\tvar count = 2 * nv;   /* error detection */\r\n\r\n\t\t\tfor ( v = nv - 1; nv > 2; ) {\r\n\r\n\t\t\t\t/* if we loop, it is probably a non-simple polygon */\r\n\r\n\t\t\t\tif ( ( count -- ) <= 0 ) {\r\n\r\n\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\r\n\r\n\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\r\n\t\t\t\t\t//return null;\r\n\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\r\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\r\n\r\n\t\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\t\treturn result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\r\n\r\n\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\r\n\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\r\n\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\r\n\r\n\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\r\n\r\n\t\t\t\t\tvar a, b, c, s, t;\r\n\r\n\t\t\t\t\t/* true names of the vertices */\r\n\r\n\t\t\t\t\ta = verts[ u ];\r\n\t\t\t\t\tb = verts[ v ];\r\n\t\t\t\t\tc = verts[ w ];\r\n\r\n\t\t\t\t\t/* output Triangle */\r\n\r\n\t\t\t\t\tresult.push( [ contour[ a ],\r\n\t\t\t\t\t\tcontour[ b ],\r\n\t\t\t\t\t\tcontour[ c ] ] );\r\n\r\n\r\n\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\r\n\r\n\t\t\t\t\t/* remove v from the remaining polygon */\r\n\r\n\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\r\n\r\n\t\t\t\t\t\tverts[ s ] = verts[ t ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnv --;\r\n\r\n\t\t\t\t\t/* reset error detection counter */\r\n\r\n\t\t\t\t\tcount = 2 * nv;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( indices ) return vertIndices;\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} )(),\r\n\r\n\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\r\n\r\n\t\t\t// inOtherPt needs to be collinear to the inSegment\r\n\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\r\n\r\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\r\n\r\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\r\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\r\n\r\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\r\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\r\n\r\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\r\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\r\n\r\n\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// not parallel\r\n\r\n\t\t\t\tvar perpSeg2;\r\n\t\t\t\tif ( limit > 0 ) {\r\n\r\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\r\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\r\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// i.e. to reduce rounding errors\r\n\t\t\t\t// intersection at endpoint of segment#1?\r\n\t\t\t\tif ( perpSeg2 === 0 ) {\r\n\r\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( perpSeg2 === limit ) {\r\n\r\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\treturn [ inSeg1Pt2 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// intersection at endpoint of segment#2?\r\n\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\r\n\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\r\n\r\n\t\t\t\t// return real intersection point\r\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\r\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\r\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// parallel or collinear\r\n\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\r\n\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\r\n\r\n\t\t\t\t// they are collinear or degenerate\r\n\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\r\n\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\r\n\t\t\t\t// both segments are points\r\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\r\n\r\n\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\r\n\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// segment#1  is a single point\r\n\t\t\t\tif ( seg1Pt ) {\r\n\r\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// segment#2  is a single point\r\n\t\t\t\tif ( seg2Pt ) {\r\n\r\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\r\n\t\t\t\t\treturn [ inSeg2Pt1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// they are collinear segments, which might overlap\r\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\r\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\r\n\t\t\t\tif ( seg1dx !== 0 ) {\r\n\r\n\t\t\t\t\t// the segments are NOT on a vertical line\r\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// the segments are on a vertical line\r\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\r\n\r\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\r\n\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\r\n\r\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\treturn [ seg2min ];\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\r\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\r\n\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\r\n\r\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\treturn [ seg1min ];\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\r\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\r\n\r\n\t\t\t// The order of legs is important\r\n\r\n\t\t\t// translation of all points, so that Vertex is at (0,0)\r\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\r\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\r\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\r\n\r\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\r\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\r\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\r\n\r\n\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// angle != 180 deg.\r\n\r\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\r\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\r\n\r\n\t\t\t\tif ( from2toAngle > 0 ) {\r\n\r\n\t\t\t\t\t// main angle < 180 deg.\r\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// main angle > 180 deg.\r\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// angle == 180 deg.\r\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\r\n\t\t\t\treturn\t( from2otherAngle > 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction removeHoles( contour, holes ) {\r\n\r\n\t\t\tvar shape = contour.concat(); // work on this shape\r\n\t\t\tvar hole;\r\n\r\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\r\n\r\n\t\t\t\t// Check if hole point lies within angle around shape point\r\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\r\n\r\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\r\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\r\n\r\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\r\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\r\n\r\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\r\n\t\t\t\tif ( ! insideAngle ) {\r\n\r\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\r\n\t\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if shape point lies within angle around hole point\r\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\r\n\r\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\r\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\r\n\r\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\r\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\r\n\r\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\r\n\t\t\t\tif ( ! insideAngle ) {\r\n\r\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\r\n\t\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\ttrue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\r\n\r\n\t\t\t\t// checks for intersections with shape edges\r\n\t\t\t\tvar sIdx, nextIdx, intersection;\r\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\r\n\r\n\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\r\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\r\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar indepHoles = [];\r\n\r\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\r\n\r\n\t\t\t\t// checks for intersections with hole edges\r\n\t\t\t\tvar ihIdx, chkHole,\r\n\t\t\t\t\thIdx, nextIdx, intersection;\r\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\r\n\r\n\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\r\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\r\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\r\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holeIndex, shapeIndex,\r\n\t\t\t\tshapePt, holePt,\r\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\r\n\t\t\t\ttmpShape1, tmpShape2,\r\n\t\t\t\ttmpHole1, tmpHole2;\r\n\r\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tindepHoles.push( h );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar minShapeIndex = 0;\r\n\t\t\tvar counter = indepHoles.length * 2;\r\n\t\t\twhile ( indepHoles.length > 0 ) {\r\n\r\n\t\t\t\tcounter --;\r\n\t\t\t\tif ( counter < 0 ) {\r\n\r\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// search for shape-vertex and hole-vertex,\r\n\t\t\t\t// which can be connected without intersections\r\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\r\n\r\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\r\n\t\t\t\t\tholeIndex\t= - 1;\r\n\r\n\t\t\t\t\t// search for hole which can be reached without intersections\r\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\r\n\r\n\t\t\t\t\t\tholeIdx = indepHoles[ h ];\r\n\r\n\t\t\t\t\t\t// prevent multiple checks\r\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\r\n\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\thole = holes[ holeIdx ];\r\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\r\n\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\r\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\r\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\tholeIndex = h2;\r\n\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\r\n\r\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\r\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\r\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\r\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\r\n\r\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\r\n\r\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\r\n\r\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\r\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\r\n\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shape; \t\t\t/* shape with no holes */\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar i, il, f, face,\r\n\t\t\tkey, index,\r\n\t\t\tallPointsMap = {};\r\n\r\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\r\n\r\n\t\tvar allpoints = contour.concat();\r\n\r\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\r\n\r\n\t\t}\r\n\r\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\r\n\r\n\t\t// prepare all points map\r\n\r\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\r\n\r\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\r\n\r\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tallPointsMap[ key ] = i;\r\n\r\n\t\t}\r\n\r\n\t\t// remove holes by cutting paths to holes and adding them to the shape\r\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\r\n\r\n\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\r\n\t\t//console.log( \"triangles\",triangles, triangles.length );\r\n\r\n\t\t// check all face vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = triangles[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn triangles.concat();\r\n\r\n\t},\r\n\r\n\tisClockWise: function ( pts ) {\r\n\r\n\t\treturn THREE.ShapeUtils.area( pts ) < 0;\r\n\r\n\t},\r\n\r\n\t// Bezier Curves formulas obtained from\r\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n\r\n\t// Quad Bezier Functions\r\n\r\n\tb2: ( function () {\r\n\r\n\t\tfunction b2p0( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn k * k * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b2p1( t, p ) {\r\n\r\n\t\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b2p2( t, p ) {\r\n\r\n\t\t\treturn t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( t, p0, p1, p2 ) {\r\n\r\n\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\t// Cubic Bezier Functions\r\n\r\n\tb3: ( function () {\r\n\r\n\t\tfunction b3p0( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn k * k * k * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p1( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn 3 * k * k * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p2( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn 3 * k * t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p3( t, p ) {\r\n\r\n\t\t\treturn t * t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n};\r\n\r\n// File:src/extras/audio/Audio.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Audio = function ( listener ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Audio';\r\n\r\n\tthis.context = listener.context;\r\n\tthis.source = this.context.createBufferSource();\r\n\tthis.source.onended = this.onEnded.bind( this );\r\n\r\n\tthis.gain = this.context.createGain();\r\n\tthis.gain.connect( this.context.destination );\r\n\r\n\tthis.panner = this.context.createPanner();\r\n\tthis.panner.connect( this.gain );\r\n\r\n\tthis.autoplay = false;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.playbackRate = 1;\r\n\tthis.isPlaying = false;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Audio.prototype.constructor = THREE.Audio;\r\n\r\nTHREE.Audio.prototype.load = function ( file ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar request = new XMLHttpRequest();\r\n\trequest.open( 'GET', file, true );\r\n\trequest.responseType = 'arraybuffer';\r\n\trequest.onload = function ( e ) {\r\n\r\n\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\r\n\r\n\t\t\tscope.source.buffer = buffer;\r\n\r\n\t\t\tif ( scope.autoplay ) scope.play();\r\n\r\n\t\t} );\r\n\r\n\t};\r\n\trequest.send();\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.play = function () {\r\n\r\n\tif ( this.isPlaying === true ) {\r\n\r\n\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tvar source = this.context.createBufferSource();\r\n\r\n\tsource.buffer = this.source.buffer;\r\n\tsource.loop = this.source.loop;\r\n\tsource.onended = this.source.onended;\r\n\tsource.start( 0, this.startTime );\r\n\tsource.playbackRate.value = this.playbackRate;\r\n\r\n\tthis.isPlaying = true;\r\n\r\n\tthis.source = source;\r\n\r\n\tthis.connect();\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.pause = function () {\r\n\r\n\tthis.source.stop();\r\n\tthis.startTime = this.context.currentTime;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.stop = function () {\r\n\r\n\tthis.source.stop();\r\n\tthis.startTime = 0;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.connect = function () {\r\n\r\n\tif ( this.filter !== undefined ) {\r\n\r\n\t\tthis.source.connect( this.filter );\r\n\t\tthis.filter.connect( this.panner );\r\n\r\n\t} else {\r\n\r\n\t\tthis.source.connect( this.panner );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.disconnect = function () {\r\n\r\n\tif ( this.filter !== undefined ) {\r\n\r\n\t\tthis.source.disconnect( this.filter );\r\n\t\tthis.filter.disconnect( this.panner );\r\n\r\n\t} else {\r\n\r\n\t\tthis.source.disconnect( this.panner );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setFilter = function ( value ) {\r\n\r\n\tif ( this.isPlaying === true ) {\r\n\r\n\t\tthis.disconnect();\r\n\t\tthis.filter = value;\r\n\t\tthis.connect();\r\n\r\n\t} else {\r\n\r\n\t\tthis.filter = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getFilter = function () {\r\n\r\n\treturn this.filter;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setPlaybackRate = function ( value ) {\r\n\r\n\tthis.playbackRate = value;\r\n\r\n\tif ( this.isPlaying === true ) {\r\n\r\n\t\tthis.source.playbackRate.value = this.playbackRate;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getPlaybackRate = function () {\r\n\r\n\treturn this.playbackRate;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.onEnded = function() {\r\n\r\n\tthis.isPlaying = false;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setLoop = function ( value ) {\r\n\r\n\tthis.source.loop = value;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getLoop = function () {\r\n\r\n\treturn this.source.loop;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setRefDistance = function ( value ) {\r\n\r\n\tthis.panner.refDistance = value;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getRefDistance = function () {\r\n\r\n\treturn this.panner.refDistance;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\r\n\r\n\tthis.panner.rolloffFactor = value;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getRolloffFactor = function () {\r\n\r\n\treturn this.panner.rolloffFactor;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setVolume = function ( value ) {\r\n\r\n\tthis.gain.gain.value = value;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getVolume = function () {\r\n\r\n\treturn this.gain.gain.value;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.updateMatrixWorld = ( function () {\r\n\r\n\tvar position = new THREE.Vector3();\r\n\r\n\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\tposition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tthis.panner.setPosition( position.x, position.y, position.z );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/extras/audio/AudioListener.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AudioListener = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'AudioListener';\r\n\r\n\tthis.context = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n};\r\n\r\nTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.AudioListener.prototype.constructor = THREE.AudioListener;\r\n\r\nTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\r\n\r\n\tvar position = new THREE.Vector3();\r\n\tvar quaternion = new THREE.Quaternion();\r\n\tvar scale = new THREE.Vector3();\r\n\r\n\tvar orientation = new THREE.Vector3();\r\n\r\n\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\tvar listener = this.context.listener;\r\n\t\tvar up = this.up;\r\n\r\n\t\tthis.matrixWorld.decompose( position, quaternion, scale );\r\n\r\n\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t\tlistener.setPosition( position.x, position.y, position.z );\r\n\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/extras/core/Curve.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Extensible curve object\r\n *\r\n * Some common of Curve methods\r\n * .getPoint(t), getTangent(t)\r\n * .getPointAt(u), getTagentAt(u)\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This following classes subclasses THREE.Curve:\r\n *\r\n * -- 2d classes --\r\n * THREE.LineCurve\r\n * THREE.QuadraticBezierCurve\r\n * THREE.CubicBezierCurve\r\n * THREE.SplineCurve\r\n * THREE.ArcCurve\r\n * THREE.EllipseCurve\r\n *\r\n * -- 3d classes --\r\n * THREE.LineCurve3\r\n * THREE.QuadraticBezierCurve3\r\n * THREE.CubicBezierCurve3\r\n * THREE.SplineCurve3\r\n * THREE.ClosedSplineCurve3\r\n *\r\n * A series of curves can be represented as a THREE.CurvePath\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tAbstract Curve base class\r\n **************************************************************/\r\n\r\nTHREE.Curve = function () {\r\n\r\n};\r\n\r\nTHREE.Curve.prototype = {\r\n\r\n\tconstructor: THREE.Curve,\r\n\r\n\t// Virtual base class method to overwrite and implement in subclasses\r\n\t//\t- t [0 .. 1]\r\n\r\n\tgetPoint: function ( t ) {\r\n\r\n\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\t// Get point at relative position in curve according to arc length\r\n\t// - u [0 .. 1]\r\n\r\n\tgetPointAt: function ( u ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getPoint( t );\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPoint( t )\r\n\r\n\tgetPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 5;\r\n\r\n\t\tvar d, pts = [];\r\n\r\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpts.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn pts;\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPointAt( u )\r\n\r\n\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 5;\r\n\r\n\t\tvar d, pts = [];\r\n\r\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpts.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn pts;\r\n\r\n\t},\r\n\r\n\t// Get total curve arc length\r\n\r\n\tgetLength: function () {\r\n\r\n\t\tvar lengths = this.getLengths();\r\n\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t},\r\n\r\n\t// Get list of cumulative segment lengths\r\n\r\n\tgetLengths: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\r\n\r\n\t\tif ( this.cacheArcLengths\r\n\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\r\n\t\t\t&& ! this.needsUpdate ) {\r\n\r\n\t\t\t//console.log( \"cached\", this.cacheArcLengths );\r\n\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tvar cache = [];\r\n\t\tvar current, last = this.getPoint( 0 );\r\n\t\tvar p, sum = 0;\r\n\r\n\t\tcache.push( 0 );\r\n\r\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\tcurrent = this.getPoint ( p / divisions );\r\n\t\t\tsum += current.distanceTo( last );\r\n\t\t\tcache.push( sum );\r\n\t\t\tlast = current;\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\r\n\r\n\t},\r\n\r\n\tupdateArcLengths: function() {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\t\tthis.getLengths();\r\n\r\n\t},\r\n\r\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\tgetUtoTmapping: function ( u, distance ) {\r\n\r\n\t\tvar arcLengths = this.getLengths();\r\n\r\n\t\tvar i = 0, il = arcLengths.length;\r\n\r\n\t\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\t\tif ( distance ) {\r\n\r\n\t\t\ttargetArcLength = distance;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\t//var time = Date.now();\r\n\r\n\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\tvar low = 0, high = il - 1, comparison;\r\n\r\n\t\twhile ( low <= high ) {\r\n\r\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thigh = i;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// DONE\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ti = high;\r\n\r\n\t\t//console.log('b' , i, low, high, Date.now()- time);\r\n\r\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\tvar t = i / ( il - 1 );\r\n\t\t\treturn t;\r\n\r\n\t\t}\r\n\r\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t// add that fractional amount to t\r\n\r\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\treturn t;\r\n\r\n\t},\r\n\r\n\t// Returns a unit vector tangent at t\r\n\t// In case any sub curve does not implement its tangent derivation,\r\n\t// 2 points a small delta apart will be used to find its gradient\r\n\t// which seems to give a reasonable approximation\r\n\r\n\tgetTangent: function( t ) {\r\n\r\n\t\tvar delta = 0.0001;\r\n\t\tvar t1 = t - delta;\r\n\t\tvar t2 = t + delta;\r\n\r\n\t\t// Capping in case of danger\r\n\r\n\t\tif ( t1 < 0 ) t1 = 0;\r\n\t\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\t\tvar pt1 = this.getPoint( t1 );\r\n\t\tvar pt2 = this.getPoint( t2 );\r\n\r\n\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\treturn vec.normalize();\r\n\r\n\t},\r\n\r\n\tgetTangentAt: function ( u ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getTangent( t );\r\n\r\n\t}\r\n\r\n}\r\n\r\nTHREE.Curve.Utils = THREE.CurveUtils; // backwards compatibility\r\n\r\n// TODO: Transformation for Curves?\r\n\r\n/**************************************************************\r\n *\t3D Curves\r\n **************************************************************/\r\n\r\n// A Factory method for creating new curve subclasses\r\n\r\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\r\n\r\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\r\n\tconstructor.prototype.constructor = constructor;\r\n\tconstructor.prototype.getPoint = getPointFunc;\r\n\r\n\treturn constructor;\r\n\r\n};\r\n\r\n// File:src/extras/core/CurvePath.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\r\n\r\nTHREE.CurvePath = function () {\r\n\r\n\tthis.curves = [];\r\n\r\n\tthis.autoClose = false; // Automatically closes the path\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.CurvePath.prototype.constructor = THREE.CurvePath;\r\n\r\nTHREE.CurvePath.prototype.add = function ( curve ) {\r\n\r\n\tthis.curves.push( curve );\r\n\r\n};\r\n\r\n/*\r\nTHREE.CurvePath.prototype.checkConnection = function() {\r\n\t// TODO\r\n\t// If the ending of curve is not connected to the starting\r\n\t// or the next curve, then, this is not a real path\r\n};\r\n*/\r\n\r\nTHREE.CurvePath.prototype.closePath = function() {\r\n\r\n\t// TODO Test\r\n\t// and verify for vector3 (needs to implement equals)\r\n\t// Add a line curve if start and end of lines are not connected\r\n\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// To get accurate point with reference to\r\n// entire path distance at time t,\r\n// following has to be done:\r\n\r\n// 1. Length of each sub path have to be known\r\n// 2. Locate and identify type of curve\r\n// 3. Get t for the curve\r\n// 4. Return curve.getPointAt(t')\r\n\r\nTHREE.CurvePath.prototype.getPoint = function( t ) {\r\n\r\n\tvar d = t * this.getLength();\r\n\tvar curveLengths = this.getCurveLengths();\r\n\tvar i = 0;\r\n\r\n\t// To think about boundaries points.\r\n\r\n\twhile ( i < curveLengths.length ) {\r\n\r\n\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\tvar curve = this.curves[ i ];\r\n\r\n\t\t\tvar u = 1 - diff / curve.getLength();\r\n\r\n\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t}\r\n\r\n\t\ti ++;\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n};\r\n\r\n/*\r\nTHREE.CurvePath.prototype.getTangent = function( t ) {\r\n};\r\n*/\r\n\r\n// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n// getPoint() depends on getLength\r\n\r\nTHREE.CurvePath.prototype.getLength = function() {\r\n\r\n\tvar lens = this.getCurveLengths();\r\n\treturn lens[ lens.length - 1 ];\r\n\r\n};\r\n\r\n// Compute lengths and cache them\r\n// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\nTHREE.CurvePath.prototype.getCurveLengths = function() {\r\n\r\n\t// We use cache values if curves and cache array are same length\r\n\r\n\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\treturn this.cacheLengths;\r\n\r\n\t}\r\n\r\n\t// Get length of sub-curve\r\n\t// Push sums into cached array\r\n\r\n\tvar lengths = [], sums = 0;\r\n\r\n\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\tsums += this.curves[ i ].getLength();\r\n\t\tlengths.push( sums );\r\n\r\n\t}\r\n\r\n\tthis.cacheLengths = lengths;\r\n\r\n\treturn lengths;\r\n\r\n};\r\n\r\n\r\n\r\n/**************************************************************\r\n *\tCreate Geometries Helpers\r\n **************************************************************/\r\n\r\n/// Generate geometry from path points (for Line or Points objects)\r\n\r\nTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getPoints( divisions, true );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\n// Generate geometry from equidistant sampling along the path\r\n\r\nTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getSpacedPoints( divisions, true );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.createGeometry = function( points ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\tvar point = points[ i ];\r\n\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t}\r\n\r\n\treturn geometry;\r\n\r\n};\r\n\r\n// File:src/extras/core/Path.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Creates free form 2d path using series of points, lines or curves.\r\n *\r\n **/\r\n\r\nTHREE.Path = function ( points ) {\r\n\r\n\tTHREE.CurvePath.call( this );\r\n\r\n\tthis.actions = [];\r\n\r\n\tif ( points ) {\r\n\r\n\t\tthis.fromPoints( points );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\r\nTHREE.Path.prototype.constructor = THREE.Path;\r\n\r\n// TODO Clean up PATH API\r\n\r\n// Create path using straight lines to connect all points\r\n// - vectors: array of Vector2\r\n\r\nTHREE.Path.prototype.fromPoints = function ( vectors ) {\r\n\r\n\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\r\n\r\n\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// startPath() endPath()?\r\n\r\nTHREE.Path.prototype.moveTo = function ( x, y ) {\r\n\r\n\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.lineTo = function ( x, y ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.QuadraticBezierCurve(\r\n\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\tnew THREE.Vector2( aCPx, aCPy ),\r\n\t\tnew THREE.Vector2( aX, aY )\r\n\t);\r\n\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.CubicBezierCurve(\r\n\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\tnew THREE.Vector2( aCP1x, aCP1y ),\r\n\t\tnew THREE.Vector2( aCP2x, aCP2y ),\r\n\t\tnew THREE.Vector2( aX, aY )\r\n\t);\r\n\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\r\n\tArray.prototype.push.apply( npts, pts );\r\n\r\n\tvar curve = new THREE.SplineCurve( npts );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: 'splineThru', args: args } );\r\n\r\n};\r\n\r\n// FUTURE: Change the API or follow canvas API?\r\n\r\nTHREE.Path.prototype.arc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n };\r\n\r\n THREE.Path.prototype.absarc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n };\r\n\r\nTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n };\r\n\r\n\r\nTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\tvar args = [\r\n\t\taX, aY,\r\n\t\txRadius, yRadius,\r\n\t\taStartAngle, aEndAngle,\r\n\t\taClockwise,\r\n\t\taRotation || 0 // aRotation is optional.\r\n\t];\r\n\r\n\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\tthis.curves.push( curve );\r\n\r\n\tvar lastPoint = curve.getPoint( 1 );\r\n\targs.push( lastPoint.x );\r\n\targs.push( lastPoint.y );\r\n\r\n\tthis.actions.push( { action: 'ellipse', args: args } );\r\n\r\n };\r\n\r\nTHREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {\r\n\r\n\tif ( ! divisions ) divisions = 40;\r\n\r\n\tvar points = [];\r\n\r\n\tfor ( var i = 0; i < divisions; i ++ ) {\r\n\r\n\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\r\n\r\n\t}\r\n\r\n\t// if ( closedPath ) {\r\n\t//\r\n\t// \tpoints.push( points[ 0 ] );\r\n\t//\r\n\t// }\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n/* Return an array of vectors based on contour of the path */\r\n\r\nTHREE.Path.prototype.getPoints = function( divisions, closedPath ) {\r\n\r\n\tdivisions = divisions || 12;\r\n\r\n\tvar b2 = THREE.ShapeUtils.b2;\r\n\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\tvar points = [];\r\n\r\n\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\r\n\t\tlaste, tx, ty;\r\n\r\n\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\r\n\r\n\t\tvar item = this.actions[ i ];\r\n\r\n\t\tvar action = item.action;\r\n\t\tvar args = item.args;\r\n\r\n\t\tswitch ( action ) {\r\n\r\n\t\tcase 'moveTo':\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'lineTo':\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'quadraticCurveTo':\r\n\r\n\t\t\tcpx  = args[ 2 ];\r\n\t\t\tcpy  = args[ 3 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tvar t = j / divisions;\r\n\r\n\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'bezierCurveTo':\r\n\r\n\t\t\tcpx  = args[ 4 ];\r\n\t\t\tcpy  = args[ 5 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tcpx2 = args[ 2 ];\r\n\t\t\tcpy2 = args[ 3 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tvar t = j / divisions;\r\n\r\n\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'splineThru':\r\n\r\n\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\r\n\t\t\tvar spts = [ last ];\r\n\r\n\t\t\tvar n = divisions * args[ 0 ].length;\r\n\r\n\t\t\tspts = spts.concat( args[ 0 ] );\r\n\r\n\t\t\tvar spline = new THREE.SplineCurve( spts );\r\n\r\n\t\t\tfor ( var j = 1; j <= n; j ++ ) {\r\n\r\n\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'arc':\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\taRadius = args[ 2 ],\r\n\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\r\n\t\t\t\taClockwise = !! args[ 5 ];\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tvar t = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + aRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + aRadius * Math.sin( angle );\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'ellipse':\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\txRadius = args[ 2 ],\r\n\t\t\t\tyRadius = args[ 3 ],\r\n\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\r\n\t\t\t\taClockwise = !! args[ 6 ],\r\n\t\t\t\taRotation = args[ 7 ];\r\n\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tvar cos, sin;\r\n\t\t\tif ( aRotation !== 0 ) {\r\n\r\n\t\t\t\tcos = Math.cos( aRotation );\r\n\t\t\t\tsin = Math.sin( aRotation );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tvar t = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + xRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + yRadius * Math.sin( angle );\r\n\r\n\t\t\t\tif ( aRotation !== 0 ) {\r\n\r\n\t\t\t\t\tvar x = tx, y = ty;\r\n\r\n\t\t\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\r\n\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t} // end switch\r\n\r\n\t}\r\n\r\n\r\n\r\n\t// Normalize to remove the closing point by default.\r\n\tvar lastPoint = points[ points.length - 1 ];\r\n\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\r\n\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\r\n\t\tpoints.splice( points.length - 1, 1 );\r\n\tif ( closedPath ) {\r\n\r\n\t\tpoints.push( points[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n//\r\n// Breaks path into shapes\r\n//\r\n//\tAssumptions (if parameter isCCW==true the opposite holds):\r\n//\t- solid shapes are defined clockwise (CW)\r\n//\t- holes are defined counterclockwise (CCW)\r\n//\r\n//\tIf parameter noHoles==true:\r\n//  - all subPaths are regarded as solid shapes\r\n//  - definition order CW/CCW has no relevance\r\n//\r\n\r\nTHREE.Path.prototype.toShapes = function( isCCW, noHoles ) {\r\n\r\n\tfunction extractSubpaths( inActions ) {\r\n\r\n\t\tvar subPaths = [], lastPath = new THREE.Path();\r\n\r\n\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar item = inActions[ i ];\r\n\r\n\t\t\tvar args = item.args;\r\n\t\t\tvar action = item.action;\r\n\r\n\t\t\tif ( action === 'moveTo' ) {\r\n\r\n\t\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\r\n\t\t\t\t\tsubPaths.push( lastPath );\r\n\t\t\t\t\tlastPath = new THREE.Path();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlastPath[ action ].apply( lastPath, args );\r\n\r\n\t\t}\r\n\r\n\t\tif ( lastPath.actions.length !== 0 ) {\r\n\r\n\t\t\tsubPaths.push( lastPath );\r\n\r\n\t\t}\r\n\r\n\t\t// console.log(subPaths);\r\n\r\n\t\treturn\tsubPaths;\r\n\r\n\t}\r\n\r\n\tfunction toShapesNoHoles( inSubpaths ) {\r\n\r\n\t\tvar shapes = [];\r\n\r\n\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\r\n\t\t\tvar tmpShape = new THREE.Shape();\r\n\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\tshapes.push( tmpShape );\r\n\r\n\t\t}\r\n\r\n\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\r\n\t\tvar polyLen = inPolygon.length;\r\n\r\n\t\t// inPt on polygon contour => immediate success    or\r\n\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\tvar inside = false;\r\n\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\r\n\t\t\tvar edgeLowPt  = inPolygon[ p ];\r\n\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\r\n\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// not parallel\r\n\t\t\t\tif ( edgeDy < 0 ) {\r\n\r\n\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\r\n\r\n\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\r\n\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\r\n\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// parallel or collinear\r\n\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\r\n\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\r\n\t\t\t\t// continue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn\tinside;\r\n\r\n\t}\r\n\r\n\tvar isClockWise = THREE.ShapeUtils.isClockWise;\r\n\r\n\tvar subPaths = extractSubpaths( this.actions );\r\n\tif ( subPaths.length === 0 ) return [];\r\n\r\n\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\r\n\tif ( subPaths.length === 1 ) {\r\n\r\n\t\ttmpPath = subPaths[ 0 ];\r\n\t\ttmpShape = new THREE.Shape();\r\n\t\ttmpShape.actions = tmpPath.actions;\r\n\t\ttmpShape.curves = tmpPath.curves;\r\n\t\tshapes.push( tmpShape );\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\r\n\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\tvar betterShapeHoles = [];\r\n\tvar newShapes = [];\r\n\tvar newShapeHoles = [];\r\n\tvar mainIdx = 0;\r\n\tvar tmpPoints;\r\n\r\n\tnewShapes[ mainIdx ] = undefined;\r\n\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\r\n\t\ttmpPath = subPaths[ i ];\r\n\t\ttmpPoints = tmpPath.getPoints();\r\n\t\tsolid = isClockWise( tmpPoints );\r\n\t\tsolid = isCCW ? ! solid : solid;\r\n\r\n\t\tif ( solid ) {\r\n\r\n\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\r\n\r\n\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\r\n\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\r\n\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\r\n\t\t\tif ( holesFirst )\tmainIdx ++;\r\n\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\t//console.log('cw', i);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\r\n\t\t\t//console.log('ccw', i);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// only Holes? -> probably all Shapes with wrong orientation\r\n\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\tif ( newShapes.length > 1 ) {\r\n\r\n\t\tvar ambiguous = false;\r\n\t\tvar toChange = [];\r\n\r\n\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\r\n\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\r\n\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\tvar hole_unassigned = true;\r\n\r\n\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\r\n\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\r\n\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\r\n\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tambiguous = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\tif ( toChange.length > 0 ) {\r\n\r\n\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar tmpHoles;\r\n\r\n\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\r\n\t\ttmpShape = newShapes[ i ].s;\r\n\t\tshapes.push( tmpShape );\r\n\t\ttmpHoles = newShapeHoles[ i ];\r\n\r\n\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\r\n\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//console.log(\"shape\", shapes);\r\n\r\n\treturn shapes;\r\n\r\n};\r\n\r\n// File:src/extras/core/Shape.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Defines a 2d shape plane using paths.\r\n **/\r\n\r\n// STEP 1 Create a path.\r\n// STEP 2 Turn path into shape.\r\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n// STEP 3a - Extract points from each shape, turn to vertices\r\n// STEP 3b - Triangulate each shape, add faces.\r\n\r\nTHREE.Shape = function () {\r\n\r\n\tTHREE.Path.apply( this, arguments );\r\n\r\n\tthis.holes = [];\r\n\r\n};\r\n\r\nTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\r\nTHREE.Shape.prototype.constructor = THREE.Shape;\r\n\r\n// Convenience method to return ExtrudeGeometry\r\n\r\nTHREE.Shape.prototype.extrude = function ( options ) {\r\n\r\n\treturn new THREE.ExtrudeGeometry( this, options );\r\n\r\n};\r\n\r\n// Convenience method to return ShapeGeometry\r\n\r\nTHREE.Shape.prototype.makeGeometry = function ( options ) {\r\n\r\n\treturn new THREE.ShapeGeometry( this, options );\r\n\r\n};\r\n\r\n// Get points of holes\r\n\r\nTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\r\n\r\n\tvar holesPts = [];\r\n\r\n\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t}\r\n\r\n\treturn holesPts;\r\n\r\n};\r\n\r\n\r\n// Get points of shape and holes (keypoints based on segments parameter)\r\n\r\nTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\r\n\r\n\treturn {\r\n\r\n\t\tshape: this.getPoints( divisions ),\r\n\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.Shape.prototype.extractPoints = function ( divisions ) {\r\n\r\n\treturn this.extractAllPoints( divisions );\r\n\r\n};\r\n\r\nTHREE.Shape.Utils = THREE.ShapeUtils; // backwards compatibility\r\n\r\n// File:src/extras/curves/LineCurve.js\r\n\r\n/**************************************************************\r\n *\tLine\r\n **************************************************************/\r\n\r\nTHREE.LineCurve = function ( v1, v2 ) {\r\n\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\r\n\r\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar point = this.v2.clone().sub( this.v1 );\r\n\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\n// Line curve is linear, so we can overwrite default getPointAt\r\n\r\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\r\n\r\n\treturn this.getPoint( u );\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\r\n\treturn tangent.normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/QuadraticBezierCurve.js\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar b2 = THREE.ShapeUtils.b2;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t);\r\n\r\n};\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t).normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/CubicBezierCurve.js\r\n\r\n/**************************************************************\r\n *\tCubic Bezier curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\tthis.v3 = v3;\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\r\n\r\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\treturn new THREE.Vector2( \r\n\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t);\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\r\n\r\n\treturn new THREE.Vector2( \r\n\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t).normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/SplineCurve.js\r\n\r\n/**************************************************************\r\n *\tSpline curve\r\n **************************************************************/\r\n\r\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\r\n\r\n\tthis.points = ( points == undefined ) ? [] : points;\r\n\r\n};\r\n\r\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\r\n\r\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar points = this.points;\r\n\tvar point = ( points.length - 1 ) * t;\r\n\r\n\tvar intPoint = Math.floor( point );\r\n\tvar weight = point - intPoint;\r\n\r\n\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\tvar point1 = points[ intPoint ];\r\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/curves/EllipseCurve.js\r\n\r\n/**************************************************************\r\n *\tEllipse curve\r\n **************************************************************/\r\n\r\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\tthis.aX = aX;\r\n\tthis.aY = aY;\r\n\r\n\tthis.xRadius = xRadius;\r\n\tthis.yRadius = yRadius;\r\n\r\n\tthis.aStartAngle = aStartAngle;\r\n\tthis.aEndAngle = aEndAngle;\r\n\r\n\tthis.aClockwise = aClockwise;\r\n\t\r\n\tthis.aRotation = aRotation || 0;\r\n\r\n};\r\n\r\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\r\n\r\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\r\n\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\r\n\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\r\n\r\n\tvar angle;\r\n\r\n\tif ( this.aClockwise === true ) {\r\n\r\n\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\r\n\r\n\t} else {\r\n\r\n\t\tangle = this.aStartAngle + t * deltaAngle;\r\n\r\n\t}\r\n\t\r\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\tvar cos = Math.cos( this.aRotation );\r\n\t\tvar sin = Math.sin( this.aRotation );\r\n\r\n\t\tvar tx = x, ty = y;\r\n\r\n\t\t// Rotate the point about the center of the ellipse.\r\n\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\r\n\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\r\n\r\n\t}\r\n\r\n\treturn new THREE.Vector2( x, y );\r\n\r\n};\r\n\r\n// File:src/extras/curves/ArcCurve.js\r\n\r\n/**************************************************************\r\n *\tArc curve\r\n **************************************************************/\r\n\r\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n};\r\n\r\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\r\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\r\n\r\n// File:src/extras/curves/LineCurve3.js\r\n\r\n/**************************************************************\r\n *\tLine3D\r\n **************************************************************/\r\n\r\nTHREE.LineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v1, v2 ) {\r\n\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\r\n\t\tvector.multiplyScalar( t );\r\n\t\tvector.add( this.v1 );\r\n\r\n\t\treturn vector;\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/QuadraticBezierCurve3.js\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\r\n\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/CubicBezierCurve3.js\r\n\r\n/**************************************************************\r\n *\tCubic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2, v3 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\r\n\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/SplineCurve3.js\r\n\r\n/**************************************************************\r\n *\tSpline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.SplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */ ) {\r\n\r\n\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\r\n\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar point = ( points.length - 1 ) * t;\r\n\r\n\t\tvar intPoint = Math.floor( point );\r\n\t\tvar weight = point - intPoint;\r\n\r\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar point1 = points[ intPoint ];\r\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\r\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/CatmullRomCurve3.js\r\n\r\n/**\r\n * @author zz85 https://github.com/zz85\r\n *\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\r\n\r\nTHREE.CatmullRomCurve3 = ( function() {\r\n\r\n\tvar\r\n\t\ttmp = new THREE.Vector3(),\r\n\t\tpx = new CubicPoly(),\r\n\t\tpy = new CubicPoly(),\r\n\t\tpz = new CubicPoly();\r\n\r\n\t/*\r\n\tBased on an optimized c++ solution in\r\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t - http://ideone.com/NoEbVM\r\n\r\n\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\twhich can be placed in CurveUtils.\r\n\t*/\r\n\r\n\tfunction CubicPoly() {\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Compute coefficients for a cubic polynomial\r\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t * such that\r\n\t *   p(0) = x0, p(1) = x1\r\n\t *  and\r\n\t *   p'(0) = t0, p'(1) = t1.\r\n\t */\r\n\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\r\n\r\n\t\tthis.c0 = x0;\r\n\t\tthis.c1 = t0;\r\n\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t};\r\n\r\n\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t// rescale tangents for parametrization in [0,1]\r\n\t\tt1 *= dt1;\r\n\t\tt2 *= dt1;\r\n\r\n\t\t// initCubicPoly\r\n\t\tthis.init( x1, x2, t1, t2 );\r\n\r\n\t};\r\n\r\n\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\r\n\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\r\n\r\n\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t};\r\n\r\n\tCubicPoly.prototype.calc = function( t ) {\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\r\n\r\n\t};\r\n\r\n\t// Subclass Three.js curve\r\n\treturn THREE.Curve.create(\r\n\r\n\t\tfunction ( p /* array of Vector3 */ ) {\r\n\r\n\t\t\tthis.points = p || [];\r\n\r\n\t\t},\r\n\r\n\t\tfunction ( t ) {\r\n\r\n\t\t\tvar points = this.points,\r\n\t\t\t\tpoint, intPoint, weight, l;\r\n\r\n\t\t\tl = points.length;\r\n\r\n\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\r\n\r\n\t\t\tpoint = ( l - 1 ) * t;\r\n\t\t\tintPoint = Math.floor( point );\r\n\t\t\tweight = point - intPoint;\r\n\r\n\t\t\tif ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\t\tintPoint = l - 2;\r\n\t\t\t\tweight = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar p0, p1, p2, p3;\r\n\r\n\t\t\tif ( intPoint === 0 ) {\r\n\r\n\t\t\t\t// extrapolate first point\r\n\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\t\tp0 = tmp;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp0 = points[ intPoint - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp1 = points[ intPoint ];\r\n\t\t\tp2 = points[ intPoint + 1 ];\r\n\r\n\t\t\tif ( intPoint + 2 < l ) {\r\n\r\n\t\t\t\tp3 = points[ intPoint + 2 ]\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// extrapolate last point\r\n\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 2 ] );\r\n\t\t\t\tp3 = tmp;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\r\n\r\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\r\n\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t\t// safety check for repeated points\r\n\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\r\n\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t\t} else if ( this.type === 'catmullrom' ) {\r\n\r\n\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\r\n\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\r\n\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\r\n\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar v = new THREE.Vector3(\r\n\t\t\t\tpx.calc( weight ),\r\n\t\t\t\tpy.calc( weight ),\r\n\t\t\t\tpz.calc( weight )\r\n\t\t\t);\r\n\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t);\r\n\r\n} )();\r\n\r\n// File:src/extras/curves/ClosedSplineCurve3.js\r\n\r\n/**************************************************************\r\n *\tClosed Spline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.ClosedSplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */ ) {\r\n\r\n\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar point = ( points.length - 0 ) * t; // This needs to be from 0-length +1\r\n\r\n\t\tvar intPoint = Math.floor( point );\r\n\t\tvar weight = point - intPoint;\r\n\r\n\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\r\n\r\n\t\tvar point0 = points[ ( intPoint - 1 ) % points.length ];\r\n\t\tvar point1 = points[ ( intPoint     ) % points.length ];\r\n\t\tvar point2 = points[ ( intPoint + 1 ) % points.length ];\r\n\t\tvar point3 = points[ ( intPoint + 2 ) % points.length ];\r\n\r\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\r\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/geometries/BoxGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n */\r\n\r\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'BoxGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\tdepth: depth,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tdepthSegments: depthSegments\r\n\t};\r\n\r\n\tthis.widthSegments = widthSegments || 1;\r\n\tthis.heightSegments = heightSegments || 1;\r\n\tthis.depthSegments = depthSegments || 1;\r\n\r\n\tvar scope = this;\r\n\r\n\tvar width_half = width / 2;\r\n\tvar height_half = height / 2;\r\n\tvar depth_half = depth / 2;\r\n\r\n\tbuildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px\r\n\tbuildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx\r\n\tbuildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py\r\n\tbuildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny\r\n\tbuildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz\r\n\tbuildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz\r\n\r\n\tfunction buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {\r\n\r\n\t\tvar w, ix, iy,\r\n\t\tgridX = scope.widthSegments,\r\n\t\tgridY = scope.heightSegments,\r\n\t\twidth_half = width / 2,\r\n\t\theight_half = height / 2,\r\n\t\toffset = scope.vertices.length;\r\n\r\n\t\tif ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {\r\n\r\n\t\t\tw = 'z';\r\n\r\n\t\t} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {\r\n\r\n\t\t\tw = 'y';\r\n\t\t\tgridY = scope.depthSegments;\r\n\r\n\t\t} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {\r\n\r\n\t\t\tw = 'x';\r\n\t\t\tgridX = scope.depthSegments;\r\n\r\n\t\t}\r\n\r\n\t\tvar gridX1 = gridX + 1,\r\n\t\tgridY1 = gridY + 1,\r\n\t\tsegment_width = width / gridX,\r\n\t\tsegment_height = height / gridY,\r\n\t\tnormal = new THREE.Vector3();\r\n\r\n\t\tnormal[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar vector = new THREE.Vector3();\r\n\t\t\t\tvector[ u ] = ( ix * segment_width - width_half ) * udir;\r\n\t\t\t\tvector[ v ] = ( iy * segment_height - height_half ) * vdir;\r\n\t\t\t\tvector[ w ] = depth;\r\n\r\n\t\t\t\tscope.vertices.push( vector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\tvar uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );\r\n\t\t\t\tvar uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );\r\n\t\t\t\tvar uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );\r\n\t\t\t\tvar uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );\r\n\r\n\t\t\t\tvar face = new THREE.Face3( a + offset, b + offset, d + offset );\r\n\t\t\t\tface.normal.copy( normal );\r\n\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\r\n\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\tscope.faces.push( face );\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\t\tface = new THREE.Face3( b + offset, c + offset, d + offset );\r\n\t\t\t\tface.normal.copy( normal );\r\n\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\r\n\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\tscope.faces.push( face );\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\r\n\r\nTHREE.BoxGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.BoxGeometry(\r\n\t\tparameters.width,\r\n\t\tparameters.height,\r\n\t\tparameters.depth,\r\n\t\tparameters.widthSegments,\r\n\t\tparameters.heightSegments,\r\n\t\tparameters.depthSegments\r\n\t);\r\n\r\n};\r\n\r\nTHREE.CubeGeometry = THREE.BoxGeometry; // backwards compatibility\r\n\r\n// File:src/extras/geometries/CircleGeometry.js\r\n\r\n/**\r\n * @author hughes\r\n */\r\n\r\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'CircleGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tsegments: segments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\r\n\r\nTHREE.CircleGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.CircleGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.segments,\r\n\t\tparameters.thetaStart,\r\n\t\tparameters.thetaLength\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/CircleBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'CircleBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tsegments: segments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradius = radius || 50;\r\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\tvar vertices = segments + 2;\r\n\r\n\tvar positions = new Float32Array( vertices * 3 );\r\n\tvar normals = new Float32Array( vertices * 3 );\r\n\tvar uvs = new Float32Array( vertices * 2 );\r\n\r\n\t// center data is already zero, but need to set a few extras\r\n\tnormals[ 2 ] = 1.0;\r\n\tuvs[ 0 ] = 0.5;\r\n\tuvs[ 1 ] = 0.5;\r\n\r\n\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\r\n\r\n\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\r\n\t\tpositions[ i ] = radius * Math.cos( segment );\r\n\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\r\n\r\n\t\tnormals[ i + 2 ] = 1; // normal z\r\n\r\n\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\r\n\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\r\n\r\n\t}\r\n\r\n\tvar indices = [];\r\n\r\n\tfor ( var i = 1; i <= segments; i ++ ) {\r\n\r\n\t\tindices.push( i, i + 1, 0 );\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\r\n\r\nTHREE.CircleBufferGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.CircleBufferGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.segments,\r\n\t\tparameters.thetaStart,\r\n\t\tparameters.thetaLength\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/CylinderGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'CylinderGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradiusTop: radiusTop,\r\n\t\tradiusBottom: radiusBottom,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\topenEnded: openEnded,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\r\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\r\n\theight = height !== undefined ? height : 100;\r\n\r\n\tradialSegments = radialSegments || 8;\r\n\theightSegments = heightSegments || 1;\r\n\r\n\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : 2 * Math.PI;\r\n\r\n\tvar heightHalf = height / 2;\r\n\r\n\tvar x, y, vertices = [], uvs = [];\r\n\r\n\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\t\tvar uvsRow = [];\r\n\r\n\t\tvar v = y / heightSegments;\r\n\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / radialSegments;\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\r\n\t\t\tvertex.y = - v * height + heightHalf;\r\n\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tverticesRow.push( this.vertices.length - 1 );\r\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\t\tuvs.push( uvsRow );\r\n\r\n\t}\r\n\r\n\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\r\n\tvar na, nb;\r\n\r\n\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\tif ( radiusTop !== 0 ) {\r\n\r\n\t\t\tna = this.vertices[ vertices[ 0 ][ x ] ].clone();\r\n\t\t\tnb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tna = this.vertices[ vertices[ 1 ][ x ] ].clone();\r\n\t\t\tnb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tna.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();\r\n\t\tnb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();\r\n\r\n\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x ];\r\n\t\t\tvar v2 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x + 1 ];\r\n\t\t\tvar v4 = vertices[ y ][ x + 1 ];\r\n\r\n\t\t\tvar n1 = na.clone();\r\n\t\t\tvar n2 = na.clone();\r\n\t\t\tvar n3 = nb.clone();\r\n\t\t\tvar n4 = nb.clone();\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv2 = uvs[ y + 1 ][ x ].clone();\r\n\t\t\tvar uv3 = uvs[ y + 1 ][ x + 1 ].clone();\r\n\t\t\tvar uv4 = uvs[ y ][ x + 1 ].clone();\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// top cap\r\n\r\n\tif ( openEnded === false && radiusTop > 0 ) {\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );\r\n\r\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ 0 ][ x ];\r\n\t\t\tvar v2 = vertices[ 0 ][ x + 1 ];\r\n\t\t\tvar v3 = this.vertices.length - 1;\r\n\r\n\t\t\tvar n1 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\tvar n2 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\tvar n3 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\t\tvar uv1 = uvs[ 0 ][ x ].clone();\r\n\t\t\tvar uv2 = uvs[ 0 ][ x + 1 ].clone();\r\n\t\t\tvar uv3 = new THREE.Vector2( uv2.x, 0 );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 1 ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// bottom cap\r\n\r\n\tif ( openEnded === false && radiusBottom > 0 ) {\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );\r\n\r\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ heightSegments ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ heightSegments ][ x ];\r\n\t\t\tvar v3 = this.vertices.length - 1;\r\n\r\n\t\t\tvar n1 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\tvar n2 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\tvar n3 = new THREE.Vector3( 0, - 1, 0 );\r\n\r\n\t\t\tvar uv1 = uvs[ heightSegments ][ x + 1 ].clone();\r\n\t\t\tvar uv2 = uvs[ heightSegments ][ x ].clone();\r\n\t\t\tvar uv3 = new THREE.Vector2( uv2.x, 1 );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 2 ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n};\r\n\r\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\r\n\r\nTHREE.CylinderGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.CylinderGeometry(\r\n\t\tparameters.radiusTop,\r\n\t\tparameters.radiusBottom,\r\n\t\tparameters.height,\r\n\t\tparameters.radialSegments,\r\n\t\tparameters.heightSegments,\r\n\t\tparameters.openEnded,\r\n\t\tparameters.thetaStart,\r\n\t\tparameters.thetaLength\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/EdgesGeometry.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\r\n\tvar thresholdDot = Math.cos( THREE.Math.degToRad( thresholdAngle ) );\r\n\r\n\tvar edge = [ 0, 0 ], hash = {};\r\n\r\n\tfunction sortFunction( a, b ) {\r\n\r\n\t\treturn a - b;\r\n\r\n\t}\r\n\r\n\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\tvar geometry2;\r\n\r\n\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tgeometry2 = new THREE.Geometry();\r\n\t\tgeometry2.fromBufferGeometry( geometry );\r\n\r\n\t} else {\r\n\r\n\t\tgeometry2 = geometry.clone();\r\n\r\n\t}\r\n\r\n\tgeometry2.mergeVertices();\r\n\tgeometry2.computeFaceNormals();\r\n\r\n\tvar vertices = geometry2.vertices;\r\n\tvar faces = geometry2.faces;\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tvar face = faces[ i ];\r\n\r\n\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\tvar key = edge.toString();\r\n\r\n\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thash[ key ].face2 = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar coords = [];\r\n\r\n\tfor ( var key in hash ) {\r\n\r\n\t\tvar h = hash[ key ];\r\n\r\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\tvar vertex = vertices[ h.vert1 ];\r\n\t\t\tcoords.push( vertex.x );\r\n\t\t\tcoords.push( vertex.y );\r\n\t\t\tcoords.push( vertex.z );\r\n\r\n\t\t\tvertex = vertices[ h.vert2 ];\r\n\t\t\tcoords.push( vertex.x );\r\n\t\t\tcoords.push( vertex.y );\r\n\t\t\tcoords.push( vertex.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\r\n\r\n};\r\n\r\nTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\r\n\r\n// File:src/extras/geometries/ExtrudeGeometry.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n *  amount: <int>, // Depth to extrude the shape\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n *  bevelSize: <float>, // how far from shape outline is bevel\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n *\r\n *  uvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\r\n\r\n\tif ( typeof( shapes ) === \"undefined\" ) {\r\n\r\n\t\tshapes = [];\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ExtrudeGeometry';\r\n\r\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n\t// can't really use automatic vertex normals\r\n\t// as then front and back sides get smoothed too\r\n\t// should do separate smoothing just for sides\r\n\r\n\t//this.computeVertexNormals();\r\n\r\n\t//console.log( \"took\", ( Date.now() - startTime ) );\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tvar sl = shapes.length;\r\n\r\n\tfor ( var s = 0; s < sl; s ++ ) {\r\n\r\n\t\tvar shape = shapes[ s ];\r\n\t\tthis.addShape( shape, options );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tvar amount = options.amount !== undefined ? options.amount : 100;\r\n\r\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\r\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\r\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\r\n\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\r\n\tvar extrudePath = options.extrudePath;\r\n\tvar extrudePts, extrudeByPath = false;\r\n\r\n\t// Use default WorldUVGenerator if no UV generators are specified.\r\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\r\n\r\n\tvar splineTube, binormal, normal, position2;\r\n\tif ( extrudePath ) {\r\n\r\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\textrudeByPath = true;\r\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t// SETUP TNB variables\r\n\r\n\t\t// Reuse TNB from TubeGeomtry for now.\r\n\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\r\n\r\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\tbinormal = new THREE.Vector3();\r\n\t\tnormal = new THREE.Vector3();\r\n\t\tposition2 = new THREE.Vector3();\r\n\r\n\t}\r\n\r\n\t// Safeguards if bevels are not enabled\r\n\r\n\tif ( ! bevelEnabled ) {\r\n\r\n\t\tbevelSegments = 0;\r\n\t\tbevelThickness = 0;\r\n\t\tbevelSize = 0;\r\n\r\n\t}\r\n\r\n\t// Variables initialization\r\n\r\n\tvar ahole, h, hl; // looping of holes\r\n\tvar scope = this;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\r\n\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\r\n\r\n\t}\r\n\r\n\r\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t/* Vertices */\r\n\r\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\tvertices = vertices.concat( ahole );\r\n\r\n\t}\r\n\r\n\r\n\tfunction scalePt2 ( pt, vec, size ) {\r\n\r\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\r\n\r\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t}\r\n\r\n\tvar b, bs, t, z,\r\n\t\tvert, vlen = vertices.length,\r\n\t\tface, flen = faces.length;\r\n\r\n\r\n\t// Find directions for point movement\r\n\r\n\r\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t//\r\n\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\r\n\r\n\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\r\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\r\n\r\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t// check for collinear edges\r\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t// not collinear\r\n\r\n\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\r\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t//  but prevent crazy spikes\r\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\r\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\tv_trans_y =  v_prev_x;\r\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t}\r\n\r\n\r\n\tvar contourMovements = [];\r\n\r\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\tif ( j === il ) j = 0;\r\n\t\tif ( k === il ) k = 0;\r\n\r\n\t\t//  (j)---(i)---(k)\r\n\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t}\r\n\r\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\toneHoleMovements = [];\r\n\r\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t}\r\n\r\n\t\tholesMovements.push( oneHoleMovements );\r\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t}\r\n\r\n\r\n\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\r\n\t\t//z = bevelThickness * t;\r\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\r\n\t\t//bs = bevelSize * t; // linear\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbs = bevelSize;\r\n\r\n\t// Back facing vertices\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Add stepped vertices...\r\n\t// Including front facing vertices\r\n\r\n\tvar s;\r\n\r\n\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Add bevel segments planes\r\n\r\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\r\n\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* Faces */\r\n\r\n\t// Top and bottom faces\r\n\r\n\tbuildLidFaces();\r\n\r\n\t// Sides faces\r\n\r\n\tbuildSideFaces();\r\n\r\n\r\n\t/////  Internal functions\r\n\r\n\tfunction buildLidFaces() {\r\n\r\n\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\tvar layer = 0; // steps + 1\r\n\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Create faces for the z-sides of the shape\r\n\r\n\tfunction buildSideFaces() {\r\n\r\n\t\tvar layeroffset = 0;\r\n\t\tsidewalls( contour, layeroffset );\r\n\t\tlayeroffset += contour.length;\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t//, true\r\n\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\tvar j, k;\r\n\t\ti = contour.length;\r\n\r\n\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\tj = i;\r\n\t\t\tk = i - 1;\r\n\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\r\n\r\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction v( x, y, z ) {\r\n\r\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n\tfunction f3( a, b, c ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\r\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\r\n\r\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\r\n\r\n\t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\t\td += shapesOffset;\r\n\r\n\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\r\n\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\r\n\r\n\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\r\n\r\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\r\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\r\n\r\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\r\n\t\tvar a = vertices[ indexA ];\r\n\t\tvar b = vertices[ indexB ];\r\n\t\tvar c = vertices[ indexC ];\r\n\r\n\t\treturn [\r\n\t\t\tnew THREE.Vector2( a.x, a.y ),\r\n\t\t\tnew THREE.Vector2( b.x, b.y ),\r\n\t\t\tnew THREE.Vector2( c.x, c.y )\r\n\t\t];\r\n\r\n\t},\r\n\r\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\r\n\t\tvar a = vertices[ indexA ];\r\n\t\tvar b = vertices[ indexB ];\r\n\t\tvar c = vertices[ indexC ];\r\n\t\tvar d = vertices[ indexD ];\r\n\r\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\r\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\r\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\r\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\r\n\t\t\t];\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\r\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\r\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\r\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\r\n\t\t\t];\r\n\r\n\t\t}\r\n\r\n\t}\r\n};\r\n\r\n// File:src/extras/geometries/ShapeGeometry.js\r\n\r\n/**\r\n * @author jonobr1 / http://jonobr1.com\r\n *\r\n * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n * ExtrudeGeometry.\r\n *\r\n * parameters = {\r\n *\r\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n *\r\n *\tmaterial: <int> // material index for front and back faces\r\n *\tuvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ShapeGeometry = function ( shapes, options ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ShapeGeometry';\r\n\r\n\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n};\r\n\r\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\r\n\r\n/**\r\n * Add an array of shapes to THREE.ShapeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\tthis.addShape( shapes[ i ], options );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n/**\r\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tif ( options === undefined ) options = {};\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar material = options.material;\r\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\r\n\r\n\t//\r\n\r\n\tvar i, l, hole;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\r\n\r\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\r\n\t\t\thole = holes[ i ];\r\n\r\n\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\r\n\r\n\t\t\t\tholes[ i ] = hole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false;\r\n\r\n\t}\r\n\r\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t// Vertices\r\n\r\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\r\n\t\thole = holes[ i ];\r\n\t\tvertices = vertices.concat( hole );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar vert, vlen = vertices.length;\r\n\tvar face, flen = faces.length;\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = vertices[ i ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\r\n\r\n\t}\r\n\r\n\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\tface = faces[ i ];\r\n\r\n\t\tvar a = face[ 0 ] + shapesOffset;\r\n\t\tvar b = face[ 1 ] + shapesOffset;\r\n\t\tvar c = face[ 2 ] + shapesOffset;\r\n\r\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/geometries/LatheGeometry.js\r\n\r\n/**\r\n * @author astrodud / http://astrodud.isgreat.org/\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\n// points - to create a closed torus, one must use a set of points \r\n//    like so: [ a, b, c, d, a ], see first is the same as last.\r\n// segments - the number of circumference segments to create\r\n// phiStart - the starting radian\r\n// phiLength - the radian (0 to 2*PI) range of the lathed section\r\n//    2*pi is a closed lathe, less than 2PI is a portion.\r\n\r\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'LatheGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpoints: points,\r\n\t\tsegments: segments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength\r\n\t};\r\n\r\n\tsegments = segments || 12;\r\n\tphiStart = phiStart || 0;\r\n\tphiLength = phiLength || 2 * Math.PI;\r\n\r\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\r\n\tvar inverseSegments = 1.0 / segments;\r\n\r\n\tfor ( var i = 0, il = segments; i <= il; i ++ ) {\r\n\r\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\tvar c = Math.cos( phi ),\r\n\t\t\ts = Math.sin( phi );\r\n\r\n\t\tfor ( var j = 0, jl = points.length; j < jl; j ++ ) {\r\n\r\n\t\t\tvar pt = points[ j ];\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\t\tvertex.x = c * pt.x - s * pt.y;\r\n\t\t\tvertex.y = s * pt.x + c * pt.y;\r\n\t\t\tvertex.z = pt.z;\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar np = points.length;\r\n\r\n\tfor ( var i = 0, il = segments; i < il; i ++ ) {\r\n\r\n\t\tfor ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {\r\n\r\n\t\t\tvar base = j + np * i;\r\n\t\t\tvar a = base;\r\n\t\t\tvar b = base + np;\r\n\t\t\tvar c = base + 1 + np;\r\n\t\t\tvar d = base + 1;\r\n\r\n\t\t\tvar u0 = i * inverseSegments;\r\n\t\t\tvar v0 = j * inversePointLength;\r\n\t\t\tvar u1 = u0 + inverseSegments;\r\n\t\t\tvar v1 = v0 + inversePointLength;\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\r\n\t\t\t\tnew THREE.Vector2( u0, v0 ),\r\n\t\t\t\tnew THREE.Vector2( u1, v0 ),\r\n\t\t\t\tnew THREE.Vector2( u0, v1 )\r\n\r\n\t\t\t] );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\r\n\t\t\t\tnew THREE.Vector2( u1, v0 ),\r\n\t\t\t\tnew THREE.Vector2( u1, v1 ),\r\n\t\t\t\tnew THREE.Vector2( u0, v1 )\r\n\r\n\t\t\t] );\r\n\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.mergeVertices();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\r\n\r\n// File:src/extras/geometries/PlaneGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'PlaneGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\r\n};\r\n\r\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\r\n\r\nTHREE.PlaneGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.PlaneGeometry(\r\n\t\tparameters.width,\r\n\t\tparameters.height,\r\n\t\tparameters.widthSegments,\r\n\t\tparameters.heightSegments\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/PlaneBufferGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'PlaneBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments\r\n\t};\r\n\r\n\tvar width_half = width / 2;\r\n\tvar height_half = height / 2;\r\n\r\n\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\r\n\tvar gridX1 = gridX + 1;\r\n\tvar gridY1 = gridY + 1;\r\n\r\n\tvar segment_width = width / gridX;\r\n\tvar segment_height = height / gridY;\r\n\r\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\r\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\r\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\r\n\r\n\tvar offset = 0;\r\n\tvar offset2 = 0;\r\n\r\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\tvar y = iy * segment_height - height_half;\r\n\r\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\tvar x = ix * segment_width - width_half;\r\n\r\n\t\t\tvertices[ offset ] = x;\r\n\t\t\tvertices[ offset + 1 ] = - y;\r\n\r\n\t\t\tnormals[ offset + 2 ] = 1;\r\n\r\n\t\t\tuvs[ offset2 ] = ix / gridX;\r\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\r\n\r\n\t\t\toffset += 3;\r\n\t\t\toffset2 += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\toffset = 0;\r\n\r\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\r\n\r\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\tindices[ offset ] = a;\r\n\t\t\tindices[ offset + 1 ] = b;\r\n\t\t\tindices[ offset + 2 ] = d;\r\n\r\n\t\t\tindices[ offset + 3 ] = b;\r\n\t\t\tindices[ offset + 4 ] = c;\r\n\t\t\tindices[ offset + 5 ] = d;\r\n\r\n\t\t\toffset += 6;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n};\r\n\r\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\r\n\r\nTHREE.PlaneBufferGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.PlaneBufferGeometry(\r\n\t\tparameters.width,\r\n\t\tparameters.height,\r\n\t\tparameters.widthSegments,\r\n\t\tparameters.heightSegments\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/RingGeometry.js\r\n\r\n/**\r\n * @author Kaleb Murphy\r\n */\r\n\r\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'RingGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tinnerRadius: innerRadius,\r\n\t\touterRadius: outerRadius,\r\n\t\tthetaSegments: thetaSegments,\r\n\t\tphiSegments: phiSegments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tinnerRadius = innerRadius || 0;\r\n\touterRadius = outerRadius || 50;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 8;\r\n\r\n\tvar i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\r\n\tfor ( i = 0; i < phiSegments + 1; i ++ ) {\r\n\r\n\t\t// concentric circles inside ring\r\n\r\n\t\tfor ( o = 0; o < thetaSegments + 1; o ++ ) {\r\n\r\n\t\t\t// number of segments per circle\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvar segment = thetaStart + o / thetaSegments * thetaLength;\r\n\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\t\t\tuvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );\r\n\r\n\t\t}\r\n\r\n\t\tradius += radiusStep;\r\n\r\n\t}\r\n\r\n\tvar n = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\tfor ( i = 0; i < phiSegments; i ++ ) {\r\n\r\n\t\t// concentric circles inside ring\r\n\r\n\t\tvar thetaSegment = i * ( thetaSegments + 1 );\r\n\r\n\t\tfor ( o = 0; o < thetaSegments ; o ++ ) {\r\n\r\n\t\t\t// number of segments per circle\r\n\r\n\t\t\tvar segment = o + thetaSegment;\r\n\r\n\t\t\tvar v1 = segment;\r\n\t\t\tvar v2 = segment + thetaSegments + 1;\r\n\t\t\tvar v3 = segment + thetaSegments + 2;\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );\r\n\r\n\t\t\tv1 = segment;\r\n\t\t\tv2 = segment + thetaSegments + 2;\r\n\t\t\tv3 = segment + 1;\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\r\n\r\nTHREE.RingGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.RingGeometry(\r\n\t\tparameters.innerRadius,\r\n\t\tparameters.outerRadius,\r\n\t\tparameters.thetaSegments,\r\n\t\tparameters.phiSegments,\r\n\t\tparameters.thetaStart,\r\n\t\tparameters.thetaLength\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/SphereGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'SphereGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\r\n\r\nTHREE.SphereGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.SphereGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.widthSegments,\r\n\t\tparameters.heightSegments,\r\n\t\tparameters.phiStart,\r\n\t\tparameters.phiLength,\r\n\t\tparameters.thetaStart,\r\n\t\tparameters.thetaLength\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/SphereBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n * based on THREE.SphereGeometry\r\n */\r\n\r\nTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'SphereBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradius = radius || 50;\r\n\r\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\tvar thetaEnd = thetaStart + thetaLength;\r\n\r\n\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\r\n\r\n\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\tvar index = 0, vertices = [], normal = new THREE.Vector3();\r\n\r\n\tfor ( var y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\r\n\t\tvar v = y / heightSegments;\r\n\r\n\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / widthSegments;\r\n\r\n\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\tnormal.set( px, py, pz ).normalize();\r\n\r\n\t\t\tpositions.setXYZ( index, px, py, pz );\r\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\t\t\tuvs.setXY( index, u, 1 - v );\r\n\r\n\t\t\tverticesRow.push( index );\r\n\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\r\n\t}\r\n\r\n\tvar indices = [];\r\n\r\n\tfor ( var y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\r\n\r\n\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\r\n\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\r\n\tthis.addAttribute( 'position', positions );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\r\n\r\nTHREE.SphereBufferGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.SphereBufferGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.widthSegments,\r\n\t\tparameters.heightSegments,\r\n\t\tparameters.phiStart,\r\n\t\tparameters.phiLength,\r\n\t\tparameters.thetaStart,\r\n\t\tparameters.thetaLength\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/TorusGeometry.js\r\n\r\n/**\r\n * @author oosmoxiecode\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n */\r\n\r\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TorusGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\tradialSegments: radialSegments,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tarc: arc\r\n\t};\r\n\r\n\tradius = radius || 100;\r\n\ttube = tube || 40;\r\n\tradialSegments = radialSegments || 8;\r\n\ttubularSegments = tubularSegments || 6;\r\n\tarc = arc || Math.PI * 2;\r\n\r\n\tvar center = new THREE.Vector3(), uvs = [], normals = [];\r\n\r\n\tfor ( var j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\tcenter.y = radius * Math.sin( u );\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tuvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );\r\n\t\t\tnormals.push( vertex.clone().sub( center ).normalize() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\tfor ( var i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\tvar face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );\r\n\t\t\tthis.faces.push( face );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );\r\n\r\n\t\t\tface = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );\r\n\t\t\tthis.faces.push( face );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n};\r\n\r\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\r\n\r\nTHREE.TorusGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.TorusGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.tube,\r\n\t\tparameters.radialSegments,\r\n\t\tparameters.tubularSegments,\r\n\t\tparameters.arc\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/TorusKnotGeometry.js\r\n\r\n/**\r\n * @author oosmoxiecode\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n */\r\n\r\nTHREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TorusKnotGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\tradialSegments: radialSegments,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tp: p,\r\n\t\tq: q,\r\n\t\theightScale: heightScale\r\n\t};\r\n\r\n\tradius = radius || 100;\r\n\ttube = tube || 40;\r\n\tradialSegments = radialSegments || 64;\r\n\ttubularSegments = tubularSegments || 8;\r\n\tp = p || 2;\r\n\tq = q || 3;\r\n\theightScale = heightScale || 1;\r\n\r\n\tvar grid = new Array( radialSegments );\r\n\tvar tang = new THREE.Vector3();\r\n\tvar n = new THREE.Vector3();\r\n\tvar bitan = new THREE.Vector3();\r\n\r\n\tfor ( var i = 0; i < radialSegments; ++ i ) {\r\n\r\n\t\tgrid[ i ] = new Array( tubularSegments );\r\n\t\tvar u = i / radialSegments * 2 * p * Math.PI;\r\n\t\tvar p1 = getPos( u, q, p, radius, heightScale );\r\n\t\tvar p2 = getPos( u + 0.01, q, p, radius, heightScale );\r\n\t\ttang.subVectors( p2, p1 );\r\n\t\tn.addVectors( p2, p1 );\r\n\r\n\t\tbitan.crossVectors( tang, n );\r\n\t\tn.crossVectors( bitan, tang );\r\n\t\tbitan.normalize();\r\n\t\tn.normalize();\r\n\r\n\t\tfor ( var j = 0; j < tubularSegments; ++ j ) {\r\n\r\n\t\t\tvar v = j / tubularSegments * 2 * Math.PI;\r\n\t\t\tvar cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tvar cy = tube * Math.sin( v );\r\n\r\n\t\t\tvar pos = new THREE.Vector3();\r\n\t\t\tpos.x = p1.x + cx * n.x + cy * bitan.x;\r\n\t\t\tpos.y = p1.y + cx * n.y + cy * bitan.y;\r\n\t\t\tpos.z = p1.z + cx * n.z + cy * bitan.z;\r\n\r\n\t\t\tgrid[ i ][ j ] = this.vertices.push( pos ) - 1;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0; i < radialSegments; ++ i ) {\r\n\r\n\t\tfor ( var j = 0; j < tubularSegments; ++ j ) {\r\n\r\n\t\t\tvar ip = ( i + 1 ) % radialSegments;\r\n\t\t\tvar jp = ( j + 1 ) % tubularSegments;\r\n\r\n\t\t\tvar a = grid[ i ][ j ];\r\n\t\t\tvar b = grid[ ip ][ j ];\r\n\t\t\tvar c = grid[ ip ][ jp ];\r\n\t\t\tvar d = grid[ i ][ jp ];\r\n\r\n\t\t\tvar uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );\r\n\t\t\tvar uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );\r\n\t\t\tvar uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );\r\n\t\t\tvar uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n\tfunction getPos( u, in_q, in_p, radius, heightScale ) {\r\n\r\n\t\tvar cu = Math.cos( u );\r\n\t\tvar su = Math.sin( u );\r\n\t\tvar quOverP = in_q / in_p * u;\r\n\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\tvar tx = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\tvar ty = radius * ( 2 + cs ) * su * 0.5;\r\n\t\tvar tz = heightScale * radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\r\n\r\nTHREE.TorusKnotGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.TorusKnotGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.tube,\r\n\t\tparameters.radialSegments,\r\n\t\tparameters.tubularSegments,\r\n\t\tparameters.p,\r\n\t\tparameters.q,\r\n\t\tparameters.heightScale\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/TubeGeometry.js\r\n\r\n/**\r\n * @author WestLangley / https://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author miningold / https://github.com/miningold\r\n * @author jonobr1 / https://github.com/jonobr1\r\n *\r\n * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n *\r\n * Creates a tube which extrudes along a 3d spline\r\n *\r\n * Uses parallel transport frames as described in\r\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n */\r\n\r\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TubeGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpath: path,\r\n\t\tsegments: segments,\r\n\t\tradius: radius,\r\n\t\tradialSegments: radialSegments,\r\n\t\tclosed: closed,\r\n\t\ttaper: taper\r\n\t};\r\n\r\n\tsegments = segments || 64;\r\n\tradius = radius || 1;\r\n\tradialSegments = radialSegments || 8;\r\n\tclosed = closed || false;\r\n\ttaper = taper || THREE.TubeGeometry.NoTaper;\r\n\r\n\tvar grid = [];\r\n\r\n\tvar scope = this,\r\n\r\n\t\ttangent,\r\n\t\tnormal,\r\n\t\tbinormal,\r\n\r\n\t\tnumpoints = segments + 1,\r\n\r\n\t\tu, v, r,\r\n\r\n\t\tcx, cy,\r\n\t\tpos, pos2 = new THREE.Vector3(),\r\n\t\ti, j,\r\n\t\tip, jp,\r\n\t\ta, b, c, d,\r\n\t\tuva, uvb, uvc, uvd;\r\n\r\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\r\n\t\ttangents = frames.tangents,\r\n\t\tnormals = frames.normals,\r\n\t\tbinormals = frames.binormals;\r\n\r\n\t// proxy internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\t// construct the grid\r\n\r\n\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\r\n\t\tgrid[ i ] = [];\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\tpos = path.getPointAt( u );\r\n\r\n\t\ttangent = tangents[ i ];\r\n\t\tnormal = normals[ i ];\r\n\t\tbinormal = binormals[ i ];\r\n\r\n\t\tr = radius * taper( u );\r\n\r\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\r\n\t\t\tv = j / radialSegments * 2 * Math.PI;\r\n\r\n\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = r * Math.sin( v );\r\n\r\n\t\t\tpos2.copy( pos );\r\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\r\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\r\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\r\n\r\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// construct the mesh\r\n\r\n\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\r\n\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\r\n\t\t\tjp = ( j + 1 ) % radialSegments;\r\n\r\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\r\n\t\t\tb = grid[ ip ][ j ];\r\n\t\t\tc = grid[ ip ][ jp ];\r\n\t\t\td = grid[ i ][ jp ];\r\n\r\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\r\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\r\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\r\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\r\nTHREE.TubeGeometry.prototype.clone = function() {\r\n\r\n\treturn new this.constructor( this.parameters.path,\r\n\t\tthis.parameters.segments, this.parameters.radius, this.parameters.radialSegments,\r\n\t\tthis.parameters.closed, this.parameters.taper\r\n\t);\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.NoTaper = function ( u ) {\r\n\r\n\treturn 1;\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\r\n\r\n\treturn Math.sin( Math.PI * u );\r\n\r\n};\r\n\r\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\r\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\r\n\r\n\tvar\tnormal = new THREE.Vector3(),\r\n\r\n\t\ttangents = [],\r\n\t\tnormals = [],\r\n\t\tbinormals = [],\r\n\r\n\t\tvec = new THREE.Vector3(),\r\n\t\tmat = new THREE.Matrix4(),\r\n\r\n\t\tnumpoints = segments + 1,\r\n\t\ttheta,\r\n\t\tsmallest,\r\n\r\n\t\ttx, ty, tz,\r\n\t\ti, u;\r\n\r\n\r\n\t// expose internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\t// compute the tangent vectors for each segment on the path\r\n\r\n\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\ttangents[ i ] = path.getTangentAt( u );\r\n\t\ttangents[ i ].normalize();\r\n\r\n\t}\r\n\r\n\tinitialNormal3();\r\n\r\n\t/*\r\n\tfunction initialNormal1(lastBinormal) {\r\n\t\t// fixed start binormal. Has dangers of 0 vectors\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t}\r\n\r\n\tfunction initialNormal2() {\r\n\r\n\t\t// This uses the Frenet-Serret formula for deriving binormal\r\n\t\tvar t2 = path.getTangentAt( epsilon );\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\r\n\t}\r\n\t*/\r\n\r\n\tfunction initialNormal3() {\r\n\r\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t// and in the direction of the smallest tangent xyz component\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tsmallest = Number.MAX_VALUE;\r\n\t\ttx = Math.abs( tangents[ 0 ].x );\r\n\t\tty = Math.abs( tangents[ 0 ].y );\r\n\t\ttz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\tif ( tx <= smallest ) {\r\n\r\n\t\t\tsmallest = tx;\r\n\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ty <= smallest ) {\r\n\r\n\t\t\tsmallest = ty;\r\n\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( tz <= smallest ) {\r\n\r\n\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t}\r\n\r\n\r\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\r\n\r\n\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\r\n\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\tvec.normalize();\r\n\r\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t}\r\n\r\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t}\r\n\r\n\r\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\tif ( closed ) {\r\n\r\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\r\n\t\ttheta /= ( numpoints - 1 );\r\n\r\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\r\n\r\n\t\t\ttheta = - theta;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\r\n\t\t\t// twist a little...\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/geometries/PolyhedronGeometry.js\r\n\r\n/**\r\n * @author clockworkgeek / https://github.com/clockworkgeek\r\n * @author timothypratley / https://github.com/timothypratley\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'PolyhedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tvertices: vertices,\r\n\t\tindices: indices,\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n\tradius = radius || 1;\r\n\tdetail = detail || 0;\r\n\r\n\tvar that = this;\r\n\r\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\r\n\r\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\r\n\r\n\t}\r\n\r\n\tvar p = this.vertices;\r\n\r\n\tvar faces = [];\r\n\r\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\r\n\r\n\t\tvar v1 = p[ indices[ i ] ];\r\n\t\tvar v2 = p[ indices[ i + 1 ] ];\r\n\t\tvar v3 = p[ indices[ i + 2 ] ];\r\n\r\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );\r\n\r\n\t}\r\n\r\n\tvar centroid = new THREE.Vector3();\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tsubdivide( faces[ i ], detail );\r\n\r\n\t}\r\n\r\n\r\n\t// Handle case when face straddles the seam\r\n\r\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\r\n\r\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\tvar x0 = uvs[ 0 ].x;\r\n\t\tvar x1 = uvs[ 1 ].x;\r\n\t\tvar x2 = uvs[ 2 ].x;\r\n\r\n\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\tvar min = Math.min( x0, x1, x2 );\r\n\r\n\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\r\n\t\t\t// 0.9 is somewhat arbitrary\r\n\r\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\r\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\r\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Apply radius\r\n\r\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\tthis.vertices[ i ].multiplyScalar( radius );\r\n\r\n\t}\r\n\r\n\r\n\t// Merge vertices\r\n\r\n\tthis.mergeVertices();\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n\r\n\t// Project vector onto sphere's surface\r\n\r\n\tfunction prepare( vector ) {\r\n\r\n\t\tvar vertex = vector.normalize().clone();\r\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\r\n\r\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\r\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\r\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\r\n\r\n\t\treturn vertex;\r\n\r\n\t}\r\n\r\n\r\n\t// Approximate a curved face with recursively sub-divided triangles.\r\n\r\n\tfunction make( v1, v2, v3, materialIndex ) {\r\n\r\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );\r\n\t\tthat.faces.push( face );\r\n\r\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\r\n\t\tvar azi = azimuth( centroid );\r\n\r\n\t\tthat.faceVertexUvs[ 0 ].push( [\r\n\t\t\tcorrectUV( v1.uv, v1, azi ),\r\n\t\t\tcorrectUV( v2.uv, v2, azi ),\r\n\t\t\tcorrectUV( v3.uv, v3, azi )\r\n\t\t] );\r\n\r\n\t}\r\n\r\n\r\n\t// Analytically subdivide a face to the required detail level.\r\n\r\n\tfunction subdivide( face, detail ) {\r\n\r\n\t\tvar cols = Math.pow( 2, detail );\r\n\t\tvar a = prepare( that.vertices[ face.a ] );\r\n\t\tvar b = prepare( that.vertices[ face.b ] );\r\n\t\tvar c = prepare( that.vertices[ face.c ] );\r\n\t\tvar v = [];\r\n\r\n\t\tvar materialIndex = face.materialIndex;\r\n\r\n\t\t// Construct all of the vertices for this subdivision.\r\n\r\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\r\n\r\n\t\t\tv[ i ] = [];\r\n\r\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\r\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\r\n\t\t\tvar rows = cols - i;\r\n\r\n\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\r\n\r\n\t\t\t\tif ( j === 0 && i === cols ) {\r\n\r\n\t\t\t\t\tv[ i ][ j ] = aj;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Construct all of the faces.\r\n\r\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\r\n\r\n\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\r\n\t\t\t\tvar k = Math.floor( j / 2 );\r\n\r\n\t\t\t\tif ( j % 2 === 0 ) {\r\n\r\n\t\t\t\t\tmake(\r\n\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\tv[ i ][ k ],\r\n\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmake(\r\n\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\tfunction azimuth( vector ) {\r\n\r\n\t\treturn Math.atan2( vector.z, - vector.x );\r\n\r\n\t}\r\n\r\n\r\n\t// Angle above the XZ plane.\r\n\r\n\tfunction inclination( vector ) {\r\n\r\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t}\r\n\r\n\r\n\t// Texture fixing helper. Spheres have some odd behaviours.\r\n\r\n\tfunction correctUV( uv, vector, azimuth ) {\r\n\r\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n\t\treturn uv.clone();\r\n\r\n\t}\r\n\r\n\r\n};\r\n\r\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\r\n\r\nTHREE.PolyhedronGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.PolyhedronGeometry(\r\n\t\tparameters.vertices,\r\n\t\tparameters.indices,\r\n\t\tparameters.radius,\r\n\t\tparameters.detail\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/DodecahedronGeometry.js\r\n\r\n/**\r\n * @author Abe Pazos / https://hamoid.com\r\n */\r\n\r\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\tvar r = 1 / t;\r\n\r\n\tvar vertices = [\r\n\r\n\t\t// (±1, ±1, ±1)\r\n\t\t- 1, - 1, - 1,    - 1, - 1,  1,\r\n\t\t- 1,  1, - 1,    - 1,  1,  1,\r\n\t\t 1, - 1, - 1,     1, - 1,  1,\r\n\t\t 1,  1, - 1,     1,  1,  1,\r\n\r\n\t\t// (0, ±1/φ, ±φ)\r\n\t\t 0, - r, - t,     0, - r,  t,\r\n\t\t 0,  r, - t,     0,  r,  t,\r\n\r\n\t\t// (±1/φ, ±φ, 0)\r\n\t\t- r, - t,  0,    - r,  t,  0,\r\n\t\t r, - t,  0,     r,  t,  0,\r\n\r\n\t\t// (±φ, 0, ±1/φ)\r\n\t\t- t,  0, - r,     t,  0, - r,\r\n\t\t- t,  0,  r,     t,  0,  r\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\r\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\r\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\r\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\r\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\r\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\r\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\r\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\r\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\r\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\r\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\r\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'DodecahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\r\n\r\nTHREE.DodecahedronGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.DodecahedronGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.detail\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/IcosahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\tvar vertices = [\r\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\r\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\r\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\r\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\r\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\r\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'IcosahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\r\n\r\nTHREE.IcosahedronGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.IcosahedronGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.detail\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/OctahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.OctahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'OctahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\r\n\r\nTHREE.OctahedronGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.OctahedronGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.detail\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/TetrahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'TetrahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\r\n\r\nTHREE.TetrahedronGeometry.prototype.clone = function () {\r\n\r\n\tvar parameters = this.parameters;\r\n\r\n\treturn new THREE.TetrahedronGeometry(\r\n\t\tparameters.radius,\r\n\t\tparameters.detail\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/geometries/ParametricGeometry.js\r\n\r\n/**\r\n * @author zz85 / https://github.com/zz85\r\n * Parametric Surfaces Geometry\r\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n *\r\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\r\n *\r\n */\r\n\r\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ParametricGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tfunc: func,\r\n\t\tslices: slices,\r\n\t\tstacks: stacks\r\n\t};\r\n\r\n\tvar verts = this.vertices;\r\n\tvar faces = this.faces;\r\n\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\tvar i, j, p;\r\n\tvar u, v;\r\n\r\n\tvar sliceCount = slices + 1;\r\n\r\n\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\tv = i / stacks;\r\n\r\n\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\tu = j / slices;\r\n\r\n\t\t\tp = func( u, v );\r\n\t\t\tverts.push( p );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar a, b, c, d;\r\n\tvar uva, uvb, uvc, uvd;\r\n\r\n\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\ta = i * sliceCount + j;\r\n\t\t\tb = i * sliceCount + j + 1;\r\n\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\td = ( i + 1 ) * sliceCount + j;\r\n\r\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\r\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\r\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\r\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\r\n\r\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// console.log(this);\r\n\r\n\t// magic bullet\r\n\t// var diff = this.mergeVertices();\r\n\t// console.log('removed ', diff, ' vertices by merging');\r\n\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\r\n\r\n// File:src/extras/geometries/WireframeGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WireframeGeometry = function ( geometry ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tvar edge = [ 0, 0 ], hash = {};\r\n\r\n\tfunction sortFunction( a, b ) {\r\n\r\n\t\treturn a - b;\r\n\r\n\t}\r\n\r\n\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar numEdges = 0;\r\n\r\n\t\t// allocate maximal size\r\n\t\tvar edges = new Uint32Array( 6 * faces.length );\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\t\tvar key = edge.toString();\r\n\r\n\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\tnumEdges ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\r\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\r\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\r\n\r\n\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\r\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\r\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t// Indexed BufferGeometry\r\n\r\n\t\t\tvar indices = geometry.index.array;\r\n\t\t\tvar vertices = geometry.attributes.position;\r\n\t\t\tvar drawcalls = geometry.drawcalls;\r\n\t\t\tvar numEdges = 0;\r\n\r\n\t\t\tif ( drawcalls.length === 0 ) {\r\n\r\n\t\t\t\tgeometry.addGroup( 0, indices.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// allocate maximal size\r\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\r\n\r\n\t\t\tfor ( var o = 0, ol = drawcalls.length; o < ol; ++ o ) {\r\n\r\n\t\t\t\tvar drawcall = drawcalls[ o ];\r\n\r\n\t\t\t\tvar start = drawcall.start;\r\n\t\t\t\tvar count = drawcall.count;\r\n\r\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\r\n\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\r\n\t\t\t\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\t\t\t\tvar key = edge.toString();\r\n\r\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\t\t\tnumEdges ++;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\r\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\r\n\t\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\r\n\r\n\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\r\n\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\r\n\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\tvar vertices = geometry.attributes.position.array;\r\n\t\t\tvar numEdges = vertices.length / 3;\r\n\t\t\tvar numTris = numEdges / 3;\r\n\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\r\n\r\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tvar index = 18 * i + 6 * j;\r\n\r\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\r\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\r\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\r\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\r\n\r\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\r\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\r\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\r\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\r\n\r\n// File:src/extras/helpers/AxisHelper.js\r\n\r\n/**\r\n * @author sroucheray / http://sroucheray.org/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AxisHelper = function ( size ) {\r\n\r\n\tsize = size || 1;\r\n\r\n\tvar vertices = new Float32Array( [\r\n\t\t0, 0, 0,  size, 0, 0,\r\n\t\t0, 0, 0,  0, size, 0,\r\n\t\t0, 0, 0,  0, 0, size\r\n\t] );\r\n\r\n\tvar colors = new Float32Array( [\r\n\t\t1, 0, 0,  1, 0.6, 0,\r\n\t\t0, 1, 0,  0.6, 1, 0,\r\n\t\t0, 0, 1,  0, 0.6, 1\r\n\t] );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n};\r\n\r\nTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\r\n\r\n// File:src/extras/helpers/ArrowHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author zz85 / http://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n *\r\n * Creates an arrow for visualizing directions\r\n *\r\n * Parameters:\r\n *  dir - Vector3\r\n *  origin - Vector3\r\n *  length - Number\r\n *  color - color in hex value\r\n *  headLength - Number\r\n *  headWidth - Number\r\n */\r\n\r\nTHREE.ArrowHelper = ( function () {\r\n\r\n\tvar lineGeometry = new THREE.Geometry();\r\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );\r\n\r\n\tvar coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );\r\n\tconeGeometry.translate( 0, - 0.5, 0 );\r\n\r\n\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tTHREE.Object3D.call( this );\r\n\r\n\t\tif ( color === undefined ) color = 0xffff00;\r\n\t\tif ( length === undefined ) length = 1;\r\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\t\tthis.position.copy( origin );\r\n\t\t\r\n\t\tif ( headLength < length ) {\r\n\t\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\t\tthis.line.matrixAutoUpdate = false;\r\n\t\t\tthis.add( this.line );\r\n\t\t}\r\n\r\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\r\n\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.setDirection( dir );\r\n\t\tthis.setLength( length, headLength, headWidth );\r\n\r\n\t}\r\n\r\n}() );\r\n\r\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\r\n\r\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\r\n\r\n\tvar axis = new THREE.Vector3();\r\n\tvar radians;\r\n\r\n\treturn function setDirection( dir ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tif ( dir.y > 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\r\n\t\t} else if ( dir.y < - 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\r\n\r\n\t\t\tradians = Math.acos( dir.y );\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\r\n\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\tif ( headLength < length ){\r\n\t\tthis.line.scale.set( 1, length - headLength, 1 );\r\n\t\tthis.line.updateMatrix();\r\n\t}\r\n\r\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\tthis.cone.position.y = length;\r\n\tthis.cone.updateMatrix();\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\r\n\r\n\tif ( this.line !== undefined ) this.line.material.color.set( color );\r\n\tthis.cone.material.color.set( color );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/BoxHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BoxHelper = function ( object ) {\r\n\r\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\tvar positions = new Float32Array( 8 * 3 );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );\r\n\r\n\tif ( object !== undefined ) {\r\n\r\n\t\tthis.update( object );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\r\n\r\nTHREE.BoxHelper.prototype.update = ( function () {\r\n\r\n\tvar box = new THREE.Box3();\r\n\r\n\treturn function ( object ) {\r\n\r\n\t\tbox.setFromObject( object );\r\n\r\n\t\tif ( box.empty() ) return;\r\n\r\n\t\tvar min = box.min;\r\n\t\tvar max = box.max;\r\n\r\n\t\t/*\r\n\t\t  5____4\r\n\t\t1/___0/|\r\n\t\t| 6__|_7\r\n\t\t2/___3/\r\n\r\n\t\t0: max.x, max.y, max.z\r\n\t\t1: min.x, max.y, max.z\r\n\t\t2: min.x, min.y, max.z\r\n\t\t3: max.x, min.y, max.z\r\n\t\t4: max.x, max.y, min.z\r\n\t\t5: min.x, max.y, min.z\r\n\t\t6: min.x, min.y, min.z\r\n\t\t7: max.x, min.y, min.z\r\n\t\t*/\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\t\tvar array = position.array;\r\n\r\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\r\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\r\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\r\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t}\r\n\r\n} )();\r\n\r\n// File:src/extras/helpers/BoundingBoxHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\n// a helper to show the world-axis-aligned bounding box for an object\r\n\r\nTHREE.BoundingBoxHelper = function ( object, hex ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.box = new THREE.Box3();\r\n\r\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\r\n\r\n};\r\n\r\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\r\n\r\nTHREE.BoundingBoxHelper.prototype.update = function () {\r\n\r\n\tthis.box.setFromObject( this.object );\r\n\r\n\tthis.box.size( this.scale );\r\n\r\n\tthis.box.center( this.position );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/CameraHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows frustum, line of sight and up of the camera\r\n *\t- suitable for fast updates\r\n * \t- based on frustum visualization in lightgl.js shadowmap example\r\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n */\r\n\r\nTHREE.CameraHelper = function ( camera ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\r\n\r\n\tvar pointMap = {};\r\n\r\n\t// colors\r\n\r\n\tvar hexFrustum = 0xffaa00;\r\n\tvar hexCone = 0xff0000;\r\n\tvar hexUp = 0x00aaff;\r\n\tvar hexTarget = 0xffffff;\r\n\tvar hexCross = 0x333333;\r\n\r\n\t// near\r\n\r\n\taddLine( \"n1\", \"n2\", hexFrustum );\r\n\taddLine( \"n2\", \"n4\", hexFrustum );\r\n\taddLine( \"n4\", \"n3\", hexFrustum );\r\n\taddLine( \"n3\", \"n1\", hexFrustum );\r\n\r\n\t// far\r\n\r\n\taddLine( \"f1\", \"f2\", hexFrustum );\r\n\taddLine( \"f2\", \"f4\", hexFrustum );\r\n\taddLine( \"f4\", \"f3\", hexFrustum );\r\n\taddLine( \"f3\", \"f1\", hexFrustum );\r\n\r\n\t// sides\r\n\r\n\taddLine( \"n1\", \"f1\", hexFrustum );\r\n\taddLine( \"n2\", \"f2\", hexFrustum );\r\n\taddLine( \"n3\", \"f3\", hexFrustum );\r\n\taddLine( \"n4\", \"f4\", hexFrustum );\r\n\r\n\t// cone\r\n\r\n\taddLine( \"p\", \"n1\", hexCone );\r\n\taddLine( \"p\", \"n2\", hexCone );\r\n\taddLine( \"p\", \"n3\", hexCone );\r\n\taddLine( \"p\", \"n4\", hexCone );\r\n\r\n\t// up\r\n\r\n\taddLine( \"u1\", \"u2\", hexUp );\r\n\taddLine( \"u2\", \"u3\", hexUp );\r\n\taddLine( \"u3\", \"u1\", hexUp );\r\n\r\n\t// target\r\n\r\n\taddLine( \"c\", \"t\", hexTarget );\r\n\taddLine( \"p\", \"c\", hexCross );\r\n\r\n\t// cross\r\n\r\n\taddLine( \"cn1\", \"cn2\", hexCross );\r\n\taddLine( \"cn3\", \"cn4\", hexCross );\r\n\r\n\taddLine( \"cf1\", \"cf2\", hexCross );\r\n\taddLine( \"cf3\", \"cf4\", hexCross );\r\n\r\n\tfunction addLine( a, b, hex ) {\r\n\r\n\t\taddPoint( a, hex );\r\n\t\taddPoint( b, hex );\r\n\r\n\t}\r\n\r\n\tfunction addPoint( id, hex ) {\r\n\r\n\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\r\n\r\n\t\tif ( pointMap[ id ] === undefined ) {\r\n\r\n\t\t\tpointMap[ id ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\r\n\r\n\t}\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n\tthis.camera = camera;\r\n\tthis.camera.updateProjectionMatrix();\r\n\r\n\tthis.matrix = camera.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.pointMap = pointMap;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\r\n\r\nTHREE.CameraHelper.prototype.update = function () {\r\n\r\n\tvar geometry, pointMap;\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\tvar camera = new THREE.Camera();\r\n\r\n\tfunction setPoint( point, x, y, z ) {\r\n\r\n\t\tvector.set( x, y, z ).unproject( camera );\r\n\r\n\t\tvar points = pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn function () {\r\n\r\n\t\tgeometry = this.geometry;\r\n\t\tpointMap = this.pointMap;\r\n\r\n\t\tvar w = 1, h = 1;\r\n\r\n\t\t// we need just camera projection matrix\r\n\t\t// world matrix must be identity\r\n\r\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\r\n\t\t// center / target\r\n\r\n\t\tsetPoint( \"c\", 0, 0, - 1 );\r\n\t\tsetPoint( \"t\", 0, 0,  1 );\r\n\r\n\t\t// near\r\n\r\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\r\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\r\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\r\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\r\n\r\n\t\t// far\r\n\r\n\t\tsetPoint( \"f1\", - w, - h, 1 );\r\n\t\tsetPoint( \"f2\",   w, - h, 1 );\r\n\t\tsetPoint( \"f3\", - w,   h, 1 );\r\n\t\tsetPoint( \"f4\",   w,   h, 1 );\r\n\r\n\t\t// up\r\n\r\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\r\n\r\n\t\t// cross\r\n\r\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\r\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\r\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\r\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\r\n\r\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\r\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\r\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\r\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\r\n\r\n\t\tgeometry.verticesNeedUpdate = true;\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/DirectionalLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.DirectionalLightHelper = function ( light, size ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tsize = size || 1;\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\tgeometry.vertices.push(\r\n\t\tnew THREE.Vector3( - size,   size, 0 ),\r\n\t\tnew THREE.Vector3(   size,   size, 0 ),\r\n\t\tnew THREE.Vector3(   size, - size, 0 ),\r\n\t\tnew THREE.Vector3( - size, - size, 0 ),\r\n\t\tnew THREE.Vector3( - size,   size, 0 )\r\n\t);\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\r\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\tthis.lightPlane = new THREE.Line( geometry, material );\r\n\tthis.add( this.lightPlane );\r\n\r\n\tgeometry = new THREE.Geometry();\r\n\tgeometry.vertices.push(\r\n\t\tnew THREE.Vector3(),\r\n\t\tnew THREE.Vector3()\r\n\t);\r\n\r\n\tmaterial = new THREE.LineBasicMaterial( { fog: false } );\r\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\tthis.targetLine = new THREE.Line( geometry, material );\r\n\tthis.add( this.targetLine );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\r\n\r\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.lightPlane.geometry.dispose();\r\n\tthis.lightPlane.material.dispose();\r\n\tthis.targetLine.geometry.dispose();\r\n\tthis.targetLine.material.dispose();\r\n\r\n};\r\n\r\nTHREE.DirectionalLightHelper.prototype.update = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar v3 = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\tv3.subVectors( v2, v1 );\r\n\r\n\t\tthis.lightPlane.lookAt( v3 );\r\n\t\tthis.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( v3 );\r\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\t\tthis.targetLine.material.color.copy( this.lightPlane.material.color );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/EdgesHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @param object THREE.Mesh whose geometry will be used\r\n * @param hex line color\r\n * @param thresholdAngle the minimum angle (in degrees),\r\n * between the face normals of adjacent faces,\r\n * that is required to render an edge. A value of 10 means\r\n * an edge is only rendered if the angle is at least 10 degrees.\r\n */\r\n\r\nTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\r\n\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\r\n\r\n// File:src/extras/helpers/FaceNormalsHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\r\n\t// FaceNormalsHelper only supports THREE.Geometry\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t//\r\n\r\n\tvar nNormals = 0;\r\n\r\n\tvar objGeometry = this.object.geometry;\r\n\r\n\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\tnNormals = objGeometry.faces.length;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\r\n\tgeometry.addAttribute( 'position', positions );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t//\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\r\n\r\nTHREE.FaceNormalsHelper.prototype.update = ( function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar normalMatrix = new THREE.Matrix3();\r\n\r\n\treturn function update() {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\tvar faces = objGeometry.faces;\r\n\r\n\t\tvar idx = 0;\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tvar normal = face.normal;\r\n\r\n\t\t\tv1.copy( vertices[ face.a ] )\r\n\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}() );\r\n\r\n// File:src/extras/helpers/GridHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.GridHelper = function ( size, step ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tthis.color1 = new THREE.Color( 0x444444 );\r\n\tthis.color2 = new THREE.Color( 0x888888 );\r\n\r\n\tfor ( var i = - size; i <= size; i += step ) {\r\n\r\n\t\tgeometry.vertices.push(\r\n\t\t\tnew THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),\r\n\t\t\tnew THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )\r\n\t\t);\r\n\r\n\t\tvar color = i === 0 ? this.color1 : this.color2;\r\n\r\n\t\tgeometry.colors.push( color, color, color, color );\r\n\r\n\t}\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n};\r\n\r\nTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\r\n\r\nTHREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {\r\n\r\n\tthis.color1.set( colorCenterLine );\r\n\tthis.color2.set( colorGrid );\r\n\r\n\tthis.geometry.colorsNeedUpdate = true;\r\n\r\n};\r\n\r\n// File:src/extras/helpers/HemisphereLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\r\n\r\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\tgeometry.rotateX( - Math.PI / 2 );\r\n\r\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\r\n\r\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\r\n\r\n\t}\r\n\r\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\r\n\tthis.add( this.lightSphere );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\r\n\r\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.lightSphere.geometry.dispose();\r\n\tthis.lightSphere.material.dispose();\r\n\r\n};\r\n\r\nTHREE.HemisphereLightHelper.prototype.update = function () {\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\r\n\r\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\r\n\r\n\t}\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/PointLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PointLightHelper = function ( light, sphereSize ) {\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.matrix = this.light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\t/*\r\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\tvar d = light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n\tthis.add( this.lightDistance );\r\n\t*/\r\n\r\n};\r\n\r\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\r\n\r\nTHREE.PointLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.geometry.dispose();\r\n\tthis.material.dispose();\r\n\r\n};\r\n\r\nTHREE.PointLightHelper.prototype.update = function () {\r\n\r\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t/*\r\n\tvar d = this.light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.visible = true;\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\t*/\r\n\r\n};\r\n\r\n// File:src/extras/helpers/SkeletonHelper.js\r\n\r\n/**\r\n * @author Sean Griffin / http://twitter.com/sgrif\r\n * @author Michael Guerrero / http://realitymeltdown.com\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.SkeletonHelper = function ( object ) {\r\n\r\n\tthis.bones = this.getBoneList( object );\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\r\n\t\tvar bone = this.bones[ i ];\r\n\r\n\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\r\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.dynamic = true;\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n\tthis.root = object;\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\n\r\nTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\r\n\r\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\r\n\r\n\tvar boneList = [];\r\n\r\n\tif ( object instanceof THREE.Bone ) {\r\n\r\n\t\tboneList.push( object );\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\r\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\r\n\r\n\t}\r\n\r\n\treturn boneList;\r\n\r\n};\r\n\r\nTHREE.SkeletonHelper.prototype.update = function () {\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\r\n\r\n\tvar boneMatrix = new THREE.Matrix4();\r\n\r\n\tvar j = 0;\r\n\r\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\r\n\t\tvar bone = this.bones[ i ];\r\n\r\n\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\r\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\r\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\r\n\r\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\r\n\r\n\t\t\tj += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.verticesNeedUpdate = true;\r\n\r\n\tgeometry.computeBoundingSphere();\r\n\r\n};\r\n\r\n// File:src/extras/helpers/SpotLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.SpotLightHelper = function ( light ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tvar geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );\r\n\r\n\tgeometry.translate( 0, - 0.5, 0 );\r\n\tgeometry.rotateX( - Math.PI / 2 );\r\n\r\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\r\n\tthis.cone = new THREE.Mesh( geometry, material );\r\n\tthis.add( this.cone );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\r\n\r\nTHREE.SpotLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.cone.geometry.dispose();\r\n\tthis.cone.material.dispose();\r\n\r\n};\r\n\r\nTHREE.SpotLightHelper.prototype.update = function () {\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\tvar vector2 = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tvar coneLength = this.light.distance ? this.light.distance : 10000;\r\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\r\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\r\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\r\n\r\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/VertexNormalsHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\r\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t//\r\n\r\n\tvar nNormals = 0;\r\n\r\n\tvar objGeometry = this.object.geometry;\r\n\r\n\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\tnNormals = objGeometry.faces.length * 3;\r\n\r\n\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tnNormals = objGeometry.attributes.normal.count\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\r\n\tgeometry.addAttribute( 'position', positions );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t//\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\r\n\r\nTHREE.VertexNormalsHelper.prototype.update = ( function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar normalMatrix = new THREE.Matrix3();\r\n\r\n\treturn function update() {\r\n\r\n\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\t\tvar faces = objGeometry.faces;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\r\n\r\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\r\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar objPos = objGeometry.attributes.position;\r\n\r\n\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\r\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\r\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}() );\r\n\r\n// File:src/extras/helpers/WireframeHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WireframeHelper = function ( object, hex ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\r\n\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\r\n\r\n// File:src/extras/objects/ImmediateRenderObject.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ImmediateRenderObject = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = material;\r\n\tthis.render = function ( renderCallback ) {};\r\n\r\n};\r\n\r\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\r\n\r\n// File:src/extras/objects/MorphBlendMesh.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphBlendMesh = function( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.animationsMap = {};\r\n\tthis.animationsList = [];\r\n\r\n\t// prepare default animation\r\n\t// (all frames played together in 1 second)\r\n\r\n\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\tvar name = \"__default\";\r\n\r\n\tvar startFrame = 0;\r\n\tvar endFrame = numFrames - 1;\r\n\r\n\tvar fps = numFrames / 1;\r\n\r\n\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\tthis.setAnimationWeight( name, 1 );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\r\n\r\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\tvar animation = {\r\n\r\n\t\tstart: start,\r\n\t\tend: end,\r\n\r\n\t\tlength: end - start + 1,\r\n\r\n\t\tfps: fps,\r\n\t\tduration: ( end - start ) / fps,\r\n\r\n\t\tlastFrame: 0,\r\n\t\tcurrentFrame: 0,\r\n\r\n\t\tactive: false,\r\n\r\n\t\ttime: 0,\r\n\t\tdirection: 1,\r\n\t\tweight: 1,\r\n\r\n\t\tdirectionBackwards: false,\r\n\t\tmirroredLoop: false\r\n\r\n\t};\r\n\r\n\tthis.animationsMap[ name ] = animation;\r\n\tthis.animationsList.push( animation );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\tvar pattern = /([a-z]+)_?(\\d+)/;\r\n\r\n\tvar firstAnimation, frameRanges = {};\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\tvar name = chunks[ 1 ];\r\n\r\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var name in frameRanges ) {\r\n\r\n\t\tvar range = frameRanges[ name ];\r\n\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t}\r\n\r\n\tthis.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = 1;\r\n\t\tanimation.directionBackwards = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = - 1;\r\n\t\tanimation.directionBackwards = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.fps = fps;\r\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.duration = duration;\r\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.weight = weight;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = time;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\tvar time = 0;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\ttime = animation.time;\r\n\r\n\t}\r\n\r\n\treturn time;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\tvar duration = - 1;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tduration = animation.duration;\r\n\r\n\t}\r\n\r\n\treturn duration;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = 0;\r\n\t\tanimation.active = true;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.active = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\tif ( ! animation.active ) continue;\r\n\r\n\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\tanimation.direction *= - 1;\r\n\r\n\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\tvar weight = animation.weight;\r\n\r\n\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// Export the THREE object for **Node.js**, with\r\n// backwards-compatibility for the old `require()` API. If we're in\r\n// the browser, add `_` as a global object via a string identifier,\r\n// for Closure Compiler \"advanced\" mode.\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = module.exports = THREE;\r\n  }\r\n  exports.THREE = THREE;\r\n} else {\r\n  this['THREE'] = THREE;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/three.js\n ** module id = 4\n ** module chunks = 0\n **/","import THREE from 'three';\n\n// This can be imported from anywhere and will still reference the same scene,\n// though there is a helper reference in Engine.scene\n\nexport default (function() {\n  var scene = new THREE.Scene();\n  scene.fog = new THREE.Fog(0xffffff, 1, 15000);\n  return scene;\n})();\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Engine/Scene.js\n **/","import THREE from 'three';\nimport Scene from './Scene';\n\n// This can only be accessed from Engine.renderer if you want to reference the\n// same scene in multiple places\n\nexport default function(container) {\n  var renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n\n  renderer.setClearColor(Scene.fog.color, 1);\n\n  // Gamma settings make things look nicer\n  renderer.gammaInput = true;\n  renderer.gammaOutput = true;\n\n  container.appendChild(renderer.domElement);\n\n  var updateSize = function() {\n    renderer.setSize(container.clientWidth, container.clientHeight);\n  };\n\n  window.addEventListener('resize', updateSize, false);\n  updateSize();\n\n  return renderer;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Engine/Renderer.js\n **/","import THREE from 'three';\n\n// This can only be accessed from Engine.camera if you want to reference the\n// same scene in multiple places\n\nexport default function(container) {\n  var camera = new THREE.PerspectiveCamera(40, 1, 1, 40000);\n  camera.position.z = 400;\n\n  var updateSize = function() {\n    camera.aspect = container.clientWidth / container.clientHeight;\n    camera.updateProjectionMatrix();\n  };\n\n  window.addEventListener('resize', updateSize, false);\n  updateSize();\n\n  return camera;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Engine/Camera.js\n **/"],"sourceRoot":"/source/"}